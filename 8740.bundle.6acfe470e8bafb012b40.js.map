{"version":3,"file":"8740.bundle.6acfe470e8bafb012b40.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools({\n  commandsManager,\n  toolGroupService,\n  customizationService,\n  toolGroupId,\n}) {\n  const tools = customizationService.getCustomization('cornerstone.overlayViewportTools');\n\n  const updatedTools = commandsManager.run('initializeSegmentLabelTool', { tools });\n\n  return toolGroupService.createToolGroupAndAddTools(toolGroupId, updatedTools);\n}\n\nexport default createSEGToolGroupAndAddTools;\n","import { utils, Types } from '@ohif/extension-cornerstone';\n\nfunction promptHydrateSEG({\n  servicesManager,\n  segDisplaySet,\n  viewportId,\n  preHydrateCallbacks,\n  hydrateCallback,\n}: {\n  servicesManager: AppTypes.ServicesManager;\n  segDisplaySet: AppTypes.DisplaySet;\n  viewportId: string;\n  preHydrateCallbacks?: Types.HydrationCallback[];\n  hydrateCallback: Types.HydrationCallback;\n}) {\n  return utils.promptHydrationDialog({\n    servicesManager,\n    viewportId,\n    displaySet: segDisplaySet as AppTypes.DisplaySet,\n    preHydrateCallbacks,\n    hydrateCallback,\n    type: 'SEG',\n  });\n}\n\nexport default promptHydrateSEG;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useViewportGrid } from '@ohif/ui-next';\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\nimport { usePositionPresentationStore, OHIFCornerstoneViewport } from '@ohif/extension-cornerstone';\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\nimport { useSystem } from '@ohif/core/src/contextProviders/SystemProvider';\n\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\n\nfunction OHIFCornerstoneSEGViewport(props: withAppTypes) {\n  const { servicesManager, commandsManager } = useSystem();\n  const { children, displaySets, viewportOptions } = props as {\n    children: React.ReactNode;\n    displaySets: AppTypes.DisplaySet[];\n    viewportOptions: AppTypes.ViewportOptions;\n  };\n  const viewportId = viewportOptions.viewportId;\n\n  const { displaySetService, toolGroupService, segmentationService, customizationService } =\n    servicesManager.services;\n\n  const LoadingIndicatorTotalPercent = customizationService.getCustomization(\n    'ui.loadingIndicatorTotalPercent'\n  );\n\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportId}`;\n\n  // SEG viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SEG viewport should only have a single display set');\n  }\n\n  const segDisplaySet = displaySets[0];\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n\n  // States\n  const { setPositionPresentation } = usePositionPresentationStore();\n\n  // Hydration means that the SEG is opened and segments are loaded into the\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\n  // loading basically means SEG loading over network and bit unpacking of the\n  // SEG data.\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\n  const [processingProgress, setProcessingProgress] = useState({\n    percentComplete: null,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const referencedDisplaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\n  // If the referencedDisplaySetInstanceUID is not found, it means the SEG series is being\n  // launched without its corresponding referenced display set (e.g., the SEG series is launched using\n  // series launch /mode?StudyInstanceUIDs=&SeriesInstanceUID).\n  // In such cases, we attempt to handle this scenario gracefully by\n  // invoking a custom handler. Ideally, if a user tries to launch a series that isn't viewable,\n  // (eg.: we can prompt them with an explanation and provide a link to the full study).\n  if (!referencedDisplaySetInstanceUID) {\n    const missingReferenceDisplaySetHandler = customizationService.getCustomization(\n      'missingReferenceDisplaySetHandler'\n    );\n    const { handled } = missingReferenceDisplaySetHandler();\n    if (handled) {\n      return;\n    }\n  }\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n    referencedDisplaySetInstanceUID\n  );\n\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet,\n    segDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n\n  const getCornerstoneViewport = useCallback(() => {\n    return (\n      <OHIFCornerstoneViewport\n        {...props}\n        displaySets={[segDisplaySet]}\n        viewportOptions={{\n          viewportType: viewportOptions.viewportType,\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n          presentationIds: viewportOptions.presentationIds,\n        }}\n        onElementEnabled={evt => {\n          props.onElementEnabled?.(evt);\n        }}\n      />\n    );\n  }, [viewportId, segDisplaySet, toolGroupId, props, viewportOptions]);\n\n  useEffect(() => {\n    if (segIsLoading) {\n      return;\n    }\n\n    // if not active viewport, return\n    if (viewportId !== activeViewportId) {\n      return;\n    }\n\n    promptHydrateSEG({\n      servicesManager,\n      viewportId,\n      segDisplaySet,\n      hydrateCallback: async () => {\n        await commandsManager.runCommand('hydrateSecondaryDisplaySet', {\n          displaySet: segDisplaySet,\n          viewportId,\n        });\n\n        return true;\n      },\n    });\n  }, [servicesManager, viewportId, segDisplaySet, segIsLoading, commandsManager, activeViewportId]);\n\n  useEffect(() => {\n    // on new seg display set, remove all segmentations from all viewports\n    segmentationService.clearSegmentationRepresentations(viewportId);\n\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (evt.segDisplaySet.displaySetInstanceUID === segDisplaySet.displaySetInstanceUID) {\n          setSegIsLoading(false);\n        }\n\n        if (segDisplaySet?.firstSegmentedSliceImageId && viewportOptions?.presentationIds) {\n          const { firstSegmentedSliceImageId } = segDisplaySet;\n          const { presentationIds } = viewportOptions;\n\n          setPositionPresentation(presentationIds.positionPresentationId, {\n            viewReference: {\n              referencedImageId: firstSegmentedSliceImageId,\n            },\n          });\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      ({ percentComplete, numSegments }) => {\n        setProcessingProgress({\n          percentComplete,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    // keep the already stored segmentationPresentation for this viewport in memory\n    // so that we can restore it after hydrating the SEG\n    commandsManager.runCommand('updateStoredSegmentationPresentation', {\n      displaySet: segDisplaySet,\n      type: SegmentationRepresentations.Labelmap,\n    });\n\n    // always start fresh for this viewport since it is special type of viewport\n    // that should only show one segmentation at a time.\n    segmentationService.clearSegmentationRepresentations(viewportId);\n\n    // This creates a custom tool group which has the lifetime of this view\n    // only, and does NOT interfere with currently displayed segmentations.\n    toolGroup = createSEGToolGroupAndAddTools({\n      commandsManager,\n      toolGroupService,\n      customizationService,\n      toolGroupId,\n    });\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      // e.g., another seg displayset is dragged into the viewport\n      segmentationService.clearSegmentationRepresentations(viewportId);\n\n      // Only destroy the viewport specific implementation\n      toolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {segIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"h-full w-full\"\n            totalNumbers={processingProgress.totalSegments}\n            percentComplete={processingProgress.percentComplete}\n            loadingText=\"Loading SEG...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\n  const { SharedFunctionalGroupsSequence } = segDisplaySet.instance;\n\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\n    ? SharedFunctionalGroupsSequence[0]\n    : SharedFunctionalGroupsSequence;\n\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\n\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\n    ? PixelMeasuresSequence[0]\n    : PixelMeasuresSequence;\n\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness || SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneSEGViewport;\n"],"names":["commandsManager","toolGroupService","customizationService","toolGroupId","tools","getCustomization","updatedTools","run","createToolGroupAndAddTools","servicesManager","segDisplaySet","viewportId","preHydrateCallbacks","hydrateCallback","utils","promptHydrationDialog","displaySet","type","props","useSystem","children","displaySets","viewportOptions","displaySetService","segmentationService","services","LoadingIndicatorTotalPercent","length","Error","viewportGrid","viewportGridService","useViewportGrid","setPositionPresentation","usePositionPresentationStore","segIsLoading","setSegIsLoading","useState","isLoaded","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySetInstanceUID","missingReferenceDisplaySetHandler","handled","referencedDisplaySet","getDisplaySetByUID","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","metadata","getCornerstoneViewport","useCallback","React","OHIFCornerstoneViewport","_extends","viewportType","orientation","presentationIds","onElementEnabled","evt","useEffect","promptHydrateSEG","async","runCommand","clearSegmentationRepresentations","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","displaySetInstanceUID","firstSegmentedSliceImageId","positionPresentationId","viewReference","referencedImageId","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","SegmentationRepresentations","Labelmap","createSEGToolGroupAndAddTools","destroyToolGroup","childrenWithProps","map","child","index","key","className","totalNumbers","loadingText"],"sourceRoot":""}