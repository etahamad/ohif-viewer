{"version":3,"file":"2701.bundle.6985f35a0f45622499a9.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/components/OHIFCornerstoneSRMeasurementViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/formatContentItem.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/components/OHIFCornerstoneSRContentItem.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/components/OHIFCornerstoneSRContainer.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/components/OHIFCornerstoneSRTextViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/components/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\n\nimport createReferencedImageDisplaySet from '../utils/createReferencedImageDisplaySet';\nimport { usePositionPresentationStore, OHIFCornerstoneViewport } from '@ohif/extension-cornerstone';\nimport { useViewportGrid } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core/src/contextProviders/SystemProvider';\n\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\n\nfunction OHIFCornerstoneSRMeasurementViewport(props) {\n  const { servicesManager } = useSystem();\n  const { children, dataSource, displaySets, viewportOptions } = props as {\n    children: React.ReactNode;\n    dataSource: unknown;\n    displaySets: AppTypes.DisplaySet[];\n    viewportOptions: AppTypes.ViewportOptions;\n  };\n\n  const { displaySetService } = servicesManager.services;\n\n  const viewportId = viewportOptions.viewportId;\n\n  // SR viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SR viewport should only have a single display set');\n  }\n\n  const srDisplaySet = displaySets[0];\n\n  const { setPositionPresentation } = usePositionPresentationStore();\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [measurementSelected, setMeasurementSelected] = useState(0);\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(null);\n  const [referencedDisplaySetMetadata, setReferencedDisplaySetMetadata] = useState(null);\n  const [element, setElement] = useState(null);\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const setTrackingIdentifiers = useCallback(\n    measurementSelected => {\n      const { measurements } = srDisplaySet;\n\n      setTrackingUniqueIdentifiersForElement(\n        element,\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\n        measurementSelected\n      );\n    },\n    [element, measurementSelected, srDisplaySet]\n  );\n\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const updateViewport = useCallback(\n    newMeasurementSelected => {\n      const { StudyInstanceUID, displaySetInstanceUID } = srDisplaySet;\n\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\n        return;\n      }\n\n      _getViewportReferencedDisplaySetData(\n        srDisplaySet,\n        newMeasurementSelected,\n        displaySetService\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\n        if (!referencedDisplaySet || !referencedDisplaySetMetadata) {\n          return;\n        }\n\n        setMeasurementSelected(newMeasurementSelected);\n\n        setActiveImageDisplaySetData(referencedDisplaySet);\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\n\n        const { presentationIds } = viewportOptions;\n        const measurement = srDisplaySet.measurements[newMeasurementSelected];\n        setPositionPresentation(presentationIds.positionPresentationId, {\n          viewReference: measurement.viewReference || {\n            referencedImageId: measurement.imageId,\n          },\n        });\n      });\n    },\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportId]\n  );\n\n  const getCornerstoneViewport = useCallback(() => {\n    if (!activeImageDisplaySetData) {\n      return null;\n    }\n\n    const { measurements } = srDisplaySet;\n    const measurement = measurements[measurementSelected];\n\n    if (!measurement) {\n      return null;\n    }\n\n    return (\n      <OHIFCornerstoneViewport\n        {...props}\n        // should be passed second since we don't want SR displaySet to\n        // override the activeImageDisplaySetData\n        displaySets={[activeImageDisplaySetData]}\n        // It is possible that there is a hanging protocol applying viewportOptions\n        // for the SR, so inherit the viewport options\n        // TODO: Ensure the viewport options are set correctly with respect to\n        // stack etc, in the incoming viewport options.\n        viewportOptions={{\n          ...viewportOptions,\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\n          // viewportType should not be required, as the stack type should be\n          // required already in order to view SR, but sometimes segmentation\n          // views set the viewport type without fixing the allowed display\n          viewportType: 'stack',\n          // The positionIds for the viewport aren't meaningful for the child display sets\n          positionIds: null,\n        }}\n        onElementEnabled={evt => {\n          props.onElementEnabled?.(evt);\n          onElementEnabled(evt);\n        }}\n        isJumpToMeasurementDisabled={true}\n      />\n    );\n  }, [activeImageDisplaySetData, viewportId, measurementSelected]);\n\n  /**\n   Cleanup the SR viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  /**\n   * Loading the measurements from the SR viewport, which goes through the\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\n   * we are changing the state here? isHydrated is always false at this stage, and\n   * if it is hydrated we don't even use the SR viewport.\n   */\n  useEffect(() => {\n    const loadSR = async () => {\n      if (!srDisplaySet.isLoaded) {\n        await srDisplaySet.load();\n      }\n      updateViewport(measurementSelected);\n    };\n    loadSR();\n  }, [srDisplaySet]);\n\n  /**\n   * Hook to update the tracking identifiers when the selected measurement changes or\n   * the element changes\n   */\n  useEffect(() => {\n    const updateSR = async () => {\n      if (!srDisplaySet.isLoaded) {\n        await srDisplaySet.load();\n      }\n      if (!element || !srDisplaySet.isLoaded) {\n        return;\n      }\n      setTrackingIdentifiers(measurementSelected);\n    };\n    updateSR();\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSRMeasurementViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  viewportLabel: PropTypes.string,\n  viewportOptions: PropTypes.object,\n};\n\nasync function _getViewportReferencedDisplaySetData(\n  displaySet,\n  measurementSelected,\n  displaySetService\n) {\n  const { measurements } = displaySet;\n  const measurement = measurements[measurementSelected];\n\n  const { displaySetInstanceUID } = measurement;\n  if (!displaySet.keyImageDisplaySet) {\n    // Create a new display set, and preserve a reference to it here,\n    // so that it can be re-displayed and shown inside the SR viewport.\n    // This is only for ease of redisplay - the display set is stored in the\n    // usual manner in the display set service.\n    displaySet.keyImageDisplaySet = createReferencedImageDisplaySet(displaySetService, displaySet);\n  }\n\n  if (!displaySetInstanceUID) {\n    return { referencedDisplaySetMetadata: null, referencedDisplaySet: null };\n  }\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n  if (!referencedDisplaySet?.images) {\n    return { referencedDisplaySetMetadata: null, referencedDisplaySet: null };\n  }\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\n}\n\nexport default OHIFCornerstoneSRMeasurementViewport;\n","import { utils } from '@ohif/core';\n\n/**\n * Formatters used to format each of the content items (SR \"nodes\") which can be\n * text, code, UID ref, number, person name, date, time and date time. Each\n * formatter must be a function with the following signature:\n *\n *    [VALUE_TYPE]: (contentItem) => string\n *\n */\nconst contentItemFormatters = {\n  TEXT: contentItem => contentItem.TextValue,\n  CODE: contentItem => contentItem.ConceptCodeSequence?.[0]?.CodeMeaning,\n  UIDREF: contentItem => contentItem.UID,\n  NUM: contentItem => {\n    const measuredValue = contentItem.MeasuredValueSequence?.[0];\n\n    if (!measuredValue) {\n      return;\n    }\n\n    const { NumericValue, MeasurementUnitsCodeSequence } = measuredValue;\n    const { CodeValue } = MeasurementUnitsCodeSequence;\n\n    return `${NumericValue} ${CodeValue}`;\n  },\n  PNAME: contentItem => {\n    const personName = contentItem.PersonName?.[0];\n    return personName ? utils.formatPN(personName) : undefined;\n  },\n  DATE: contentItem => {\n    const { Date } = contentItem;\n    return Date ? utils.formatDate(Date) : undefined;\n  },\n  TIME: contentItem => {\n    const { Time } = contentItem;\n    return Time ? utils.formatTime(Time) : undefined;\n  },\n  DATETIME: contentItem => {\n    const { DateTime } = contentItem;\n\n    if (typeof DateTime !== 'string') {\n      return;\n    }\n\n    // 14 characters because it should be something like 20180614113714\n    if (DateTime.length < 14) {\n      return DateTime;\n    }\n\n    const dicomDate = DateTime.substring(0, 8);\n    const dicomTime = DateTime.substring(8, 14);\n    const formattedDate = utils.formatDate(dicomDate);\n    const formattedTime = utils.formatTime(dicomTime);\n\n    return `${formattedDate} ${formattedTime}`;\n  },\n};\n\nfunction formatContentItemValue(contentItem) {\n  const { ValueType } = contentItem;\n  const fnFormat = contentItemFormatters[ValueType];\n\n  return fnFormat ? fnFormat(contentItem) : `[${ValueType} is not supported]`;\n}\n\nexport { formatContentItemValue as default, formatContentItemValue };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { CodeNameCodeSequenceValues } from '../enums';\nimport formatContentItemValue from '../utils/formatContentItem';\n\nconst EMPTY_TAG_VALUE = '[empty]';\n\nfunction OHIFCornerstoneSRContentItem(props) {\n  const { contentItem, nodeIndexesTree, continuityOfContent } = props;\n  const { ConceptNameCodeSequence } = contentItem;\n  const { CodeValue, CodeMeaning } = ConceptNameCodeSequence;\n  const isChildFirstNode = nodeIndexesTree[nodeIndexesTree.length - 1] === 0;\n  const formattedValue = formatContentItemValue(contentItem) ?? EMPTY_TAG_VALUE;\n  const startWithAlphaNumCharRegEx = /^[a-zA-Z0-9]/;\n  const isContinuous = continuityOfContent === 'CONTINUOUS';\n  const isFinding = CodeValue === CodeNameCodeSequenceValues.Finding;\n  const addExtraSpace =\n    isContinuous && !isChildFirstNode && startWithAlphaNumCharRegEx.test(formattedValue?.[0]);\n\n  // Collapse sequences of white space preserving newline characters\n  let className = 'whitespace-pre-line';\n\n  if (CodeValue === CodeNameCodeSequenceValues.Finding) {\n    // Preserve spaces because it is common to see tabular text in a\n    // \"Findings\" ConceptNameCodeSequence\n    className = 'whitespace-pre-wrap';\n  }\n\n  if (isContinuous) {\n    return (\n      <>\n        <span\n          className={className}\n          title={CodeMeaning}\n        >\n          {addExtraSpace ? ' ' : ''}\n          {formattedValue}\n        </span>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"mb-2\">\n        <span className=\"font-bold\">{CodeMeaning}: </span>\n        {isFinding ? (\n          <pre>{formattedValue}</pre>\n        ) : (\n          <span className={className}>{formattedValue}</span>\n        )}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSRContentItem.propTypes = {\n  contentItem: PropTypes.object,\n  nodeIndexesTree: PropTypes.arrayOf(PropTypes.number),\n  continuityOfContent: PropTypes.string,\n};\n\nexport { OHIFCornerstoneSRContentItem };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { OHIFCornerstoneSRContentItem } from './OHIFCornerstoneSRContentItem';\n\nexport function OHIFCornerstoneSRContainer(props) {\n  const { container, nodeIndexesTree = [0], containerNumberedTree = [1] } = props;\n  const { ContinuityOfContent, ConceptNameCodeSequence } = container;\n  const { CodeMeaning } = ConceptNameCodeSequence ?? {};\n  let childContainerIndex = 1;\n  const contentItems = container.ContentSequence?.map((contentItem, i) => {\n    const { ValueType } = contentItem;\n    const childNodeLevel = [...nodeIndexesTree, i];\n    const key = childNodeLevel.join('.');\n\n    let Component;\n    let componentProps;\n\n    if (ValueType === 'CONTAINER') {\n      const childContainerNumberedTree = [...containerNumberedTree, childContainerIndex++];\n\n      Component = OHIFCornerstoneSRContainer;\n      componentProps = {\n        container: contentItem,\n        nodeIndexesTree: childNodeLevel,\n        containerNumberedTree: childContainerNumberedTree,\n      };\n    } else {\n      Component = OHIFCornerstoneSRContentItem;\n      componentProps = {\n        contentItem,\n        nodeIndexesTree: childNodeLevel,\n        continuityOfContent: ContinuityOfContent,\n      };\n    }\n\n    return (\n      <Component\n        key={key}\n        {...componentProps}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <div className=\"font-bold\">\n        {containerNumberedTree.join('.')}.&nbsp;\n        {CodeMeaning}\n      </div>\n      <div className=\"ml-4 mb-2\">{contentItems}</div>\n    </div>\n  );\n}\n\nOHIFCornerstoneSRContainer.propTypes = {\n  /**\n   * A tree node that may contain another container or one or more content items\n   * (text, code, uidref, pname, etc.)\n   */\n  container: PropTypes.object,\n  /**\n   * A 0-based index list\n   */\n  nodeIndexesTree: PropTypes.arrayOf(PropTypes.number),\n  /**\n   * A 1-based index list that represents a container in a multi-level numbered\n   * list (tree).\n   *\n   * Example:\n   *  1. History\n   *    1.1. Chief Complaint\n   *    1.2. Present Illness\n   *    1.3. Past History\n   *    1.4. Family History\n   *  2. Findings\n   * */\n  containerNumberedTree: PropTypes.arrayOf(PropTypes.number),\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExtensionManager } from '@ohif/core';\nimport { OHIFCornerstoneSRContainer } from './OHIFCornerstoneSRContainer';\n\nfunction OHIFCornerstoneSRTextViewport(props: withAppTypes) {\n  const { displaySets } = props;\n  const displaySet = displaySets[0];\n  const instance = displaySet.instances[0];\n\n  return (\n    <div className=\"relative flex h-full w-full flex-col overflow-auto p-4 text-white\">\n      <div>\n        {/* The root level is always a container */}\n        <OHIFCornerstoneSRContainer container={instance} />\n      </div>\n    </div>\n  );\n}\n\nOHIFCornerstoneSRTextViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  viewportLabel: PropTypes.string,\n  viewportOptions: PropTypes.object,\n  servicesManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.instanceOf(ExtensionManager).isRequired,\n};\n\nexport default OHIFCornerstoneSRTextViewport;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { ExtensionManager } from '@ohif/core';\n\nimport OHIFCornerstoneSRMeasurementViewport from './OHIFCornerstoneSRMeasurementViewport';\nimport OHIFCornerstoneSRTextViewport from './OHIFCornerstoneSRTextViewport';\n\nfunction OHIFCornerstoneSRViewport(props: withAppTypes) {\n  const { displaySets } = props;\n  const { isImagingMeasurementReport } = displaySets[0];\n\n  if (isImagingMeasurementReport) {\n    return <OHIFCornerstoneSRMeasurementViewport {...props}></OHIFCornerstoneSRMeasurementViewport>;\n  }\n\n  return <OHIFCornerstoneSRTextViewport {...props}></OHIFCornerstoneSRTextViewport>;\n}\n\nOHIFCornerstoneSRViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  viewportLabel: PropTypes.string,\n  viewportOptions: PropTypes.object,\n  servicesManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.instanceOf(ExtensionManager).isRequired,\n};\n\nexport default OHIFCornerstoneSRViewport;\n"],"names":["OHIFCornerstoneSRMeasurementViewport","props","servicesManager","useSystem","children","dataSource","displaySets","viewportOptions","displaySetService","services","viewportId","length","Error","srDisplaySet","setPositionPresentation","usePositionPresentationStore","viewportGrid","viewportGridService","useViewportGrid","measurementSelected","setMeasurementSelected","useState","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","element","setElement","viewports","activeViewportId","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","updateViewport","newMeasurementSelected","StudyInstanceUID","displaySetInstanceUID","async","displaySet","keyImageDisplaySet","createReferencedImageDisplaySet","referencedDisplaySet","getDisplaySetByUID","images","image0","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getViewportReferencedDisplaySetData","then","presentationIds","positionPresentationId","viewReference","referencedImageId","imageId","getCornerstoneViewport","React","OHIFCornerstoneViewport","_extends","toolGroupId","viewportType","positionIds","onElementEnabled","evt","detail","isJumpToMeasurementDisabled","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","unsubscribe","isLoaded","load","loadSR","updateSR","childrenWithProps","child","index","key","className","propTypes","PropTypes","isRequired","viewportLabel","contentItemFormatters","TEXT","contentItem","TextValue","CODE","ConceptCodeSequence","CodeMeaning","UIDREF","UID","NUM","measuredValue","MeasuredValueSequence","NumericValue","MeasurementUnitsCodeSequence","CodeValue","PNAME","personName","PersonName","utils","formatPN","undefined","DATE","Date","formatDate","TIME","Time","formatTime","DATETIME","DateTime","dicomDate","substring","dicomTime","OHIFCornerstoneSRContentItem","nodeIndexesTree","continuityOfContent","ConceptNameCodeSequence","isChildFirstNode","formattedValue","ValueType","fnFormat","formatContentItemValue","isContinuous","isFinding","CodeNameCodeSequenceValues","Finding","addExtraSpace","test","title","OHIFCornerstoneSRContainer","container","containerNumberedTree","ContinuityOfContent","childContainerIndex","contentItems","ContentSequence","i","childNodeLevel","join","Component","componentProps","OHIFCornerstoneSRTextViewport","instance","instances","extensionManager","ExtensionManager","OHIFCornerstoneSRViewport","isImagingMeasurementReport"],"sourceRoot":""}