{"version":3,"file":"1919.bundle.f854172a513c0ca67847.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js","webpack:///../../../extensions/cornerstone-dynamic-volume/src/id.js","webpack:///../../../extensions/cornerstone-dynamic-volume/src/actions/updateSegmentationsChartDisplaySet.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicVolumeControls.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/PanelGenerateImage.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicDataPanel.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicExport.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/index.ts"],"sourcesContent":["var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"CROSSHAIR_TOOL_CENTER_CHANGED\"] = \"CORNERSTONE_TOOLS_CROSSHAIR_TOOL_CENTER_CHANGED\";\n    Events[\"VOLUMECROPPINGCONTROL_TOOL_CHANGED\"] = \"CORNERSTONE_TOOLS_VOLUMECROPPINGCONTROL_TOOL_CHANGED\";\n    Events[\"VOLUMECROPPING_TOOL_CHANGED\"] = \"CORNERSTONE_TOOLS_VOLUMECROPPING_TOOL_CHANGED\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"HISTORY_UNDO\"] = \"CORNERSTONE_TOOLS_HISTORY_UNDO\";\n    Events[\"HISTORY_REDO\"] = \"CORNERSTONE_TOOLS_HISTORY_REDO\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"Labelmap\";\n    SegmentationRepresentations[\"Contour\"] = \"Contour\";\n    SegmentationRepresentations[\"Surface\"] = \"Surface\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"Interpolate\"] = \"interpolate\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"AddPreview\"] = \"addPreview\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n    StrategyCallbacks[\"GetStatistics\"] = \"getStatistics\";\n    StrategyCallbacks[\"EnsureImageVolumeFor3DManipulation\"] = \"ensureImageVolumeFor3DManipulation\";\n    StrategyCallbacks[\"EnsureSegmentationVolumeFor3DManipulation\"] = \"ensureSegmentationVolumeFor3DManipulation\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var MouseBindings;\n(function (MouseBindings) {\n    MouseBindings[MouseBindings[\"Primary\"] = 1] = \"Primary\";\n    MouseBindings[MouseBindings[\"Secondary\"] = 2] = \"Secondary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary\"] = 3] = \"Primary_And_Secondary\";\n    MouseBindings[MouseBindings[\"Auxiliary\"] = 4] = \"Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Auxiliary\"] = 5] = \"Primary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Secondary_And_Auxiliary\"] = 6] = \"Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary_And_Auxiliary\"] = 7] = \"Primary_And_Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Fourth_Button\"] = 8] = \"Fourth_Button\";\n    MouseBindings[MouseBindings[\"Fifth_Button\"] = 16] = \"Fifth_Button\";\n    MouseBindings[MouseBindings[\"Wheel\"] = 524288] = \"Wheel\";\n    MouseBindings[MouseBindings[\"Wheel_Primary\"] = 524289] = \"Wheel_Primary\";\n})(MouseBindings || (MouseBindings = {}));\nvar KeyboardBindings;\n(function (KeyboardBindings) {\n    KeyboardBindings[KeyboardBindings[\"Shift\"] = 16] = \"Shift\";\n    KeyboardBindings[KeyboardBindings[\"Ctrl\"] = 17] = \"Ctrl\";\n    KeyboardBindings[KeyboardBindings[\"Alt\"] = 18] = \"Alt\";\n    KeyboardBindings[KeyboardBindings[\"Meta\"] = 91] = \"Meta\";\n    KeyboardBindings[KeyboardBindings[\"ShiftCtrl\"] = 1617] = \"ShiftCtrl\";\n    KeyboardBindings[KeyboardBindings[\"ShiftAlt\"] = 1618] = \"ShiftAlt\";\n    KeyboardBindings[KeyboardBindings[\"ShiftMeta\"] = 1691] = \"ShiftMeta\";\n    KeyboardBindings[KeyboardBindings[\"CtrlAlt\"] = 1718] = \"CtrlAlt\";\n    KeyboardBindings[KeyboardBindings[\"CtrlMeta\"] = 1791] = \"CtrlMeta\";\n    KeyboardBindings[KeyboardBindings[\"AltMeta\"] = 1891] = \"AltMeta\";\n})(KeyboardBindings || (KeyboardBindings = {}));\nexport { MouseBindings, KeyboardBindings };\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n    ChangeTypes[\"COMPUTE_STATISTICS\"] = \"Computing Statistics\";\n    ChangeTypes[\"INTERPOLATE_LABELMAP\"] = \"Interpolating Labelmap\";\n    ChangeTypes[\"COMPUTE_LARGEST_BIDIRECTIONAL\"] = \"Computing Largest Bidirectional\";\n    ChangeTypes[\"GENERATE_CONTOUR_SETS\"] = \"Generating Contour Sets\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dynamic-volume';\n\nexport { id, SOPClassHandlerName };\n","import { DicomMetadataStore, utils } from '@ohif/core';\n\nimport * as cs from '@cornerstonejs/core';\nimport * as csTools from '@cornerstonejs/tools';\n\nconst CHART_MODALITY = 'CHT';\nconst SEG_CHART_INSTANCE_UID = utils.guid();\n\n// Private SOPClassUid for chart data\nconst ChartDataSOPClassUid = '1.9.451.13215.7.3.2.7.6.1';\n\nconst { utilities: csToolsUtils } = csTools;\n\nfunction _getDateTimeStr() {\n  const now = new Date();\n  const date =\n    now.getFullYear() + ('0' + now.getUTCMonth()).slice(-2) + ('0' + now.getUTCDate()).slice(-2);\n  const time =\n    ('0' + now.getUTCHours()).slice(-2) +\n    ('0' + now.getUTCMinutes()).slice(-2) +\n    ('0' + now.getUTCSeconds()).slice(-2);\n\n  return { date, time };\n}\n\nfunction _getTimePointsDataByTagName(volume, timePointsTag) {\n  const uniqueTimePoints = volume.imageIds.reduce((timePoints, imageId) => {\n    const instance = DicomMetadataStore.getInstanceByImageId(imageId);\n    const timePointValue = instance[timePointsTag];\n\n    if (timePointValue !== undefined) {\n      timePoints.add(timePointValue);\n    }\n\n    return timePoints;\n  }, new Set());\n\n  return Array.from(uniqueTimePoints).sort((a: number, b: number) => a - b);\n}\n\nfunction _convertTimePointsUnit(timePoints, timePointsUnit) {\n  const validUnits = ['ms', 's', 'm', 'h'];\n  const divisors = [1000, 60, 60];\n  const currentUnitIndex = validUnits.indexOf(timePointsUnit);\n  let divisor = 1;\n\n  if (currentUnitIndex !== -1) {\n    for (let i = currentUnitIndex; i < validUnits.length - 1; i++) {\n      const newDivisor = divisor * divisors[i];\n      const greaterThanDivisorCount = timePoints.filter(timePoint => timePoint > newDivisor).length;\n\n      // Change the scale only if more than 50% of the time points are\n      // greater than the new divisor.\n      if (greaterThanDivisorCount <= timePoints.length / 2) {\n        break;\n      }\n\n      divisor = newDivisor;\n      timePointsUnit = validUnits[i + 1];\n    }\n\n    if (divisor > 1) {\n      timePoints = timePoints.map(timePoint => timePoint / divisor);\n    }\n  }\n\n  return { timePoints, timePointsUnit };\n}\n\n// It currently supports only one tag but a few other will be added soon\n// Supported 4D Tags\n//   (0018,1060) Trigger Time                   [NOK]\n//   (0018,0081) Echo Time                      [NOK]\n//   (0018,0086) Echo Number                    [NOK]\n//   (0020,0100) Temporal Position Identifier   [NOK]\n//   (0054,1300) FrameReferenceTime             [OK]\nfunction _getTimePointsData(volume) {\n  const timePointsTags = {\n    FrameReferenceTime: {\n      unit: 'ms',\n    },\n  };\n\n  const timePointsTagNames = Object.keys(timePointsTags);\n  let timePoints;\n  let timePointsUnit;\n\n  for (let i = 0; i < timePointsTagNames.length; i++) {\n    const tagName = timePointsTagNames[i];\n    const curTimePoints = _getTimePointsDataByTagName(volume, tagName);\n\n    if (curTimePoints.length) {\n      timePoints = curTimePoints;\n      timePointsUnit = timePointsTags[tagName].unit;\n      break;\n    }\n  }\n\n  if (!timePoints.length) {\n    const concatTagNames = timePointsTagNames.join(', ');\n\n    throw new Error(`Could not extract time points data for the following tags: ${concatTagNames}`);\n  }\n\n  const convertedTimePoints = _convertTimePointsUnit(timePoints, timePointsUnit);\n\n  timePoints = convertedTimePoints.timePoints;\n  timePointsUnit = convertedTimePoints.timePointsUnit;\n\n  return { timePoints, timePointsUnit };\n}\n\nfunction _getSegmentationData(\n  segmentation,\n  volumesTimePointsCache,\n  { servicesManager }: { servicesManager: AppTypes.ServicesManager }\n) {\n  const { displaySetService, segmentationService, viewportGridService } = servicesManager.services;\n  const displaySets = displaySetService.getActiveDisplaySets();\n\n  const dynamic4DDisplaySet = displaySets.find(displaySet => {\n    const anInstance = displaySet.instances?.[0];\n\n    if (anInstance) {\n      return (\n        anInstance.FrameReferenceTime !== undefined || anInstance.NumberOfTimeSlices !== undefined\n      );\n    }\n\n    return false;\n  });\n\n  // const referencedDynamicVolume = cs.cache.getVolume(dynamic4DDisplaySet.displaySetInstanceUID);\n  let volumeCacheKey: string | undefined;\n  const volumeId = dynamic4DDisplaySet.displaySetInstanceUID;\n\n  for (const [key] of cs.cache._volumeCache) {\n    if (key.includes(volumeId)) {\n      volumeCacheKey = key;\n      break;\n    }\n  }\n\n  let referencedDynamicVolume;\n  if (volumeCacheKey) {\n    referencedDynamicVolume = cs.cache.getVolume(volumeCacheKey);\n  }\n\n  const { StudyInstanceUID, StudyDescription } = DicomMetadataStore.getInstanceByImageId(\n    referencedDynamicVolume.imageIds[0]\n  );\n\n  const segmentationVolume = segmentationService.getLabelmapVolume(segmentation.segmentationId);\n  const maskVolumeId = segmentationVolume?.volumeId;\n\n  const [timeData, _] = csToolsUtils.dynamicVolume.getDataInTime(referencedDynamicVolume, {\n    maskVolumeId,\n  }) as number[][];\n\n  const pixelCount = timeData.length;\n\n  if (pixelCount === 0) {\n    return [];\n  }\n\n  // Todo: this is useless we should be able to grab color with just segRepUID and segmentIndex\n  // const color = csTools.segmentation.config.color.getSegmentIndexColor(\n  //   segmentationRepresentationUID,\n  //   1 // segmentIndex\n  // );\n  const viewportId = viewportGridService.getActiveViewportId();\n  const color = segmentationService.getSegmentColor(viewportId, segmentation.segmentationId, 1);\n\n  const hexColor = cs.utilities.color.rgbToHex(color[0], color[1], color[2]);\n  let timePointsData = volumesTimePointsCache.get(referencedDynamicVolume);\n\n  if (!timePointsData) {\n    timePointsData = _getTimePointsData(referencedDynamicVolume);\n    volumesTimePointsCache.set(referencedDynamicVolume, timePointsData);\n  }\n\n  const { timePoints, timePointsUnit } = timePointsData;\n\n  if (timePoints.length !== timeData[0].length) {\n    throw new Error('Invalid number of time points returned');\n  }\n\n  const timepointsCount = timePoints.length;\n  const chartSeriesData = new Array(timepointsCount);\n\n  for (let i = 0; i < timepointsCount; i++) {\n    const average = timeData.reduce((acc, cur) => acc + cur[i] / pixelCount, 0);\n\n    chartSeriesData[i] = [timePoints[i], average];\n  }\n\n  return {\n    StudyInstanceUID,\n    StudyDescription,\n    chartData: {\n      series: {\n        label: segmentation.label,\n        points: chartSeriesData,\n        color: hexColor,\n      },\n      axis: {\n        x: {\n          label: `Time (${timePointsUnit})`,\n        },\n        y: {\n          label: `Vl (Bq/ml)`,\n        },\n      },\n    },\n  };\n}\n\nfunction _getInstanceFromSegmentations(segmentations, { servicesManager }) {\n  if (!segmentations.length) {\n    return;\n  }\n\n  const volumesTimePointsCache = new WeakMap();\n  const segmentationsData = segmentations.map(segmentation =>\n    _getSegmentationData(segmentation, volumesTimePointsCache, { servicesManager })\n  );\n\n  const { date: seriesDate, time: seriesTime } = _getDateTimeStr();\n  const series = segmentationsData.reduce((allSeries, curSegData) => {\n    return [...allSeries, curSegData.chartData.series];\n  }, []);\n\n  const instance = {\n    SOPClassUID: ChartDataSOPClassUid,\n    Modality: CHART_MODALITY,\n    SOPInstanceUID: utils.guid(),\n    SeriesDate: seriesDate,\n    SeriesTime: seriesTime,\n    SeriesInstanceUID: SEG_CHART_INSTANCE_UID,\n    StudyInstanceUID: segmentationsData[0].StudyInstanceUID,\n    StudyDescription: segmentationsData[0].StudyDescription,\n    SeriesNumber: 100,\n    SeriesDescription: 'Segmentation chart series data',\n    chartData: {\n      series,\n      axis: { ...segmentationsData[0].chartData.axis },\n    },\n  };\n\n  const seriesMetadata = {\n    StudyInstanceUID: instance.StudyInstanceUID,\n    StudyDescription: instance.StudyDescription,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    SeriesDescription: instance.SeriesDescription,\n    SeriesNumber: instance.SeriesNumber,\n    SeriesTime: instance.SeriesTime,\n    SOPClassUID: instance.SOPClassUID,\n    Modality: instance.Modality,\n  };\n\n  return { seriesMetadata, instance };\n}\n\nfunction updateSegmentationsChartDisplaySet({ servicesManager }: withAppTypes): void {\n  const { segmentationService } = servicesManager.services;\n  const segmentations = segmentationService.getSegmentations();\n  const { seriesMetadata, instance } =\n    _getInstanceFromSegmentations(segmentations, { servicesManager }) ?? {};\n\n  if (seriesMetadata && instance) {\n    // An event is triggered after adding the instance and the displaySet is created\n    DicomMetadataStore.addSeriesMetadata([seriesMetadata], true);\n    DicomMetadataStore.addInstances([instance], true);\n  }\n}\n\nexport { updateSegmentationsChartDisplaySet as default };\n","import * as importedActions from './actions';\nimport { utilities, Enums } from '@cornerstonejs/tools';\nimport { cache } from '@cornerstonejs/core';\n\nconst LABELMAP = Enums.SegmentationRepresentations.Labelmap;\n\nconst commandsModule = ({ commandsManager, servicesManager }: withAppTypes) => {\n  const services = servicesManager.services;\n  const { displaySetService, viewportGridService, segmentationService } = services;\n\n  const actions = {\n    ...importedActions,\n    getDynamic4DDisplaySet: () => {\n      const displaySets = displaySetService.getActiveDisplaySets();\n\n      const dynamic4DDisplaySet = displaySets.find(displaySet => {\n        const anInstance = displaySet.instances?.[0];\n\n        if (anInstance) {\n          return (\n            anInstance.FrameReferenceTime !== undefined ||\n            anInstance.NumberOfTimeSlices !== undefined ||\n            anInstance.TemporalPositionIdentifier !== undefined\n          );\n        }\n\n        return false;\n      });\n\n      return dynamic4DDisplaySet;\n    },\n    getComputedDisplaySets: () => {\n      const displaySetCache = displaySetService.getDisplaySetCache();\n      const cachedDisplaySets = [...displaySetCache.values()];\n      const computedDisplaySets = cachedDisplaySets.filter(displaySet => {\n        return displaySet.isDerived;\n      });\n      return computedDisplaySets;\n    },\n    exportTimeReportCSV: ({ segmentations, config, options, summaryStats }) => {\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\n\n      const volumeId = dynamic4DDisplaySet?.displaySetInstanceUID;\n\n      // cache._volumeCache is a map that has a key that includes the volumeId\n      // it is not exactly the volumeId, but it is the key that includes the volumeId\n      // so we can't do cache._volumeCache.get(volumeId) we should iterate\n      // over the keys and find the one that includes the volumeId\n      let volumeCacheKey: string | undefined;\n\n      for (const [key] of cache._volumeCache) {\n        if (key.includes(volumeId)) {\n          volumeCacheKey = key;\n          break;\n        }\n      }\n\n      let dynamicVolume;\n      if (volumeCacheKey) {\n        dynamicVolume = cache.getVolume(volumeCacheKey);\n      }\n\n      const instance = dynamic4DDisplaySet.instances[0];\n\n      const csv = [];\n\n      // CSV header information with placeholder empty values for the metadata lines\n      csv.push(`Patient ID,${instance.PatientID},`);\n      csv.push(`Study Date,${instance.StudyDate},`);\n      csv.push(`StudyInstanceUID,${instance.StudyInstanceUID},`);\n      csv.push(`StudyDescription,${instance.StudyDescription},`);\n      csv.push(`SeriesInstanceUID,${instance.SeriesInstanceUID},`);\n\n      // empty line\n      csv.push('');\n      csv.push('');\n\n      // Helper function to calculate standard deviation\n      function calculateStandardDeviation(data) {\n        const n = data.length;\n        const mean = data.reduce((acc, value) => acc + value, 0) / n;\n        const squaredDifferences = data.map(value => (value - mean) ** 2);\n        const variance = squaredDifferences.reduce((acc, value) => acc + value, 0) / n;\n        const stdDeviation = Math.sqrt(variance);\n        return stdDeviation;\n      }\n      // Iterate through each segmentation to get the timeData and ijkCoords\n      segmentations.forEach(segmentation => {\n        const volume = segmentationService.getLabelmapVolume(segmentation.segmentationId);\n        const [timeData, ijkCoords] = utilities.dynamicVolume.getDataInTime(dynamicVolume, {\n          maskVolumeId: volume.volumeId,\n        }) as number[][];\n\n        if (summaryStats) {\n          // Adding column headers for pixel identifier and segmentation label ids\n          let headers = 'Operation,Segmentation Label ID';\n          const maxLength = dynamicVolume.numTimePoints;\n          for (let t = 0; t < maxLength; t++) {\n            headers += `,Time Point ${t}`;\n          }\n          csv.push(headers);\n          // // perform summary statistics on the timeData including for each time point, mean, median, min, max, and standard deviation for\n          // // all the voxels in the ROI\n          const mean = [];\n          const min = [];\n          const minIJK = [];\n          const max = [];\n          const maxIJK = [];\n          const std = [];\n\n          const numVoxels = timeData.length;\n          // Helper function to calculate standard deviation\n          for (let timeIndex = 0; timeIndex < maxLength; timeIndex++) {\n            // for each voxel in the ROI, get the value at the current time point\n            const voxelValues = [];\n            let sum = 0;\n            let minValue = Infinity;\n            let maxValue = -Infinity;\n            let minIndex = 0;\n            let maxIndex = 0;\n\n            // Single pass through the data to collect all needed values\n            for (let voxelIndex = 0; voxelIndex < numVoxels; voxelIndex++) {\n              const value = timeData[voxelIndex][timeIndex];\n              voxelValues.push(value);\n              sum += value;\n\n              if (value < minValue) {\n                minValue = value;\n                minIndex = voxelIndex;\n              }\n              if (value > maxValue) {\n                maxValue = value;\n                maxIndex = voxelIndex;\n              }\n            }\n\n            mean.push(sum / numVoxels);\n            min.push(minValue);\n            minIJK.push(ijkCoords[minIndex]);\n            max.push(maxValue);\n            maxIJK.push(ijkCoords[maxIndex]);\n            std.push(calculateStandardDeviation(voxelValues));\n          }\n\n          let row = `Mean,${segmentation.label}`;\n          // Generate separate rows for each statistic\n          for (let t = 0; t < maxLength; t++) {\n            row += `,${mean[t]}`;\n          }\n\n          csv.push(row);\n\n          row = `Standard Deviation,${segmentation.label}`;\n          for (let t = 0; t < maxLength; t++) {\n            row += `,${std[t]}`;\n          }\n\n          csv.push(row);\n\n          row = `Min,${segmentation.label}`;\n          for (let t = 0; t < maxLength; t++) {\n            row += `,${min[t]}`;\n          }\n\n          csv.push(row);\n\n          row = `Max,${segmentation.label}`;\n          for (let t = 0; t < maxLength; t++) {\n            row += `,${max[t]}`;\n          }\n\n          csv.push(row);\n        } else {\n          // Adding column headers for pixel identifier and segmentation label ids\n          let headers = 'Pixel Identifier (IJK),Segmentation Label ID';\n          const maxLength = dynamicVolume.numTimePoints;\n          for (let t = 0; t < maxLength; t++) {\n            headers += `,Time Point ${t}`;\n          }\n          csv.push(headers);\n          // Assuming timeData and ijkCoords are of the same length\n          for (let i = 0; i < timeData.length; i++) {\n            // Generate the pixel identifier\n            const pixelIdentifier = `${ijkCoords[i][0]}_${ijkCoords[i][1]}_${ijkCoords[i][2]}`;\n\n            // Start a new row for the current pixel\n            let row = `${pixelIdentifier},${segmentation.label}`;\n\n            // Add time data points for this pixel\n            for (let t = 0; t < timeData[i].length; t++) {\n              row += `,${timeData[i][t]}`;\n            }\n\n            // Append the row to the CSV array\n            csv.push(row);\n          }\n        }\n      });\n\n      // Convert to CSV string\n      const csvContent = csv.join('\\n');\n\n      // Generate filename and trigger download\n      const filename = `${instance.PatientID}.csv`;\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', filename);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    swapDynamicWithComputedDisplaySet: ({ displaySet }) => {\n      const computedDisplaySet = displaySet;\n\n      const displaySetCache = displaySetService.getDisplaySetCache();\n      const cachedDisplaySetKeys = [displaySetCache.keys()];\n      const { displaySetInstanceUID } = computedDisplaySet;\n      // Check to see if computed display set is already in cache\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\n        displaySetCache.set(displaySetInstanceUID, computedDisplaySet);\n      }\n\n      // Get all viewports and their corresponding indices\n      const { viewports } = viewportGridService.getState();\n\n      // get the viewports in the grid\n      // iterate over them and find the ones that are showing a dynamic\n      // volume (displaySet), and replace that exact displaySet with the\n      // computed displaySet\n\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\n\n      const viewportsToUpdate = [];\n\n      for (const [key, value] of viewports) {\n        const viewport = value;\n        const viewportOptions = viewport.viewportOptions;\n        const { displaySetInstanceUIDs } = viewport;\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\n          dynamic4DDisplaySet.displaySetInstanceUID\n        );\n        if (displaySetInstanceUIDIndex !== -1) {\n          const newViewport = {\n            viewportId: viewport.viewportId,\n            // merge the other displaySetInstanceUIDs with the new one\n            displaySetInstanceUIDs: [\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\n              displaySetInstanceUID,\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\n            ],\n            viewportOptions: {\n              initialImageOptions: viewportOptions.initialImageOptions,\n              viewportType: 'volume',\n              orientation: viewportOptions.orientation,\n              background: viewportOptions.background,\n            },\n          };\n          viewportsToUpdate.push(newViewport);\n        }\n      }\n\n      commandsManager.run('setDisplaySetsForViewports', { viewportsToUpdate });\n    },\n    swapComputedWithDynamicDisplaySet: () => {\n      // Todo: this assumes there is only one dynamic display set in the viewer\n      const dynamicDisplaySet = actions.getDynamic4DDisplaySet();\n\n      const displaySetCache = displaySetService.getDisplaySetCache();\n      const cachedDisplaySetKeys = [...displaySetCache.keys()]; // Fix: Spread to get the array\n      const { displaySetInstanceUID } = dynamicDisplaySet;\n\n      // Check to see if dynamic display set is already in cache\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\n        displaySetCache.set(displaySetInstanceUID, dynamicDisplaySet);\n      }\n\n      // Get all viewports and their corresponding indices\n      const { viewports } = viewportGridService.getState();\n\n      // Get the computed 4D display set\n      const computed4DDisplaySet = actions.getComputedDisplaySets()[0];\n\n      const viewportsToUpdate = [];\n\n      for (const [key, value] of viewports) {\n        const viewport = value;\n        const viewportOptions = viewport.viewportOptions;\n        const { displaySetInstanceUIDs } = viewport;\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\n          computed4DDisplaySet.displaySetInstanceUID\n        );\n        if (displaySetInstanceUIDIndex !== -1) {\n          const newViewport = {\n            viewportId: viewport.viewportId,\n            // merge the other displaySetInstanceUIDs with the new one\n            displaySetInstanceUIDs: [\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\n              displaySetInstanceUID,\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\n            ],\n            viewportOptions: {\n              initialImageOptions: viewportOptions.initialImageOptions,\n              viewportType: 'volume',\n              orientation: viewportOptions.orientation,\n              background: viewportOptions.background,\n            },\n          };\n          viewportsToUpdate.push(newViewport);\n        }\n      }\n\n      commandsManager.run('setDisplaySetsForViewports', { viewportsToUpdate });\n    },\n    createNewLabelMapForDynamicVolume: async ({ label }) => {\n      const { viewports, activeViewportId } = viewportGridService.getState();\n\n      // get the dynamic 4D display set\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\n      const dynamic4DDisplaySetInstanceUID = dynamic4DDisplaySet.displaySetInstanceUID;\n\n      // check if the dynamic 4D display set is in the display, if not we might have\n      // the computed volumes and we should choose them for the segmentation\n      // creation\n\n      let referenceDisplaySet;\n\n      const activeViewport = viewports.get(activeViewportId);\n      const activeDisplaySetInstanceUIDs = activeViewport.displaySetInstanceUIDs;\n      const dynamicIsInActiveViewport = activeDisplaySetInstanceUIDs.includes(\n        dynamic4DDisplaySetInstanceUID\n      );\n\n      if (dynamicIsInActiveViewport) {\n        referenceDisplaySet = dynamic4DDisplaySet;\n      }\n\n      if (!referenceDisplaySet) {\n        // try to see if there is any derived displaySet in the active viewport\n        // which is referencing the dynamic 4D display set\n\n        // Todo: this is wrong but I don't have time to fix it now\n        const cachedDisplaySets = displaySetService.getDisplaySetCache();\n        for (const [key, displaySet] of cachedDisplaySets) {\n          if (displaySet.referenceDisplaySetUID === dynamic4DDisplaySetInstanceUID) {\n            referenceDisplaySet = displaySet;\n            break;\n          }\n        }\n      }\n\n      if (!referenceDisplaySet) {\n        throw new Error('No reference display set found based on the dynamic data');\n      }\n\n      const displaySet = displaySetService.getDisplaySetByUID(\n        referenceDisplaySet.displaySetInstanceUID\n      );\n\n      const segmentationId = await segmentationService.createLabelmapForDisplaySet(displaySet, {\n        label,\n      });\n\n      const firstViewport = viewports.values().next().value;\n\n      await segmentationService.addSegmentationRepresentation(firstViewport.viewportId, {\n        segmentationId,\n      });\n\n      return segmentationId;\n    },\n  };\n\n  const definitions = {\n    updateSegmentationsChartDisplaySet: {\n      commandFn: actions.updateSegmentationsChartDisplaySet,\n      storeContexts: [],\n      options: {},\n    },\n    exportTimeReportCSV: {\n      commandFn: actions.exportTimeReportCSV,\n      storeContexts: [],\n      options: {},\n    },\n    swapDynamicWithComputedDisplaySet: {\n      commandFn: actions.swapDynamicWithComputedDisplaySet,\n      storeContexts: [],\n      options: {},\n    },\n    createNewLabelMapForDynamicVolume: {\n      commandFn: actions.createNewLabelMapForDynamicVolume,\n      storeContexts: [],\n      options: {},\n    },\n    swapComputedWithDynamicDisplaySet: {\n      commandFn: actions.swapComputedWithDynamicDisplaySet,\n      storeContexts: [],\n      options: {},\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'DYNAMIC-VOLUME:CORNERSTONE',\n  };\n};\n\nexport default commandsModule;\n","import React, { useState } from 'react';\nimport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  Button,\n  PanelSection,\n  Icons,\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  Numeric,\n} from '@ohif/ui-next';\nimport { Enums } from '@cornerstonejs/core';\n\n// Helper function to safely convert any value to uppercase string\nconst toUpperCaseString = value => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  return String(value).toUpperCase();\n};\n\nconst Header = ({ title, tooltip }) => (\n  <div className=\"flex items-center space-x-1\">\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <span>\n          <Icons.ByName\n            name=\"info-link\"\n            className=\"text-primary h-3 w-3\"\n          />\n        </span>\n      </TooltipTrigger>\n      <TooltipContent\n        sideOffset={4}\n        className=\"max-w-xs\"\n      >\n        <div>{tooltip}</div>\n      </TooltipContent>\n    </Tooltip>\n    <span className=\"text-muted-foreground text-xs uppercase tracking-wide\">{title}</span>\n  </div>\n);\n\nconst DynamicVolumeControls = ({\n  isPlaying,\n  onPlayPauseChange,\n  // fps\n  fps,\n  onFpsChange,\n  minFps,\n  maxFps,\n  // Frames\n  currentDimensionGroupNumber,\n  onDimensionGroupChange,\n  numDimensionGroups,\n  onGenerate,\n  onDoubleRangeChange,\n  rangeValues,\n  onDynamicClick,\n}) => {\n  const [computedView, setComputedView] = useState(false);\n  const [computeViewMode, setComputeViewMode] = useState(Enums.DynamicOperatorType.SUM);\n\n  // Wrapper for onGenerate to handle potential errors\n  const handleGenerate = () => {\n    try {\n      if (typeof onGenerate === 'function') {\n        onGenerate(computeViewMode);\n      } else {\n        console.error('onGenerate is not a function', onGenerate);\n      }\n    } catch (error) {\n      console.error('Error in onGenerate:', error);\n    }\n  };\n\n  return (\n    <div className=\"flex select-none flex-col\">\n      <PanelSection defaultOpen={true}>\n        <PanelSection.Header>Controls</PanelSection.Header>\n        <PanelSection.Content className=\"bg-muted space-y-4 px-5 pt-2 pb-4\">\n          <div className=\"mb-4\">\n            <Header\n              title=\"View\"\n              tooltip={\n                'Select the view mode, 4D to view the dynamic volume or Computed to view the computed volume'\n              }\n            />\n            <Tabs\n              value={computedView ? 'computed' : '4d'}\n              onValueChange={value => {\n                const isComputed = value === 'computed';\n                setComputedView(isComputed);\n                if (!isComputed && typeof onDynamicClick === 'function') {\n                  onDynamicClick();\n                }\n              }}\n              className=\"my-2 w-full\"\n            >\n              <TabsList className=\"w-full\">\n                <TabsTrigger\n                  value=\"4d\"\n                  className=\"w-1/2\"\n                >\n                  4D\n                </TabsTrigger>\n                <TabsTrigger\n                  value=\"computed\"\n                  className=\"w-1/2\"\n                >\n                  Computed\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n          <div>\n            <DimensionGroupControls\n              onPlayPauseChange={onPlayPauseChange}\n              isPlaying={isPlaying}\n              computedView={computedView}\n              // fps\n              fps={fps}\n              onFpsChange={onFpsChange}\n              minFps={minFps}\n              maxFps={maxFps}\n              //\n              numDimensionGroups={numDimensionGroups}\n              onDimensionGroupChange={onDimensionGroupChange}\n              currentDimensionGroupNumber={currentDimensionGroupNumber}\n            />\n          </div>\n          <div className={`mt-3 flex flex-col ${computedView ? '' : 'ohif-disabled'}`}>\n            <Header\n              title=\"Computed Operation\"\n              tooltip={\n                <div>\n                  Operation Buttons (SUM, AVERAGE, SUBTRACT): Select the mathematical operation to\n                  be applied to the data set.\n                  <br /> Range Slider: Choose the numeric range of dimension groups within which the\n                  operation will be performed.\n                  <br />\n                  Generate Button: Execute the chosen operation on the specified range of data.\n                </div>\n              }\n            />\n            <Tabs\n              value={String(computeViewMode)}\n              onValueChange={value => {\n                setComputeViewMode(value);\n              }}\n              className=\"mt-2 w-full\"\n            >\n              <TabsList className=\"w-full gap-1\">\n                {' '}\n                <TabsTrigger\n                  value={String(Enums.DynamicOperatorType.SUM)}\n                  className=\"w-1/3\"\n                >\n                  {toUpperCaseString(Enums.DynamicOperatorType.SUM)}\n                </TabsTrigger>\n                <TabsTrigger\n                  value={String(Enums.DynamicOperatorType.AVERAGE)}\n                  className=\"w-1/3\"\n                >\n                  {toUpperCaseString(Enums.DynamicOperatorType.AVERAGE)}\n                </TabsTrigger>\n                <TabsTrigger\n                  value={String(Enums.DynamicOperatorType.SUBTRACT)}\n                  className=\"w-1/3\"\n                >\n                  {toUpperCaseString(Enums.DynamicOperatorType.SUBTRACT)}\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n            <div className=\"mt-2 w-full\">\n              <Numeric.Container\n                mode=\"doubleRange\"\n                min={1}\n                max={numDimensionGroups || 1}\n                values={rangeValues || [1, numDimensionGroups || 1]}\n                onChange={onDoubleRangeChange || (() => {})}\n              >\n                <Numeric.DoubleRange showNumberInputs />\n              </Numeric.Container>\n            </div>\n            <Button\n              variant=\"default\"\n              size=\"sm\"\n              className=\"mt-2 h-[26px] w-[115px] self-start p-0\"\n              onClick={handleGenerate}\n            >\n              Generate\n            </Button>\n          </div>\n        </PanelSection.Content>\n      </PanelSection>\n    </div>\n  );\n};\n\nexport default DynamicVolumeControls;\n\nfunction DimensionGroupControls({\n  isPlaying,\n  onPlayPauseChange,\n  fps,\n  minFps,\n  maxFps,\n  onFpsChange,\n  numDimensionGroups,\n  onDimensionGroupChange,\n  currentDimensionGroupNumber,\n  computedView,\n}) {\n  const getPlayPauseIconName = () => (isPlaying ? 'icon-pause' : 'icon-play');\n\n  return (\n    <div className={computedView ? 'ohif-disabled' : ''}>\n      <Header\n        title=\"4D Controls\"\n        tooltip={\n          <div>\n            Play/Pause Button: Begin or pause the animation of the 4D visualization. <br />\n            Dimension Group Selector: Navigate through individual dimension groups of the 4D data.{' '}\n            <br />\n            FPS (Frames Per Second) Selector: Adjust the playback speed of the animation.\n          </div>\n        }\n      />\n      <div className=\"mt-3 flex justify-between\">\n        <Button\n          id=\"play-pause-button\"\n          variant=\"secondary\"\n          size=\"default\"\n          className=\"w-[58px]\"\n          onClick={() => {\n            if (typeof onPlayPauseChange === 'function') {\n              onPlayPauseChange(!isPlaying);\n            }\n          }}\n        >\n          <Icons.ByName\n            name={getPlayPauseIconName()}\n            className=\"text-foreground h-[24px] w-[24px]\"\n          />\n        </Button>\n\n        <Numeric.Container\n          mode=\"stepper\"\n          value={currentDimensionGroupNumber || 1}\n          onChange={onDimensionGroupChange || (() => {})}\n          min={1}\n          max={numDimensionGroups || 1}\n          step={1}\n        >\n          <div className=\"flex flex-col items-center\">\n            <Numeric.NumberStepper\n              className=\"h-[28px] w-[58px]\"\n              direction=\"horizontal\"\n            />\n            <Numeric.Label className=\"text-muted-foreground mt-1 text-sm\">Frame</Numeric.Label>\n          </div>\n        </Numeric.Container>\n\n        <Numeric.Container\n          mode=\"stepper\"\n          value={fps || 1}\n          onChange={onFpsChange || (() => {})}\n          min={minFps || 1}\n          max={maxFps || 30}\n          step={1}\n        >\n          <div className=\"flex flex-col items-center\">\n            <Numeric.NumberStepper\n              className=\"h-[28px] w-[58px]\"\n              direction=\"horizontal\"\n            />\n            <Numeric.Label className=\"text-muted-foreground mt-1 text-sm\">FPS</Numeric.Label>\n          </div>\n        </Numeric.Container>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport { useCine } from '@ohif/ui-next';\nimport { useViewportGrid } from '@ohif/ui-next';\nimport { utilities as csUtils, volumeLoader, eventTarget, Enums, cache } from '@cornerstonejs/core';\nimport { utilities as cstUtils } from '@cornerstonejs/tools';\nimport DynamicVolumeControls from './DynamicVolumeControls';\n\nconst SOPClassHandlerId = '@ohif/extension-default.sopClassHandlerModule.stack';\n\nexport default function PanelGenerateImage({ servicesManager, commandsManager }: withAppTypes) {\n  const { cornerstoneViewportService, viewportGridService, displaySetService } =\n    servicesManager.services;\n\n  const [{ isCineEnabled }, cineService] = useCine();\n  const [{ activeViewportId }] = useViewportGrid();\n\n  //\n  const [dimensionGroupRange, setDimensionGroupRange] = useState([1, 1]);\n  const [computedDisplaySet, setComputedDisplaySet] = useState(null);\n  const [dynamicVolume, setDynamicVolume] = useState(null);\n  const [frameRate, setFrameRate] = useState(20);\n  const [isPlaying, setIsPlaying] = useState(isCineEnabled);\n  const [dimensionGroupNumberRendered, setDimensionGroupNumberRendered] = useState(null);\n  const [displayingComputed, setDisplayingComputed] = useState(false);\n\n  //\n  const uuidComputedVolume = useRef(csUtils.uuidv4());\n  const uuidDynamicVolume = useRef(null);\n  const computedVolumeId = `cornerstoneStreamingImageVolume:${uuidComputedVolume.current}`;\n\n  useEffect(() => {\n    const viewportDataChangedEvt = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\n    const cineStateChangedEvt = servicesManager.services.cineService.EVENTS.CINE_STATE_CHANGED;\n\n    const viewportDataChangedCallback = evtDetails => {\n      evtDetails.viewportData.data.forEach(volumeData => {\n        if (volumeData.volume?.isDynamicVolume()) {\n          setDynamicVolume(volumeData.volume);\n          uuidDynamicVolume.current = volumeData.displaySetInstanceUID;\n          const newRange = [1, volumeData.volume.numDimensionGroups];\n          setDimensionGroupRange(newRange);\n        }\n      });\n    };\n\n    const cineStateChangedCallback = evt => {\n      setIsPlaying(evt.isPlaying);\n    };\n\n    const { unsubscribe: unsubscribeViewportData } = cornerstoneViewportService.subscribe(\n      viewportDataChangedEvt,\n      viewportDataChangedCallback\n    );\n    const { unsubscribe: unsubscribeCineState } = servicesManager.services.cineService.subscribe(\n      cineStateChangedEvt,\n      cineStateChangedCallback\n    );\n\n    return () => {\n      unsubscribeViewportData();\n      unsubscribeCineState();\n    };\n  }, [cornerstoneViewportService, cineService, servicesManager.services.cineService]);\n\n  useEffect(() => {\n    const evt = Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED;\n\n    const callback = evt => {\n      setDimensionGroupNumberRendered(evt.detail.dimensionGroupNumber);\n    };\n\n    eventTarget.addEventListener(evt, callback);\n\n    return () => {\n      eventTarget.removeEventListener(evt, callback);\n    };\n  }, []);\n\n  useEffect(() => {\n    const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\n\n    if (!displaySetUIDs?.length) {\n      return;\n    }\n\n    const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\n    const dynamicVolumeDisplaySet = displaySets.find(displaySet => displaySet.isDynamicVolume);\n\n    if (!dynamicVolumeDisplaySet) {\n      return;\n    }\n\n    const dynamicVolume = cache\n      .getVolumes()\n      .find(volume => volume.volumeId.includes(dynamicVolumeDisplaySet.displaySetInstanceUID));\n\n    if (!dynamicVolume) {\n      return;\n    }\n\n    setDynamicVolume(dynamicVolume);\n    uuidDynamicVolume.current = dynamicVolumeDisplaySet.displaySetInstanceUID;\n    setDimensionGroupRange([1, dynamicVolume.numDimensionGroups]);\n  }, [\n    activeViewportId,\n    viewportGridService,\n    displaySetService,\n    cornerstoneViewportService,\n    cineService,\n  ]);\n\n  function renderGeneratedImage(displaySet) {\n    commandsManager.runCommand('swapDynamicWithComputedDisplaySet', {\n      displaySet,\n    });\n\n    setDisplayingComputed(true);\n  }\n\n  function renderDynamicImage(displaySet) {\n    commandsManager.runCommand('swapComputedWithDynamicDisplaySet');\n  }\n\n  // Get computed volume from cache, calculate the data across the time frames,\n  // set the scalar data to the computedVolume, and create displaySet\n  async function onGenerateImage(operationName) {\n    const dynamicVolumeId = dynamicVolume.volumeId;\n\n    if (!dynamicVolumeId) {\n      return;\n    }\n\n    let computedVolume = cache.getVolume(computedVolumeId);\n\n    if (!computedVolume) {\n      computedVolume = await volumeLoader.createAndCacheDerivedVolume(dynamicVolumeId, {\n        volumeId: computedVolumeId,\n      });\n    }\n    const [start, end] = dimensionGroupRange;\n    // from start to end, with steps of 1\n    const frameNumbers = Array.from({ length: end - start + 1 }, (_, i) => start + i);\n\n    const options = {\n      dimensionGroupNumbers: operationName === 'SUBTRACT' ? [start, end] : frameNumbers,\n      targetVolume: computedVolume,\n    };\n\n    cstUtils.dynamicVolume.updateVolumeFromTimeData(dynamicVolume, operationName, options);\n\n    // If computed display set does not exist, create an object to be used as\n    // the displaySet. If it does exist, update the image data and vtkTexture\n    if (!computedDisplaySet) {\n      const displaySet = {\n        volumeLoaderSchema: computedVolume.volumeId.split(':')[0],\n        displaySetInstanceUID: uuidComputedVolume.current,\n        SOPClassHandlerId: SOPClassHandlerId,\n        Modality: dynamicVolume.metadata.Modality,\n        isMultiFrame: false,\n        numImageFrames: 1,\n        uid: uuidComputedVolume.current,\n        referenceDisplaySetUID: dynamicVolume.volumeId.split(':')[1],\n        madeInClient: true,\n        FrameOfReferenceUID: dynamicVolume.metadata.FrameOfReferenceUID,\n        isDerived: true,\n        imageIds: computedVolume.imageIds,\n      };\n      setComputedDisplaySet(displaySet);\n      renderGeneratedImage(displaySet);\n    } else {\n      commandsManager.runCommand('updateVolumeData', {\n        volume: computedVolume,\n      });\n      cornerstoneViewportService.getRenderingEngine().render();\n      renderGeneratedImage(computedDisplaySet);\n    }\n  }\n\n  const onPlayPauseChange = isPlaying => {\n    isPlaying ? handlePlay() : handleStop();\n  };\n\n  const handlePlay = () => {\n    setIsPlaying(true);\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(activeViewportId);\n\n    if (!viewportInfo) {\n      return;\n    }\n\n    const { element } = viewportInfo;\n    cineService.playClip(element, { framesPerSecond: frameRate, viewportId: activeViewportId });\n  };\n\n  const handleStop = () => {\n    setIsPlaying(false);\n    const { element } = cornerstoneViewportService.getViewportInfo(activeViewportId);\n    cineService.stopClip(element);\n  };\n\n  const handleSetFrameRate = newFrameRate => {\n    setFrameRate(newFrameRate);\n    handleStop();\n    handlePlay();\n  };\n\n  return (\n    <DynamicVolumeControls\n      fps={frameRate}\n      isPlaying={isPlaying}\n      onPlayPauseChange={onPlayPauseChange}\n      minFps={1}\n      maxFps={50}\n      onFpsChange={handleSetFrameRate}\n      currentDimensionGroupNumber={dimensionGroupNumberRendered}\n      numDimensionGroups={dynamicVolume?.numDimensionGroups || 1}\n      onDimensionGroupChange={dimensionGroupNumber => {\n        dynamicVolume.dimensionGroupNumber = dimensionGroupNumber;\n      }}\n      onGenerate={onGenerateImage}\n      onDynamicClick={displayingComputed ? () => renderDynamicImage(computedDisplaySet) : null}\n      onDoubleRangeChange={setDimensionGroupRange}\n      rangeValues={dimensionGroupRange}\n    />\n  );\n}\n","import React from 'react';\nimport PanelGenerateImage from './PanelGenerateImage';\n\nfunction DynamicDataPanel({ servicesManager, commandsManager, tab }: withAppTypes) {\n  return (\n    <>\n      <div\n        className=\"flex flex-col text-white\"\n        data-cy={'dynamic-volume-panel'}\n      >\n        <PanelGenerateImage\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n        ></PanelGenerateImage>\n      </div>\n    </>\n  );\n}\n\nexport default DynamicDataPanel;\n","import React from 'react';\nimport { Button, Icons } from '@ohif/ui-next';\nimport { useSegmentations } from '@ohif/extension-cornerstone';\n\nfunction DynamicExport({ commandsManager, servicesManager }: withAppTypes) {\n  const segmentations = useSegmentations({ servicesManager });\n\n  if (!segmentations?.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex gap-2\">\n      <div className=\"flex h-8 w-full items-center rounded pr-0.5\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className=\"pl-1.5\"\n          onClick={() => {\n            commandsManager.runCommand('exportTimeReportCSV', {\n              segmentations,\n              options: {\n                filename: 'TimeData.csv',\n              },\n            });\n          }}\n        >\n          <Icons.Export />\n          <span className=\"pl-1\">Time Data</span>\n        </Button>\n      </div>\n      <div className=\"flex h-8 w-full items-center rounded pr-0.5\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className=\"pl-1.5\"\n          onClick={() => {\n            commandsManager.runCommand('exportTimeReportCSV', {\n              segmentations,\n              summaryStats: true,\n              options: {\n                filename: 'ROIStats.csv',\n              },\n            });\n          }}\n        >\n          <Icons.Export />\n          <span className=\"pl-1\">ROI Stats</span>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default DynamicExport;\n","import React from 'react';\nimport { DynamicDataPanel } from './panels';\nimport { Toolbox } from '@ohif/extension-default';\nimport { PanelSegmentation } from '@ohif/extension-cornerstone';\nimport DynamicExport from './panels/DynamicExport';\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager, configuration }) {\n  const { toolbarService } = servicesManager.services;\n\n  const wrappedDynamicDataPanel = () => {\n    return (\n      <DynamicDataPanel\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  const wrappedDynamicSegmentation = () => {\n    return (\n      <>\n        <Toolbox\n          buttonSectionId={toolbarService.sections.dynamicToolbox}\n          title=\"Threshold Tools\"\n        />\n        <PanelSegmentation\n          servicesManager={servicesManager}\n          commandsManager={commandsManager}\n          extensionManager={extensionManager}\n          configuration={configuration}\n        >\n          <DynamicExport\n            servicesManager={servicesManager}\n            commandsManager={commandsManager}\n          />\n        </PanelSegmentation>\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'dynamic-volume',\n      iconName: 'tab-4d',\n      iconLabel: '4D Workflow',\n      label: '4D Workflow',\n      component: wrappedDynamicDataPanel,\n    },\n    {\n      name: 'dynamic-segmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedDynamicSegmentation,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","const DEFAULT_COLORMAP = '2hot';\nconst toolGroupIds = {\n  pt: 'dynamic4D-pt',\n  fusion: 'dynamic4D-fusion',\n  ct: 'dynamic4D-ct',\n};\n\nfunction getPTOptions({\n  colormap,\n  voiInverted,\n}: {\n  colormap?: {\n    name: string;\n    opacity:\n      | number\n      | {\n          value: number;\n          opacity: number;\n        }[];\n  };\n  voiInverted?: boolean;\n} = {}) {\n  return {\n    blendMode: 'MIP',\n    colormap,\n    voi: {\n      windowWidth: 5,\n      windowCenter: 2.5,\n    },\n    voiInverted,\n  };\n}\n\nfunction getPTViewports() {\n  const ptOptionsParams = {\n    colormap: {\n      name: DEFAULT_COLORMAP,\n      opacity: [\n        { value: 0, opacity: 0 },\n        { value: 0.1, opacity: 1 },\n        { value: 1, opacity: 1 },\n      ],\n    },\n    voiInverted: false,\n  };\n\n  return [\n    {\n      viewportOptions: {\n        viewportId: 'ptAxial',\n        viewportType: 'volume',\n        orientation: 'axial',\n        toolGroupId: toolGroupIds.pt,\n        initialImageOptions: {\n          preset: 'middle', // 'first', 'last', 'middle'\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'axialSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ptWLSync',\n            source: true,\n            target: true,\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ptDisplaySet',\n          options: { ...getPTOptions(ptOptionsParams) },\n        },\n      ],\n    },\n    {\n      viewportOptions: {\n        viewportId: 'ptSagittal',\n        viewportType: 'volume',\n        orientation: 'sagittal',\n        toolGroupId: toolGroupIds.pt,\n        initialImageOptions: {\n          preset: 'middle', // 'first', 'last', 'middle'\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'sagittalSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ptWLSync',\n            source: true,\n            target: true,\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ptDisplaySet',\n          options: { ...getPTOptions(ptOptionsParams) },\n        },\n      ],\n    },\n    {\n      viewportOptions: {\n        viewportId: 'ptCoronal',\n        viewportType: 'volume',\n        orientation: 'coronal',\n        toolGroupId: toolGroupIds.pt,\n        initialImageOptions: {\n          preset: 'middle', // 'first', 'last', 'middle'\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'coronalSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ptWLSync',\n            source: true,\n            target: true,\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ptDisplaySet',\n          options: { ...getPTOptions(ptOptionsParams) },\n        },\n      ],\n    },\n  ];\n}\n\nfunction getFusionViewports() {\n  const ptOptionsParams = {\n    colormap: {\n      name: DEFAULT_COLORMAP,\n      opacity: [\n        { value: 0, opacity: 0 },\n        { value: 0.1, opacity: 0.8 },\n        { value: 1, opacity: 0.8 },\n      ],\n    },\n  };\n\n  return [\n    {\n      viewportOptions: {\n        viewportId: 'fusionAxial',\n        viewportType: 'volume',\n        orientation: 'axial',\n        toolGroupId: toolGroupIds.fusion,\n        initialImageOptions: {\n          preset: 'middle', // 'first', 'last', 'middle'\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'axialSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ctWLSync',\n            source: false,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'fusionWLSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ptFusionWLSync',\n            source: false,\n            target: true,\n            options: {\n              syncInvertState: false,\n            },\n          },\n          {\n            type: 'hydrateseg',\n            id: 'sameFORId',\n            source: true,\n            target: true,\n            options: {\n              matchingRules: ['sameFOR'],\n            },\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ctDisplaySet',\n        },\n        {\n          options: { ...getPTOptions(ptOptionsParams) },\n          id: 'ptDisplaySet',\n        },\n      ],\n    },\n    {\n      viewportOptions: {\n        viewportId: 'fusionSagittal',\n        viewportType: 'volume',\n        orientation: 'sagittal',\n        toolGroupId: toolGroupIds.fusion,\n        initialImageOptions: {\n          preset: 'middle', // 'first', 'last', 'middle'\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'sagittalSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ctWLSync',\n            source: false,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'fusionWLSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ptFusionWLSync',\n            source: false,\n            target: true,\n            options: {\n              syncInvertState: false,\n            },\n          },\n          {\n            type: 'hydrateseg',\n            id: 'sameFORId',\n            source: true,\n            target: true,\n            options: {\n              matchingRules: ['sameFOR'],\n            },\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ctDisplaySet',\n        },\n        {\n          options: { ...getPTOptions(ptOptionsParams) },\n          id: 'ptDisplaySet',\n        },\n      ],\n    },\n    {\n      viewportOptions: {\n        viewportId: 'fusionCoronal',\n        viewportType: 'volume',\n        orientation: 'coronal',\n        toolGroupId: toolGroupIds.fusion,\n        initialImageOptions: {\n          preset: 'middle', // 'first', 'last', 'middle'\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'coronalSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ctWLSync',\n            source: false,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'fusionWLSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ptFusionWLSync',\n            source: false,\n            target: true,\n            options: {\n              syncInvertState: false,\n            },\n          },\n          {\n            type: 'hydrateseg',\n            id: 'sameFORId',\n            source: true,\n            target: true,\n            options: {\n              matchingRules: ['sameFOR'],\n            },\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ctDisplaySet',\n        },\n        {\n          options: { ...getPTOptions(ptOptionsParams) },\n          id: 'ptDisplaySet',\n        },\n      ],\n    },\n  ];\n}\n\nfunction getSeriesChartViewport() {\n  return {\n    viewportOptions: {\n      viewportId: 'seriesChart',\n    },\n    displaySets: [\n      {\n        id: 'chartDisplaySet',\n        options: {\n          // This dataset does not require the download of any instance since it is pre-computed locally,\n          // but interleaveTopToBottom.ts was not loading any series because it consider that all viewports\n          // are a Cornerstone viewport which is not true in this case and it waits for all viewports to\n          // have called interleaveTopToBottom(...).\n          skipLoading: true,\n        },\n      },\n    ],\n  };\n}\n\nfunction getCTViewports() {\n  return [\n    {\n      viewportOptions: {\n        viewportId: 'ctAxial',\n        viewportType: 'volume',\n        orientation: 'axial',\n        toolGroupId: toolGroupIds.ct,\n        initialImageOptions: {\n          preset: 'middle', // 'first', 'last', 'middle'\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'axialSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ctWLSync',\n            source: true,\n            target: true,\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ctDisplaySet',\n        },\n      ],\n    },\n    {\n      viewportOptions: {\n        viewportId: 'ctSagittal',\n        viewportType: 'volume',\n        orientation: 'sagittal',\n        toolGroupId: toolGroupIds.ct,\n        initialImageOptions: {\n          preset: 'middle',\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'sagittalSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ctWLSync',\n            source: true,\n            target: true,\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ctDisplaySet',\n        },\n      ],\n    },\n    {\n      viewportOptions: {\n        viewportId: 'ctCoronal',\n        viewportType: 'volume',\n        orientation: 'coronal',\n        toolGroupId: toolGroupIds.ct,\n        initialImageOptions: {\n          preset: 'middle',\n        },\n        syncGroups: [\n          {\n            type: 'cameraPosition',\n            id: 'coronalSync',\n            source: true,\n            target: true,\n          },\n          {\n            type: 'voi',\n            id: 'ctWLSync',\n            source: true,\n            target: true,\n          },\n        ],\n      },\n      displaySets: [\n        {\n          id: 'ctDisplaySet',\n        },\n      ],\n    },\n  ];\n}\n\nconst defaultProtocol = {\n  id: 'default4D',\n  locked: true,\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  hasUpdatedPriorsInformation: false,\n  name: 'Default',\n  createdDate: '2023-01-01T00:00:00.000Z',\n  modifiedDate: '2023-01-01T00:00:00.000Z',\n  availableTo: {},\n  editableBy: {},\n  imageLoadStrategy: 'default', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\n  protocolMatchingRules: [\n    {\n      attribute: 'ModalitiesInStudy',\n      constraint: {\n        contains: ['CT', 'PT'],\n      },\n    },\n  ],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: -1,\n  displaySetSelectors: {\n    defaultDisplaySetId: {\n      // Unused currently\n      imageMatchingRules: [],\n      // Matches displaysets, NOT series\n      seriesMatchingRules: [\n        // Try to match series with images by default, to prevent weird display\n        // on SEG/SR containing studies\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            greaterThan: { value: 0 },\n          },\n        },\n      ],\n      // Can be used to select matching studies\n      // studyMatchingRules: [],\n    },\n    ctDisplaySet: {\n      // Unused currently\n      imageMatchingRules: [],\n      // Matches displaysets, NOT series\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CT',\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n      // Can be used to select matching studies\n      // studyMatchingRules: [],\n    },\n    ptDisplaySet: {\n      // Unused currently\n      imageMatchingRules: [],\n      // Matches displaysets, NOT series\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'PT',\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'Corrected',\n          },\n        },\n        {\n          weight: 2,\n          attribute: 'SeriesDescription',\n          constraint: {\n            doesNotContain: {\n              value: 'Uncorrected',\n            },\n          },\n        },\n\n        // Should we check if CorrectedImage contains ATTN?\n        // (0028,0051) (CorrectedImage): NORM\\DTIM\\ATTN\\SCAT\\RADL\\DECY\n      ],\n      // Can be used to select matching studies\n      // studyMatchingRules: [],\n    },\n    chartDisplaySet: {\n      // Unused currently\n      imageMatchingRules: [],\n      // Matches displaysets, NOT series\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CHT',\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'dataPreparation',\n      name: 'Data Preparation',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 3,\n        },\n      },\n      viewports: [...getPTViewports()],\n      createdDate: '2023-01-01T00:00:00.000Z',\n    },\n\n    {\n      id: 'registration',\n      name: 'Registration',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 3,\n          columns: 3,\n        },\n      },\n      viewports: [...getFusionViewports(), ...getCTViewports(), ...getPTViewports()],\n      createdDate: '2023-01-01T00:00:00.000Z',\n    },\n\n    {\n      id: 'roiQuantification',\n      name: 'ROI Quantification',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 3,\n        },\n      },\n      viewports: [...getFusionViewports()],\n      createdDate: '2023-01-01T00:00:00.000Z',\n    },\n\n    {\n      id: 'kineticAnalysis',\n      name: 'Kinetic Analysis',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 3,\n          layoutOptions: [\n            {\n              x: 0,\n              y: 0,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n            {\n              x: 1 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n            {\n              x: 2 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n            {\n              x: 0,\n              y: 1 / 2,\n              width: 1,\n              height: 1 / 2,\n            },\n          ],\n        },\n      },\n      viewports: [...getFusionViewports(), getSeriesChartViewport()],\n      createdDate: '2023-01-01T00:00:00.000Z',\n    },\n  ],\n};\n\n/**\n * HangingProtocolModule should provide a list of hanging protocols that will be\n * available in OHIF for Modes to use to decide on the structure of the viewports\n * and also the series that hung in the viewports. Each hanging protocol is defined by\n * { name, protocols}. Examples include the default hanging protocol provided by\n * the default extension that shows 2x2 viewports.\n */\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: defaultProtocol.id,\n      protocol: defaultProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import { id } from './id';\nimport commandsModule from './commandsModule';\nimport getPanelModule from './getPanelModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport { cache } from '@cornerstonejs/core';\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst dynamicVolumeExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  /**\n   * Perform any pre-registration tasks here. This is called before the extension\n   * is registered. Usually we run tasks such as: configuring the libraries\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\n   * this extension is providing.\n   */\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {\n    // TODO: look for the right fix\n    cache.setMaxCacheSize(5 * 1024 * 1024 * 1024);\n  },\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  /**\n   * ViewportModule should provide a list of viewports that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each viewport is defined by\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\n   * that is provided by the Cornerstone extension in OHIF.\n   */\n  getHangingProtocolModule,\n  /**\n   * CommandsModule should provide a list of commands that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each command is defined by\n   * an object of { actions, definitions, defaultContext } where actions is an\n   * object of functions, definitions is an object of available commands, their\n   * options, and defaultContext is the default context for the command to run against.\n   */\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {\n    return commandsModule({\n      servicesManager,\n      commandsManager,\n      extensionManager,\n    });\n  },\n};\n\nexport { dynamicVolumeExtension as default };\n"],"names":["ChangeTypes","Events","SegmentationRepresentations","StrategyCallbacks","MouseBindings","KeyboardBindings","ToolModes","Swipe","AnnotationStyleStates","id","packageJson","CHART_MODALITY","SEG_CHART_INSTANCE_UID","utils","guid","ChartDataSOPClassUid","utilities","csToolsUtils","csTools","_getTimePointsDataByTagName","volume","timePointsTag","uniqueTimePoints","imageIds","reduce","timePoints","imageId","timePointValue","DicomMetadataStore","getInstanceByImageId","undefined","add","Set","Array","from","sort","a","b","_getSegmentationData","segmentation","volumesTimePointsCache","servicesManager","displaySetService","segmentationService","viewportGridService","services","volumeCacheKey","volumeId","getActiveDisplaySets","find","displaySet","anInstance","instances","FrameReferenceTime","NumberOfTimeSlices","displaySetInstanceUID","key","cs","_volumeCache","includes","referencedDynamicVolume","getVolume","StudyInstanceUID","StudyDescription","segmentationVolume","getLabelmapVolume","segmentationId","maskVolumeId","timeData","_","dynamicVolume","getDataInTime","pixelCount","length","viewportId","getActiveViewportId","color","getSegmentColor","hexColor","timePointsData","get","timePointsTags","unit","timePointsTagNames","Object","keys","timePointsUnit","i","tagName","curTimePoints","concatTagNames","join","Error","convertedTimePoints","validUnits","divisors","currentUnitIndex","indexOf","divisor","newDivisor","filter","timePoint","map","_convertTimePointsUnit","_getTimePointsData","set","timepointsCount","chartSeriesData","average","acc","cur","chartData","series","label","points","axis","x","y","_getInstanceFromSegmentations","segmentations","WeakMap","segmentationsData","date","seriesDate","time","seriesTime","now","Date","getFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_getDateTimeStr","allSeries","curSegData","instance","SOPClassUID","Modality","SOPInstanceUID","SeriesDate","SeriesTime","SeriesInstanceUID","SeriesNumber","SeriesDescription","seriesMetadata","updateSegmentationsChartDisplaySet","getSegmentations","addSeriesMetadata","addInstances","Enums","Labelmap","commandsModule","commandsManager","actions","importedActions","getDynamic4DDisplaySet","TemporalPositionIdentifier","getComputedDisplaySets","getDisplaySetCache","values","isDerived","exportTimeReportCSV","config","options","summaryStats","dynamic4DDisplaySet","cache","csv","calculateStandardDeviation","data","n","mean","value","variance","Math","sqrt","push","PatientID","StudyDate","forEach","ijkCoords","headers","maxLength","numTimePoints","t","min","minIJK","max","maxIJK","std","numVoxels","timeIndex","voxelValues","sum","minValue","Infinity","maxValue","minIndex","maxIndex","voxelIndex","row","csvContent","filename","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","swapDynamicWithComputedDisplaySet","computedDisplaySet","displaySetCache","cachedDisplaySetKeys","viewports","getState","viewportsToUpdate","viewport","viewportOptions","displaySetInstanceUIDs","displaySetInstanceUIDIndex","newViewport","initialImageOptions","viewportType","orientation","background","run","swapComputedWithDynamicDisplaySet","dynamicDisplaySet","computed4DDisplaySet","createNewLabelMapForDynamicVolume","async","activeViewportId","dynamic4DDisplaySetInstanceUID","referenceDisplaySet","cachedDisplaySets","referenceDisplaySetUID","getDisplaySetByUID","createLabelmapForDisplaySet","firstViewport","next","addSegmentationRepresentation","definitions","commandFn","storeContexts","defaultContext","toUpperCaseString","String","toUpperCase","Header","title","tooltip","React","className","Tooltip","TooltipTrigger","asChild","Icons","ByName","name","TooltipContent","sideOffset","DynamicVolumeControls","isPlaying","onPlayPauseChange","fps","onFpsChange","minFps","maxFps","currentDimensionGroupNumber","onDimensionGroupChange","numDimensionGroups","onGenerate","onDoubleRangeChange","rangeValues","onDynamicClick","computedView","setComputedView","useState","computeViewMode","setComputeViewMode","SUM","PanelSection","defaultOpen","Content","Tabs","onValueChange","isComputed","TabsList","TabsTrigger","DimensionGroupControls","AVERAGE","SUBTRACT","Numeric","Container","mode","onChange","DoubleRange","showNumberInputs","Button","variant","size","onClick","handleGenerate","console","error","step","NumberStepper","direction","Label","PanelGenerateImage","cornerstoneViewportService","isCineEnabled","cineService","useCine","useViewportGrid","dimensionGroupRange","setDimensionGroupRange","setComputedDisplaySet","setDynamicVolume","frameRate","setFrameRate","setIsPlaying","dimensionGroupNumberRendered","setDimensionGroupNumberRendered","displayingComputed","setDisplayingComputed","uuidComputedVolume","useRef","csUtils","uuidDynamicVolume","computedVolumeId","current","renderGeneratedImage","runCommand","useEffect","viewportDataChangedEvt","EVENTS","VIEWPORT_DATA_CHANGED","cineStateChangedEvt","CINE_STATE_CHANGED","unsubscribe","unsubscribeViewportData","subscribe","evtDetails","viewportData","volumeData","isDynamicVolume","newRange","unsubscribeCineState","evt","DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED","callback","detail","dimensionGroupNumber","eventTarget","addEventListener","removeEventListener","displaySetUIDs","getDisplaySetsUIDsForViewport","dynamicVolumeDisplaySet","getVolumes","handlePlay","viewportInfo","getViewportInfo","element","playClip","framesPerSecond","handleStop","stopClip","newFrameRate","operationName","dynamicVolumeId","computedVolume","volumeLoader","start","end","frameNumbers","dimensionGroupNumbers","targetVolume","cstUtils","getRenderingEngine","render","volumeLoaderSchema","split","SOPClassHandlerId","metadata","isMultiFrame","numImageFrames","uid","madeInClient","FrameOfReferenceUID","tab","useSegmentations","Export","extensionManager","configuration","toolbarService","iconName","iconLabel","component","wrappedDynamicDataPanel","DynamicDataPanel","wrappedDynamicSegmentation","Toolbox","buttonSectionId","sections","dynamicToolbox","PanelSegmentation","DynamicExport","DEFAULT_COLORMAP","toolGroupIds","getPTOptions","colormap","voiInverted","blendMode","voi","windowWidth","windowCenter","getPTViewports","ptOptionsParams","opacity","toolGroupId","preset","syncGroups","source","target","displaySets","getFusionViewports","syncInvertState","matchingRules","defaultProtocol","locked","hasUpdatedPriorsInformation","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","numberOfPriorsReferenced","displaySetSelectors","defaultDisplaySetId","imageMatchingRules","seriesMatchingRules","greaterThan","ctDisplaySet","equals","required","ptDisplaySet","weight","doesNotContain","chartDisplaySet","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","width","height","skipLoading","dynamicVolumeExtension","preRegistration","setMaxCacheSize","getPanelModule","getHangingProtocolModule","protocol","getCommandsModule"],"sourceRoot":""}