{"version":3,"file":"7412.bundle.2cbe2ffdcddb4a148393.js","mappings":"uJAEA,IAAIA,EAAS,CAAC,EACP,SAASC,IACZ,OAAOD,CACX,CACO,SAASE,EAAUC,GACtBH,EAASG,CACb,CAIA,IAAIC,GAAqB,EAClB,SAASC,IACZ,IAAKL,EAAOM,QAAQC,QAEhB,OADAC,QAAQC,KAAK,6SACN,KAEX,MAAMC,EAAUV,EAAOM,OAAOC,QAK9B,OAJKH,IACDM,EAAQC,OACRP,GAAqB,GAElBM,CACX,C,gDCxBA,MAiQA,EAjQ8B,CAC1B,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,I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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/config.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/setCursorForElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipse.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPath.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRectByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setAttributesIfNecessary.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setNewAttributesIfValid.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageRenderedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/onLabelmapSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performVolumeLabelmapUpdate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performStackLabelmapUpdate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationDataModifiedEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationModifiedEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationCompletedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationSelectionListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationModifiedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationRemovedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationRemoved.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationModifiedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/init.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getFont.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getCurrentLabelmapImageIdForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportIdsWithSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/getSegmentationActor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/styleHelpers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationMapFromSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getPolylineMap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/extractSegmentPolylines.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/decimateContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeCompleteContourAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourIslands.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/smoothContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/convertContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/clearSegmentValue.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getLabelmapImageIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/createSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroy.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroySynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getAllSynchronizers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/createToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroy.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/addEnabledElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/cancelActiveManipulations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/removeEnabledElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/areViewportsCoplanar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/cameraSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/imageSliceSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/presentationViewSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/slabThicknessSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/voiSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/zoomPanSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createVOISynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingControlTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticBezier.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Surface/surfaceDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureImageVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/utils/getStrategyData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/types/ContourAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/AnnotationMultiSlice.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areSameSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areViewReferencesEqual.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/contourSegmentationOperation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/copyAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getIntersectingAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getViewReferenceFromAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/isContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addPolylinesToSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/logicalOperators.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/mergeMultipleAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineIntersect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineSubtract.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineUnify.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineXor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/removeContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/sharedOperations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/calculatePerimeter.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/contourFinder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findIslands.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataWorld.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getDeduplicatedVTKPolyDataPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/areCoplanarContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/detectContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/generateContourSetsFromLabelmap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/AnnotationToPointData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/acceptAutogeneratedInterpolations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/updateContourPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/getDataInTime.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getAnnotationNearPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getPixelValueUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportsForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/arePolylinesIdentical.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/containsPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/decimate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSignedArea.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/isClosed.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/moveAnnotationToViewPlane.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/normalizeViewportPlane.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/getOrientationStringLPS.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/invertOrientationStringLPS.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/registerComputeWorker.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/InterpolationManager/InterpolationManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/VolumetricCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushSizeForToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushThresholdForToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/computeMetabolicStats.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/contourAndFindLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createBidirectionalToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapMemo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/findLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateImageVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getStatistics.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getUniqueSegmentIndices.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isLineInSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/islandRemoval.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/segmentContourAction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdSegmentationByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilsForWorker.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/validateLabelmap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackContextPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/version.js","webpack:///../../../node_modules/lodash.get/index.js"],"sourcesContent":["import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from './enums/Events';\nlet config = {};\nexport function getConfig() {\n    return config;\n}\nexport function setConfig(newConfig) {\n    config = newConfig;\n}\nexport function getAddOns() {\n    return config.addons;\n}\nlet polysegInitialized = false;\nexport function getPolySeg() {\n    if (!config.addons?.polySeg) {\n        console.warn('PolySeg add-on not configured. This will prevent automatic conversion between segmentation representations (labelmap, contour, surface). To enable these features, install @cornerstonejs/polymorphic-segmentation and register it during initialization: cornerstoneTools.init({ addons: { polySeg } }).');\n        return null;\n    }\n    const polyseg = config.addons.polySeg;\n    if (!polysegInitialized) {\n        polyseg.init();\n        polysegInitialized = true;\n    }\n    return polyseg;\n}\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n    'alias',\n    'all-scroll',\n    'auto',\n    'cell',\n    'col-resize',\n    'context-menu',\n    'copy',\n    'crosshair',\n    'default',\n    'e-resize',\n    'ew-resize',\n    'grab',\n    'grabbing',\n    'help',\n    'move',\n    'ne-resize',\n    'nesw-resize',\n    'no-drop',\n    'none',\n    'not-allowed',\n    'n-resize',\n    'ns-resize',\n    'nw-resize',\n    'nwse-resize',\n    'pointer',\n    'progress',\n    'row-resize',\n    'se-resize',\n    's-resize',\n    'sw-resize',\n    'text',\n    'vertical-text',\n    'wait',\n    'w-resize',\n    'zoom-in',\n    'zoom-out',\n]);\nexport default class MouseCursor {\n    constructor(name, fallback) {\n        this.name = name + '';\n        this.fallback = fallback;\n    }\n    getName() {\n        return this.name + '';\n    }\n    addFallbackStyleProperty(style) {\n        const { fallback } = this;\n        if (fallback instanceof MouseCursor) {\n            return `${style}, ${fallback.getStyleProperty()}`;\n        }\n        return style + '';\n    }\n    getStyleProperty() {\n        return this.addFallbackStyleProperty(this.name) + '';\n    }\n    static getDefinedCursor(name) {\n        const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n        let mouseCursor = definedCursors.get(name);\n        if (mouseCursor instanceof MouseCursor) {\n            return mouseCursor;\n        }\n        if (STANDARD_CURSORS.has(name)) {\n            mouseCursor = new MouseCursor(name);\n            definedCursors.set(name, mouseCursor);\n            return mouseCursor;\n        }\n    }\n    static setDefinedCursor(name, cursor) {\n        if (cursor instanceof MouseCursor) {\n            const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n            definedCursors.set(name, cursor);\n            return true;\n        }\n        return false;\n    }\n}\nfunction getDefinedCursors(context, symbol) {\n    let definedCursors = context[symbol];\n    if (!(definedCursors instanceof Map)) {\n        definedCursors = new Map();\n        Object.defineProperty(context, symbol, { value: definedCursors });\n    }\n    return definedCursors;\n}\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import MouseCursor from './MouseCursor';\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\nfunction initElementCursor(element, cursor) {\n    _getElementCursors(element)[0] = cursor;\n    _setElementCursor(element, cursor);\n}\nfunction _setElementCursor(element, cursor) {\n    const cursors = _getElementCursors(element);\n    cursors[1] = cursors[0];\n    cursors[0] = cursor;\n    element.style.cursor = (cursor instanceof MouseCursor\n        ? cursor\n        : MouseCursor.getDefinedCursor('auto')).getStyleProperty();\n}\nfunction resetElementCursor(element) {\n    _setElementCursor(element, _getElementCursors(element)[1]);\n}\nfunction hideElementCursor(element) {\n    _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\nfunction _getElementCursors(element) {\n    let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n    if (!(map instanceof WeakMap)) {\n        map = new WeakMap();\n        Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n            value: map,\n        });\n    }\n    let cursors = map.get(element);\n    if (!cursors) {\n        cursors = [null, null];\n        map.set(element, cursors);\n    }\n    return cursors;\n}\nexport { initElementCursor, resetElementCursor, hideElementCursor, _setElementCursor as setElementCursor, };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\nconst DEFAULT_NAME = 'image-cursor';\nexport default class ImageMouseCursor extends MouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME), fallback);\n        this.url = url;\n        this.x = Number(x) || 0;\n        this.y = Number(y) || 0;\n    }\n    getStyleProperty() {\n        const { url, x, y } = this;\n        let style = `url('${url}')`;\n        if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n            style += ` ${x} ${y}`;\n        }\n        return this.addFallbackStyleProperty(style);\n    }\n    static getUniqueInstanceName(prefix) {\n        return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n    }\n}\n","const BASE = {\n    iconContent: '',\n    iconSize: 16,\n    viewBox: {\n        x: 16,\n        y: 16,\n    },\n    mousePoint: {\n        x: 8,\n        y: 8,\n    },\n    mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n    x: 127,\n    y: 60,\n};\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CursorSVG = {\n    Angle: extend(BASE, {\n        name: 'Angle',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    ArrowAnnotate: extend(BASE, {\n        name: 'ArrowAnnotate',\n        iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Bidirectional: extend(BASE, {\n        name: 'Bidirectional',\n        iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n        viewBox: {\n            x: 48,\n            y: 48,\n        },\n    }),\n    CobbAngle: extend(BASE, {\n        name: 'CobbAngle',\n        iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    CircleROI: extend(BASE, {\n        name: 'CircleROI',\n        iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    EllipticalROI: extend(BASE, {\n        name: 'EllipticalROI',\n        iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    FreehandROI: extend(BASE, {\n        name: 'FreehandROI',\n        iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    FreehandROISculptor: extend(BASE, {\n        name: 'FreehandROISculptor',\n        iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Length: extend(BASE, {\n        name: 'Length',\n        iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Height: extend(BASE, {\n        name: 'Height',\n        iconContent: `<path d=\"m 6 22 l 8.5 0 v -16 h 8\" stroke-width=\"3\" fill=\"none\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Probe: extend(BASE, {\n        name: 'Probe',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    RectangleROI: extend(BASE, {\n        name: 'RectangleROI',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Label: extend(BASE, {\n        name: 'Label',\n        iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Crosshairs: extend(BASE, {\n        name: 'Crosshairs',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Eraser: extend(BASE, {\n        name: 'Eraser',\n        iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n        viewBox: {\n            x: 2048,\n            y: 1792,\n        },\n    }),\n    Magnify: extend(BASE, {\n        name: 'Magnify',\n        iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n        viewBox: {\n            x: 512,\n            y: 512,\n        },\n    }),\n    Pan: extend(BASE, {\n        name: 'Pan',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Rotate: extend(BASE, {\n        name: 'Rotate',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    StackScroll: extend(BASE, {\n        name: 'StackScroll',\n        iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n        viewBox: {\n            x: 24,\n            y: 28,\n        },\n    }),\n    WindowLevelRegion: extend(BASE, {\n        name: 'WindowLevelRegion',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    WindowLevel: extend(BASE, {\n        name: 'WindowLevel',\n        iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Zoom: extend(BASE, {\n        name: 'Zoom',\n        iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n        viewBox: {\n            x: 640,\n            y: 512,\n        },\n    }),\n    SegmentationFreeHandEraseInside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseInside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillInside: extend(BASE, {\n        name: 'SegmentationFreeHandFillInside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandEraseOutside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseOutside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillOutside: extend(BASE, {\n        name: 'SegmentationFreeHandFillOutside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationRectangleEraseInside: extend(BASE, {\n        name: 'SegmentationRectangleEraseInside',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    RectangleScissor: extend(BASE, {\n        name: 'RectangleScissor',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    CircleScissor: extend(BASE, {\n        name: 'CircleScissor',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_INSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.ERASE_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n};\nfunction extend(base, values) {\n    return Object.assign(Object.create(base), {\n        ...values,\n        name: values.name || base.name,\n    });\n}\nfunction registerCursor(toolName, iconContent, viewBox) {\n    CursorSVG[toolName] = extend(BASE, {\n        iconContent,\n        viewBox,\n    });\n}\nfunction getDefinedSVGCursorDescriptor(name) {\n    return CursorSVG[name];\n}\nconst svgCursorNames = Object.keys(CursorSVG);\nexport { getDefinedSVGCursorDescriptor, registerCursor, svgCursorNames, CursorSVG, };\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\nexport default class SVGMouseCursor extends ImageMouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(url, x, y, name, fallback);\n    }\n    static getDefinedCursor(name, pointer = false, color) {\n        if (!color) {\n            color = getStyleProperty(PROPERTY, {}, STATE, MODE);\n        }\n        const urn = getCursorURN(name, pointer, color);\n        let cursor = super.getDefinedCursor(urn);\n        if (!cursor) {\n            const descriptor = getDefinedSVGCursorDescriptor(name);\n            if (descriptor) {\n                cursor = createSVGMouseCursor(descriptor, urn, pointer, color, super.getDefinedCursor('default'));\n                super.setDefinedCursor(urn, cursor);\n            }\n        }\n        return cursor;\n    }\n}\nfunction format(template, dictionary) {\n    const dict = Object(dictionary);\n    const defined = Object.prototype.hasOwnProperty.bind(dict);\n    return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n        return defined(key) ? dict[key] + '' : '';\n    });\n}\nfunction getCursorURN(name, pointer, color) {\n    const type = pointer ? 'pointer' : 'cursor';\n    return `${type}:${name}/${color}`;\n}\nfunction createSVGMouseCursor(descriptor, name, pointer, color, fallback) {\n    const { x, y } = descriptor.mousePoint;\n    return new SVGMouseCursor(createSVGIconUrl(descriptor, pointer, { color }), x, y, name, fallback);\n}\nfunction createSVGIconUrl(descriptor, pointer, options) {\n    const blob = createSVGIconBlob(descriptor, pointer, options);\n    const url = URL.createObjectURL(blob);\n    const urn = `${url}#${descriptor.name || 'unknown'}-${pointer ? 'pointer' : 'cursor'}`;\n    return urn;\n}\nfunction createSVGIconBlob(descriptor, pointer, options) {\n    const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(descriptor, options);\n    return new Blob([svgString], { type: 'image/svg+xml' });\n}\nfunction createSVGIcon(descriptor, options) {\n    const { iconContent, iconSize, viewBox } = descriptor;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n    return format(svgString, options);\n}\nfunction createSVGIconWithPointer(descriptor, options) {\n    const { iconContent, iconSize, viewBox, mousePointerGroupString } = descriptor;\n    const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n    const svgSize = 16 + iconSize;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n    return format(svgString, options);\n}\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nfunction setCursorForElement(element, cursorName) {\n    let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n    if (!cursor) {\n        cursor = MouseCursor.getDefinedCursor(cursorName);\n    }\n    if (!cursor) {\n        console.log(`Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`);\n        cursor = MouseCursor.getDefinedCursor(cursorName);\n    }\n    setElementCursor(element, cursor);\n}\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport { registerCursor, svgCursorNames, CursorSVG, } from './SVGCursorDescriptor';\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\nexport { MouseCursor, ImageMouseCursor, SVGMouseCursor, elementCursor, registerCursor, CursorNames, CursorSVG, setCursorForElement, };\n","import _getHash from './_getHash';\nimport drawEllipseByCoordinates from './drawEllipseByCoordinates';\nfunction drawEllipse(svgDrawingHelper, annotationUID, ellipseUID, corner1, corner2, options = {}, dataId = '') {\n    const top = [(corner1[0] + corner2[0]) / 2, corner1[1]];\n    const bottom = [(corner1[0] + corner2[0]) / 2, corner2[1]];\n    const left = [corner1[0], (corner1[1] + corner2[1]) / 2];\n    const right = [corner2[0], (corner1[1] + corner2[1]) / 2];\n    drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, [bottom, top, left, right], (options = {}), (dataId = ''));\n}\nexport default drawEllipse;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options = {}, uniqueIndex) {\n    const { color, handleRadius, width, lineWidth, fill, type, opacity } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'handle', `hg-${handleGroupUID}-index-${uniqueIndex}`);\n    let attributes;\n    if (type === 'circle') {\n        attributes = {\n            cx: `${handle[0]}`,\n            cy: `${handle[1]}`,\n            r: handleRadius,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            opacity: opacity,\n        };\n    }\n    else if (type === 'rect') {\n        const handleRadiusFloat = parseFloat(handleRadius);\n        const side = handleRadiusFloat * 1.5;\n        const x = handle[0] - side * 0.5;\n        const y = handle[1] - side * 0.5;\n        attributes = {\n            x: `${x}`,\n            y: `${y}`,\n            width: `${side}`,\n            height: `${side}`,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            rx: `${side * 0.1}`,\n            opacity: opacity,\n        };\n    }\n    else {\n        throw new Error(`Unsupported handle type: ${type}`);\n    }\n    const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingHandleElement) {\n        setAttributesIfNecessary(attributes, existingHandleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newHandleElement = document.createElementNS(svgns, type);\n        setNewAttributesIfValid(attributes, newHandleElement);\n        svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n    }\n}\nexport default drawHandle;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, options = {}, dataId = '') {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color = 'rgb(0, 255, 0)', width = 10, lineWidth, lineDash, markerStartId = null, markerEndId = null, shadow = false, strokeOpacity = 1, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n    const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const dropShadowStyle = shadow ? `filter:url(#shadow-${layerId});` : '';\n    const attributes = {\n        x1: `${start[0]}`,\n        y1: `${start[1]}`,\n        x2: `${end[0]}`,\n        y2: `${end[1]}`,\n        stroke: color,\n        style: dropShadowStyle,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'marker-start': markerStartId ? `url(#${markerStartId})` : '',\n        'marker-end': markerEndId ? `url(#${markerEndId})` : '',\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingLine) {\n        setAttributesIfNecessary(attributes, existingLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newLine = document.createElementNS(svgns, 'line');\n        if (dataId !== '') {\n            newLine.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newLine);\n        svgDrawingHelper.appendNode(newLine, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPath(svgDrawingHelper, annotationUID, pathUID, points, options) {\n    const hasSubArrays = points.length && points[0].length && Array.isArray(points[0][0]);\n    const pointsArrays = hasSubArrays ? points : [points];\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'path', pathUID);\n    const existingNode = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (let i = 0, numArrays = pointsArrays.length; i < numArrays; i++) {\n        const points = pointsArrays[i];\n        const numPoints = points.length;\n        if (numPoints < 2) {\n            continue;\n        }\n        for (let j = 0; j < numPoints; j++) {\n            const point = points[j];\n            const cmd = j ? 'L' : 'M';\n            pointsAttribute += `${cmd} ${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n        }\n        if (closePath) {\n            pointsAttribute += 'Z ';\n        }\n    }\n    if (!pointsAttribute) {\n        return;\n    }\n    const attributes = {\n        d: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingNode) {\n        setAttributesIfNecessary(attributes, existingNode);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newNode = document.createElementNS(svgns, 'path');\n        setNewAttributesIfValid(attributes, newNode);\n        svgDrawingHelper.appendNode(newNode, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPolyline(svgDrawingHelper, annotationUID, polylineUID, points, options) {\n    if (points.length < 2) {\n        return;\n    }\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, markerStartId = null, markerEndId = null, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n    const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (const point of points) {\n        pointsAttribute += `${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n    }\n    if (closePath) {\n        const firstPoint = points[0];\n        pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n    }\n    const attributes = {\n        points: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'marker-start': markerStartId ? `url(#${markerStartId})` : '',\n        'marker-end': markerEndId ? `url(#${markerEndId})` : '',\n    };\n    if (existingPolyLine) {\n        setAttributesIfNecessary(attributes, existingPolyLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newPolyLine = document.createElementNS(svgns, 'polyline');\n        setNewAttributesIfValid(attributes, newPolyLine);\n        svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [topLeft, topRight, bottomLeft, bottomRight] = canvasCoordinates;\n    const width = Math.hypot(topLeft[0] - topRight[0], topLeft[1] - topRight[1]);\n    const height = Math.hypot(topLeft[0] - bottomLeft[0], topLeft[1] - bottomLeft[1]);\n    const center = [\n        (bottomRight[0] + topLeft[0]) / 2,\n        (bottomRight[1] + topLeft[1]) / 2,\n    ];\n    const leftEdgeCenter = [\n        (bottomLeft[0] + topLeft[0]) / 2,\n        (bottomLeft[1] + topLeft[1]) / 2,\n    ];\n    const angle = (Math.atan2(center[1] - leftEdgeCenter[1], center[0] - leftEdgeCenter[0]) *\n        180) /\n        Math.PI;\n    const attributes = {\n        x: `${center[0] - width / 2}`,\n        y: `${center[1] - height / 2}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        if (dataId !== '') {\n            svgRectElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawTextBox(svgDrawingHelper, annotationUID, textUID, textLines, position, options = {}) {\n    const mergedOptions = Object.assign({\n        fontFamily: 'Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        color: 'rgb(255, 255, 0)',\n        background: '',\n        padding: 25,\n        centerX: false,\n        centerY: true,\n    }, options);\n    const textGroupBoundingBox = _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines, position, mergedOptions);\n    return textGroupBoundingBox;\n}\nfunction _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines = [''], position, options) {\n    const { padding, color, fontFamily, fontSize, background } = options;\n    let textGroupBoundingBox;\n    const [x, y] = [position[0] + padding, position[1] + padding];\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n    const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingTextGroup) {\n        const textElement = existingTextGroup.querySelector('text');\n        const textSpans = Array.from(textElement.children);\n        for (let i = 0; i < textSpans.length; i++) {\n            const textSpanElement = textSpans[i];\n            const text = textLines[i] || '';\n            textSpanElement.textContent = text;\n        }\n        if (textLines.length > textSpans.length) {\n            for (let i = 0; i < textLines.length - textSpans.length; i++) {\n                const textLine = textLines[i + textSpans.length];\n                const textSpan = _createTextSpan(textLine);\n                textElement.appendChild(textSpan);\n            }\n            existingTextGroup.appendChild(textElement);\n            svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n        }\n        const textAttributes = {\n            fill: color,\n            'font-size': fontSize,\n            'font-family': fontFamily,\n        };\n        const textGroupAttributes = {\n            transform: `translate(${x} ${y})`,\n        };\n        setAttributesIfNecessary(textAttributes, textElement);\n        setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n        existingTextGroup.setAttribute('data-annotation-uid', annotationUID);\n        textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const textGroup = document.createElementNS(svgns, 'g');\n        textGroup.setAttribute('data-annotation-uid', annotationUID);\n        textGroup.setAttribute('transform', `translate(${x} ${y})`);\n        const textElement = _createTextElement(svgDrawingHelper, options);\n        for (let i = 0; i < textLines.length; i++) {\n            const textLine = textLines[i];\n            const textSpan = _createTextSpan(textLine);\n            textElement.appendChild(textSpan);\n        }\n        textGroup.appendChild(textElement);\n        svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n        textGroupBoundingBox = _drawTextBackground(textGroup, background);\n    }\n    return Object.assign({}, textGroupBoundingBox, {\n        x,\n        y,\n        height: textGroupBoundingBox.height + padding,\n        width: textGroupBoundingBox.width + padding,\n    });\n}\nfunction _createTextElement(svgDrawingHelper, options) {\n    const { color, fontFamily, fontSize } = options;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textElement = document.createElementNS(svgns, 'text');\n    const noSelectStyle = 'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n    const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n    const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n    textElement.setAttribute('x', '0');\n    textElement.setAttribute('y', '0');\n    textElement.setAttribute('fill', color);\n    textElement.setAttribute('font-family', fontFamily);\n    textElement.setAttribute('font-size', fontSize);\n    textElement.setAttribute('style', combinedStyle);\n    textElement.setAttribute('pointer-events', 'visible');\n    return textElement;\n}\nfunction _createTextSpan(text) {\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textSpanElement = document.createElementNS(svgns, 'tspan');\n    textSpanElement.setAttribute('x', '0');\n    textSpanElement.setAttribute('dy', '1.2em');\n    textSpanElement.textContent = text;\n    return textSpanElement;\n}\nfunction _drawTextBackground(group, color) {\n    let element = group.querySelector('rect.background');\n    if (!color) {\n        if (element) {\n            group.removeChild(element);\n        }\n        return group.getBBox();\n    }\n    if (!element) {\n        element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        element.setAttribute('class', 'background');\n        group.insertBefore(element, group.firstChild);\n    }\n    const bBox = group.getBBox();\n    const attributes = {\n        x: `${bBox.x}`,\n        y: `${bBox.y}`,\n        width: `${bBox.width}`,\n        height: `${bBox.height}`,\n        fill: color,\n    };\n    setAttributesIfNecessary(attributes, element);\n    return bBox;\n}\nexport default drawTextBox;\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = '', zIndex) {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'fan', fanUID);\n    const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    const centerX = center[0];\n    const centerY = center[1];\n    const outerStartX = centerX + outerRadius * Math.cos(startRad);\n    const outerStartY = centerY + outerRadius * Math.sin(startRad);\n    const outerEndX = centerX + outerRadius * Math.cos(endRad);\n    const outerEndY = centerY + outerRadius * Math.sin(endRad);\n    const innerStartX = centerX + innerRadius * Math.cos(startRad);\n    const innerStartY = centerY + innerRadius * Math.sin(startRad);\n    const innerEndX = centerX + innerRadius * Math.cos(endRad);\n    const innerEndY = centerY + innerRadius * Math.sin(endRad);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    let pathData = `M ${outerStartX} ${outerStartY}`;\n    pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;\n    pathData += ` L ${innerEndX} ${innerEndY}`;\n    pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;\n    pathData += ` Z`;\n    const attributes = {\n        d: pathData,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n        'mix-blend-mode': 'normal',\n    };\n    if (existingFanElement) {\n        setAttributesIfNecessary(attributes, existingFanElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newFanElement = document.createElementNS(svgns, 'path');\n        if (dataId !== '') {\n            newFanElement.setAttribute('data-id', dataId);\n        }\n        if (zIndex !== undefined) {\n            newFanElement.style.zIndex = zIndex.toString();\n        }\n        setNewAttributesIfValid(attributes, newFanElement);\n        svgDrawingHelper.appendNode(newFanElement, svgNodeHash);\n    }\n}\nexport default drawFan;\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","export function setAttributesIfNecessary(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const currentValue = svgNode.getAttribute(key);\n        const newValue = attributes[key];\n        if (newValue === undefined || newValue === '') {\n            svgNode.removeAttribute(key);\n        }\n        else if (currentValue !== newValue) {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setAttributesIfNecessary;\n","export function setNewAttributesIfValid(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const newValue = attributes[key];\n        if (newValue !== undefined && newValue !== '') {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setNewAttributesIfValid;\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\nconst onImageRendered = function (evt) {\n    triggerAnnotationRender(evt.detail.element);\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, onImageRendered);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, onImageRendered);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.KEY_DOWN, keyDown);\n    element.addEventListener(Events.KEY_UP, keyUp);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.KEY_DOWN, keyDown);\n    element.removeEventListener(Events.KEY_UP, keyUp);\n};\nconst keyboardToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default keyboardToolEventDispatcher;\n","import Events from '../enums/Events';\nimport { mouseClick, mouseDown, mouseDownActivate, mouseDoubleClick, mouseDrag, mouseMove, mouseUp, mouseWheel, } from './mouseEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.MOUSE_CLICK, mouseClick);\n    element.addEventListener(Events.MOUSE_DOWN, mouseDown);\n    element.addEventListener(Events.MOUSE_DOWN_ACTIVATE, mouseDownActivate);\n    element.addEventListener(Events.MOUSE_DOUBLE_CLICK, mouseDoubleClick);\n    element.addEventListener(Events.MOUSE_DRAG, mouseDrag);\n    element.addEventListener(Events.MOUSE_MOVE, mouseMove);\n    element.addEventListener(Events.MOUSE_UP, mouseUp);\n    element.addEventListener(Events.MOUSE_WHEEL, mouseWheel);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.MOUSE_CLICK, mouseClick);\n    element.removeEventListener(Events.MOUSE_DOWN, mouseDown);\n    element.removeEventListener(Events.MOUSE_DOWN_ACTIVATE, mouseDownActivate);\n    element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, mouseDoubleClick);\n    element.removeEventListener(Events.MOUSE_DRAG, mouseDrag);\n    element.removeEventListener(Events.MOUSE_MOVE, mouseMove);\n    element.removeEventListener(Events.MOUSE_UP, mouseUp);\n    element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel);\n};\nconst mouseToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default mouseToolEventDispatcher;\n","import Events from '../enums/Events';\nimport { touchStart, touchStartActivate, touchDrag, touchEnd, touchTap, touchPress, } from './touchEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.TOUCH_START, touchStart);\n    element.addEventListener(Events.TOUCH_START_ACTIVATE, touchStartActivate);\n    element.addEventListener(Events.TOUCH_DRAG, touchDrag);\n    element.addEventListener(Events.TOUCH_END, touchEnd);\n    element.addEventListener(Events.TOUCH_TAP, touchTap);\n    element.addEventListener(Events.TOUCH_PRESS, touchPress);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.TOUCH_START, touchStart);\n    element.removeEventListener(Events.TOUCH_START_ACTIVATE, touchStartActivate);\n    element.removeEventListener(Events.TOUCH_DRAG, touchDrag);\n    element.removeEventListener(Events.TOUCH_END, touchEnd);\n    element.removeEventListener(Events.TOUCH_PRESS, touchPress);\n};\nconst touchToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default touchToolEventDispatcher;\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, { mouseDoubleClickIgnoreListener, } from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\nfunction disable(element) {\n    element.removeEventListener('dblclick', mouseDoubleClickListener);\n    element.removeEventListener('mousedown', mouseDownListener);\n    element.removeEventListener('mousemove', mouseMoveListener);\n    element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n        capture: true,\n    });\n}\nfunction enable(element) {\n    disable(element);\n    element.addEventListener('dblclick', mouseDoubleClickListener);\n    element.addEventListener('mousedown', mouseDownListener);\n    element.addEventListener('mousemove', mouseMoveListener);\n    element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n        capture: true,\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\nfunction disable(element) {\n    preventGhostClick.disable(element);\n    element.removeEventListener('touchstart', touchStartListener);\n}\nfunction enable(element) {\n    disable(element);\n    preventGhostClick.enable(element);\n    element.addEventListener('touchstart', touchStartListener, {\n        passive: false,\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import wheelListener from './wheelListener';\nfunction enable(element) {\n    disable(element);\n    element.addEventListener('wheel', wheelListener, { passive: false });\n}\nfunction disable(element) {\n    element.removeEventListener('wheel', wheelListener);\n}\nexport default {\n    enable,\n    disable,\n};\n","import { VolumeViewport, getEnabledElementByViewportId, StackViewport, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nimport { performVolumeLabelmapUpdate } from './performVolumeLabelmapUpdate';\nimport { performStackLabelmapUpdate } from './performStackLabelmapUpdate';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { getViewportIdsWithSegmentation } from '../../../stateManagement/segmentation/getViewportIdsWithSegmentation';\nconst onLabelmapSegmentationDataModified = function (evt) {\n    const { segmentationId, modifiedSlicesToUse } = evt.detail;\n    const { representationData } = getSegmentation(segmentationId);\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    const hasVolumeViewport = viewportIds.some((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        return viewport instanceof VolumeViewport;\n    });\n    const hasStackViewport = viewportIds.some((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        return viewport instanceof StackViewport;\n    });\n    const hasBothStackAndVolume = hasVolumeViewport && hasStackViewport;\n    viewportIds.forEach((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        if (viewport instanceof VolumeViewport) {\n            performVolumeLabelmapUpdate({\n                modifiedSlicesToUse: hasBothStackAndVolume ? [] : modifiedSlicesToUse,\n                representationData,\n                type: SegmentationRepresentations.Labelmap,\n            });\n        }\n        if (viewport instanceof StackViewport) {\n            performStackLabelmapUpdate({\n                viewportIds,\n                segmentationId,\n            });\n        }\n    });\n};\nexport default onLabelmapSegmentationDataModified;\n","import { cache } from '@cornerstonejs/core';\nexport function performVolumeLabelmapUpdate({ modifiedSlicesToUse, representationData, type, }) {\n    const segmentationVolume = cache.getVolume(representationData[type].volumeId);\n    if (!segmentationVolume) {\n        console.warn('segmentation not found in cache');\n        return;\n    }\n    const { imageData, vtkOpenGLTexture } = segmentationVolume;\n    let slicesToUpdate;\n    if (modifiedSlicesToUse?.length > 0) {\n        slicesToUpdate = modifiedSlicesToUse;\n    }\n    else {\n        const numSlices = imageData.getDimensions()[2];\n        slicesToUpdate = [...Array(numSlices).keys()];\n    }\n    slicesToUpdate.forEach((i) => {\n        vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n    imageData.modified();\n}\n","import { cache, utilities as csUtils, VolumeViewport, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nimport { getLabelmapActorEntries } from '../../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/getSegmentationRepresentation';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nexport function performStackLabelmapUpdate({ viewportIds, segmentationId, }) {\n    viewportIds.forEach((viewportId) => {\n        let representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n        representations.forEach((representation) => {\n            if (representation.segmentationId !== segmentationId) {\n                return;\n            }\n            const enabledElement = getEnabledElementByViewportId(viewportId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            if (viewport instanceof VolumeViewport) {\n                return;\n            }\n            const actorEntries = getLabelmapActorEntries(viewportId, segmentationId);\n            if (!actorEntries?.length) {\n                return;\n            }\n            actorEntries.forEach((actorEntry, i) => {\n                const segImageData = actorEntry.actor.getMapper().getInputData();\n                const currentSegmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n                const segmentationImage = cache.getImage(currentSegmentationImageIds[i]);\n                segImageData.modified();\n                csUtils.updateVTKImageDataWithCornerstoneImage(segImageData, segmentationImage);\n            });\n        });\n    });\n}\n","import { triggerSegmentationRenderBySegmentationId } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport onLabelmapSegmentationDataModified from './labelmap/onLabelmapSegmentationDataModified';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nconst onSegmentationDataModified = function (evt) {\n    const { segmentationId } = evt.detail;\n    const { representationData } = getSegmentation(segmentationId);\n    if (representationData.Labelmap) {\n        onLabelmapSegmentationDataModified(evt);\n    }\n    triggerSegmentationRenderBySegmentationId(segmentationId);\n};\nexport default onSegmentationDataModified;\n","import { triggerSegmentationRenderBySegmentationId } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nconst segmentationModifiedListener = function (evt) {\n    const { segmentationId } = evt.detail;\n    triggerSegmentationRenderBySegmentationId(segmentationId);\n};\nexport default segmentationModifiedListener;\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        let shouldTriggerSegmentationRender = false;\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                shouldTriggerSegmentationRender = true;\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        if (shouldTriggerSegmentationRender) {\n            triggerSegmentationRender(viewportId);\n        }\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport getViewportsForAnnotation from '../../../utilities/getViewportsForAnnotation';\nimport { getAllAnnotations } from '../../../stateManagement/annotation/annotationState';\nimport { areSameSegment, isContourSegmentationAnnotation, } from '../../../utilities/contourSegmentation';\nimport { getToolGroupForViewport } from '../../../store/ToolGroupManager';\nimport { findAllIntersectingContours } from '../../../utilities/contourSegmentation/getIntersectingAnnotations';\nimport { processMultipleIntersections } from '../../../utilities/contourSegmentation/mergeMultipleAnnotations';\nimport { convertContourPolylineToCanvasSpace, createPolylineHole, combinePolylines, } from '../../../utilities/contourSegmentation/sharedOperations';\nimport { Events } from '../../../enums';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default async function contourSegmentationCompletedListener(evt) {\n    const sourceAnnotation = evt.detail\n        .annotation;\n    if (!isContourSegmentationAnnotation(sourceAnnotation)) {\n        return;\n    }\n    const viewport = getViewport(sourceAnnotation);\n    const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(viewport, sourceAnnotation);\n    if (!contourSegmentationAnnotations.length) {\n        triggerEvent(eventTarget, Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {\n            element: viewport.element,\n            sourceAnnotation,\n        });\n        return;\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const intersectingContours = findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations);\n    if (!intersectingContours.length) {\n        triggerEvent(eventTarget, Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {\n            element: viewport.element,\n            sourceAnnotation,\n        });\n        return;\n    }\n    if (intersectingContours.length > 1) {\n        processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours);\n        return;\n    }\n    const { targetAnnotation, targetPolyline, isContourHole } = intersectingContours[0];\n    if (isContourHole) {\n        const { contourHoleProcessingEnabled = false } = evt.detail;\n        if (!contourHoleProcessingEnabled) {\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction isFreehandContourSegToolRegisteredForViewport(viewport, silent = false) {\n    const toolName = 'PlanarFreehandContourSegmentationTool';\n    const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n    let errorMessage;\n    if (!toolGroup) {\n        errorMessage = `ToolGroup not found for viewport ${viewport.id}`;\n    }\n    else if (!toolGroup.hasTool(toolName)) {\n        errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;\n    }\n    else if (!toolGroup.getToolOptions(toolName)) {\n        errorMessage = `Tool ${toolName} must be in active/passive state in ${toolGroup.id} toolGroup`;\n    }\n    if (errorMessage && !silent) {\n        console.warn(errorMessage);\n    }\n    return !errorMessage;\n}\nfunction getViewport(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    const viewportWithToolRegistered = viewports.find((viewport) => isFreehandContourSegToolRegisteredForViewport(viewport, true));\n    return viewportWithToolRegistered ?? viewports[0];\n}\nfunction getValidContourSegmentationAnnotations(viewport, sourceAnnotation) {\n    const { annotationUID: sourceAnnotationUID } = sourceAnnotation;\n    const allAnnotations = getAllAnnotations();\n    return allAnnotations.filter((targetAnnotation) => targetAnnotation.annotationUID &&\n        targetAnnotation.annotationUID !== sourceAnnotationUID &&\n        isContourSegmentationAnnotation(targetAnnotation) &&\n        areSameSegment(targetAnnotation, sourceAnnotation) &&\n        viewport.isReferenceViewable(targetAnnotation.metadata));\n}\n","import * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationCompleted } from './contourSegmentation';\nexport default function annotationCompletedListener(evt) {\n    const annotation = evt.detail.annotation;\n    if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n        contourSegmentationCompleted(evt);\n    }\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nfunction annotationSelectionListener(evt) {\n    const deselectedAnnotation = evt.detail.removed;\n    if (!deselectedAnnotation.length) {\n        return;\n    }\n    const renderingEngines = getRenderingEngines();\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getViewports();\n        const viewportIds = viewports.map((vp) => vp.id);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    });\n}\nexport default annotationSelectionListener;\n","import triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nfunction annotationModifiedListener(evt) {\n    const { viewportId } = evt.detail;\n    triggerAnnotationRenderForViewportIds([viewportId]);\n}\nexport default annotationModifiedListener;\n","import * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationRemoved } from './contourSegmentation';\nexport default function annotationRemovedListener(evt) {\n    const annotation = evt.detail.annotation;\n    if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n        contourSegmentationRemoved(evt);\n    }\n}\n","import { removeContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\nexport default function contourSegmentationRemovedListener(evt) {\n    const annotation = evt.detail.annotation;\n    removeContourSegmentationAnnotation(annotation);\n}\n","import { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nconst segmentationRepresentationModifiedListener = function (evt) {\n    const { viewportId } = evt.detail;\n    triggerSegmentationRender(viewportId);\n};\nexport default segmentationRepresentationModifiedListener;\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport { annotationCompletedListener, annotationRemovedListener, annotationSelectionListener, annotationModifiedListener, segmentationDataModifiedEventListener, segmentationModifiedListener, } from './eventListeners';\nimport { annotationInterpolationEventDispatcher } from './eventDispatchers';\nimport * as ToolGroupManager from './store/ToolGroupManager';\nimport { defaultSegmentationStateManager } from './stateManagement/segmentation/SegmentationStateManager';\nimport segmentationRepresentationModifiedListener from './eventListeners/segmentation/segmentationRepresentationModifiedListener';\nimport { setConfig } from './config';\nlet csToolsInitialized = false;\nexport function init(defaultConfiguration = {}) {\n    if (csToolsInitialized) {\n        return;\n    }\n    setConfig(defaultConfiguration);\n    _addCornerstoneEventListeners();\n    _addCornerstoneToolsEventListeners();\n    csToolsInitialized = true;\n}\nexport function destroy() {\n    _removeCornerstoneEventListeners();\n    _removeCornerstoneToolsEventListeners();\n    ToolGroupManager.destroy();\n    resetCornerstoneToolsState();\n    const annotationManager = getAnnotationManager();\n    const segmentationStateManager = defaultSegmentationStateManager;\n    annotationManager.restoreAnnotations({});\n    segmentationStateManager.resetState();\n    csToolsInitialized = false;\n}\nfunction _addCornerstoneEventListeners() {\n    _removeCornerstoneEventListeners();\n    const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n    const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n    eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n    eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n    annotationInterpolationEventDispatcher.enable();\n}\nfunction _removeCornerstoneEventListeners() {\n    const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n    const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n    eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n    eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n    annotationInterpolationEventDispatcher.disable();\n}\nfunction _addCornerstoneToolsEventListeners() {\n    _removeCornerstoneToolsEventListeners();\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_COMPLETED, annotationCompletedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_MODIFIED, annotationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_REMOVED, annotationRemovedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_MODIFIED, segmentationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener);\n}\nfunction _removeCornerstoneToolsEventListeners() {\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_COMPLETED, annotationCompletedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_MODIFIED, annotationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_MODIFIED, segmentationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener);\n}\nexport default init;\n","import { getEnabledElement, triggerEvent, getRenderingEngine, } from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../../enums';\nimport { draw as drawSvg } from '../../drawingSvg';\nimport getToolsWithModesForElement from '../../utilities/getToolsWithModesForElement';\nconst { Active, Passive, Enabled } = ToolModes;\nclass AnnotationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._renderFlaggedViewports = () => {\n            this._throwIfDestroyed();\n            const elements = Array.from(this._viewportElements.values());\n            for (let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                if (this._needsRender.has(element)) {\n                    this._triggerRender(element);\n                    this._needsRender.delete(element);\n                    if (this._needsRender.size === 0) {\n                        break;\n                    }\n                }\n            }\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            this._render();\n        };\n        this._viewportElements = new Map();\n    }\n    addViewportElement(viewportId, element) {\n        this._viewportElements.set(viewportId, element);\n    }\n    removeViewportElement(viewportId, element) {\n        this._viewportElements.delete(viewportId);\n        this._needsRender.delete(element);\n        this._reset();\n    }\n    renderViewport(element) {\n        this._setViewportsToBeRenderedNextFrame([element]);\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setAllViewportsToBeRenderedNextFrame() {\n        const elements = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            this._needsRender.add(element);\n        });\n        this._renderFlaggedViewports();\n    }\n    _setViewportsToBeRenderedNextFrame(elements) {\n        const elementsEnabled = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            if (elementsEnabled.indexOf(element) !== -1) {\n                this._needsRender.add(element);\n            }\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedViewports);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(element) {\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const renderingEngine = getRenderingEngine(enabledElement.renderingEngineId);\n        if (!renderingEngine) {\n            console.warn('rendering Engine has been destroyed');\n            return;\n        }\n        const enabledTools = getToolsWithModesForElement(element, [\n            Active,\n            Passive,\n            Enabled,\n        ]);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const eventDetail = {\n            element,\n            renderingEngineId,\n            viewportId,\n        };\n        drawSvg(element, (svgDrawingHelper) => {\n            let anyRendered = false;\n            const handleDrawSvg = (tool) => {\n                if (tool.renderAnnotation) {\n                    const rendered = tool.renderAnnotation(enabledElement, svgDrawingHelper);\n                    anyRendered = anyRendered || rendered;\n                }\n            };\n            enabledTools.forEach(handleDrawSvg);\n            if (anyRendered) {\n                triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n            }\n        });\n    }\n    _reset() {\n        window.cancelAnimationFrame(this._animationFrameHandle);\n        this._needsRender.clear();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._setAllViewportsToBeRenderedNextFrame();\n    }\n}\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\nexport { annotationRenderingEngine };\n","import { Enums, eventTarget, getEnabledElement, utilities, } from '@cornerstonejs/core';\nclass FrameOfReferenceSpecificAnnotationManager {\n    constructor(uid) {\n        this.getGroupKey = (annotationGroupSelector) => {\n            if (typeof annotationGroupSelector === 'string') {\n                return annotationGroupSelector;\n            }\n            const element = annotationGroupSelector;\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID');\n            }\n            return enabledElement.FrameOfReferenceUID;\n        };\n        this._imageVolumeModifiedHandler = (evt) => {\n            const eventDetail = evt.detail;\n            const { FrameOfReferenceUID } = eventDetail;\n            const annotations = this.annotations;\n            const frameOfReferenceSpecificAnnotations = annotations[FrameOfReferenceUID];\n            if (!frameOfReferenceSpecificAnnotations) {\n                return;\n            }\n            Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                toolSpecificAnnotations.forEach((annotation) => {\n                    const invalidated = annotation.invalidated;\n                    if (invalidated !== undefined) {\n                        annotation.invalidated = true;\n                    }\n                });\n            });\n        };\n        this.getFramesOfReference = () => {\n            return Object.keys(this.annotations);\n        };\n        this.getAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (!annotations[groupKey]) {\n                return [];\n            }\n            if (toolName) {\n                return annotations[groupKey][toolName]\n                    ? annotations[groupKey][toolName]\n                    : [];\n            }\n            return annotations[groupKey];\n        };\n        this.getAnnotation = (annotationUID) => {\n            const annotations = this.annotations;\n            for (const frameOfReferenceUID in annotations) {\n                const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n                for (const toolName in frameOfReferenceAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n                    for (const annotation of toolSpecificAnnotations) {\n                        if (annotationUID === annotation.annotationUID) {\n                            return annotation;\n                        }\n                    }\n                }\n            }\n        };\n        this.getNumberOfAnnotations = (groupKey, toolName) => {\n            const annotations = this.getAnnotations(groupKey, toolName);\n            if (!annotations.length) {\n                return 0;\n            }\n            if (toolName) {\n                return annotations.length;\n            }\n            let total = 0;\n            for (const toolName in annotations) {\n                total += annotations[toolName].length;\n            }\n            return total;\n        };\n        this.addAnnotation = (annotation, groupKey) => {\n            const { metadata } = annotation;\n            const { FrameOfReferenceUID, toolName } = metadata;\n            groupKey = groupKey || FrameOfReferenceUID;\n            const annotations = this.annotations;\n            let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            if (!frameOfReferenceSpecificAnnotations) {\n                annotations[groupKey] = {};\n                frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            }\n            let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            if (!toolSpecificAnnotations) {\n                frameOfReferenceSpecificAnnotations[toolName] = [];\n                toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            }\n            if (this.preprocessingFn) {\n                annotation = this.preprocessingFn(annotation);\n            }\n            toolSpecificAnnotations.push(annotation);\n        };\n        this.removeAnnotation = (annotationUID) => {\n            const { annotations } = this;\n            for (const groupKey in annotations) {\n                const groupAnnotations = annotations[groupKey];\n                for (const toolName in groupAnnotations) {\n                    const toolAnnotations = groupAnnotations[toolName];\n                    const index = toolAnnotations.findIndex((annotation) => annotation.annotationUID === annotationUID);\n                    if (index !== -1) {\n                        toolAnnotations.splice(index, 1);\n                        if (toolAnnotations.length === 0) {\n                            delete groupAnnotations[toolName];\n                        }\n                    }\n                }\n                if (Object.keys(groupAnnotations).length === 0) {\n                    delete annotations[groupKey];\n                }\n            }\n        };\n        this.removeAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            const removedAnnotations = [];\n            if (!annotations[groupKey]) {\n                return removedAnnotations;\n            }\n            if (toolName) {\n                const annotationsForTool = annotations[groupKey][toolName];\n                for (const annotation of annotationsForTool) {\n                    this.removeAnnotation(annotation.annotationUID);\n                    removedAnnotations.push(annotation);\n                }\n            }\n            else {\n                for (const toolName in annotations[groupKey]) {\n                    const annotationsForTool = annotations[groupKey][toolName];\n                    for (const annotation of annotationsForTool) {\n                        this.removeAnnotation(annotation.annotationUID);\n                        removedAnnotations.push(annotation);\n                    }\n                }\n            }\n            return removedAnnotations;\n        };\n        this.saveAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    return;\n                }\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                return structuredClone(toolSpecificAnnotations);\n            }\n            else if (groupKey) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                return structuredClone(frameOfReferenceSpecificAnnotations);\n            }\n            return structuredClone(annotations);\n        };\n        this.restoreAnnotations = (state, groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    annotations[groupKey] = {};\n                    frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                }\n                frameOfReferenceSpecificAnnotations[toolName] = state;\n            }\n            else if (groupKey) {\n                annotations[groupKey] = state;\n            }\n            else {\n                this.annotations = structuredClone(state);\n            }\n        };\n        this.getAllAnnotations = () => {\n            return Object.values(this.annotations)\n                .map((frameOfReferenceSpecificAnnotations) => Object.values(frameOfReferenceSpecificAnnotations))\n                .flat(2);\n        };\n        this.getNumberOfAllAnnotations = () => {\n            let count = 0;\n            const annotations = this.annotations;\n            for (const groupKey in annotations) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                for (const toolName in frameOfReferenceSpecificAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                    count += toolSpecificAnnotations.length;\n                }\n            }\n            return count;\n        };\n        this.removeAllAnnotations = () => {\n            const removedAnnotations = [];\n            for (const annotation of this.getAllAnnotations()) {\n                this.removeAnnotation(annotation.annotationUID);\n                removedAnnotations.push(annotation);\n            }\n            return removedAnnotations;\n        };\n        if (!uid) {\n            uid = utilities.uuidv4();\n        }\n        this.annotations = {};\n        this.uid = uid;\n        eventTarget.addEventListener(Enums.Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedHandler);\n    }\n    setPreprocessingFn(preprocessingFn) {\n        this.preprocessingFn = preprocessingFn;\n    }\n}\nconst defaultFrameOfReferenceSpecificAnnotationManager = new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './annotationState';\nconst globalLockedAnnotationUIDsSet = new Set();\nfunction setAnnotationLocked(annotationUID, locked = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (locked) {\n            lock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n        else {\n            unlock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction unlockAllAnnotations() {\n    const detail = makeEventDetail();\n    clearLockedAnnotationsSet(globalLockedAnnotationUIDsSet, detail);\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction getAnnotationsLocked() {\n    return Array.from(globalLockedAnnotationUIDsSet);\n}\nfunction isAnnotationLocked(annotationUID) {\n    return globalLockedAnnotationUIDsSet.has(annotationUID);\n}\nfunction getAnnotationsLockedCount() {\n    return globalLockedAnnotationUIDsSet.size;\n}\nfunction checkAndSetAnnotationLocked(annotationUID) {\n    const isLocked = isAnnotationLocked(annotationUID);\n    setAnnotationLocked(annotationUID, isLocked);\n    return isLocked;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        locked: [],\n    });\n}\nfunction lock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (!lockedAnnotationUIDsSet.has(annotationUID)) {\n        lockedAnnotationUIDsSet.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = true;\n        }\n    }\n}\nfunction unlock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (lockedAnnotationUIDsSet.delete(annotationUID)) {\n        detail.removed.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = false;\n        }\n    }\n}\nfunction clearLockedAnnotationsSet(lockedAnnotationUIDsSet, detail) {\n    lockedAnnotationUIDsSet.forEach((annotationUID) => {\n        unlock(annotationUID, lockedAnnotationUIDsSet, detail);\n    });\n}\nfunction publish(detail, lockedAnnotationUIDsSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        lockedAnnotationUIDsSet.forEach((item) => void detail.locked.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n    }\n}\nexport { setAnnotationLocked, getAnnotationsLocked, getAnnotationsLockedCount, unlockAllAnnotations, isAnnotationLocked, checkAndSetAnnotationLocked, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './annotationState';\nconst selectedAnnotationUIDs = new Set();\nfunction setAnnotationSelected(annotationUID, selected = true, preserveSelected = false) {\n    if (selected) {\n        selectAnnotation(annotationUID, preserveSelected);\n    }\n    else {\n        deselectAnnotation(annotationUID);\n    }\n}\nfunction selectAnnotation(annotationUID, preserveSelected = false) {\n    const detail = makeEventDetail();\n    if (!preserveSelected) {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n        selectedAnnotationUIDs.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction deselectAnnotation(annotationUID) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (selectedAnnotationUIDs.delete(annotationUID)) {\n            detail.removed.push(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            annotation.isSelected = false;\n        }\n    }\n    else {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelected() {\n    return Array.from(selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelectedByToolName(toolName) {\n    return getAnnotationsSelected().filter((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        return annotation?.metadata?.toolName === toolName;\n    });\n}\nfunction isAnnotationSelected(annotationUID) {\n    return selectedAnnotationUIDs.has(annotationUID);\n}\nfunction getAnnotationsSelectedCount() {\n    return selectedAnnotationUIDs.size;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        selection: [],\n    });\n}\nfunction clearSelectionSet(selectionSet, detail) {\n    selectionSet.forEach((value) => {\n        if (selectionSet.delete(value)) {\n            detail.removed.push(value);\n            const annotation = getAnnotation(value);\n            if (annotation) {\n                annotation.isSelected = false;\n            }\n        }\n    });\n}\nfunction publish(detail, selectionSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        selectionSet.forEach((item) => void detail.selection.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n    }\n}\nexport { setAnnotationSelected, getAnnotationsSelected, getAnnotationsSelectedByToolName, getAnnotationsSelectedCount, deselectAnnotation, isAnnotationSelected, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, } from './helpers/state';\nlet defaultManager;\nfunction getAnnotationManager() {\n    return defaultManager;\n}\nfunction setAnnotationManager(annotationManager) {\n    defaultManager = annotationManager;\n}\nfunction getAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getAnnotations(groupKey, toolName);\n}\nfunction getAnnotation(annotationUID) {\n    const manager = getAnnotationManager();\n    return manager.getAnnotation(annotationUID);\n}\nfunction getAllAnnotations() {\n    const manager = getAnnotationManager();\n    return manager.getAllAnnotations();\n}\nfunction clearParentAnnotation(annotation) {\n    const { annotationUID: childUID, parentAnnotationUID } = annotation;\n    if (!parentAnnotationUID) {\n        return;\n    }\n    const parentAnnotation = getAnnotation(parentAnnotationUID);\n    const childUIDIndex = parentAnnotation.childAnnotationUIDs.indexOf(childUID);\n    parentAnnotation.childAnnotationUIDs.splice(childUIDIndex, 1);\n    annotation.parentAnnotationUID = undefined;\n}\nfunction addChildAnnotation(parentAnnotation, childAnnotation) {\n    const { annotationUID: parentUID } = parentAnnotation;\n    const { annotationUID: childUID } = childAnnotation;\n    clearParentAnnotation(childAnnotation);\n    if (!parentAnnotation.childAnnotationUIDs) {\n        parentAnnotation.childAnnotationUIDs = [];\n    }\n    if (parentAnnotation.childAnnotationUIDs.includes(childUID)) {\n        return;\n    }\n    parentAnnotation.childAnnotationUIDs.push(childUID);\n    childAnnotation.parentAnnotationUID = parentUID;\n}\nfunction getParentAnnotation(annotation) {\n    return annotation.parentAnnotationUID\n        ? getAnnotation(annotation.parentAnnotationUID)\n        : undefined;\n}\nfunction getChildAnnotations(annotation) {\n    return (annotation.childAnnotationUIDs?.map((childAnnotationUID) => getAnnotation(childAnnotationUID)) ?? []);\n}\nfunction addAnnotation(annotation, annotationGroupSelector) {\n    if (!annotation.annotationUID) {\n        annotation.annotationUID = csUtils.uuidv4();\n    }\n    const manager = getAnnotationManager();\n    if (annotationGroupSelector instanceof HTMLDivElement) {\n        const groupKey = manager.getGroupKey(annotationGroupSelector);\n        manager.addAnnotation(annotation, groupKey);\n        triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n    }\n    else {\n        manager.addAnnotation(annotation, undefined);\n        triggerAnnotationAddedForFOR(annotation);\n    }\n    return annotation.annotationUID;\n}\nfunction getNumberOfAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getNumberOfAnnotations(groupKey, toolName);\n}\nfunction removeAnnotation(annotationUID) {\n    if (!annotationUID) {\n        return;\n    }\n    const manager = getAnnotationManager();\n    const annotation = manager.getAnnotation(annotationUID);\n    if (!annotation) {\n        return;\n    }\n    annotation.childAnnotationUIDs?.forEach((childAnnotationUID) => removeAnnotation(childAnnotationUID));\n    manager.removeAnnotation(annotationUID);\n    triggerAnnotationRemoved({ annotation, annotationManagerUID: manager.uid });\n}\nfunction removeAllAnnotations() {\n    const manager = getAnnotationManager();\n    const removedAnnotations = manager.removeAllAnnotations();\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction removeAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    const removedAnnotations = manager.removeAnnotations(groupKey, toolName);\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction invalidateAnnotation(annotation) {\n    let currAnnotation = annotation;\n    while (currAnnotation) {\n        currAnnotation.invalidated = true;\n        currAnnotation = currAnnotation.parentAnnotationUID\n            ? getAnnotation(currAnnotation.parentAnnotationUID)\n            : undefined;\n    }\n}\nexport { getAllAnnotations, getAnnotations, getParentAnnotation, getChildAnnotations, clearParentAnnotation, addChildAnnotation, getNumberOfAnnotations, addAnnotation, removeAnnotation, removeAnnotations, removeAllAnnotations, setAnnotationManager, getAnnotationManager, invalidateAnnotation, getAnnotation, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { isAnnotationSelected, deselectAnnotation, } from './annotationSelection';\nimport { getAnnotation } from './annotationState';\nconst globalHiddenAnnotationUIDsSet = new Set();\nfunction setAnnotationVisibility(annotationUID, visible = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (visible) {\n            show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n        else {\n            hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail);\n}\nfunction showAllAnnotations() {\n    const detail = makeEventDetail();\n    globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n        show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    });\n    publish(detail);\n}\nfunction isAnnotationVisible(annotationUID) {\n    const annotation = getAnnotation(annotationUID);\n    if (annotation) {\n        return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    }\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        lastVisible: [],\n        lastHidden: [],\n        hidden: [],\n    });\n}\nfunction show(annotationUID, annotationUIDsSet, detail) {\n    if (annotationUIDsSet.delete(annotationUID)) {\n        detail.lastVisible.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        annotation.isVisible = true;\n    }\n}\nfunction hide(annotationUID, annotationUIDsSet, detail) {\n    if (!annotationUIDsSet.has(annotationUID)) {\n        annotationUIDsSet.add(annotationUID);\n        if (isAnnotationSelected(annotationUID)) {\n            deselectAnnotation(annotationUID);\n        }\n        detail.lastHidden.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        annotation.isVisible = false;\n    }\n}\nfunction publish(detail) {\n    if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n        globalHiddenAnnotationUIDsSet.forEach((item) => void detail.hidden.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n    }\n}\nfunction checkAndSetAnnotationVisibility(annotationUID) {\n    const isVisible = !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    setAnnotationVisibility(annotationUID, isVisible);\n    return isVisible;\n}\nexport { setAnnotationVisibility, showAllAnnotations, isAnnotationVisible, checkAndSetAnnotationVisibility, };\n","class ToolStyle {\n    constructor() {\n        const defaultConfig = {\n            color: 'rgb(255, 255, 0)',\n            colorHighlighted: 'rgb(0, 255, 0)',\n            colorSelected: 'rgb(0, 220, 0)',\n            colorLocked: 'rgb(209, 193, 90)',\n            lineWidth: '1',\n            lineDash: '',\n            shadow: true,\n            textBoxVisibility: true,\n            textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            textBoxFontSize: '14px',\n            textBoxColor: 'rgb(255, 255, 0)',\n            textBoxColorHighlighted: 'rgb(0, 255, 0)',\n            textBoxColorSelected: 'rgb(0, 255, 0)',\n            textBoxColorLocked: 'rgb(209, 193, 90)',\n            textBoxBackground: '',\n            textBoxLinkLineWidth: '1',\n            textBoxLinkLineDash: '2,3',\n            textBoxShadow: true,\n            markerSize: '10',\n            angleArcLineDash: '',\n        };\n        this._initializeConfig(defaultConfig);\n    }\n    getAnnotationToolStyles(annotationUID) {\n        return this.config.annotations && this.config.annotations[annotationUID];\n    }\n    getViewportToolStyles(viewportId) {\n        return this.config.viewports && this.config.viewports[viewportId];\n    }\n    getToolGroupToolStyles(toolGroupId) {\n        return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n    }\n    getDefaultToolStyles() {\n        return this.config.default;\n    }\n    setAnnotationStyles(annotationUID, styles) {\n        let annotationSpecificStyles = this.config.annotations;\n        if (!annotationSpecificStyles) {\n            this.config = {\n                ...this.config,\n                annotations: {},\n            };\n            annotationSpecificStyles = this.config.annotations;\n        }\n        annotationSpecificStyles[annotationUID] = styles;\n    }\n    setViewportToolStyles(viewportId, styles) {\n        let viewportSpecificStyles = this.config.viewports;\n        if (!viewportSpecificStyles) {\n            this.config = {\n                ...this.config,\n                viewports: {},\n            };\n            viewportSpecificStyles = this.config.viewports;\n        }\n        viewportSpecificStyles[viewportId] = styles;\n    }\n    setToolGroupToolStyles(toolGroupId, styles) {\n        let toolGroupSpecificStyles = this.config.toolGroups;\n        if (!toolGroupSpecificStyles) {\n            this.config = {\n                ...this.config,\n                toolGroups: {},\n            };\n            toolGroupSpecificStyles = this.config.toolGroups;\n        }\n        toolGroupSpecificStyles[toolGroupId] = styles;\n    }\n    setDefaultToolStyles(styles) {\n        this.config.default = styles;\n    }\n    getStyleProperty(toolStyle, specifications) {\n        const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n        return this._getToolStyle(toolStyle, annotationUID, viewportId, toolGroupId, toolName);\n    }\n    _getToolStyle(property, annotationUID, viewportId, toolGroupId, toolName) {\n        if (annotationUID) {\n            const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);\n            if (annotationToolStyles) {\n                if (annotationToolStyles[property] !== undefined) {\n                    return annotationToolStyles[property];\n                }\n            }\n        }\n        if (viewportId) {\n            const viewportToolStyles = this.getViewportToolStyles(viewportId);\n            if (viewportToolStyles) {\n                if (viewportToolStyles[toolName] &&\n                    viewportToolStyles[toolName][property] !== undefined) {\n                    return viewportToolStyles[toolName][property];\n                }\n                if (viewportToolStyles.global &&\n                    viewportToolStyles.global[property] !== undefined) {\n                    return viewportToolStyles.global[property];\n                }\n            }\n        }\n        if (toolGroupId) {\n            const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);\n            if (toolGroupToolStyles) {\n                if (toolGroupToolStyles[toolName] &&\n                    toolGroupToolStyles[toolName][property] !== undefined) {\n                    return toolGroupToolStyles[toolName][property];\n                }\n                if (toolGroupToolStyles.global &&\n                    toolGroupToolStyles.global[property] !== undefined) {\n                    return toolGroupToolStyles.global[property];\n                }\n            }\n        }\n        const globalStyles = this.getDefaultToolStyles();\n        if (globalStyles[toolName] &&\n            globalStyles[toolName][property] !== undefined) {\n            return globalStyles[toolName][property];\n        }\n        if (globalStyles.global && globalStyles.global[property] !== undefined) {\n            return globalStyles.global[property];\n        }\n    }\n    _initializeConfig(config) {\n        const toolStyles = {};\n        for (const name in config) {\n            toolStyles[name] = config[name];\n        }\n        this.config = {\n            default: {\n                global: toolStyles,\n            },\n        };\n    }\n}\nconst toolStyle = new ToolStyle();\nexport default toolStyle;\n","import toolStyle from './ToolStyle';\nfunction getHierarchalPropertyStyles(property, state, mode) {\n    const list = [`${property}`];\n    if (state) {\n        list.push(`${list[0]}${state}`);\n    }\n    if (mode) {\n        list.push(`${list[list.length - 1]}${mode}`);\n    }\n    return list;\n}\nfunction getStyleProperty(property, styleSpecifier, state, mode) {\n    const alternatives = getHierarchalPropertyStyles(property, state, mode);\n    for (let i = alternatives.length - 1; i >= 0; --i) {\n        const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n        if (style !== undefined) {\n            return style;\n        }\n    }\n}\nexport { getStyleProperty };\n","import { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\nfunction getState(annotation) {\n    if (annotation) {\n        if (annotation.data && annotation.highlighted) {\n            return AnnotationStyleStates.Highlighted;\n        }\n        if (isAnnotationSelected(annotation.annotationUID)) {\n            return AnnotationStyleStates.Selected;\n        }\n        if (isAnnotationLocked(annotation.annotationUID)) {\n            return AnnotationStyleStates.Locked;\n        }\n        if (annotation.data && annotation.autoGenerated) {\n            return AnnotationStyleStates.AutoGenerated;\n        }\n    }\n    return AnnotationStyleStates.Default;\n}\nexport default getState;\n","import { getStyleProperty } from './helpers';\nfunction getFont(styleSpecifier, state, mode) {\n    const fontSize = getStyleProperty('textBoxFontSize', styleSpecifier, state, mode);\n    const fontFamily = getStyleProperty('textBoxFontFamily', styleSpecifier, state, mode);\n    return `${fontSize}px ${fontFamily}`;\n}\nexport default getFont;\n","import { getEnabledElement, triggerEvent, eventTarget, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { Events, ChangeTypes } from '../../../enums';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nfunction triggerAnnotationAddedForElement(annotation, element) {\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewportId } = enabledElement;\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId: renderingEngine.id,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationAddedForFOR(annotation) {\n    const { toolName } = annotation.metadata;\n    const toolGroups = getToolGroupsWithToolName(toolName);\n    if (!toolGroups.length) {\n        return;\n    }\n    const viewportsToRender = [];\n    toolGroups.forEach((toolGroup) => {\n        toolGroup.viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const { FrameOfReferenceUID } = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n                viewportsToRender.push(viewportInfo);\n            }\n        });\n    });\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = { annotation };\n    if (!viewportsToRender.length) {\n        triggerEvent(eventTarget, eventType, eventDetail);\n        return;\n    }\n    viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n        eventDetail.viewportId = viewportId;\n        eventDetail.renderingEngineId = renderingEngineId;\n        triggerEvent(eventTarget, eventType, eventDetail);\n    });\n}\nfunction triggerAnnotationRemoved(eventDetail) {\n    const eventType = Events.ANNOTATION_REMOVED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationModified(annotation, element, changeType = ChangeTypes.HandlesUpdated) {\n    const enabledElement = element && getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement || {};\n    const eventType = Events.ANNOTATION_MODIFIED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n        changeType,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationCompleted(annotation) {\n    const eventDetail = {\n        annotation,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled = false) {\n    const eventDetail = {\n        annotation,\n        contourHoleProcessingEnabled,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction _triggerAnnotationCompleted(eventDetail) {\n    const eventType = Events.ANNOTATION_COMPLETED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, triggerAnnotationModified, triggerAnnotationCompleted, triggerContourAnnotationCompleted, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { getAnnotation } from './annotationState';\nexport default class AnnotationGroup {\n    constructor() {\n        this.annotationUIDs = new Set();\n        this._isVisible = true;\n        this.visibleFilter = this.unboundVisibleFilter.bind(this);\n    }\n    unboundVisibleFilter(uid) {\n        return !this._isVisible || !this.annotationUIDs.has(uid);\n    }\n    has(uid) {\n        return this.annotationUIDs.has(uid);\n    }\n    setVisible(isVisible = true, baseEvent, filter) {\n        if (this._isVisible === isVisible) {\n            return;\n        }\n        this._isVisible = isVisible;\n        this.annotationUIDs.forEach((uid) => {\n            const annotation = getAnnotation(uid);\n            if (!annotation) {\n                this.annotationUIDs.delete(uid);\n                return;\n            }\n            if (annotation.isVisible === isVisible) {\n                return;\n            }\n            if (!isVisible && filter?.(uid) === false) {\n                return;\n            }\n            annotation.isVisible = isVisible;\n            const eventDetail = {\n                ...baseEvent,\n                annotation,\n            };\n            triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n        });\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n    findNearby(uid, direction) {\n        const uids = [...this.annotationUIDs];\n        if (uids.length === 0) {\n            return null;\n        }\n        if (!uid) {\n            return uids[direction === 1 ? 0 : uids.length - 1];\n        }\n        const index = uids.indexOf(uid);\n        if (index === -1 ||\n            index + direction < 0 ||\n            index + direction >= uids.length) {\n            return null;\n        }\n        return uids[index + direction];\n    }\n    add(...annotationUIDs) {\n        annotationUIDs.forEach((annotationUID) => this.annotationUIDs.add(annotationUID));\n    }\n    remove(...annotationUIDs) {\n        annotationUIDs.forEach((annotationUID) => this.annotationUIDs.delete(annotationUID));\n    }\n    clear() {\n        this.annotationUIDs.clear();\n    }\n}\n","import * as config from './config';\nimport * as locking from './annotationLocking';\nimport * as selection from './annotationSelection';\nimport * as annotationState from './annotationState';\nimport * as annotationStateHelpers from './helpers/state';\nimport * as visibility from './annotationVisibility';\nimport FrameOfReferenceSpecificAnnotationManager from './FrameOfReferenceSpecificAnnotationManager';\nimport AnnotationGroup from './AnnotationGroup';\nimport { resetAnnotationManager } from './resetAnnotationManager';\nconst state = {\n    ...annotationState,\n    ...annotationStateHelpers,\n    resetAnnotationManager,\n};\nexport { config, locking, selection, state, visibility, FrameOfReferenceSpecificAnnotationManager, AnnotationGroup, };\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._pendingRenderQueue = [];\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            if (this._pendingRenderQueue.length > 0) {\n                const nextViewportIds = this._pendingRenderQueue.shift();\n                if (nextViewportIds && nextViewportIds.length > 0) {\n                    this._setViewportsToBeRenderedNextFrame(nextViewportIds);\n                }\n            }\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        if (this._animationFrameSet) {\n            this._pendingRenderQueue.push(viewportIds);\n            return;\n        }\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            const { label, locked, cachedStats, active, ...rest } = segment;\n            const normalizedSegment = {\n                segmentIndex: Number(segmentIndex),\n                label: label ?? `Segment ${segmentIndex}`,\n                locked: locked ?? false,\n                cachedStats: cachedStats ?? {},\n                active: active ?? false,\n                ...rest,\n            };\n            normalizedSegments[segmentIndex] = normalizedSegment;\n        });\n    }\n    else if (type === SegmentationRepresentations.Contour) {\n        normalizeContourSegments(normalizedSegments, data);\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeContourSegments(normalizedSegments, contourData) {\n    const { geometryIds } = contourData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { getSegmentation } from './getSegmentation';\nexport function getActiveSegmentIndex(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation) {\n        const activeSegmentIndex = Object.keys(segmentation.segments).find((segmentIndex) => segmentation.segments[segmentIndex].active);\n        return activeSegmentIndex ? Number(activeSegmentIndex) : undefined;\n    }\n    return undefined;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getColorLUT(index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getColorLUT(index);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n    const imageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n    return imageIds[0];\n}\nexport function getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n}\nexport function getLabelmapImageIdsForImageId(imageId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getLabelmapImageIdsForImageId(imageId, segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentation(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportIdsWithSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportSegRepresentations = state.viewportSegRepresentations;\n    const viewportIdsWithSegmentation = Object.entries(viewportSegRepresentations)\n        .filter(([, viewportSegmentations]) => viewportSegmentations.some((segRep) => segRep.segmentationId === segmentationId))\n        .map(([viewportId]) => viewportId);\n    return viewportIdsWithSegmentation;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nfunction getActorEntry(viewportId, segmentationId, filterFn) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngine, viewport } = enabledElement;\n    if (!renderingEngine || !viewport) {\n        return;\n    }\n    const actors = viewport.getActors();\n    const filteredActors = actors.filter(filterFn);\n    return filteredActors.length > 0 ? filteredActors[0] : undefined;\n}\nfunction getActorEntries(viewportId, filterFn) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngine, viewport } = enabledElement;\n    if (!renderingEngine || !viewport) {\n        return;\n    }\n    const actors = viewport.getActors();\n    const filteredActors = actors.filter(filterFn);\n    return filteredActors.length > 0 ? filteredActors : undefined;\n}\nexport function getLabelmapActorUID(viewportId, segmentationId) {\n    const actorEntry = getLabelmapActorEntry(viewportId, segmentationId);\n    return actorEntry?.uid;\n}\nexport function getLabelmapActorEntries(viewportId, segmentationId) {\n    return getActorEntries(viewportId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations.Labelmap}`));\n}\nexport function getLabelmapActorEntry(viewportId, segmentationId) {\n    return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations.Labelmap}`));\n}\nexport function getSurfaceActorEntry(viewportId, segmentationId, segmentIndex) {\n    return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID ===\n        getSurfaceRepresentationUID(segmentationId, segmentIndex));\n}\nexport function getSurfaceRepresentationUID(segmentationId, segmentIndex) {\n    return `${segmentationId}-${SegmentationRepresentations.Surface}-${segmentIndex}`;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nexport function updateSegmentations(segmentationUpdateArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationUpdateArray.forEach((segmentationUpdate) => {\n        segmentationStateManager.updateSegmentation(segmentationUpdate.segmentationId, segmentationUpdate.payload);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentationUpdate.segmentationId);\n        }\n    });\n}\n","import { getSegmentationRepresentation, getSegmentationRepresentations, } from '../getSegmentationRepresentation';\nimport { setSegmentationRepresentationVisibility as _setSegmentationRepresentationVisibility } from '../setSegmentationRepresentationVisibility';\nimport { getSegmentationRepresentationVisibility as _getSegmentationRepresentationVisibility } from '../getSegmentationRepresentationVisibility';\nimport { triggerSegmentationRenderBySegmentationId } from '../SegmentationRenderingEngine';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction setSegmentationRepresentationVisibility(viewportId, specifier, visibility) {\n    const representations = getSegmentationRepresentations(viewportId, specifier);\n    if (!representations) {\n        return;\n    }\n    representations.forEach((representation) => {\n        _setSegmentationRepresentationVisibility(viewportId, {\n            segmentationId: representation.segmentationId,\n            type: representation.type,\n        }, visibility);\n    });\n}\nfunction getSegmentationRepresentationVisibility(viewportId, specifier) {\n    return _getSegmentationRepresentationVisibility(viewportId, specifier);\n}\nfunction setSegmentIndexVisibility(viewportId, specifier, segmentIndex, visibility) {\n    const representations = getSegmentationRepresentations(viewportId, specifier);\n    if (!representations) {\n        return;\n    }\n    representations.forEach((representation) => {\n        if (!representation.segments || !representation.segments[segmentIndex]) {\n            return;\n        }\n        representation.segments[segmentIndex].visible = visibility;\n    });\n    triggerSegmentationRenderBySegmentationId(specifier.segmentationId);\n    triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId);\n}\nfunction getSegmentIndexVisibility(viewportId, specifier, segmentIndex) {\n    const hiddenSegments = getHiddenSegmentIndices(viewportId, specifier);\n    return !hiddenSegments.has(segmentIndex);\n}\nfunction getHiddenSegmentIndices(viewportId, specifier) {\n    const representation = getSegmentationRepresentation(viewportId, specifier);\n    if (!representation) {\n        return new Set();\n    }\n    const segmentsHidden = Object.entries(representation.segments).reduce((acc, [segmentIndex, segment]) => {\n        if (!segment.visible) {\n            acc.add(Number(segmentIndex));\n        }\n        return acc;\n    }, new Set());\n    return segmentsHidden;\n}\nexport { setSegmentationRepresentationVisibility, getSegmentationRepresentationVisibility, setSegmentIndexVisibility, getSegmentIndexVisibility, getHiddenSegmentIndices, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setSegmentationRepresentationVisibility(viewportId, specifier, visible);\n}\n","import { getSegmentations } from '../getSegmentations';\nimport { getViewportSegmentations } from '../getViewportSegmentations';\nimport { triggerSegmentationRender } from '../SegmentationRenderingEngine';\nimport { segmentationStyle } from '../SegmentationStyle';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction getStyle(specifier) {\n    return segmentationStyle.getStyle(specifier);\n}\nfunction setStyle(specifier, style) {\n    segmentationStyle.setStyle(specifier, style);\n    if (!specifier.viewportId && !specifier.segmentationId) {\n        const segmentations = getSegmentations();\n        segmentations.forEach((segmentation) => {\n            triggerSegmentationRender(segmentation.segmentationId);\n        });\n    }\n    triggerSegmentationRepresentationModified(specifier.viewportId, specifier.segmentationId, specifier.type);\n}\nfunction setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n    segmentationStyle.setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations);\n    triggerSegmentationRender(viewportId);\n    const segmentations = getViewportSegmentations(viewportId);\n    segmentations.forEach((segmentation) => {\n        triggerSegmentationRepresentationModified(viewportId, segmentation.segmentationId);\n    });\n}\nfunction getRenderInactiveSegmentations(viewportId) {\n    return segmentationStyle.getRenderInactiveSegmentations(viewportId);\n}\nfunction resetToGlobalStyle() {\n    segmentationStyle.resetToGlobalStyle();\n    triggerSegmentationRender();\n}\nfunction hasCustomStyle(specifier) {\n    return segmentationStyle.hasCustomStyle(specifier);\n}\nexport { getStyle, setStyle, setRenderInactiveSegmentations, getRenderInactiveSegmentations, resetToGlobalStyle, hasCustomStyle, };\n","import { getAnnotation } from '../../annotation/annotationState';\nexport function getAnnotationMapFromSegmentation(contourRepresentationData, options = {}) {\n    const annotationMap = contourRepresentationData.annotationUIDsMap;\n    const segmentIndices = options.segmentIndices?.length\n        ? options.segmentIndices\n        : Array.from(annotationMap.keys());\n    const annotationUIDsInSegmentMap = new Map();\n    segmentIndices.forEach((index) => {\n        const annotationUIDsInSegment = annotationMap.get(index);\n        let uids = Array.from(annotationUIDsInSegment);\n        uids = uids.filter((uid) => !getAnnotation(uid).parentAnnotationUID);\n        const annotations = uids.map((uid) => {\n            const annotation = getAnnotation(uid);\n            const hasChildAnnotations = annotation.childAnnotationUIDs?.length;\n            const childPolylinesInformation = hasChildAnnotations &&\n                annotation.childAnnotationUIDs.map((childUID) => {\n                    const childAnnotation = getAnnotation(childUID);\n                    return {\n                        polyline: childAnnotation.data.contour.polyline,\n                        isClosed: childAnnotation.data.contour.closed,\n                    };\n                });\n            const holesClosed = hasChildAnnotations &&\n                childPolylinesInformation.map((childInfo) => childInfo.isClosed);\n            const childPolylines = hasChildAnnotations &&\n                childPolylinesInformation.map((childInfo) => childInfo.polyline);\n            return {\n                polyline: annotation.data.contour.polyline,\n                isClosed: annotation.data.contour.closed,\n                annotationUID: annotation.annotationUID,\n                referencedImageId: annotation.metadata.referencedImageId,\n                holesPolyline: childPolylines,\n                holesUIDs: annotation.childAnnotationUIDs,\n                holesClosed,\n            };\n        });\n        annotationUIDsInSegmentMap.set(index, annotations);\n    });\n    return { segmentIndices, annotationUIDsInSegmentMap };\n}\n","import { getAnnotationMapFromSegmentation, } from './getAnnotationMapFromSegmentation';\nfunction closePolyline(polyline, closed) {\n    if (!polyline || polyline.length === 0) {\n        return [];\n    }\n    if (!closed) {\n        return [...polyline];\n    }\n    const firstPoint = polyline[0];\n    const lastPoint = polyline[polyline.length - 1];\n    const isAlreadyClosed = firstPoint[0] === lastPoint[0] &&\n        firstPoint[1] === lastPoint[1] &&\n        firstPoint[2] === lastPoint[2];\n    if (isAlreadyClosed) {\n        return [...polyline];\n    }\n    return [...polyline, firstPoint];\n}\nexport function getPolylinesMap(contourRepresentationData, segmentIndex) {\n    const { annotationUIDsInSegmentMap } = getAnnotationMapFromSegmentation(contourRepresentationData);\n    if (!annotationUIDsInSegmentMap.has(segmentIndex)) {\n        console.warn(`No contour information found for segmentIndex ${segmentIndex}`);\n        return;\n    }\n    const polylines = new Map();\n    const annotationsInfo = annotationUIDsInSegmentMap.get(segmentIndex);\n    for (const annotationInfo of annotationsInfo) {\n        polylines.set(annotationInfo.annotationUID, closePolyline(annotationInfo.polyline, annotationInfo.isClosed));\n        for (let i = 0; i < annotationInfo.holesUIDs?.length; i++) {\n            polylines.set(annotationInfo.holesUIDs[i], closePolyline(annotationInfo.holesPolyline[i], annotationInfo.holesClosed[i]));\n        }\n    }\n    return polylines;\n}\n","import { getSegmentation } from '../getSegmentation';\nimport { convertContourPolylineToCanvasSpace } from '../../../utilities/contourSegmentation';\nimport { getViewportsAssociatedToSegmentation, getViewportWithMatchingViewPlaneNormal, } from './getViewportAssociatedToSegmentation';\nimport { getPolylinesMap } from './getPolylineMap';\nimport { getAnnotation } from '../../annotation/annotationState';\nexport function extractSegmentPolylines(segmentationId, segmentIndex) {\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    if (!annotationUIDsMap.get(segmentIndex)) {\n        return;\n    }\n    const polyLinesMap = getPolylinesMap(contourRepresentationData, segmentIndex);\n    if (!polyLinesMap) {\n        return;\n    }\n    const keys = Array.from(polyLinesMap?.keys());\n    const polylinesCanvasMap = new Map();\n    for (const key of keys) {\n        const annotation = getAnnotation(key);\n        const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);\n        polylinesCanvasMap.set(key, convertContourPolylineToCanvasSpace(polyLinesMap.get(key), viewport));\n    }\n    return polylinesCanvasMap;\n}\n","import { getAnnotation, invalidateAnnotation, } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport decimate from '../../../utilities/math/polyline/decimate';\nimport { getViewportsAssociatedToSegmentation, getViewportWithMatchingViewPlaneNormal, } from './getViewportAssociatedToSegmentation';\nexport default function decimateContours(segmentationId, segmentIndex, options = { epsilon: 0.1 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    if (!viewports) {\n        console.warn('No viewport associated to the segmentation found');\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    for (const annotationUID of keys) {\n        const annotation = getAnnotation(annotationUID);\n        if (!annotation) {\n            continue;\n        }\n        const polylineCanvas = polylinesCanvasMap.get(annotationUID);\n        const decimatedPolyline2D = decimate(polylineCanvas, options.epsilon);\n        const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);\n        if (viewport) {\n            annotation.data.contour.polyline = decimatedPolyline2D.map((point2D) => viewport.canvasToWorld(point2D));\n            invalidateAnnotation(annotation);\n        }\n    }\n}\n","import { removeContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\nimport { clearParentAnnotation, removeAnnotation, } from '../../annotation/annotationState';\nexport function removeCompleteContourAnnotation(annotation) {\n    if (!annotation) {\n        return;\n    }\n    if (annotation.parentAnnotationUID) {\n        clearParentAnnotation(annotation);\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n}\n","import { findContourHoles } from '../../../utilities/contours';\nimport { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport { removeCompleteContourAnnotation } from './removeCompleteContourAnnotation';\nexport default function removeContourHoles(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const holeDetectionResults = findContourHoles(polylines);\n    if (holeDetectionResults?.length > 0) {\n        holeDetectionResults.forEach((hole) => {\n            hole.holeIndexes.forEach((index) => {\n                const annotation = getAnnotation(keys[index]);\n                removeCompleteContourAnnotation(annotation);\n            });\n        });\n    }\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport findIslands from '../../../utilities/contours/findIslands';\nimport { removeCompleteContourAnnotation } from './removeCompleteContourAnnotation';\nexport default function removeContourIslands(segmentationId, segmentIndex, options = { threshold: 3 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const islands = findIslands(polylines, options.threshold);\n    if (islands?.length > 0) {\n        islands.forEach((index) => {\n            const annotation = getAnnotation(keys[index]);\n            removeCompleteContourAnnotation(annotation);\n        });\n    }\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport interpolateSegmentPoints from '../../../utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints';\nexport default function smoothContours(segmentationId, segmentIndex, options = { knotsRatioPercentage: 30 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        console.warn(`No contours found for segmentation ${segmentationId}`);\n        return;\n    }\n    if (!annotationUIDsMap.has(segmentIndex)) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const annotationList = annotationUIDsMap.get(segmentIndex);\n    annotationList.forEach((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        if (!annotation) {\n            return;\n        }\n        const polyline = annotation.data.contour.polyline;\n        if (!polyline || polyline.length < 3) {\n            return;\n        }\n        const smoothedPolyline = interpolateSegmentPoints(polyline, 0, polyline.length - 1, options.knotsRatioPercentage);\n        annotation.data.contour.polyline = smoothedPolyline;\n    });\n}\n","import { findContourHoles } from '../../../utilities/contours';\nimport { getAnnotation, clearParentAnnotation, } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nexport default function convertContourHoles(segmentationId, segmentIndex, targetSegmentationId, targetSegmentationIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const { annotationUIDsMap } = segmentation?.representationData.Contour || {};\n    if (!annotationUIDsMap) {\n        console.warn(`No annotation map found for segmentation ${segmentationId}`);\n        return;\n    }\n    const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        console.warn(`Segmentation index ${segmentIndex} has no annotations in segmentation ${segmentationId}`);\n        return;\n    }\n    let targetUIDsSet;\n    if (targetSegmentationId && typeof targetSegmentationIndex === 'number') {\n        const targetSegmentation = getSegmentation(targetSegmentationId);\n        if (!targetSegmentation) {\n            console.warn(`Target segmentation ${targetSegmentationId} does not exist.`);\n            return;\n        }\n        if (!targetSegmentation.representationData.Contour) {\n            console.warn(`No contour representation found for target segmentation ${targetSegmentationId}`);\n            return;\n        }\n        targetUIDsSet =\n            targetSegmentation.representationData.Contour.annotationUIDsMap.get(targetSegmentationIndex);\n        if (!targetUIDsSet) {\n            targetUIDsSet = new Set();\n            targetSegmentation.representationData.Contour.annotationUIDsMap.set(targetSegmentationIndex, targetUIDsSet);\n        }\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const holeDetectionResults = findContourHoles(polylines);\n    if (holeDetectionResults?.length > 0) {\n        holeDetectionResults.forEach((hole) => {\n            hole.holeIndexes.forEach((index) => {\n                const annotation = getAnnotation(keys[index]);\n                clearParentAnnotation(annotation);\n                if (targetSegmentationId &&\n                    typeof targetSegmentationIndex === 'number') {\n                    targetUIDsSet.add(annotation.annotationUID);\n                }\n                else {\n                    annotationsUIDsSet.add(annotation.annotationUID);\n                }\n            });\n        });\n    }\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { triggerSegmentationDataModified } from '../triggerSegmentationEvents';\nexport function clearSegmentValue(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation.representationData.Labelmap) {\n        const { representationData } = segmentation;\n        const labelmapData = representationData.Labelmap;\n        if ('imageIds' in labelmapData || 'volumeId' in labelmapData) {\n            const items = 'imageIds' in labelmapData\n                ? labelmapData.imageIds.map((imageId) => cache.getImage(imageId))\n                : [cache.getVolume(labelmapData.volumeId)];\n            items.forEach((item) => {\n                if (!item) {\n                    return;\n                }\n                const { voxelManager } = item;\n                voxelManager.forEach(({ value, index }) => {\n                    if (value === segmentIndex) {\n                        voxelManager.setAtIndex(index, 0);\n                    }\n                });\n            });\n        }\n        triggerSegmentationDataModified(segmentationId);\n    }\n    else {\n        throw new Error('Invalid segmentation type, only labelmap is supported right now');\n    }\n}\n","import { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentation } from './getSegmentation';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { setActiveSegmentIndex } from './segmentIndex';\nimport { updateSegmentations } from './updateSegmentations';\nexport function removeSegment(segmentationId, segmentIndex, options = {\n    setNextSegmentAsActive: true,\n}) {\n    clearSegmentValue(segmentationId, segmentIndex);\n    const isThisSegmentActive = getActiveSegmentIndex(segmentationId) === segmentIndex;\n    const segmentation = getSegmentation(segmentationId);\n    const { segments } = segmentation;\n    delete segments[segmentIndex];\n    const updatedSegments = {\n        ...segments,\n    };\n    updateSegmentations([\n        {\n            segmentationId,\n            payload: {\n                segments: updatedSegments,\n            },\n        },\n    ]);\n    if (isThisSegmentActive && options.setNextSegmentAsActive) {\n        const segmentIndices = Object.keys(segments)\n            .map(Number)\n            .sort((a, b) => a - b);\n        const currentIndex = segmentIndices.indexOf(segmentIndex);\n        const nextSegmentIndex = segmentIndices[currentIndex + 1];\n        const previousSegmentIndex = segmentIndices[currentIndex - 1];\n        if (nextSegmentIndex !== undefined) {\n            setActiveSegmentIndex(segmentationId, nextSegmentIndex);\n        }\n        else if (previousSegmentIndex !== undefined) {\n            setActiveSegmentIndex(segmentationId, previousSegmentIndex);\n        }\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            delete representation.segments[segmentIndex];\n        });\n    });\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getLabelmapImageIds(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentation = getSegmentation(segmentationId);\n    return segmentationStateManager.getLabelmapImageIds(segmentation.representationData);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport * as utilities from './utilities';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, utilities, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getActiveSegmentIndex, setActiveSegmentIndex } from './segmentIndex';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (!getActiveSegmentIndex(segmentationId)) {\n        const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n        if (segmentation) {\n            const segmentKeys = Object.keys(segmentation.segments);\n            if (segmentKeys.length > 0) {\n                const firstSegmentIndex = segmentKeys.map((k) => Number(k)).sort()[0];\n                setActiveSegmentIndex(segmentationId, firstSegmentIndex);\n            }\n        }\n    }\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getSegmentation } from '../getSegmentation';\nexport function getAnnotationsUIDMapFromSegmentation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        ?.Contour;\n    if (!contourRepresentationData) {\n        return;\n    }\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    return annotationUIDsMap;\n}\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { getViewportIdsWithSegmentation } from '../getViewportIdsWithSegmentation';\nexport function getViewportsAssociatedToSegmentation(segmentationId) {\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    if (viewportIds?.length === 0) {\n        return [];\n    }\n    const viewports = [];\n    for (const viewportId of viewportIds) {\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (viewport) {\n            viewports.push(viewport);\n        }\n    }\n    return viewports;\n}\nexport function getViewportAssociatedToSegmentation(segmentationId) {\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    return viewports.length > 0 ? viewports[0] : undefined;\n}\nexport function getViewportWithMatchingViewPlaneNormal(viewports, annotation, dotThreshold = 0.99) {\n    const annotationViewPlaneNormal = annotation.metadata?.viewPlaneNormal;\n    if (!annotationViewPlaneNormal || !Array.isArray(annotationViewPlaneNormal)) {\n        return undefined;\n    }\n    const normalizedAnnotationNormal = vec3.create();\n    vec3.normalize(normalizedAnnotationNormal, annotationViewPlaneNormal);\n    for (const viewport of viewports) {\n        const camera = viewport.getCamera();\n        if (!camera?.viewPlaneNormal) {\n            continue;\n        }\n        const normalizedCameraNormal = vec3.create();\n        vec3.normalize(normalizedCameraNormal, camera.viewPlaneNormal);\n        const dotProduct = vec3.dot(normalizedAnnotationNormal, normalizedCameraNormal);\n        if (Math.abs(dotProduct) >= dotThreshold) {\n            return viewport;\n        }\n    }\n    return undefined;\n}\n","import { getRenderingEngine, getEnabledElement, eventTarget, Enums, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nclass Synchronizer {\n    constructor(synchronizerId, eventName, eventHandler, options) {\n        this._viewportOptions = {};\n        this._onEvent = (evt) => {\n            if (this._ignoreFiredEvents === true) {\n                return;\n            }\n            if (!this._targetViewports.length) {\n                return;\n            }\n            const enabledElement = this._eventSource === 'element'\n                ? getEnabledElement(evt.currentTarget)\n                : getEnabledElementByViewportId(evt.detail?.viewportId);\n            if (!enabledElement) {\n                return;\n            }\n            const { renderingEngineId, viewportId } = enabledElement;\n            if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n                return;\n            }\n            this.fireEvent({\n                renderingEngineId,\n                viewportId,\n            }, evt);\n        };\n        this._enabled = true;\n        this._eventName = eventName;\n        this._eventHandler = eventHandler;\n        this._ignoreFiredEvents = false;\n        this._sourceViewports = [];\n        this._targetViewports = [];\n        this._options = options || {};\n        this._eventSource = this._options.eventSource || 'element';\n        this._auxiliaryEvents = this._options.auxiliaryEvents || [];\n        this.id = synchronizerId;\n    }\n    isDisabled() {\n        return !this._enabled || !this._hasSourceElements();\n    }\n    setOptions(viewportId, options = {}) {\n        this._viewportOptions[viewportId] = options;\n    }\n    setEnabled(enabled) {\n        this._enabled = enabled;\n    }\n    getOptions(viewportId) {\n        return this._viewportOptions[viewportId];\n    }\n    add(viewportInfo) {\n        this.addTarget(viewportInfo);\n        this.addSource(viewportInfo);\n    }\n    addSource(viewportInfo) {\n        if (_containsViewport(this._sourceViewports, viewportInfo)) {\n            return;\n        }\n        const { renderingEngineId, viewportId } = viewportInfo;\n        const viewport = getRenderingEngine(renderingEngineId).getViewport(viewportId);\n        if (!viewport) {\n            console.warn(`Synchronizer.addSource: No viewport for ${renderingEngineId} ${viewportId}`);\n            return;\n        }\n        const eventSource = this._eventSource === 'element' ? viewport.element : eventTarget;\n        eventSource.addEventListener(this._eventName, this._onEvent.bind(this));\n        this._auxiliaryEvents.forEach(({ name, source }) => {\n            const target = source === 'element' ? viewport.element : eventTarget;\n            target.addEventListener(name, this._onEvent.bind(this));\n        });\n        this._updateDisableHandlers();\n        this._sourceViewports.push(viewportInfo);\n    }\n    addTarget(viewportInfo) {\n        if (_containsViewport(this._targetViewports, viewportInfo)) {\n            return;\n        }\n        this._targetViewports.push(viewportInfo);\n        this._updateDisableHandlers();\n    }\n    getSourceViewports() {\n        return this._sourceViewports;\n    }\n    getTargetViewports() {\n        return this._targetViewports;\n    }\n    destroy() {\n        this._sourceViewports.forEach((s) => this.removeSource(s));\n        this._targetViewports.forEach((t) => this.removeTarget(t));\n    }\n    remove(viewportInfo) {\n        this.removeTarget(viewportInfo);\n        this.removeSource(viewportInfo);\n    }\n    removeSource(viewportInfo) {\n        const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n        if (index === -1) {\n            return;\n        }\n        const eventSource = this._eventSource === 'element'\n            ? this.getViewportElement(viewportInfo)\n            : eventTarget;\n        this._sourceViewports.splice(index, 1);\n        eventSource.removeEventListener(this._eventName, this._eventHandler);\n        this._auxiliaryEvents.forEach(({ name, source }) => {\n            const target = source === 'element'\n                ? this.getViewportElement(viewportInfo)\n                : eventTarget;\n            target.removeEventListener(name, this._eventHandler);\n        });\n        this._updateDisableHandlers();\n    }\n    removeTarget(viewportInfo) {\n        const index = _getViewportIndex(this._targetViewports, viewportInfo);\n        if (index === -1) {\n            return;\n        }\n        this._targetViewports.splice(index, 1);\n        this._updateDisableHandlers();\n    }\n    hasSourceViewport(renderingEngineId, viewportId) {\n        return _containsViewport(this._sourceViewports, {\n            renderingEngineId,\n            viewportId,\n        });\n    }\n    hasTargetViewport(renderingEngineId, viewportId) {\n        return _containsViewport(this._targetViewports, {\n            renderingEngineId,\n            viewportId,\n        });\n    }\n    fireEvent(sourceViewport, sourceEvent) {\n        if (this.isDisabled() || this._ignoreFiredEvents) {\n            return;\n        }\n        this._ignoreFiredEvents = true;\n        const promises = [];\n        try {\n            for (let i = 0; i < this._targetViewports.length; i++) {\n                const targetViewport = this._targetViewports[i];\n                const targetIsSource = sourceViewport.viewportId === targetViewport.viewportId;\n                if (targetIsSource) {\n                    continue;\n                }\n                const result = this._eventHandler(this, sourceViewport, targetViewport, sourceEvent, this._options);\n                if (result instanceof Promise) {\n                    promises.push(result);\n                }\n            }\n        }\n        catch (ex) {\n            console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n        }\n        finally {\n            if (promises.length) {\n                Promise.allSettled(promises).then(() => {\n                    this._ignoreFiredEvents = false;\n                });\n            }\n            else {\n                this._ignoreFiredEvents = false;\n            }\n        }\n    }\n    _hasSourceElements() {\n        return this._sourceViewports.length !== 0;\n    }\n    _updateDisableHandlers() {\n        const viewports = _getUniqueViewports(this._sourceViewports, this._targetViewports);\n        const _remove = this.remove.bind(this);\n        const disableHandler = (elementDisabledEvent) => {\n            _remove(elementDisabledEvent.detail.element);\n        };\n        viewports.forEach((vp) => {\n            const eventSource = this.getEventSource(vp);\n            if (!eventSource) {\n                return;\n            }\n            eventSource.removeEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n            eventSource.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n        });\n    }\n    getEventSource(viewportInfo) {\n        return this._eventSource === 'element'\n            ? this.getViewportElement(viewportInfo)\n            : eventTarget;\n    }\n    getViewportElement(viewportInfo) {\n        const { renderingEngineId, viewportId } = viewportInfo;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        if (!renderingEngine) {\n            return null;\n        }\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (!viewport) {\n            return null;\n        }\n        return viewport.element;\n    }\n}\nfunction _getUniqueViewports(vp1, vp2) {\n    const unique = [];\n    const vps = vp1.concat(vp2);\n    for (let i = 0; i < vps.length; i++) {\n        const vp = vps[i];\n        if (!unique.some((u) => vp.renderingEngineId === u.renderingEngineId &&\n            vp.viewportId === u.viewportId)) {\n            unique.push(vp);\n        }\n    }\n    return unique;\n}\nfunction _getViewportIndex(arr, vp) {\n    return arr.findIndex((ar) => vp.renderingEngineId === ar.renderingEngineId &&\n        vp.viewportId === ar.viewportId);\n}\nfunction _containsViewport(arr, vp) {\n    return arr.some((ar) => ar.renderingEngineId === vp.renderingEngineId &&\n        ar.viewportId === vp.viewportId);\n}\nexport default Synchronizer;\n","import { state } from '../state';\nimport Synchronizer, {} from './Synchronizer';\nfunction createSynchronizer(synchronizerId, eventName, eventHandler, options) {\n    const synchronizerWithSameIdExists = state.synchronizers.some((sync) => sync.id === synchronizerId);\n    if (synchronizerWithSameIdExists) {\n        throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n    }\n    const synchronizer = new Synchronizer(synchronizerId, eventName, eventHandler, options);\n    state.synchronizers.push(synchronizer);\n    return synchronizer;\n}\nexport default createSynchronizer;\n","import { state } from '../state';\nfunction destroy() {\n    while (state.synchronizers.length > 0) {\n        const synchronizer = state.synchronizers.pop();\n        synchronizer.destroy();\n    }\n}\nexport default destroy;\n","import { state } from '../state';\nfunction destroySynchronizer(synchronizerId) {\n    const synchronizerIndex = state.synchronizers.findIndex((sync) => sync.id === synchronizerId);\n    if (synchronizerIndex > -1) {\n        const synchronizer = state.synchronizers[synchronizerIndex];\n        synchronizer.destroy();\n        state.synchronizers.splice(synchronizerIndex, 1);\n    }\n}\nexport default destroySynchronizer;\n","import { state } from '../state';\nfunction getAllSynchronizers() {\n    return state.synchronizers;\n}\nexport default getAllSynchronizers;\n","import { state } from '../state';\nfunction getSynchronizer(synchronizerId) {\n    return state.synchronizers.find((s) => s.id === synchronizerId);\n}\nexport default getSynchronizer;\n","import { state } from '../state';\nfunction getSynchronizersForViewport(viewportId, renderingEngineId) {\n    const synchronizersFilteredByIds = [];\n    if (!renderingEngineId && !viewportId) {\n        throw new Error('At least one of renderingEngineId or viewportId should be given');\n    }\n    for (let i = 0; i < state.synchronizers.length; i++) {\n        const synchronizer = state.synchronizers[i];\n        const notDisabled = !synchronizer.isDisabled();\n        const hasSourceViewport = synchronizer.hasSourceViewport(renderingEngineId, viewportId);\n        const hasTargetViewport = synchronizer.hasTargetViewport(renderingEngineId, viewportId);\n        if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n            synchronizersFilteredByIds.push(synchronizer);\n        }\n    }\n    return synchronizersFilteredByIds;\n}\nexport default getSynchronizersForViewport;\n","import { state } from '../state';\nfunction getToolGroup(toolGroupId) {\n    return state.toolGroups.find((s) => s.id === toolGroupId);\n}\nexport default getToolGroup;\n","import { MouseBindings, ToolModes, Events } from '../../enums';\nimport get from 'lodash.get';\nimport { triggerEvent, eventTarget, getRenderingEngine, getRenderingEngines, getEnabledElementByIds, Settings, } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { state } from '../state';\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\nimport getToolGroup from './getToolGroup';\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\nconst PRIMARY_BINDINGS = [{ mouseButton: MouseBindings.Primary }];\nexport default class ToolGroup {\n    constructor(id) {\n        this.viewportsInfo = [];\n        this.toolOptions = {};\n        this.currentActivePrimaryToolName = null;\n        this.prevActivePrimaryToolName = null;\n        this.restoreToolOptions = {};\n        this._toolInstances = {};\n        this.id = id;\n    }\n    getViewportIds() {\n        return this.viewportsInfo.map(({ viewportId }) => viewportId);\n    }\n    getViewportsInfo() {\n        return this.viewportsInfo.slice();\n    }\n    getToolInstance(toolInstanceName) {\n        const toolInstance = this._toolInstances[toolInstanceName];\n        if (!toolInstance) {\n            console.warn(`'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`);\n            return;\n        }\n        return toolInstance;\n    }\n    getToolInstances() {\n        return this._toolInstances;\n    }\n    hasTool(toolName) {\n        return !!this._toolInstances[toolName];\n    }\n    addTool(toolName, configuration = {}) {\n        const toolDefinition = state.tools[toolName];\n        const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n        const localToolInstance = this.toolOptions[toolName];\n        if (!hasToolName) {\n            console.warn('Tool with configuration did not produce a toolName: ', configuration);\n            return;\n        }\n        if (!toolDefinition) {\n            console.warn(`'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`);\n            return;\n        }\n        if (localToolInstance) {\n            console.warn(`'${toolName}' is already registered for ToolGroup ${this.id}.`);\n            return;\n        }\n        const { toolClass: ToolClass } = toolDefinition;\n        const toolProps = {\n            name: toolName,\n            toolGroupId: this.id,\n            configuration,\n        };\n        const instantiatedTool = new ToolClass(toolProps);\n        this._toolInstances[toolName] = instantiatedTool;\n    }\n    addToolInstance(toolName, parentClassName, configuration = {}) {\n        let ToolClassToUse = state.tools[toolName]\n            ?.toolClass;\n        if (!ToolClassToUse) {\n            const ParentClass = state.tools[parentClassName]\n                .toolClass;\n            class ToolInstance extends ParentClass {\n            }\n            ToolInstance.toolName = toolName;\n            ToolClassToUse = ToolInstance;\n            state.tools[toolName] = {\n                toolClass: ToolInstance,\n            };\n        }\n        this.addTool(ToolClassToUse.toolName, configuration);\n    }\n    addViewport(viewportId, renderingEngineId) {\n        if (typeof viewportId !== 'string') {\n            throw new Error('viewportId must be defined and be a string');\n        }\n        const renderingEngineUIDToUse = this._findRenderingEngine(viewportId, renderingEngineId);\n        if (!this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)) {\n            this.viewportsInfo.push({\n                viewportId,\n                renderingEngineId: renderingEngineUIDToUse,\n            });\n        }\n        const toolName = this.getActivePrimaryMouseButtonTool();\n        this.setViewportsCursorByToolName(toolName);\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId: renderingEngineUIDToUse,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_ADDED, eventDetail);\n    }\n    removeViewports(renderingEngineId, viewportId) {\n        const indices = [];\n        this.viewportsInfo.forEach((vpInfo, index) => {\n            let match = false;\n            if (vpInfo.renderingEngineId === renderingEngineId) {\n                match = true;\n                if (viewportId && vpInfo.viewportId !== viewportId) {\n                    match = false;\n                }\n            }\n            if (match) {\n                indices.push(index);\n            }\n        });\n        if (indices.length) {\n            for (let i = indices.length - 1; i >= 0; i--) {\n                this.viewportsInfo.splice(indices[i], 1);\n            }\n        }\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_REMOVED, eventDetail);\n    }\n    setActiveStrategy(toolName, strategyName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool configuration.`);\n            return;\n        }\n        toolInstance.setActiveStrategy(strategyName);\n    }\n    setToolMode(toolName, mode, options = {}) {\n        if (!toolName) {\n            console.warn('setToolMode: toolName must be defined');\n            return;\n        }\n        if (mode === ToolModes.Active) {\n            this.setToolActive(toolName, options || this.restoreToolOptions[toolName]);\n            return;\n        }\n        if (mode === ToolModes.Passive) {\n            this.setToolPassive(toolName);\n            return;\n        }\n        if (mode === ToolModes.Enabled) {\n            this.setToolEnabled(toolName);\n            return;\n        }\n        if (mode === ToolModes.Disabled) {\n            this.setToolDisabled(toolName);\n            return;\n        }\n        console.warn('setToolMode: mode must be defined');\n    }\n    setToolActive(toolName, toolBindingsOptions = {}) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        if (!toolInstance) {\n            console.warn(`'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevBindings = this.toolOptions[toolName]\n            ? this.toolOptions[toolName].bindings\n            : [];\n        const newBindings = toolBindingsOptions.bindings\n            ? toolBindingsOptions.bindings\n            : [];\n        const bindingsToUse = [...prevBindings, ...newBindings].reduce((unique, binding) => {\n            const TouchBinding = binding.numTouchPoints !== undefined;\n            const MouseBinding = binding.mouseButton !== undefined;\n            if (!unique.some((obj) => hasSameBinding(obj, binding)) &&\n                (TouchBinding || MouseBinding)) {\n                unique.push(binding);\n            }\n            return unique;\n        }, []);\n        const toolOptions = {\n            bindings: bindingsToUse,\n            mode: Active,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        this._toolInstances[toolName].mode = Active;\n        if (!this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {\n            const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n            if (!activeToolIdentifier) {\n                const cursor = MouseCursor.getDefinedCursor('default');\n                this._setCursorForViewports(cursor);\n            }\n        }\n        else {\n            this.setViewportsCursorByToolName(toolName);\n        }\n        if (this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {\n            if (this.prevActivePrimaryToolName === null) {\n                this.prevActivePrimaryToolName = toolName;\n            }\n            else {\n                this.prevActivePrimaryToolName = this.currentActivePrimaryToolName;\n            }\n            this.currentActivePrimaryToolName = toolName;\n        }\n        if (typeof toolInstance.onSetToolActive === 'function') {\n            toolInstance.onSetToolActive();\n        }\n        this._renderViewports();\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_ACTIVATED, eventDetail);\n        this._triggerToolModeChangedEvent(toolName, Active, toolBindingsOptions);\n    }\n    setToolPassive(toolName, options) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevToolOptions = this.getToolOptions(toolName);\n        const toolOptions = Object.assign({\n            bindings: prevToolOptions ? prevToolOptions.bindings : [],\n        }, prevToolOptions, {\n            mode: Passive,\n        });\n        const matchBindings = Array.isArray(options?.removeAllBindings)\n            ? options.removeAllBindings\n            : this.getDefaultPrimaryBindings();\n        toolOptions.bindings = toolOptions.bindings.filter((binding) => options?.removeAllBindings !== true &&\n            !matchBindings.some((matchBinding) => hasSameBinding(binding, matchBinding)));\n        let mode = Passive;\n        if (toolOptions.bindings.length !== 0) {\n            mode = Active;\n            toolOptions.mode = mode;\n        }\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = mode;\n        if (typeof toolInstance.onSetToolPassive === 'function') {\n            toolInstance.onSetToolPassive();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Passive);\n    }\n    setToolEnabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Enabled,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Enabled;\n        if (typeof toolInstance.onSetToolEnabled === 'function') {\n            toolInstance.onSetToolEnabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Enabled);\n    }\n    setToolDisabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Disabled,\n        };\n        this.restoreToolOptions[toolName] = this.toolOptions[toolName];\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Disabled;\n        if (typeof toolInstance.onSetToolDisabled === 'function') {\n            toolInstance.onSetToolDisabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Disabled);\n    }\n    getToolOptions(toolName) {\n        const toolOptionsForTool = this.toolOptions[toolName];\n        if (toolOptionsForTool === undefined) {\n            return;\n        }\n        return toolOptionsForTool;\n    }\n    getActivePrimaryMouseButtonTool() {\n        return Object.keys(this.toolOptions).find((toolName) => {\n            const toolOptions = this.toolOptions[toolName];\n            return (toolOptions.mode === Active &&\n                this._hasMousePrimaryButtonBinding(toolOptions));\n        });\n    }\n    setViewportsCursorByToolName(toolName, strategyName) {\n        const cursor = this._getCursor(toolName, strategyName);\n        this._setCursorForViewports(cursor);\n    }\n    _getCursor(toolName, strategyName) {\n        let cursorName;\n        let cursor;\n        if (strategyName) {\n            cursorName = `${toolName}.${strategyName}`;\n            cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n            if (cursor) {\n                return cursor;\n            }\n        }\n        cursorName = `${toolName}`;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        cursorName = toolName;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        return MouseCursor.getDefinedCursor('default');\n    }\n    _setCursorForViewports(cursor) {\n        const runtimeSettings = Settings.getRuntimeSettings();\n        if (!runtimeSettings.get('useCursors')) {\n            return;\n        }\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            initElementCursor(viewport.element, cursor);\n        });\n    }\n    setToolConfiguration(toolName, configuration, overwrite) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return false;\n        }\n        let _configuration;\n        if (overwrite) {\n            _configuration = configuration;\n        }\n        else {\n            _configuration = Object.assign(toolInstance.configuration, configuration);\n        }\n        toolInstance.configuration = _configuration;\n        if (typeof toolInstance.onSetToolConfiguration === 'function') {\n            toolInstance.onSetToolConfiguration();\n        }\n        this._renderViewports();\n        return true;\n    }\n    getDefaultMousePrimary() {\n        return MouseBindings.Primary;\n    }\n    getDefaultPrimaryBindings() {\n        return PRIMARY_BINDINGS;\n    }\n    getToolConfiguration(toolName, configurationPath) {\n        if (this._toolInstances[toolName] === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return;\n        }\n        const _configuration = get(this._toolInstances[toolName].configuration, configurationPath) ||\n            this._toolInstances[toolName].configuration;\n        return utilities.deepClone(_configuration);\n    }\n    getPrevActivePrimaryToolName() {\n        return this.prevActivePrimaryToolName;\n    }\n    setActivePrimaryTool(toolName) {\n        const activeToolName = this.getCurrentActivePrimaryToolName();\n        this.setToolDisabled(activeToolName);\n        this.setToolActive(toolName, {\n            bindings: [{ mouseButton: MouseBindings.Primary }],\n        });\n    }\n    getCurrentActivePrimaryToolName() {\n        return this.currentActivePrimaryToolName;\n    }\n    clone(newToolGroupId, fnToolFilter = null) {\n        let toolGroup = getToolGroup(newToolGroupId);\n        if (toolGroup) {\n            console.debug(`ToolGroup ${newToolGroupId} already exists`);\n            return toolGroup;\n        }\n        toolGroup = new ToolGroup(newToolGroupId);\n        state.toolGroups.push(toolGroup);\n        fnToolFilter = fnToolFilter ?? (() => true);\n        Object.keys(this._toolInstances)\n            .filter(fnToolFilter)\n            .forEach((toolName) => {\n            const sourceToolInstance = this._toolInstances[toolName];\n            const sourceToolOptions = this.toolOptions[toolName];\n            const sourceToolMode = sourceToolInstance.mode;\n            toolGroup.addTool(toolName);\n            toolGroup.setToolMode(toolName, sourceToolMode, {\n                bindings: sourceToolOptions.bindings ?? [],\n            });\n        });\n        return toolGroup;\n    }\n    _hasMousePrimaryButtonBinding(toolOptions) {\n        const primaryBindings = this.getDefaultPrimaryBindings();\n        return toolOptions?.bindings?.some((binding) => primaryBindings.some((primary) => hasSameBinding(binding, primary)));\n    }\n    _renderViewports() {\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n        });\n    }\n    _triggerToolModeChangedEvent(toolName, mode, toolBindingsOptions) {\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            mode,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_MODE_CHANGED, eventDetail);\n    }\n    _findRenderingEngine(viewportId, renderingEngineId) {\n        const renderingEngines = getRenderingEngines();\n        if (renderingEngines?.length === 0) {\n            throw new Error('No rendering engines found.');\n        }\n        if (renderingEngineId) {\n            return renderingEngineId;\n        }\n        const matchingEngines = renderingEngines.filter((engine) => engine.getViewport(viewportId));\n        if (matchingEngines.length === 0) {\n            if (renderingEngines.length === 1) {\n                return renderingEngines[0].id;\n            }\n            throw new Error('No rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        if (matchingEngines.length > 1) {\n            throw new Error('Multiple rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        return matchingEngines[0].id;\n    }\n}\nfunction hasSameBinding(binding1, binding2) {\n    if (binding1.mouseButton !== binding2.mouseButton) {\n        return false;\n    }\n    if (binding1.numTouchPoints !== binding2.numTouchPoints) {\n        return false;\n    }\n    return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../state';\nimport ToolGroup from './ToolGroup';\nfunction createToolGroup(toolGroupId) {\n    const toolGroupWithIdExists = state.toolGroups.some((tg) => tg.id === toolGroupId);\n    if (toolGroupWithIdExists) {\n        console.warn(`'${toolGroupId}' already exists.`);\n        return;\n    }\n    const toolGroup = new ToolGroup(toolGroupId);\n    state.toolGroups.push(toolGroup);\n    return toolGroup;\n}\nexport default createToolGroup;\n","import { state } from '../state';\nfunction destroyToolGroup(toolGroupId) {\n    const toolGroupIndex = state.toolGroups.findIndex((tg) => tg.id === toolGroupId);\n    if (toolGroupIndex > -1) {\n        state.toolGroups.splice(toolGroupIndex, 1);\n    }\n}\nexport default destroyToolGroup;\n","import { state } from '../state';\nimport destroyToolGroup from './destroyToolGroup';\nfunction destroy() {\n    const toolGroups = [...state.toolGroups];\n    for (const toolGroup of toolGroups) {\n        destroyToolGroup(toolGroup.id);\n    }\n    state.toolGroups = [];\n}\nexport default destroy;\n","import { state } from '../state';\nfunction getAllToolGroups() {\n    return state.toolGroups;\n}\nexport default getAllToolGroups;\n","import { mouseEventListeners, wheelEventListener, touchEventListeners, keyEventListener, imageChangeEventListener, } from '../eventListeners';\nimport { imageRenderedEventDispatcher, cameraModifiedEventDispatcher, mouseToolEventDispatcher, touchToolEventDispatcher, keyboardToolEventDispatcher, imageSpacingCalibratedEventDispatcher, cameraResetEventDispatcher, } from '../eventDispatchers';\nimport { state } from './state';\nimport { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nexport default function addEnabledElement(evt) {\n    const { element, viewportId } = evt.detail;\n    const svgLayer = _createSvgAnnotationLayer(viewportId);\n    _setSvgNodeCache(element);\n    _appendChild(svgLayer, element);\n    annotationRenderingEngine.addViewportElement(viewportId, element);\n    mouseEventListeners.enable(element);\n    wheelEventListener.enable(element);\n    touchEventListeners.enable(element);\n    keyEventListener.enable(element);\n    imageChangeEventListener.enable(element);\n    imageRenderedEventDispatcher.enable(element);\n    cameraModifiedEventDispatcher.enable(element);\n    imageSpacingCalibratedEventDispatcher.enable(element);\n    cameraResetEventDispatcher.enable(element);\n    mouseToolEventDispatcher.enable(element);\n    keyboardToolEventDispatcher.enable(element);\n    touchToolEventDispatcher.enable(element);\n    state.enabledElements.push(element);\n}\nfunction _createSvgAnnotationLayer(viewportId) {\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgLayer = document.createElementNS(svgns, 'svg');\n    const svgLayerId = `svg-layer-${viewportId}`;\n    svgLayer.classList.add('svg-layer');\n    svgLayer.setAttribute('id', svgLayerId);\n    svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svgLayer.style.width = '100%';\n    svgLayer.style.height = '100%';\n    svgLayer.style.pointerEvents = 'none';\n    svgLayer.style.position = 'absolute';\n    const defs = document.createElementNS(svgns, 'defs');\n    const filter = document.createElementNS(svgns, 'filter');\n    const feOffset = document.createElementNS(svgns, 'feOffset');\n    const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n    const feBlend = document.createElementNS(svgns, 'feBlend');\n    filter.setAttribute('id', `shadow-${svgLayerId}`);\n    filter.setAttribute('filterUnits', 'userSpaceOnUse');\n    feOffset.setAttribute('result', 'offOut');\n    feOffset.setAttribute('in', 'SourceGraphic');\n    feOffset.setAttribute('dx', '0.5');\n    feOffset.setAttribute('dy', '0.5');\n    feColorMatrix.setAttribute('result', 'matrixOut');\n    feColorMatrix.setAttribute('in', 'offOut');\n    feColorMatrix.setAttribute('in2', 'matrix');\n    feColorMatrix.setAttribute('values', '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0');\n    feBlend.setAttribute('in', 'SourceGraphic');\n    feBlend.setAttribute('in2', 'matrixOut');\n    feBlend.setAttribute('mode', 'normal');\n    filter.appendChild(feOffset);\n    filter.appendChild(feColorMatrix);\n    filter.appendChild(feBlend);\n    defs.appendChild(filter);\n    svgLayer.appendChild(defs);\n    return svgLayer;\n}\nfunction _setSvgNodeCache(element) {\n    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;\n    const elementHash = `${viewportId}:${renderingEngineId}`;\n    state.svgNodeCache[elementHash] = {};\n}\nfunction _appendChild(newNode, referenceNode) {\n    referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { state } from './state';\nexport function addTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    if (!toolName) {\n        throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n    }\n    if (!state.tools[toolName]) {\n        state.tools[toolName] = {\n            toolClass: ToolClass,\n        };\n    }\n}\nexport function hasTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    return !!(toolName && state.tools[toolName]);\n}\nexport function hasToolByName(toolName) {\n    return !!(toolName && state.tools[toolName]);\n}\nexport function removeTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    if (!toolName) {\n        throw new Error(`No tool found for: ${ToolClass.name}`);\n    }\n    if (!state.tools[toolName] !== undefined) {\n        delete state.tools[toolName];\n    }\n    else {\n        throw new Error(`${toolName} cannot be removed because it has not been added`);\n    }\n}\nexport default addTool;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nexport default function cancelActiveManipulations(element) {\n    const tools = getToolsWithModesForElement(element, [\n        ToolModes.Active,\n        ToolModes.Passive,\n    ]);\n    const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n    for (const { tool } of toolsWithData) {\n        const annotationUID = tool.cancel(element);\n        if (annotationUID) {\n            return annotationUID;\n        }\n    }\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { mouseEventListeners, wheelEventListener, touchEventListeners, keyEventListener, imageChangeEventListener, } from '../eventListeners';\nimport { imageRenderedEventDispatcher, cameraModifiedEventDispatcher, mouseToolEventDispatcher, keyboardToolEventDispatcher, imageSpacingCalibratedEventDispatcher, touchToolEventDispatcher, cameraResetEventDispatcher, } from '../eventDispatchers';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction removeEnabledElement(elementDisabledEvt) {\n    const { element, viewportId } = elementDisabledEvt.detail;\n    _resetSvgNodeCache(element);\n    _removeSvgNode(element);\n    annotationRenderingEngine.removeViewportElement(viewportId, element);\n    mouseEventListeners.disable(element);\n    wheelEventListener.disable(element);\n    touchEventListeners.disable(element);\n    keyEventListener.disable(element);\n    imageChangeEventListener.disable(element);\n    imageRenderedEventDispatcher.disable(element);\n    cameraModifiedEventDispatcher.disable(element);\n    imageSpacingCalibratedEventDispatcher.disable(element);\n    cameraResetEventDispatcher.disable(element);\n    mouseToolEventDispatcher.disable(element);\n    keyboardToolEventDispatcher.disable(element);\n    touchToolEventDispatcher.disable(element);\n    _removeViewportFromSynchronizers(element);\n    _removeViewportFromToolGroup(element);\n    _removeEnabledElement(element);\n}\nconst _removeViewportFromSynchronizers = (element) => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const synchronizers = getSynchronizersForViewport(enabledElement.viewportId, enabledElement.renderingEngineId);\n    synchronizers.forEach((sync) => {\n        sync.remove(enabledElement);\n    });\n};\nconst _removeViewportFromToolGroup = (element) => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngineId, viewportId } = enabledElement;\n    const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n    if (toolGroup) {\n        toolGroup.removeViewports(renderingEngineId, viewportId);\n    }\n};\nconst _removeAllToolsForElement = function (element) {\n    const tools = getToolsWithModesForElement(element, [\n        ToolModes.Active,\n        ToolModes.Passive,\n    ]);\n    const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n    toolsWithData.forEach(({ annotations }) => {\n        annotations.forEach((annotation) => {\n            removeAnnotation(annotation.annotationUID);\n        });\n    });\n};\nfunction _resetSvgNodeCache(element) {\n    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;\n    const elementHash = `${viewportId}:${renderingEngineId}`;\n    delete state.svgNodeCache[elementHash];\n}\nfunction _removeSvgNode(element) {\n    const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n    const svgLayer = internalViewportNode.querySelector('svg');\n    if (svgLayer) {\n        internalViewportNode.removeChild(svgLayer);\n    }\n}\nconst _removeEnabledElement = function (element) {\n    const foundElementIndex = state.enabledElements.findIndex((el) => el === element);\n    if (foundElementIndex > -1) {\n        state.enabledElements.splice(foundElementIndex, 1);\n    }\n};\nexport default removeEnabledElement;\n","import svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\nconst defaultState = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nlet state = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nfunction resetCornerstoneToolsState() {\n    resetSvgNodeCache();\n    state = {\n        ...structuredClone({\n            ...defaultState,\n            svgNodeCache: {},\n        }),\n        svgNodeCache: {\n            ...defaultState.svgNodeCache,\n        },\n    };\n}\nexport { resetCornerstoneToolsState, state, state as default };\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec3 } from 'gl-matrix';\nexport default function areViewportsCoplanar(viewport1, viewport2) {\n    const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n    const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n    const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n    return Math.abs(dotProducts) > 0.9;\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function cameraSyncCallback(synchronizerInstance, sourceViewport, targetViewport, cameraModifiedEvent) {\n    const { camera } = cameraModifiedEvent.detail;\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    tViewport.setCamera(camera);\n    tViewport.render();\n}\n","import { vec3, mat4 } from 'gl-matrix';\nimport { getRenderingEngine, metaData, utilities, VolumeViewport, } from '@cornerstonejs/core';\nimport areViewportsCoplanar from './areViewportsCoplanar';\nconst getSpatialRegistration = (targetId, sourceId) => utilities.spatialRegistrationMetadataProvider.get('spatialRegistrationModule', targetId, sourceId);\nexport default async function imageSliceSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n    if (options?.disabled) {\n        return;\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const imageId1 = sViewport.getCurrentImageId();\n    const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n    const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n    const targetImageIds = tViewport.getImageIds();\n    if (!areViewportsCoplanar(sViewport, tViewport)) {\n        return;\n    }\n    let registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);\n    if (!registrationMatrixMat4) {\n        const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n        const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n        if (frameOfReferenceUID1 === frameOfReferenceUID2 &&\n            options?.useInitialPosition !== false) {\n            registrationMatrixMat4 = mat4.identity(mat4.create());\n        }\n        else {\n            utilities.calculateViewportsSpatialRegistration(sViewport, tViewport);\n            registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);\n        }\n        if (!registrationMatrixMat4) {\n            return;\n        }\n    }\n    const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(vec3.create(), sourceImagePositionPatient, registrationMatrixMat4);\n    const closestImageIdIndex2 = _getClosestImageIdIndex(targetImagePositionPatientWithRegistrationMatrix, targetImageIds);\n    let imageIndexToSet = closestImageIdIndex2.index;\n    if (tViewport instanceof VolumeViewport) {\n        imageIndexToSet = targetImageIds.length - closestImageIdIndex2.index - 1;\n    }\n    if (closestImageIdIndex2.index !== -1 &&\n        tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index) {\n        await utilities.jumpToSlice(tViewport.element, {\n            imageIndex: imageIndexToSet,\n        });\n    }\n}\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n    return imageIds.reduce((closestImageIdIndex, imageId, index) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = vec3.distance(imagePositionPatient, targetPoint);\n        if (distance < closestImageIdIndex.distance) {\n            return {\n                distance,\n                index,\n            };\n        }\n        return closestImageIdIndex;\n    }, {\n        distance: Infinity,\n        index: -1,\n    });\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function presentationViewSyncCallback(_synchronizerInstance, sourceViewport, targetViewport, _sourceEvent, options) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const presentationView = sViewport.getViewPresentation(options);\n    tViewport.setViewPresentation(presentationView);\n    tViewport.render();\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function slabThicknessSyncCallback(_synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const slabThickness = sViewport.getSlabThickness?.();\n    if (!slabThickness) {\n        return;\n    }\n    tViewport.setSlabThickness?.(slabThickness);\n    tViewport.render();\n}\n","import { BaseVolumeViewport, getRenderingEngine, StackViewport, } from '@cornerstonejs/core';\nexport default function voiSyncCallback(synchronizerInstance, sourceViewport, targetViewport, modifiedEvent, options) {\n    const eventDetail = modifiedEvent.detail;\n    const { volumeId, range, invertStateChanged, invert, colormap } = eventDetail;\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`Rendering Engine does not exist: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const tProperties = {\n        voiRange: range,\n    };\n    if (options?.syncInvertState && invertStateChanged) {\n        tProperties.invert = invert;\n    }\n    if (options?.syncColormap && colormap) {\n        tProperties.colormap = colormap;\n    }\n    if (tViewport instanceof BaseVolumeViewport) {\n        const isFusion = tViewport._actors && tViewport._actors.size > 1;\n        if (isFusion) {\n            tViewport.setProperties(tProperties, volumeId);\n        }\n        else {\n            tViewport.setProperties(tProperties);\n        }\n    }\n    else if (tViewport instanceof StackViewport) {\n        tViewport.setProperties(tProperties);\n    }\n    else {\n        throw new Error('Viewport type not supported.');\n    }\n    tViewport.render();\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function zoomPanSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    if (options?.syncZoom !== false) {\n        const srcZoom = sViewport.getZoom();\n        tViewport.setZoom(srcZoom);\n    }\n    if (options?.syncPan !== false) {\n        const srcPan = sViewport.getPan();\n        tViewport.setPan(srcPan);\n    }\n    tViewport.render();\n}\n","import createCameraPositionSynchronizer from './synchronizers/createCameraPositionSynchronizer';\nimport createPresentationViewSynchronizer from './synchronizers/createPresentationViewSynchronizer';\nimport createVOISynchronizer from './synchronizers/createVOISynchronizer';\nimport createZoomPanSynchronizer from './synchronizers/createZoomPanSynchronizer';\nimport createImageSliceSynchronizer from './synchronizers/createImageSliceSynchronizer';\nimport createSlabThicknessSynchronizer from './synchronizers/createSlabThicknessSynchronizer';\nconst createStackImageSynchronizer = createImageSliceSynchronizer;\nexport { createCameraPositionSynchronizer, createPresentationViewSynchronizer, createVOISynchronizer, createZoomPanSynchronizer, createImageSliceSynchronizer, createStackImageSynchronizer, createSlabThicknessSynchronizer, };\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nexport default function createVOISynchronizer(synchronizerName, options) {\n    options = Object.assign({ syncInvertState: true, syncColormap: true }, options);\n    const VOISynchronizer = createSynchronizer(synchronizerName, Enums.Events.VOI_MODIFIED, voiSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: Enums.Events.COLORMAP_MODIFIED,\n            },\n        ],\n        ...options,\n    });\n    return VOISynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            referenceLinesCenterGapRatio: null,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n                referenceLinesCenterGapRatio: 0.05,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const mobileConfig = this.configuration.mobile;\n                const { referenceLinesCenterGapRatio } = mobileConfig?.enabled\n                    ? mobileConfig\n                    : this.configuration;\n                const centerGap = referenceLinesCenterGapRatio > 0\n                    ? canvasMinDimensionLength * referenceLinesCenterGapRatio\n                    : this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = (this.editData.annotation.data).handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        this.toolCenter = toolCenter;\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            const { element } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewport.id)\n                .getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewportId)\n                .getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n            updateCursorSize: 'dynamic',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            deltaWorld: eventData.deltaPoints.world,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            if (this.configuration.updateCursorSize === 'dynamic') {\n                cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n            }\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = (annotation).data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { AnnotationTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass VolumeCroppingControlTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            extendReferenceLines: true,\n            initialCropFactor: 0.2,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            lineColors: {\n                AXIAL: [1.0, 0.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                SAGITTAL: [1.0, 1.0, 0.0],\n                UNKNOWN: [0.0, 0.0, 1.0],\n            },\n            lineWidth: 1.5,\n            lineWidthActive: 2.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._virtualAnnotations = [];\n        this.sphereStates = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.toolCenterMin = [0, 0, 0];\n        this.toolCenterMax = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            if (!renderingEngineId || !viewportId) {\n                console.warn('VolumeCroppingControlTool: Missing renderingEngineId or viewportId');\n                return;\n            }\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            this._updateToolCentersFromViewport(viewport);\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        toolCenter: this.toolCenter,\n                        toolCenterMin: this.toolCenterMin,\n                        toolCenterMax: this.toolCenterMax,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                    referenceLines: [],\n                    orientation,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([100, 100]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCroppingSpheres = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo[0]) {\n                console.warn('  _computeToolCenter : No valid viewportsInfo for computeToolCenter.');\n                return;\n            }\n            const orientationIds = ['AXIAL', 'CORONAL', 'SAGITTAL'];\n            const presentOrientations = viewportsInfo\n                .map((vp) => {\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                        if (orientation) {\n                            return orientation;\n                        }\n                    }\n                }\n                return null;\n            })\n                .filter(Boolean);\n            const missingOrientation = orientationIds.find((id) => !presentOrientations.includes(id));\n            const presentNormals = [];\n            const presentCenters = [];\n            const presentViewportInfos = viewportsInfo.filter((vp) => {\n                let orientation = null;\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                return orientation && orientationIds.includes(orientation);\n            });\n            presentViewportInfos.forEach((vpInfo) => {\n                const { normal, point } = this.initializeViewport(vpInfo);\n                presentNormals.push(normal);\n                presentCenters.push(point);\n            });\n            if (presentViewportInfos.length === 2 && missingOrientation) {\n                const virtualNormal = [0, 0, 0];\n                vec3.cross(virtualNormal, presentNormals[0], presentNormals[1]);\n                vec3.normalize(virtualNormal, virtualNormal);\n                const virtualCenter = [\n                    (presentCenters[0][0] + presentCenters[1][0]) / 2,\n                    (presentCenters[0][1] + presentCenters[1][1]) / 2,\n                    (presentCenters[0][2] + presentCenters[1][2]) / 2,\n                ];\n                const orientation = null;\n                const virtualAnnotation = {\n                    highlighted: false,\n                    metadata: {\n                        cameraPosition: [...virtualCenter],\n                        cameraFocalPoint: [...virtualCenter],\n                        toolName: this.getToolName(),\n                    },\n                    data: {\n                        handles: {\n                            activeOperation: null,\n                            toolCenter: this.toolCenter,\n                            toolCenterMin: this.toolCenterMin,\n                            toolCenterMax: this.toolCenterMax,\n                        },\n                        activeViewportIds: [],\n                        viewportId: missingOrientation,\n                        referenceLines: [],\n                        orientation,\n                    },\n                    isVirtual: true,\n                    virtualNormal,\n                };\n                this._virtualAnnotations = [virtualAnnotation];\n            }\n            else if (presentViewportInfos.length === 1) {\n                let presentOrientation = null;\n                const vpInfo = presentViewportInfos[0];\n                if (vpInfo.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vpInfo.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vpInfo.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        presentOrientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                const presentCenter = presentCenters[0];\n                const canonicalNormals = {\n                    AXIAL: [0, 0, 1],\n                    CORONAL: [0, 1, 0],\n                    SAGITTAL: [1, 0, 0],\n                };\n                const missingIds = orientationIds.filter((id) => id !== presentOrientation);\n                const virtualAnnotations = missingIds.map((orientation) => {\n                    const normal = canonicalNormals[orientation];\n                    const virtualAnnotation = {\n                        highlighted: false,\n                        metadata: {\n                            cameraPosition: [...presentCenter],\n                            cameraFocalPoint: [...presentCenter],\n                            toolName: this.getToolName(),\n                        },\n                        data: {\n                            handles: {\n                                activeOperation: null,\n                                toolCenter: this.toolCenter,\n                                toolCenterMin: this.toolCenterMin,\n                                toolCenterMax: this.toolCenterMax,\n                            },\n                            activeViewportIds: [],\n                            viewportId: orientation,\n                            referenceLines: [],\n                            orientation,\n                        },\n                        isVirtual: true,\n                        virtualNormal: normal,\n                    };\n                    return virtualAnnotation;\n                });\n                this._virtualAnnotations = virtualAnnotations;\n            }\n            if (viewportsInfo && viewportsInfo.length) {\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n            }\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCroppingSpheres();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            if (!filteredToolAnnotations) {\n                return;\n            }\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                let near = false;\n                near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            let orientation = null;\n            if (enabledElement.viewport && enabledElement.viewport.getCamera) {\n                orientation = this._getOrientationFromNormal(enabledElement.viewport.getCamera().viewPlaneNormal);\n            }\n            const filtered = annotations.filter((annotation) => {\n                if (annotation.isVirtual) {\n                    return true;\n                }\n                if (annotation.data.orientation &&\n                    orientation &&\n                    annotation.data.orientation === orientation) {\n                    return true;\n                }\n                return false;\n            });\n            return filtered;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            function lineIntersection2D(p1, p2, q1, q2) {\n                const s1_x = p2[0] - p1[0];\n                const s1_y = p2[1] - p1[1];\n                const s2_x = q2[0] - q1[0];\n                const s2_y = q2[1] - q1[1];\n                const denom = -s2_x * s1_y + s1_x * s2_y;\n                if (Math.abs(denom) < 1e-8) {\n                    return null;\n                }\n                const s = (-s1_y * (p1[0] - q1[0]) + s1_x * (p1[1] - q1[1])) / denom;\n                const t = (s2_x * (p1[1] - q1[1]) - s2_y * (p1[0] - q1[0])) / denom;\n                if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n                    return [p1[0] + t * s1_x, p1[1] + t * s1_y];\n                }\n                return null;\n            }\n            const viewportsInfo = this._getViewportsInfo();\n            if (!viewportsInfo || viewportsInfo.length === 0) {\n                return false;\n            }\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            let annotations = this._getAnnotations(enabledElement);\n            if (this._virtualAnnotations && this._virtualAnnotations.length) {\n                annotations = annotations.concat(this._virtualAnnotations);\n            }\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation || !viewportAnnotation.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const data = viewportAnnotation.data;\n            const otherViewportAnnotations = annotations;\n            const volumeCroppingCenterCanvasMin = viewport.worldToCanvas(this.toolCenterMin);\n            const volumeCroppingCenterCanvasMax = viewport.worldToCanvas(this.toolCenterMax);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const data = annotation.data;\n                const isVirtual = 'isVirtual' in annotation &&\n                    annotation.isVirtual === true;\n                data.handles.toolCenter = this.toolCenter;\n                let otherViewport, otherCamera, clientWidth, clientHeight, otherCanvasDiagonalLength, otherCanvasCenter, otherViewportCenterWorld;\n                if (isVirtual) {\n                    const realViewports = viewportsInfo.filter((vp) => vp.viewportId !== data.viewportId);\n                    if (realViewports.length === 2) {\n                        const vp1 = renderingEngine.getViewport(realViewports[0].viewportId);\n                        const vp2 = renderingEngine.getViewport(realViewports[1].viewportId);\n                        const normal1 = vp1.getCamera().viewPlaneNormal;\n                        const normal2 = vp2.getCamera().viewPlaneNormal;\n                        const virtualNormal = vec3.create();\n                        vec3.cross(virtualNormal, normal1, normal2);\n                        vec3.normalize(virtualNormal, virtualNormal);\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                    else {\n                        const virtualNormal = annotation\n                            .virtualNormal ?? [0, 0, 1];\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                }\n                else {\n                    otherViewport = renderingEngine.getViewport(data.viewportId);\n                    otherCamera = otherViewport.getCamera();\n                    clientWidth = otherViewport.canvas.clientWidth;\n                    clientHeight = otherViewport.canvas.clientHeight;\n                    otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                    otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                    otherViewportCenterWorld =\n                        otherViewport.canvasToWorld(otherCanvasCenter);\n                }\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas([\n                    otherViewportCenterWorld[0] ?? 0,\n                    otherViewportCenterWorld[1] ?? 0,\n                    otherViewportCenterWorld[2] ?? 0,\n                ]);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const refLinesCenterMin = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMin)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMinOne = vec2.create();\n                const refLinePointMinTwo = vec2.create();\n                vec2.add(refLinePointMinOne, refLinesCenterMin, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMinTwo, refLinesCenterMin, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMinOne, refLinePointMinTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMinOne,\n                    refLinePointMinTwo,\n                    'min',\n                ]);\n                const refLinesCenterMax = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMax)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMaxOne = vec2.create();\n                const refLinePointMaxTwo = vec2.create();\n                vec2.add(refLinePointMaxOne, refLinesCenterMax, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMaxTwo, refLinesCenterMax, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMaxOne, refLinePointMaxTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMaxOne,\n                    refLinePointMaxTwo,\n                    'max',\n                ]);\n            });\n            data.referenceLines = referenceLines;\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const intersections = [];\n                for (let j = 0; j < referenceLines.length; ++j) {\n                    if (j === lineIndex) {\n                        continue;\n                    }\n                    const otherLine = referenceLines[j];\n                    const intersection = lineIntersection2D(line[1], line[2], otherLine[1], otherLine[2]);\n                    if (intersection) {\n                        intersections.push({\n                            with: otherLine[3],\n                            point: intersection,\n                        });\n                    }\n                }\n                const otherViewport = line[0];\n                let orientation = null;\n                if (otherViewport && otherViewport.id) {\n                    const annotationForViewport = annotations.find((a) => a.data.viewportId === otherViewport.id);\n                    if (annotationForViewport && annotationForViewport.data.orientation) {\n                        orientation = String(annotationForViewport.data.orientation).toUpperCase();\n                    }\n                    else {\n                        const idUpper = otherViewport.id.toUpperCase();\n                        if (idUpper.includes('AXIAL')) {\n                            orientation = 'AXIAL';\n                        }\n                        else if (idUpper.includes('CORONAL')) {\n                            orientation = 'CORONAL';\n                        }\n                        else if (idUpper.includes('SAGITTAL')) {\n                            orientation = 'SAGITTAL';\n                        }\n                    }\n                }\n                const lineColors = this.configuration.lineColors || {};\n                const colorArr = lineColors[orientation] ||\n                    lineColors.unknown || [1.0, 0.0, 0.0];\n                const color = Array.isArray(colorArr)\n                    ? `rgb(${colorArr.map((v) => Math.round(v * 255)).join(',')})`\n                    : colorArr;\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let lineWidth = this.configuration.lineWidth ?? 1.5;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = this.configuration.activeLineWidth ?? 2.5;\n                }\n                const lineUID = `${lineIndex}`;\n                if (viewportControllable) {\n                    if (intersections.length === 2) {\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, intersections[0].point, intersections[1].point, {\n                            color,\n                            lineWidth,\n                        });\n                    }\n                    if (this.configuration.extendReferenceLines &&\n                        intersections.length === 2) {\n                        if (this.configuration.extendReferenceLines &&\n                            intersections.length === 2) {\n                            const sortedIntersections = intersections\n                                .map((intersection) => ({\n                                ...intersection,\n                                distance: vec2.distance(line[1], intersection.point),\n                            }))\n                                .sort((a, b) => a.distance - b.distance);\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_before', line[1], sortedIntersections[0].point, { color, lineWidth, lineDash: [4, 4] });\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_after', sortedIntersections[1].point, line[2], { color, lineWidth, lineDash: [4, 4] });\n                        }\n                    }\n                }\n            });\n            renderStatus = true;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onSphereMoved = (evt) => {\n            if (evt.detail.originalClippingPlanes) {\n                this._syncWithVolumeCroppingTool(evt.detail.originalClippingPlanes);\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const { draggingSphereIndex, toolCenter } = evt.detail;\n                const newMin = [...this.toolCenterMin];\n                const newMax = [...this.toolCenterMax];\n                if (draggingSphereIndex >= 0 && draggingSphereIndex <= 5) {\n                    const axis = Math.floor(draggingSphereIndex / 2);\n                    const isMin = draggingSphereIndex % 2 === 0;\n                    (isMin ? newMin : newMax)[axis] = toolCenter[axis];\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                    return;\n                }\n                if (draggingSphereIndex >= 6 && draggingSphereIndex <= 13) {\n                    const idx = draggingSphereIndex;\n                    if (idx < 10) {\n                        newMin[0] = toolCenter[0];\n                    }\n                    else {\n                        newMax[0] = toolCenter[0];\n                    }\n                    if ([6, 7, 10, 11].includes(idx)) {\n                        newMin[1] = toolCenter[1];\n                    }\n                    else {\n                        newMax[1] = toolCenter[1];\n                    }\n                    if (idx % 2 === 0) {\n                        newMin[2] = toolCenter[2];\n                    }\n                    else {\n                        newMax[2] = toolCenter[2];\n                    }\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                }\n            }\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            if (viewportsInfo && viewportsInfo.length > 0) {\n                const { viewportId, renderingEngineId } = viewportsInfo[0];\n                const renderingEngine = getRenderingEngine(renderingEngineId);\n                const viewport = renderingEngine.getViewport(viewportId);\n                const volumeActors = viewport.getActors();\n                if (volumeActors.length > 0) {\n                    const imageData = volumeActors[0].actor.getMapper().getInputData();\n                    if (imageData) {\n                        this.seriesInstanceUID = imageData.seriesInstanceUID;\n                        this._updateToolCentersFromViewport(viewport);\n                        const annotations = getAnnotations(this.getToolName(), viewportId) || [];\n                        annotations.forEach((annotation) => {\n                            if (annotation.data && annotation.data.handles) {\n                                annotation.data.handles.toolCenter = [...this.toolCenter];\n                            }\n                        });\n                    }\n                }\n            }\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            if (viewport.type === Enums.ViewportType.VOLUME_3D) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                if (handles.activeType === 'min') {\n                    this.toolCenterMin[0] += delta[0];\n                    this.toolCenterMin[1] += delta[1];\n                    this.toolCenterMin[2] += delta[2];\n                }\n                else if (handles.activeType === 'max') {\n                    this.toolCenterMax[0] += delta[0];\n                    this.toolCenterMax[1] += delta[1];\n                    this.toolCenterMax[2] += delta[2];\n                }\n                else {\n                    this.toolCenter[0] += delta[0];\n                    this.toolCenter[1] += delta[1];\n                    this.toolCenter[2] += delta[2];\n                }\n                const viewportsInfo = this._getViewportsInfo();\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n                triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                    toolGroupId: this.toolGroupId,\n                    toolCenter: this.toolCenter,\n                    toolCenterMin: this.toolCenterMin,\n                    toolCenterMax: this.toolCenterMax,\n                    handleType: handles.activeType,\n                    viewportOrientation: [],\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        const viewportsInfo = getToolGroup(this.toolGroupId)?.viewportsInfo;\n        eventTarget.addEventListener(Events.VOLUMECROPPING_TOOL_CHANGED, this._onSphereMoved);\n        if (viewportsInfo && viewportsInfo.length > 0) {\n            const { viewportId, renderingEngineId } = viewportsInfo[0];\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const viewport = renderingEngine.getViewport(viewportId);\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || !volumeActors.length) {\n                console.warn(`VolumeCroppingControlTool: No volume actors found in viewport ${viewportId}.`);\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (imageData) {\n                const dimensions = imageData.getDimensions();\n                const spacing = imageData.getSpacing();\n                const origin = imageData.getOrigin();\n                this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n                const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n                this.toolCenter = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                const maxCropFactor = 1 - cropFactor;\n                this.toolCenterMin = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                this.toolCenterMax = [\n                    origin[0] + maxCropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + maxCropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + maxCropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n            }\n        }\n    }\n    _updateToolCentersFromViewport(viewport) {\n        const volumeActors = viewport.getActors();\n        if (!volumeActors || !volumeActors.length) {\n            return;\n        }\n        const imageData = volumeActors[0].actor.getMapper().getInputData();\n        if (!imageData) {\n            return;\n        }\n        this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n        const dimensions = imageData.getDimensions();\n        const spacing = imageData.getSpacing();\n        const origin = imageData.getOrigin();\n        const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n        const cropStart = cropFactor / 2;\n        const cropEnd = 1 - cropFactor / 2;\n        this.toolCenter = [\n            origin[0] +\n                ((cropStart + cropEnd) / 2) * (dimensions[0] - 1) * spacing[0],\n            origin[1] +\n                ((cropStart + cropEnd) / 2) * (dimensions[1] - 1) * spacing[1],\n            origin[2] +\n                ((cropStart + cropEnd) / 2) * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMin = [\n            origin[0] + cropStart * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropStart * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropStart * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMax = [\n            origin[0] + cropEnd * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropEnd * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropEnd * (dimensions[2] - 1) * spacing[2],\n        ];\n    }\n    onSetToolInactive() {\n        console.debug(`VolumeCroppingControlTool: onSetToolInactive called for tool ${this.getToolName()}`);\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        let anyAnnotationExists = false;\n        for (const vpInfo of viewportsInfo) {\n            const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations && annotations.length > 0) {\n                anyAnnotationExists = true;\n                break;\n            }\n        }\n        if (!anyAnnotationExists) {\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        }\n        else {\n            for (const vpInfo of viewportsInfo) {\n                const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n                if (!enabledElement) {\n                    continue;\n                }\n                const annotations = this._getAnnotations(enabledElement);\n                if (annotations && annotations.length > 0) {\n                    annotations.forEach((annotation) => {\n                        removeAnnotation(annotation.annotationUID);\n                    });\n                }\n                enabledElement.viewport.render();\n            }\n        }\n    }\n    onSetToolEnabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolEnabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n    }\n    onSetToolDisabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolDisabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    _getOrientationFromNormal(normal) {\n        if (!normal) {\n            return null;\n        }\n        const canonical = {\n            AXIAL: [0, 0, 1],\n            CORONAL: [0, 1, 0],\n            SAGITTAL: [1, 0, 0],\n        };\n        const tol = 1e-2;\n        for (const [key, value] of Object.entries(canonical)) {\n            if (Math.abs(normal[0] - value[0]) < tol &&\n                Math.abs(normal[1] - value[1]) < tol &&\n                Math.abs(normal[2] - value[2]) < tol) {\n                return key;\n            }\n            if (Math.abs(normal[0] + value[0]) < tol &&\n                Math.abs(normal[1] + value[1]) < tol &&\n                Math.abs(normal[2] + value[2]) < tol) {\n                return key;\n            }\n        }\n        return null;\n    }\n    _syncWithVolumeCroppingTool(originalClippingPlanes) {\n        const planes = originalClippingPlanes;\n        if (planes.length >= 6) {\n            this.toolCenterMin = [\n                planes[0].origin[0],\n                planes[2].origin[1],\n                planes[4].origin[2],\n            ];\n            this.toolCenterMax = [\n                planes[1].origin[0],\n                planes[3].origin[1],\n                planes[5].origin[2],\n            ];\n            this.toolCenter = [\n                (this.toolCenterMin[0] + this.toolCenterMax[0]) / 2,\n                (this.toolCenterMin[1] + this.toolCenterMax[1]) / 2,\n                (this.toolCenterMin[2] + this.toolCenterMax[2]) / 2,\n            ];\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                if (enabledElement) {\n                    const annotations = this._getAnnotations(enabledElement);\n                    annotations.forEach((annotation) => {\n                        if (annotation.data &&\n                            annotation.data.handles &&\n                            annotation.data.orientation) {\n                            const orientation = annotation.data.orientation;\n                            if (orientation === 'AXIAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    planes[2].origin[1],\n                                    annotation.data.handles.toolCenterMin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    planes[3].origin[1],\n                                    annotation.data.handles.toolCenterMax[2],\n                                ];\n                            }\n                            else if (orientation === 'CORONAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    annotation.data.handles.toolCenterMin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    annotation.data.handles.toolCenterMax[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            else if (orientation === 'SAGITTAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    annotation.data.handles.toolCenterMin[0],\n                                    planes[2].origin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    annotation.data.handles.toolCenterMax[0],\n                                    planes[3].origin[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            annotation.data.handles.toolCenter = [\n                                (annotation.data.handles.toolCenterMin[0] +\n                                    annotation.data.handles.toolCenterMax[0]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[1] +\n                                    annotation.data.handles.toolCenterMax[1]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[2] +\n                                    annotation.data.handles.toolCenterMax[2]) /\n                                    2,\n                            ];\n                        }\n                    });\n                }\n            });\n            if (this._virtualAnnotations && this._virtualAnnotations.length > 0) {\n                this._virtualAnnotations.forEach((annotation) => {\n                    if (annotation.data &&\n                        annotation.data.handles &&\n                        annotation.data.orientation) {\n                        const orientation = annotation.data.orientation.toUpperCase();\n                        if (orientation === 'AXIAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                planes[2].origin[1],\n                                annotation.data.handles.toolCenterMin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                planes[3].origin[1],\n                                annotation.data.handles.toolCenterMax[2],\n                            ];\n                        }\n                        else if (orientation === 'CORONAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                annotation.data.handles.toolCenterMin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                annotation.data.handles.toolCenterMax[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        else if (orientation === 'SAGITTAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                annotation.data.handles.toolCenterMin[0],\n                                planes[2].origin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                annotation.data.handles.toolCenterMax[0],\n                                planes[3].origin[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        annotation.data.handles.toolCenter = [\n                            (annotation.data.handles.toolCenterMin[0] +\n                                annotation.data.handles.toolCenterMax[0]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[1] +\n                                annotation.data.handles.toolCenterMax[1]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[2] +\n                                annotation.data.handles.toolCenterMax[2]) /\n                                2,\n                        ];\n                    }\n                });\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        }\n    }\n    setToolCenter(toolCenter, handleType) {\n        if (handleType === 'min') {\n            this.toolCenterMin = [...toolCenter];\n        }\n        else if (handleType === 'max') {\n            this.toolCenterMax = [...toolCenter];\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const annotations = this._getAnnotations(enabledElement);\n        const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n        if (!filteredAnnotations ||\n            filteredAnnotations.length === 0 ||\n            !filteredAnnotations[0]) {\n            return null;\n        }\n        const { data } = filteredAnnotations[0];\n        const viewportIdArray = [];\n        const referenceLines = data.referenceLines || [];\n        for (let i = 0; i < referenceLines.length; ++i) {\n            const otherViewport = referenceLines[i][0];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            viewportIdArray.push(otherViewport.id);\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        data.handles.activeOperation = OPERATION.DRAG;\n        evt.preventDefault();\n        hideElementCursor(element);\n        this._activateModify(element);\n        return filteredAnnotations[0];\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType) {\n        this.toolSelectedCallback(evt, annotation, interactionType);\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const referenceLines = data.referenceLines;\n        const viewportIdArray = [];\n        if (referenceLines) {\n            for (let i = 0; i < referenceLines.length; ++i) {\n                const otherViewport = referenceLines[i][0];\n                const start1 = referenceLines[i][1];\n                const end1 = referenceLines[i][2];\n                const type = referenceLines[i][3];\n                const distance1 = lineSegment.distanceToPoint(start1, end1, [\n                    canvasCoords[0],\n                    canvasCoords[1],\n                ]);\n                if (distance1 <= proximity) {\n                    viewportIdArray.push(otherViewport.id);\n                    data.handles.activeOperation = 1;\n                    data.handles.activeType = type;\n                }\n            }\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === 1 ? true : false;\n    }\n}\nVolumeCroppingControlTool.toolName = 'VolumeCroppingControl';\nexport default VolumeCroppingControlTool;\n","import vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkSphereSource from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport { BaseTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, Enums, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nconst PLANEINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n};\nconst SPHEREINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n    XMIN_YMIN_ZMIN: 6,\n    XMIN_YMIN_ZMAX: 7,\n    XMIN_YMAX_ZMIN: 8,\n    XMIN_YMAX_ZMAX: 9,\n    XMAX_YMIN_ZMIN: 10,\n    XMAX_YMIN_ZMAX: 11,\n    XMAX_YMAX_ZMIN: 12,\n    XMAX_YMAX_ZMAX: 13,\n};\nclass VolumeCroppingTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            showCornerSpheres: true,\n            showHandles: true,\n            showClippingPlanes: true,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            initialCropFactor: 0.08,\n            sphereColors: {\n                SAGITTAL: [1.0, 1.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                AXIAL: [1.0, 0.0, 0.0],\n                CORNERS: [0.0, 0.0, 1.0],\n            },\n            sphereRadius: 8,\n            grabSpherePixelDistance: 20,\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.originalClippingPlanes = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.cornerDragOffset = null;\n        this.faceDragOffset = null;\n        this.sphereStates = [];\n        this.edgeLines = {};\n        this.onSetToolConfiguration = () => {\n            console.debug('Setting tool settoolconfiguration : volumeCropping');\n        };\n        this.onSetToolEnabled = () => {\n            console.debug('Setting tool enabled: volumeCropping');\n        };\n        this.onCameraModified = (evt) => {\n            const { element } = evt.currentTarget\n                ? { element: evt.currentTarget }\n                : evt.detail;\n            const enabledElement = getEnabledElement(element);\n            this._updateClippingPlanes(enabledElement.viewport);\n            enabledElement.viewport.render();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const mouseCanvas = [\n                evt.detail.currentPoints.canvas[0],\n                evt.detail.currentPoints.canvas[1],\n            ];\n            this.draggingSphereIndex = null;\n            this.cornerDragOffset = null;\n            this.faceDragOffset = null;\n            for (let i = 0; i < this.sphereStates.length; ++i) {\n                const sphereCanvas = viewport.worldToCanvas(this.sphereStates[i].point);\n                const dist = Math.sqrt(Math.pow(mouseCanvas[0] - sphereCanvas[0], 2) +\n                    Math.pow(mouseCanvas[1] - sphereCanvas[1], 2));\n                if (dist < this.configuration.grabSpherePixelDistance) {\n                    this.draggingSphereIndex = i;\n                    element.style.cursor = 'grabbing';\n                    const sphereState = this.sphereStates[i];\n                    const mouseWorld = viewport.canvasToWorld(mouseCanvas);\n                    if (sphereState.isCorner) {\n                        this.cornerDragOffset = [\n                            sphereState.point[0] - mouseWorld[0],\n                            sphereState.point[1] - mouseWorld[1],\n                            sphereState.point[2] - mouseWorld[2],\n                        ];\n                        this.faceDragOffset = null;\n                    }\n                    else {\n                        const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                        this.faceDragOffset =\n                            sphereState.point[axisIdx] - mouseWorld[axisIdx];\n                        this.cornerDragOffset = null;\n                    }\n                    return true;\n                }\n            }\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    evt.target.style.cursor = '';\n                    if (this.draggingSphereIndex !== null) {\n                        const sphereState = this.sphereStates[this.draggingSphereIndex];\n                        const [viewport3D] = this._getViewportsInfo();\n                        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n                        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n                        if (sphereState.isCorner) {\n                            this._updateCornerSpheres();\n                            this._updateFaceSpheresFromCorners();\n                            this._updateClippingPlanesFromFaceSpheres(viewport);\n                        }\n                    }\n                    this.draggingSphereIndex = null;\n                    this.cornerDragOffset = null;\n                    this.faceDragOffset = null;\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._onMouseMoveSphere = (evt) => {\n            if (this.draggingSphereIndex === null) {\n                return false;\n            }\n            const sphereState = this.sphereStates[this.draggingSphereIndex];\n            if (!sphereState) {\n                return false;\n            }\n            const { viewport, world } = this._getViewportAndWorldCoords(evt);\n            if (!viewport || !world) {\n                return false;\n            }\n            if (sphereState.isCorner) {\n                const newCorner = this._calculateNewCornerPosition(world);\n                this._updateSpherePosition(sphereState, newCorner);\n                const axisFlags = this._parseCornerKey(sphereState.uid);\n                this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            else {\n                const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                let newValue = world[axisIdx];\n                if (this.faceDragOffset !== null) {\n                    newValue += this.faceDragOffset;\n                }\n                sphereState.point[axisIdx] = newValue;\n                sphereState.sphereSource.setCenter(...sphereState.point);\n                sphereState.sphereSource.modified();\n                this._updateCornerSpheresFromFaces();\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n            viewport.render();\n            this._triggerToolChangedEvent(sphereState);\n            return true;\n        };\n        this._onControlToolChange = (evt) => {\n            const viewport = this._getViewport();\n            if (!evt.detail.toolCenter) {\n                triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                    originalClippingPlanes: this.originalClippingPlanes,\n                    viewportId: viewport.id,\n                    renderingEngineId: viewport.renderingEngineId,\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const isMin = evt.detail.handleType === 'min';\n                const toolCenter = isMin\n                    ? evt.detail.toolCenterMin\n                    : evt.detail.toolCenterMax;\n                const normals = isMin\n                    ? [\n                        [1, 0, 0],\n                        [0, 1, 0],\n                        [0, 0, 1],\n                    ]\n                    : [\n                        [-1, 0, 0],\n                        [0, -1, 0],\n                        [0, 0, -1],\n                    ];\n                const planeIndices = isMin\n                    ? [PLANEINDEX.XMIN, PLANEINDEX.YMIN, PLANEINDEX.ZMIN]\n                    : [PLANEINDEX.XMAX, PLANEINDEX.YMAX, PLANEINDEX.ZMAX];\n                const sphereIndices = isMin\n                    ? [SPHEREINDEX.XMIN, SPHEREINDEX.YMIN, SPHEREINDEX.ZMIN]\n                    : [SPHEREINDEX.XMAX, SPHEREINDEX.YMAX, SPHEREINDEX.ZMAX];\n                const axes = ['x', 'y', 'z'];\n                const orientationAxes = [\n                    Enums.OrientationAxis.SAGITTAL,\n                    Enums.OrientationAxis.CORONAL,\n                    Enums.OrientationAxis.AXIAL,\n                ];\n                for (let i = 0; i < 3; ++i) {\n                    const origin = [0, 0, 0];\n                    origin[i] = toolCenter[i];\n                    const plane = vtkPlane.newInstance({\n                        origin,\n                        normal: normals[i],\n                    });\n                    this.originalClippingPlanes[planeIndices[i]].origin = plane.getOrigin();\n                    this.sphereStates[sphereIndices[i]].point[i] = plane.getOrigin()[i];\n                    this.sphereStates[sphereIndices[i]].sphereSource.setCenter(...this.sphereStates[sphereIndices[i]].point);\n                    this.sphereStates[sphereIndices[i]].sphereSource.modified();\n                    const otherSphere = this.sphereStates.find((s, idx) => s.axis === axes[i] && idx !== sphereIndices[i]);\n                    const newCenter = (otherSphere.point[i] + plane.getOrigin()[i]) / 2;\n                    this.sphereStates.forEach((state) => {\n                        if (!state.isCorner &&\n                            state.axis !== axes[i] &&\n                            !evt.detail.viewportOrientation.includes(orientationAxes[i])) {\n                            state.point[i] = newCenter;\n                            state.sphereSource.setCenter(state.point);\n                            state.sphereActor.getProperty().setColor(state.color);\n                            state.sphereSource.modified();\n                        }\n                    });\n                    const volumeActor = viewport.getDefaultActor()?.actor;\n                    if (volumeActor) {\n                        const mapper = volumeActor.getMapper();\n                        const clippingPlanes = mapper.getClippingPlanes();\n                        if (clippingPlanes) {\n                            clippingPlanes[planeIndices[i]].setOrigin(plane.getOrigin());\n                        }\n                    }\n                }\n                this._updateCornerSpheres();\n                viewport.render();\n            }\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this._initialize3DViewports = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo.length || !viewportsInfo[0]) {\n                console.warn('VolumeCroppingTool: No viewportsInfo available for initialization of volumecroppingtool.');\n                return;\n            }\n            const viewport = this._getViewport();\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || volumeActors.length === 0) {\n                console.warn('VolumeCroppingTool: No volume actors found in the viewport.');\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (!imageData) {\n                console.warn('VolumeCroppingTool: No image data found for volume actor.');\n                return;\n            }\n            this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n            const worldBounds = imageData.getBounds();\n            const cropFactor = this.configuration.initialCropFactor || 0.1;\n            const xRange = worldBounds[1] - worldBounds[0];\n            const yRange = worldBounds[3] - worldBounds[2];\n            const zRange = worldBounds[5] - worldBounds[4];\n            const xMin = worldBounds[0] + cropFactor * xRange;\n            const xMax = worldBounds[1] - cropFactor * xRange;\n            const yMin = worldBounds[2] + cropFactor * yRange;\n            const yMax = worldBounds[3] - cropFactor * yRange;\n            const zMin = worldBounds[4] + cropFactor * zRange;\n            const zMax = worldBounds[5] - cropFactor * zRange;\n            const planes = [];\n            const planeXmin = vtkPlane.newInstance({\n                origin: [xMin, 0, 0],\n                normal: [1, 0, 0],\n            });\n            const planeXmax = vtkPlane.newInstance({\n                origin: [xMax, 0, 0],\n                normal: [-1, 0, 0],\n            });\n            const planeYmin = vtkPlane.newInstance({\n                origin: [0, yMin, 0],\n                normal: [0, 1, 0],\n            });\n            const planeYmax = vtkPlane.newInstance({\n                origin: [0, yMax, 0],\n                normal: [0, -1, 0],\n            });\n            const planeZmin = vtkPlane.newInstance({\n                origin: [0, 0, zMin],\n                normal: [0, 0, 1],\n            });\n            const planeZmax = vtkPlane.newInstance({\n                origin: [0, 0, zMax],\n                normal: [0, 0, -1],\n            });\n            const mapper = viewport\n                .getDefaultActor()\n                .actor.getMapper();\n            planes.push(planeXmin);\n            planes.push(planeXmax);\n            planes.push(planeYmin);\n            planes.push(planeYmax);\n            planes.push(planeZmin);\n            planes.push(planeZmax);\n            const originalPlanes = planes.map((plane) => ({\n                origin: [...plane.getOrigin()],\n                normal: [...plane.getNormal()],\n            }));\n            this.originalClippingPlanes = originalPlanes;\n            const sphereXminPoint = [xMin, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereXmaxPoint = [xMax, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereYminPoint = [(xMax + xMin) / 2, yMin, (zMax + zMin) / 2];\n            const sphereYmaxPoint = [(xMax + xMin) / 2, yMax, (zMax + zMin) / 2];\n            const sphereZminPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMin];\n            const sphereZmaxPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMax];\n            const adaptiveRadius = this._calculateAdaptiveSphereRadius(Math.sqrt(xRange * xRange + yRange * yRange + zRange * zRange));\n            this._addSphere(viewport, sphereXminPoint, 'x', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereXmaxPoint, 'x', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYminPoint, 'y', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYmaxPoint, 'y', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZminPoint, 'z', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZmaxPoint, 'z', 'max', null, adaptiveRadius);\n            const corners = [\n                [xMin, yMin, zMin],\n                [xMin, yMin, zMax],\n                [xMin, yMax, zMin],\n                [xMin, yMax, zMax],\n                [xMax, yMin, zMin],\n                [xMax, yMin, zMax],\n                [xMax, yMax, zMin],\n                [xMax, yMax, zMax],\n            ];\n            const cornerKeys = [\n                'XMIN_YMIN_ZMIN',\n                'XMIN_YMIN_ZMAX',\n                'XMIN_YMAX_ZMIN',\n                'XMIN_YMAX_ZMAX',\n                'XMAX_YMIN_ZMIN',\n                'XMAX_YMIN_ZMAX',\n                'XMAX_YMAX_ZMIN',\n                'XMAX_YMAX_ZMAX',\n            ];\n            for (let i = 0; i < corners.length; i++) {\n                this._addSphere(viewport, corners[i], 'corner', null, cornerKeys[i], adaptiveRadius);\n            }\n            const edgeCornerPairs = [\n                ['XMIN_YMIN_ZMIN', 'XMAX_YMIN_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMAX_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMIN_YMAX_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMAX_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMAX_YMIN_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMIN_ZMAX'],\n                ['XMAX_YMAX_ZMIN', 'XMAX_YMAX_ZMAX'],\n            ];\n            edgeCornerPairs.forEach(([key1, key2], i) => {\n                const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n                const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n                if (state1 && state2) {\n                    const uid = `edge_${key1}_${key2}`;\n                    const { actor, source } = this._addLine3DBetweenPoints(viewport, state1.point, state2.point, [0.7, 0.7, 0.7], uid);\n                    this.edgeLines[uid] = { actor, source, key1, key2 };\n                }\n            });\n            mapper.addClippingPlane(planeXmin);\n            mapper.addClippingPlane(planeXmax);\n            mapper.addClippingPlane(planeYmin);\n            mapper.addClippingPlane(planeYmax);\n            mapper.addClippingPlane(planeZmin);\n            mapper.addClippingPlane(planeZmax);\n            eventTarget.addEventListener(Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, (evt) => {\n                this._onControlToolChange(evt);\n            });\n            viewport.render();\n        };\n        this._getViewportAndWorldCoords = (evt) => {\n            const viewport = this._getViewport();\n            const x = evt.detail.currentPoints.canvas[0];\n            const y = evt.detail.currentPoints.canvas[1];\n            const world = viewport.canvasToWorld([x, y]);\n            return { viewport, world };\n        };\n        this._getViewport = () => {\n            const [viewport3D] = this._getViewportsInfo();\n            const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n            return renderingEngine.getViewport(viewport3D.viewportId);\n        };\n        this._handleCornerSphereMovement = (sphereState, world, viewport) => {\n            const newCorner = this._calculateNewCornerPosition(world);\n            this._updateSpherePosition(sphereState, newCorner);\n            const axisFlags = this._parseCornerKey(sphereState.uid);\n            this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n            this._updateAfterCornerMovement(viewport);\n        };\n        this._handleFaceSphereMovement = (sphereState, world, viewport) => {\n            const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n            let newValue = world[axisIdx];\n            if (this.faceDragOffset !== null) {\n                newValue += this.faceDragOffset;\n            }\n            sphereState.point[axisIdx] = newValue;\n            sphereState.sphereSource.setCenter(...sphereState.point);\n            sphereState.sphereSource.modified();\n            this._updateAfterFaceMovement(viewport);\n        };\n        this._calculateNewCornerPosition = (world) => {\n            let newCorner = [world[0], world[1], world[2]];\n            if (this.cornerDragOffset) {\n                newCorner = [\n                    world[0] + this.cornerDragOffset[0],\n                    world[1] + this.cornerDragOffset[1],\n                    world[2] + this.cornerDragOffset[2],\n                ];\n            }\n            return newCorner;\n        };\n        this._parseCornerKey = (uid) => {\n            const cornerKey = uid.replace('corner_', '');\n            return {\n                isXMin: cornerKey.includes('XMIN'),\n                isXMax: cornerKey.includes('XMAX'),\n                isYMin: cornerKey.includes('YMIN'),\n                isYMax: cornerKey.includes('YMAX'),\n                isZMin: cornerKey.includes('ZMIN'),\n                isZMax: cornerKey.includes('ZMAX'),\n            };\n        };\n        this._updateSpherePosition = (sphereState, newPosition) => {\n            sphereState.point = newPosition;\n            sphereState.sphereSource.setCenter(...newPosition);\n            sphereState.sphereSource.modified();\n        };\n        this._updateRelatedCorners = (draggedSphere, newCorner, axisFlags) => {\n            this.sphereStates.forEach((state) => {\n                if (!state.isCorner || state === draggedSphere) {\n                    return;\n                }\n                const key = state.uid.replace('corner_', '');\n                const shouldUpdate = this._shouldUpdateCorner(key, axisFlags);\n                if (shouldUpdate) {\n                    this._updateCornerCoordinates(state, newCorner, key, axisFlags);\n                }\n            });\n        };\n        this._shouldUpdateCorner = (cornerKey, axisFlags) => {\n            return ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX')) ||\n                (axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX')) ||\n                (axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX')));\n        };\n        this._updateCornerCoordinates = (state, newCorner, cornerKey, axisFlags) => {\n            if ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX'))) {\n                state.point[0] = newCorner[0];\n            }\n            if ((axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX'))) {\n                state.point[1] = newCorner[1];\n            }\n            if ((axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX'))) {\n                state.point[2] = newCorner[2];\n            }\n            state.sphereSource.setCenter(...state.point);\n            state.sphereSource.modified();\n        };\n        this._updateAfterCornerMovement = (viewport) => {\n            this._updateFaceSpheresFromCorners();\n            this._updateCornerSpheres();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._updateAfterFaceMovement = (viewport) => {\n            this._updateCornerSpheresFromFaces();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._triggerToolChangedEvent = (sphereState) => {\n            triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                toolCenter: sphereState.point,\n                axis: sphereState.isCorner ? 'corner' : sphereState.axis,\n                draggingSphereIndex: this.draggingSphereIndex,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this.originalClippingPlanes = [];\n            this.sphereStates = [];\n            this.edgeLines = {};\n            this._initialize3DViewports(viewportsInfo);\n        };\n        this._rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    onSetToolActive() {\n        if (this.sphereStates && this.sphereStates.length > 0) {\n            if (this.configuration.showHandles) {\n                this.setHandlesVisible(false);\n                this.setClippingPlanesVisible(false);\n            }\n            else {\n                this.setHandlesVisible(true);\n                this.setClippingPlanesVisible(true);\n            }\n        }\n        else {\n            const viewportsInfo = this._getViewportsInfo();\n            const subscribeToElementResize = () => {\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._initialize3DViewports(viewportsInfo);\n            if (this.sphereStates && this.sphereStates.length > 0) {\n                this.setHandlesVisible(true);\n            }\n            else {\n                this.originalClippingPlanes = [];\n                this._initialize3DViewports(viewportsInfo);\n            }\n        }\n    }\n    onSetToolDisabled() {\n        this._resizeObservers.forEach((resizeObserver, viewportId) => {\n            resizeObserver.disconnect();\n            this._resizeObservers.delete(viewportId);\n        });\n        if (this._viewportAddedListener) {\n            eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._viewportAddedListener = null;\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    }\n    setHandlesVisible(visible) {\n        this.configuration.showHandles = visible;\n        if (visible) {\n            this.sphereStates[SPHEREINDEX.XMIN].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMIN].origin[0];\n            this.sphereStates[SPHEREINDEX.XMAX].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMAX].origin[0];\n            this.sphereStates[SPHEREINDEX.YMIN].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMIN].origin[1];\n            this.sphereStates[SPHEREINDEX.YMAX].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMAX].origin[1];\n            this.sphereStates[SPHEREINDEX.ZMIN].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMIN].origin[2];\n            this.sphereStates[SPHEREINDEX.ZMAX].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMAX].origin[2];\n            [\n                SPHEREINDEX.XMIN,\n                SPHEREINDEX.XMAX,\n                SPHEREINDEX.YMIN,\n                SPHEREINDEX.YMAX,\n                SPHEREINDEX.ZMIN,\n                SPHEREINDEX.ZMAX,\n            ].forEach((idx) => {\n                const s = this.sphereStates[idx];\n                s.sphereSource.setCenter(...s.point);\n                s.sphereSource.modified();\n            });\n            this._updateCornerSpheres();\n        }\n        this._updateHandlesVisibility();\n        const viewportsInfo = this._getViewportsInfo();\n        const [viewport3D] = viewportsInfo;\n        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n        viewport.render();\n    }\n    getHandlesVisible() {\n        return this.configuration.showHandles;\n    }\n    getClippingPlanesVisible() {\n        return this.configuration.showClippingPlanes;\n    }\n    setClippingPlanesVisible(visible) {\n        this.configuration.showClippingPlanes = visible;\n        const viewport = this._getViewport();\n        this._updateClippingPlanes(viewport);\n        viewport.render();\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        if (this.draggingSphereIndex !== null) {\n            this._onMouseMoveSphere(evt);\n        }\n        else {\n            const currentPointsCanvas = currentPoints.canvas;\n            const lastPointsCanvas = lastPoints.canvas;\n            const { rotateIncrementDegrees } = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const normalizedPosition = [\n                currentPointsCanvas[0] / width,\n                currentPointsCanvas[1] / height,\n            ];\n            const normalizedPreviousPosition = [\n                lastPointsCanvas[0] / width,\n                lastPointsCanvas[1] / height,\n            ];\n            const center = [width * 0.5, height * 0.5];\n            const centerWorld = viewport.canvasToWorld(center);\n            const normalizedCenter = [0.5, 0.5];\n            const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n            const op = [normalizedPreviousPosition[0], 0, 0];\n            const oe = [normalizedPosition[0], 0, 0];\n            const opsq = op[0] ** 2;\n            const oesq = oe[0] ** 2;\n            const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n            const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n            const nop = [op[0], 0, lop];\n            vtkMath.normalize(nop);\n            const noe = [oe[0], 0, loe];\n            vtkMath.normalize(noe);\n            const dot = vtkMath.dot(nop, noe);\n            if (Math.abs(dot) > 0.0001) {\n                const angleX = -2 *\n                    Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                    Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                    rotateIncrementDegrees;\n                const upVec = camera.viewUp;\n                const atV = camera.viewPlaneNormal;\n                const rightV = [0, 0, 0];\n                const forwardV = [0, 0, 0];\n                vtkMath.cross(upVec, atV, rightV);\n                vtkMath.normalize(rightV);\n                vtkMath.cross(atV, rightV, forwardV);\n                vtkMath.normalize(forwardV);\n                vtkMath.normalize(upVec);\n                this._rotateCamera(viewport, centerWorld, forwardV, angleX);\n                const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                    rotateIncrementDegrees;\n                this._rotateCamera(viewport, centerWorld, rightV, angleY);\n            }\n            viewport.render();\n        }\n    }\n    _updateClippingPlanes(viewport) {\n        const actorEntry = viewport.getDefaultActor();\n        if (!actorEntry || !actorEntry.actor) {\n            if (!viewport._missingActorWarned) {\n                console.warn('VolumeCroppingTool._updateClippingPlanes: No default actor found in viewport.');\n                viewport._missingActorWarned = true;\n            }\n            return;\n        }\n        const actor = actorEntry.actor;\n        const mapper = actor.getMapper();\n        const matrix = actor.getMatrix();\n        if (!this.configuration.showClippingPlanes) {\n            mapper.removeAllClippingPlanes();\n            return;\n        }\n        const rot = mat3.create();\n        mat3.fromMat4(rot, matrix);\n        const normalMatrix = mat3.create();\n        mat3.invert(normalMatrix, rot);\n        mat3.transpose(normalMatrix, normalMatrix);\n        const originalPlanes = this.originalClippingPlanes;\n        if (!originalPlanes || !originalPlanes.length) {\n            return;\n        }\n        mapper.removeAllClippingPlanes();\n        const transformedOrigins = [];\n        const transformedNormals = [];\n        for (let i = 0; i < originalPlanes.length; ++i) {\n            const plane = originalPlanes[i];\n            const oVec = vec3.create();\n            vec3.transformMat4(oVec, new Float32Array(plane.origin), matrix);\n            const o = [oVec[0], oVec[1], oVec[2]];\n            const nVec = vec3.create();\n            vec3.transformMat3(nVec, new Float32Array(plane.normal), normalMatrix);\n            vec3.normalize(nVec, nVec);\n            const n = [nVec[0], nVec[1], nVec[2]];\n            transformedOrigins.push(o);\n            transformedNormals.push(n);\n        }\n        for (let i = 0; i < transformedOrigins.length; ++i) {\n            const planeInstance = vtkPlane.newInstance({\n                origin: transformedOrigins[i],\n                normal: transformedNormals[i],\n            });\n            mapper.addClippingPlane(planeInstance);\n        }\n    }\n    _updateHandlesVisibility() {\n        this.sphereStates.forEach((state) => {\n            if (state.sphereActor) {\n                state.sphereActor.setVisibility(this.configuration.showHandles);\n            }\n        });\n        Object.values(this.edgeLines).forEach(({ actor }) => {\n            if (actor) {\n                actor.setVisibility(this.configuration.showHandles);\n            }\n        });\n    }\n    _addLine3DBetweenPoints(viewport, point1, point2, color = [0.7, 0.7, 0.7], uid = '') {\n        if (point1[0] === point2[0] &&\n            point1[1] === point2[1] &&\n            point1[2] === point2[2]) {\n            return { actor: null, source: null };\n        }\n        const points = vtkPoints.newInstance();\n        points.setNumberOfPoints(2);\n        points.setPoint(0, point1[0], point1[1], point1[2]);\n        points.setPoint(1, point2[0], point2[1], point2[2]);\n        const lines = vtkCellArray.newInstance({ values: [2, 0, 1] });\n        const polyData = vtkPolyData.newInstance();\n        polyData.setPoints(points);\n        polyData.setLines(lines);\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.getProperty().setColor(...color);\n        actor.getProperty().setLineWidth(0.5);\n        actor.getProperty().setOpacity(1.0);\n        actor.getProperty().setInterpolationToFlat();\n        actor.getProperty().setAmbient(1.0);\n        actor.getProperty().setDiffuse(0.0);\n        actor.getProperty().setSpecular(0.0);\n        actor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor, uid });\n        return { actor, source: polyData };\n    }\n    _addSphere(viewport, point, axis, position, cornerKey = null, adaptiveRadius) {\n        const uid = cornerKey ? `corner_${cornerKey}` : `${axis}_${position}`;\n        const sphereState = this.sphereStates.find((s) => s.uid === uid);\n        if (sphereState) {\n            return;\n        }\n        const sphereSource = vtkSphereSource.newInstance();\n        sphereSource.setCenter(point);\n        sphereSource.setRadius(adaptiveRadius);\n        const sphereMapper = vtkMapper.newInstance();\n        sphereMapper.setInputConnection(sphereSource.getOutputPort());\n        const sphereActor = vtkActor.newInstance();\n        sphereActor.setMapper(sphereMapper);\n        let color = [0.0, 1.0, 0.0];\n        const sphereColors = this.configuration.sphereColors || {};\n        if (cornerKey) {\n            color = sphereColors.CORNERS || [0.0, 0.0, 1.0];\n        }\n        else if (axis === 'z') {\n            color = sphereColors.AXIAL || [1.0, 0.0, 0.0];\n        }\n        else if (axis === 'x') {\n            color = sphereColors.SAGITTAL || [1.0, 1.0, 0.0];\n        }\n        else if (axis === 'y') {\n            color = sphereColors.CORONAL || [0.0, 1.0, 0.0];\n        }\n        const idx = this.sphereStates.findIndex((s) => s.uid === uid);\n        if (idx === -1) {\n            this.sphereStates.push({\n                point: point.slice(),\n                axis,\n                uid,\n                sphereSource,\n                sphereActor,\n                isCorner: !!cornerKey,\n                color,\n            });\n        }\n        else {\n            this.sphereStates[idx].point = point.slice();\n            this.sphereStates[idx].sphereSource = sphereSource;\n        }\n        const existingActors = viewport.getActors();\n        const existing = existingActors.find((a) => a.uid === uid);\n        if (existing) {\n            return;\n        }\n        sphereActor.getProperty().setColor(color);\n        sphereActor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor: sphereActor, uid: uid });\n    }\n    _calculateAdaptiveSphereRadius(diagonal) {\n        const baseRadius = this.configuration.sphereRadius !== undefined\n            ? this.configuration.sphereRadius\n            : 8;\n        const scaleFactor = this.configuration.sphereRadiusScale || 0.01;\n        const adaptiveRadius = diagonal * scaleFactor;\n        const minRadius = this.configuration.minSphereRadius || 2;\n        const maxRadius = this.configuration.maxSphereRadius || 50;\n        return Math.max(minRadius, Math.min(maxRadius, adaptiveRadius));\n    }\n    _updateClippingPlanesFromFaceSpheres(viewport) {\n        const mapper = viewport.getDefaultActor().actor.getMapper();\n        this.originalClippingPlanes[0].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMIN].point,\n        ];\n        this.originalClippingPlanes[1].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMAX].point,\n        ];\n        this.originalClippingPlanes[2].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMIN].point,\n        ];\n        this.originalClippingPlanes[3].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMAX].point,\n        ];\n        this.originalClippingPlanes[4].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMIN].point,\n        ];\n        this.originalClippingPlanes[5].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMAX].point,\n        ];\n        mapper.removeAllClippingPlanes();\n        for (let i = 0; i < 6; ++i) {\n            const origin = this.originalClippingPlanes[i].origin;\n            const normal = this.originalClippingPlanes[i].normal;\n            const plane = vtkPlane.newInstance({\n                origin,\n                normal,\n            });\n            mapper.addClippingPlane(plane);\n        }\n    }\n    _updateCornerSpheresFromFaces() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n    }\n    _updateFaceSpheresFromCorners() {\n        const corners = [\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMAX].point,\n        ];\n        const xs = corners.map((p) => p[0]);\n        const ys = corners.map((p) => p[1]);\n        const zs = corners.map((p) => p[2]);\n        const xMin = Math.min(...xs), xMax = Math.max(...xs);\n        const yMin = Math.min(...ys), yMax = Math.max(...ys);\n        const zMin = Math.min(...zs), zMax = Math.max(...zs);\n        this.sphereStates[SPHEREINDEX.XMIN].point = [\n            xMin,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.XMAX].point = [\n            xMax,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMIN].point = [\n            (xMin + xMax) / 2,\n            yMin,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMAX].point = [\n            (xMin + xMax) / 2,\n            yMax,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMIN].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMin,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMAX].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMax,\n        ];\n        [\n            SPHEREINDEX.XMIN,\n            SPHEREINDEX.XMAX,\n            SPHEREINDEX.YMIN,\n            SPHEREINDEX.YMAX,\n            SPHEREINDEX.ZMIN,\n            SPHEREINDEX.ZMAX,\n        ].forEach((idx) => {\n            const s = this.sphereStates[idx];\n            s.sphereSource.setCenter(...s.point);\n            s.sphereSource.modified();\n        });\n    }\n    _updateCornerSpheres() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n        Object.values(this.edgeLines).forEach(({ source, key1, key2 }) => {\n            const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n            const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n            if (state1 && state2) {\n                const points = source.getPoints();\n                points.setPoint(0, state1.point[0], state1.point[1], state1.point[2]);\n                points.setPoint(1, state2.point[0], state2.point[1], state2.point[2]);\n                points.modified();\n                source.modified();\n            }\n        });\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n}\nVolumeCroppingTool.toolName = 'VolumeCropping';\nexport default VolumeCroppingTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            imageDynamicRange = Math.min(calculatedDynamicRange[1] - calculatedDynamicRange[0], metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return ratio > 1 ? Math.round(ratio) : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Enums, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { Events } from '../enums';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                spacing = imageData.spacing;\n                const { dimensions } = imageData;\n                const imageWidth = dimensions[0] * spacing[0];\n                const imageHeight = dimensions[1] * spacing[1];\n                const canvasAspect = size[0] / size[1];\n                const displayArea = viewport.options?.displayArea;\n                const imageAreaScaleX = displayArea?.imageArea?.[0] ?? 1.1;\n                const imageAreaScaleY = displayArea?.imageArea?.[1] ?? 1.1;\n                const scaledImageWidth = imageWidth * imageAreaScaleX;\n                const scaledImageHeight = imageHeight * imageAreaScaleY;\n                const scaledImageAspect = scaledImageWidth / scaledImageHeight;\n                let minParallelScaleRequired;\n                if (scaledImageAspect > canvasAspect) {\n                    minParallelScaleRequired = (scaledImageWidth / canvasAspect) * 0.5;\n                }\n                else {\n                    minParallelScaleRequired = scaledImageHeight * 0.5;\n                }\n                const { minZoomScale, maxZoomScale } = this.configuration;\n                const minScaleInWorld = minParallelScaleRequired / maxZoomScale;\n                const maxScaleInWorld = minParallelScaleRequired / minZoomScale;\n                if (parallelScaleToSet < minScaleInWorld) {\n                    cappedParallelScale = minScaleInWorld;\n                    thresholdExceeded = true;\n                }\n                else if (parallelScaleToSet > maxScaleInWorld) {\n                    cappedParallelScale = maxScaleInWorld;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    mouseWheelCallback(evt) {\n        this._zoom(evt);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _zoom(evt) {\n        const { element, points } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const wheelData = evt.detail.wheel;\n        const direction = wheelData.direction;\n        const eventDetails = {\n            detail: {\n                element,\n                eventName: Events.MOUSE_WHEEL,\n                renderingEngineId: enabledElement.renderingEngineId,\n                viewportId: viewport.id,\n                camera: {},\n                deltaPoints: {\n                    page: points.page,\n                    client: points.client,\n                    world: points.world,\n                    canvas: [0, -direction * 5],\n                },\n                startPoints: points,\n                lastPoints: points,\n                currentPoints: points,\n            },\n        };\n        if (viewport.type === Enums.ViewportType.STACK) {\n            this.preMouseDownCallback(eventDetails);\n        }\n        this._dragCallback(eventDetails);\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawPath as drawPathSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            showAngleArc: false,\n            arcOffset: 5,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (this.configuration.showAngleArc) {\n                    const center = canvasCoordinates[1];\n                    const offset = this.configuration.arcOffset;\n                    const radius = Math.min(lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;\n                    const anglePoints = [];\n                    let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);\n                    let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);\n                    if (endAngle < startAngle) {\n                        endAngle += 2 * Math.PI;\n                    }\n                    const angleDifference = endAngle - startAngle;\n                    if (angleDifference > Math.PI) {\n                        const temp = startAngle;\n                        startAngle = endAngle;\n                        endAngle = temp + 2 * Math.PI;\n                    }\n                    const segments = 32;\n                    for (let i = 0; i <= segments; i++) {\n                        const angle = startAngle + (i / segments) * (endAngle - startAngle);\n                        anglePoints.push([\n                            center[0] + radius * Math.cos(angle),\n                            center[1] + radius * Math.sin(angle),\n                        ]);\n                    }\n                    drawPathSvg(svgDrawingHelper, annotationUID, '3', anglePoints, {\n                        color: color,\n                        width: lineWidth,\n                        lineDash: angleArcLineDash,\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const { arrowFirst } = this.configuration;\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        arrowFirst,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((text) => {\n                    if (!text) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.text = text;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, text);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, text } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text: text || '',\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2, vec3 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            simplified: true,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { points } = annotation.data.handles;\n            const canvasHandles = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasHandles[0];\n            const radius = getCanvasCircleRadius([canvasCenter, canvasHandles[1]]);\n            const radiusPoint = getCanvasCircleRadius([canvasCenter, canvasCoords]);\n            return Math.abs(radiusPoint - radius) < proximity / 2;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { world: worldPos, canvas: currentCanvasPoints } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const centerWorld = data.handles.points[0];\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            if (this.configuration.simplified) {\n                data.handles.points[1] = worldPos;\n            }\n            else {\n                const radiusCanvas = vec2.distance(centerCanvas, currentCanvasPoints);\n                data.handles.points[0] = [...centerWorld];\n                data.handles.points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - radiusCanvas,\n                ]);\n                data.handles.points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + radiusCanvas,\n                ]);\n                data.handles.points[3] = canvasToWorld([\n                    centerCanvas[0] - radiusCanvas,\n                    centerCanvas[1],\n                ]);\n                data.handles.points[4] = canvasToWorld([\n                    centerCanvas[0] + radiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints, deltaPoints } = eventDetail;\n            if (handleIndex === 0) {\n                const worldPosDelta = deltaPoints.world;\n                points.forEach((point) => {\n                    vec3.add(point, point, worldPosDelta);\n                });\n            }\n            else {\n                const centerWorld = points[0];\n                const centerCanvas = worldToCanvas(centerWorld);\n                const currentCanvasPoint = currentPoints.canvas;\n                const newRadiusCanvas = vec2.distance(centerCanvas, currentCanvasPoint);\n                points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - newRadiusCanvas,\n                ]);\n                points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + newRadiusCanvas,\n                ]);\n                points[3] = canvasToWorld([\n                    centerCanvas[0] - newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n                points[4] = canvasToWorld([\n                    centerCanvas[0] + newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                annotation.highlighted = false;\n                annotation.data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([center, canvasCoordinates[1]]);\n                const canvasCorners = getCanvasCircleCorners([\n                    center,\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.calculateStats) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, targetId);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [center, canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasCoordinates[0];\n            const canvasTop = canvasCoordinates[1];\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([canvasCenter, canvasTop]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = points[0];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(radius)) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    initialRotation: viewport.getRotation(),\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const [bottom, top, left, right] = canvasCoordinates;\n            const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n            const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n            const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);\n            const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n            const minorEllipse = {\n                center,\n                xRadius: (w - proximity) / 2,\n                yRadius: (h - proximity) / 2,\n                angle,\n            };\n            const majorEllipse = {\n                center,\n                xRadius: (w + proximity) / 2,\n                yRadius: (h + proximity) / 2,\n                angle,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const post2Index = transformWorldToIndex(imageData, worldPos2);\n                post2Index[0] = Math.floor(post2Index[0]);\n                post2Index[1] = Math.floor(post2Index[1]);\n                post2Index[2] = Math.floor(post2Index[2]);\n                this.isHandleOutsideImage = !this._isInsideVolume(pos1Index, post2Index, dimensions);\n                const iMin = Math.min(pos1Index[0], post2Index[0]);\n                const iMax = Math.max(pos1Index[0], post2Index[0]);\n                const jMin = Math.min(pos1Index[1], post2Index[1]);\n                const jMax = Math.max(pos1Index[1], post2Index[1]);\n                const kMin = Math.min(pos1Index[2], post2Index[2]);\n                const kMax = Math.max(pos1Index[2], post2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = [\n                    (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                    (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                    (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                ];\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                const handles = [pos1Index, post2Index];\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n                    scale /\n                    scale;\n                const pixelUnitsOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                let pointsInShape;\n                if (voxelManager) {\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        boundsIJK,\n                        imageData,\n                        isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                        returnPoints: this.configuration.storePointData,\n                    });\n                }\n                const stats = this.configuration.statsCalculator.getStatistics();\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    mean: stats.mean?.value,\n                    max: stats.max?.value,\n                    min: stats.min?.value,\n                    stdDev: stats.stdDev?.value,\n                    statsArray: stats.array,\n                    pointsInShape,\n                    isEmptyArea,\n                    areaUnit,\n                    modalityUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const { xRadius, yRadius, center, angle } = ellipse;\n        const rotLocation = vec2.rotate(vec2.create(), location, center, -angle);\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID: null,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.text], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle, interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n            textCanvasOffset: {\n                x: 6,\n                y: -6,\n            },\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + this.configuration.textCanvasOffset.x,\n                        canvasCoordinates[1] + this.configuration.textCanvasOffset.y,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n                annotation.invalidated = true;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { eventTarget, utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nimport { Events } from '../../enums';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.annotationCutMergeCompletedBinded =\n            this.annotationCutMergeCompleted.bind(this);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    annotationCutMergeCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nconst splineToolNames = [\n    'CatmullRomSplineROI',\n    'LinearSplineROI',\n    'BSplineROI',\n    'CardinalSplineROI',\n];\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            simplifiedSpline: false,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                enableTwoPointPreview: false,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.splineToolNames = [\n            'CatmullRomSplineROI',\n            'LinearSplineROI',\n            'BSplineROI',\n            'CardinalSplineROI',\n        ];\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n        this.annotationCompletedBinded = this.annotationCompleted.bind(this);\n    }\n    annotationCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline ||\n            !this.isContourSegmentationTool()) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.removeListeners();\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints >= 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const { enableTwoPointPreview } = this.configuration.spline;\n            if (spline.numControlPoints === 1 && enableTwoPointPreview) {\n                const firstPoint = canvasCoordinates[0];\n                const previewPolylinePoints = [firstPoint, lastCanvasPoint];\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n            else if (spline.numControlPoints > 1) {\n                const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    isSplineAnnotation(annotation) {\n        return splineToolNames.includes(annotation?.metadata?.toolName);\n    }\n    createSplineObjectFromType(annotation, splineType) {\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        annotation.data.spline = {\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        };\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events, ChangeTypes } from '../../../enums';\nimport { getEnabledElement, utilities, metaData, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawFan as drawFanSvg, } from '../../../drawingSvg';\nimport { state } from '../../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../../cursors/elementCursor';\nimport { angleFromCenter, calculateInnerFanPercentage, clipInterval, intervalFromPoints, mergeIntervals, subtractIntervals, } from '../../../utilities/math/fan/fanUtils';\nimport { calculateFanGeometry } from './utils/fanExtraction';\nconst { transformIndexToWorld } = utilities;\nclass UltrasoundPleuraBLineTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundPleuraBLineTool'; }\n    static { this.USPleuraBLineAnnotationType = {\n        BLINE: 'bLine',\n        PLEURA: 'pleura',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            center: null,\n            innerRadius: null,\n            outerRadius: null,\n            startAngle: null,\n            endAngle: null,\n            bLineColor: 'rgb(60, 255, 60)',\n            pleuraColor: 'rgb(0, 4, 255)',\n            drawDepthGuide: true,\n            depth_ratio: 0.5,\n            depthGuideColor: 'rgb(0, 255, 255)',\n            depthGuideThickness: 4,\n            depthGuideDashLength: 20,\n            depthGuideDashGap: 16,\n            depthGuideOpacity: 0.2,\n            fanOpacity: 0.1,\n            showFanAnnotations: true,\n            updatePercentageCallback: null,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.pleuraAnnotations = [];\n        this.bLineAnnotations = [];\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    annotationType: this.getActiveAnnotationType(),\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element) || {};\n            if (!viewport) {\n                return;\n            }\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                const allPointsInsideShape = points.every((point) => {\n                    const newPoint = [\n                        point[0] + worldPosDelta[0],\n                        point[1] + worldPosDelta[1],\n                        point[2] + worldPosDelta[2],\n                    ];\n                    return this.isInsideFanShape(viewport, newPoint);\n                });\n                if (allPointsInsideShape) {\n                    points.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                    annotation.invalidated = true;\n                }\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                if (this.isInsideFanShape(viewport, worldPos)) {\n                    data.handles.points[handleIndex] = [...worldPos];\n                    annotation.invalidated = true;\n                }\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            if (!this.getFanShapeGeometryParameters(viewport)) {\n                return;\n            }\n            const { imageData } = viewport.getImageData() || {};\n            if (!imageData) {\n                return renderStatus;\n            }\n            if (this.configuration.drawDepthGuide) {\n                this.drawDepthGuide(svgDrawingHelper, viewport);\n            }\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const fanCenter = viewport.worldToCanvas(transformIndexToWorld(imageData, this.configuration.center));\n            const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);\n            const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;\n            const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;\n            const currentImageId = viewport.getCurrentImageId();\n            const unMergedPleuraIntervals = annotations\n                .filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId)\n                .map((annotation) => {\n                const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n                const interval = intervalFromPoints(fanCenter, canvasCoordinates);\n                return interval;\n            });\n            const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);\n            const pleuraIntervalsDisplayed = [];\n            const bLineIntervalsDisplayed = [];\n            const drawAnnotation = (annotation) => {\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    return;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color: this.getColorForLineType(annotation),\n                        fill: this.getColorForLineType(annotation),\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color: this.getColorForLineType(annotation),\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                if (this.configuration.showFanAnnotations) {\n                    const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);\n                    let fanNumber = 0;\n                    if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                        const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval) => {\n                            const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);\n                            clippedIntervals.forEach((clippedInterval) => {\n                                fanNumber++;\n                                const fanIndex = fanNumber;\n                                const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                                const fanUID = `2-${fanIndex}`;\n                                drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {\n                                    color: 'transparent',\n                                    fill: this.getColorForLineType(annotation),\n                                    fillOpacity: this.configuration.fanOpacity,\n                                    width: lineWidth,\n                                    lineDash,\n                                    shadow,\n                                }, fanDataId, 10);\n                                bLineIntervalsDisplayed.push(clippedInterval);\n                            });\n                        });\n                    }\n                    else if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                        const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval, index) => {\n                            fanNumber++;\n                            const fanIndex = fanNumber;\n                            const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                            const fanUID = `2-${fanIndex}`;\n                            drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {\n                                color: 'transparent',\n                                fill: this.getColorForLineType(annotation),\n                                fillOpacity: this.configuration.fanOpacity,\n                                width: lineWidth,\n                                lineDash,\n                                shadow,\n                            }, fanDataId, 5);\n                            pleuraIntervalsDisplayed.push(interval);\n                        });\n                    }\n                }\n            };\n            const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId);\n            pleuraAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n                annotation.metadata.referencedImageId === currentImageId);\n            bLineAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            renderStatus = true;\n            if (this.configuration.updatePercentageCallback && viewport) {\n                this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));\n            }\n            return renderStatus;\n        };\n        this.activeAnnotationType =\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;\n    }\n    static filterAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return [];\n        }\n        const filteredAnnotations = annotations.filter((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            return filterFunction(currentImageId);\n        });\n        return filteredAnnotations;\n    }\n    static countAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        const { viewport } = getEnabledElement(element);\n        const imageIds = viewport.getImageIds();\n        const getImageIdIndex = (imageId) => {\n            const index = imageIds.findIndex((id) => id === imageId);\n            if (index === -1) {\n                return 0;\n            }\n            return index;\n        };\n        if (!annotations?.length) {\n            return;\n        }\n        const annotationMapping = new Map();\n        annotations.forEach((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            if (!filterFunction(currentImageId)) {\n                return;\n            }\n            const { annotationType } = annotation.data;\n            let counts;\n            if (annotationMapping.has(currentImageId)) {\n                counts = annotationMapping.get(currentImageId);\n            }\n            else {\n                counts = {\n                    frame: getImageIdIndex(currentImageId),\n                    bLine: 0,\n                    pleura: 0,\n                };\n            }\n            if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                counts.pleura++;\n            }\n            else if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                counts.bLine++;\n            }\n            annotationMapping.set(currentImageId, counts);\n        });\n        return annotationMapping;\n    }\n    static deleteAnnotations(element, filterFunction = () => false) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return;\n        }\n        annotations.forEach((annotation) => {\n            if (!filterFunction(annotation.metadata.referencedImageId)) {\n                return;\n            }\n            removeAnnotation(annotation.annotationUID);\n        });\n    }\n    setActiveAnnotationType(type) {\n        this.activeAnnotationType = type;\n    }\n    getActiveAnnotationType() {\n        return this.activeAnnotationType;\n    }\n    deleteLastAnnotationType(element, type) {\n        let annotationList;\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);\n        }\n        else if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);\n        }\n        if (annotationList?.length > 0) {\n            const annotation = annotationList.pop();\n            removeAnnotation(annotation.annotationUID);\n        }\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(UltrasoundPleuraBLineTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    isInsideFanShape(viewport, point) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return false;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (imageData) {\n            const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            const angle = angleFromCenter(fanCenter, canvasCoordinates);\n            return (angle >= this.configuration.startAngle &&\n                angle <= this.configuration.endAngle);\n        }\n    }\n    updateFanGeometryConfiguration(fanGeometry) {\n        if (!fanGeometry) {\n            return;\n        }\n        if (this.isFanShapeGeometryParametersValid(fanGeometry)) {\n            this.configuration.center = [\n                fanGeometry.center[0],\n                fanGeometry.center[1],\n                0,\n            ];\n        }\n        this.configuration.innerRadius = fanGeometry.innerRadius;\n        this.configuration.outerRadius = fanGeometry.outerRadius;\n        this.configuration.startAngle = fanGeometry.startAngle;\n        this.configuration.endAngle = fanGeometry.endAngle;\n    }\n    deriveFanGeometryFromViewport(viewport) {\n        const imageId = viewport.getCurrentImageId();\n        const { fanGeometry } = calculateFanGeometry(imageId) || {};\n        if (fanGeometry) {\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n    }\n    isFanShapeGeometryParametersValid(fanGeometry) {\n        if (!fanGeometry) {\n            fanGeometry = this.configuration;\n        }\n        return (fanGeometry?.center &&\n            fanGeometry?.innerRadius > 0 &&\n            fanGeometry?.outerRadius &&\n            fanGeometry?.startAngle > 0 &&\n            fanGeometry?.startAngle < 360 &&\n            fanGeometry?.endAngle > 0 &&\n            fanGeometry?.endAngle < 360);\n    }\n    getFanShapeGeometryParameters(viewport) {\n        if (this.isFanShapeGeometryParametersValid()) {\n            return true;\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            const imageId = viewport.getCurrentImageId();\n            const fanGeometry = metaData.get('ultrasoundFanShapeGeometry', imageId);\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            this.deriveFanGeometryFromViewport(viewport);\n        }\n        return this.isFanShapeGeometryParametersValid();\n    }\n    calculateBLinePleuraPercentage(viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const { element } = viewport;\n        const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n        const currentImageId = viewport.getCurrentImageId();\n        const annotations = getAnnotations(this.getToolName(), element) || [];\n        const pleuraIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        const bLineIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);\n    }\n    getColorForLineType(annotation) {\n        const { annotationType } = annotation.data;\n        const { bLineColor, pleuraColor } = this.configuration;\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            return bLineColor;\n        }\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            return pleuraColor;\n        }\n        return bLineColor;\n    }\n    getIndexToCanvasRatio(viewport) {\n        const { imageData } = viewport.getImageData() || {};\n        const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));\n        const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));\n        const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];\n        const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);\n        return vectorSize;\n    }\n    drawDepthGuide(svgDrawingHelper, viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const radToDegree = (rad) => (rad * 180) / Math.PI;\n        const degreeToRad = (degree) => (degree * Math.PI) / 180;\n        const indexToCanvas = (point) => {\n            return viewport.worldToCanvas(transformIndexToWorld(imageData, point));\n        };\n        const depth_radius = this.configuration.innerRadius +\n            this.configuration.depth_ratio *\n                (this.configuration.outerRadius - this.configuration.innerRadius);\n        const theta_start = this.configuration.startAngle;\n        const theta_end = this.configuration.endAngle;\n        const theta_range = theta_end - theta_start;\n        const arc_length = degreeToRad(theta_range) * depth_radius;\n        let num_dashes = Math.round(arc_length /\n            (this.configuration.depthGuideDashLength +\n                this.configuration.depthGuideDashGap));\n        if (num_dashes <= 0) {\n            num_dashes = Math.max(15, Math.round(theta_range / 5));\n        }\n        const theta_step = theta_range / num_dashes;\n        for (let i = 0; i < num_dashes; i++) {\n            const theta1 = degreeToRad(theta_start + i * theta_step);\n            const theta2 = degreeToRad(theta_start +\n                i * theta_step +\n                radToDegree(this.configuration.depthGuideDashLength) / depth_radius);\n            const start_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta1),\n                this.configuration.center[1] + depth_radius * Math.sin(theta1),\n                0,\n            ];\n            const end_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta2),\n                this.configuration.center[1] + depth_radius * Math.sin(theta2),\n                0,\n            ];\n            drawLineSvg(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {\n                color: this.configuration.depthGuideColor,\n                lineWidth: this.configuration.depthGuideThickness,\n                strokeOpacity: this.configuration.depthGuideOpacity,\n            });\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (utilities.indexWithinDimensions(index1, dimensions) &&\n            utilities.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    return [''];\n}\nexport default UltrasoundPleuraBLineTool;\n","export function pickPoints(hull, slack = 7) {\n    if (!hull.length) {\n        throw new Error('Convex hull is empty');\n    }\n    const n = hull.length;\n    const next = (i) => (i + 1) % n;\n    const walk = (from, to) => {\n        const idx = [];\n        for (let i = from;; i = next(i)) {\n            idx.push(i);\n            if (i === to) {\n                break;\n            }\n        }\n        return idx;\n    };\n    let i2 = 0, i3 = 0;\n    for (let i = 1; i < n; i++) {\n        if (hull[i][0] < hull[i2][0]) {\n            i2 = i;\n        }\n        if (hull[i][0] > hull[i3][0]) {\n            i3 = i;\n        }\n    }\n    const P2 = hull[i2];\n    const P3 = hull[i3];\n    const pathA = walk(i2, i3);\n    const pathB = walk(i3, i2);\n    const globalYmin = Math.min(...hull.map((p) => p[1]));\n    const upperPath = pathA.some((i) => hull[i][1] === globalYmin)\n        ? pathA\n        : pathB;\n    const topY = Math.min(...upperPath.map((i) => hull[i][1]));\n    let arcPts = upperPath\n        .map((i) => hull[i])\n        .filter((p) => Math.abs(p[1] - topY) <= slack);\n    if (arcPts.length < 2) {\n        arcPts = upperPath\n            .map((i) => hull[i])\n            .sort((a, b) => a[1] - b[1])\n            .slice(0, 2);\n    }\n    const P1 = arcPts.reduce((best, p) => (p[0] < best[0] ? p : best), arcPts[0]);\n    const P4 = arcPts.reduce((best, p) => (p[0] > best[0] ? p : best), arcPts[0]);\n    return { P1, P2, P3, P4 };\n}\nexport function computeEdgeBuffer(buffer, width, height) {\n    const total = width * height;\n    const channels = buffer.length / total;\n    if (![1, 3, 4].includes(channels)) {\n        throw new Error('Buffer must be 1,3 or 4 channels per pixel');\n    }\n    const gray = new Float32Array(total);\n    for (let i = 0; i < total; i++) {\n        if (channels === 1) {\n            gray[i] = buffer[i];\n        }\n        else {\n            const base = i * channels;\n            const r = buffer[base];\n            const g = buffer[base + 1];\n            const b = buffer[base + 2];\n            gray[i] = 0.299 * r + 0.587 * g + 0.114 * b;\n        }\n    }\n    const edgeBuf = new Float32Array(total);\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = y * width + x;\n            const i00 = idx - width - 1;\n            const i01 = idx - width;\n            const i02 = idx - width + 1;\n            const i10 = idx - 1;\n            const i11 = idx;\n            const i12 = idx + 1;\n            const i20 = idx + width - 1;\n            const i21 = idx + width;\n            const i22 = idx + width + 1;\n            const gx = -gray[i00] +\n                gray[i02] +\n                -2 * gray[i10] +\n                2 * gray[i12] +\n                -gray[i20] +\n                gray[i22];\n            const gy = gray[i00] +\n                2 * gray[i01] +\n                gray[i02] -\n                gray[i20] -\n                2 * gray[i21] -\n                gray[i22];\n            edgeBuf[idx] = Math.hypot(gx, gy);\n        }\n    }\n    return edgeBuf;\n}\nexport function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {\n    const { maxDist = 15, slack = 2 } = opts;\n    const directions = {\n        P1: { dx: -1, dy: -1 },\n        P2: { dx: -1, dy: +1 },\n        P3: { dx: +1, dy: +1 },\n        P4: { dx: +1, dy: -1 },\n    };\n    function snapQuadrant(pt, { dx, dy }, threshold = 5) {\n        const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;\n        const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;\n        const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;\n        const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;\n        let best = pt;\n        for (const [cx, cy] of contour) {\n            if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {\n                continue;\n            }\n            const xi = Math.round(cx);\n            const yi = Math.round(cy);\n            if (xi < 0 || xi >= width || yi < 0 || yi >= height) {\n                continue;\n            }\n            const xAlign = (xi - best[0]) * dx;\n            const yAlign = (yi - best[0]) * dy;\n            const v = edgeBuf[yi * width + xi];\n            if (v > threshold && (xAlign > 0 || yAlign > 0)) {\n                best = [cx, cy];\n            }\n        }\n        return best;\n    }\n    return {\n        P1: snapQuadrant(rough.P1, directions.P1),\n        P2: snapQuadrant(rough.P2, directions.P2),\n        P3: snapQuadrant(rough.P3, directions.P3),\n        P4: snapQuadrant(rough.P4, directions.P4),\n    };\n}\nexport function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {\n    const rough = pickPoints(hull);\n    const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {\n        maxDist: 20,\n        step: 0.5,\n    });\n    return refined;\n}\n","import { intersectLine } from '../../../../utilities/math/line';\nfunction angleRad(center, p) {\n    return Math.atan2(p[1] - center[1], p[0] - center[0]);\n}\nexport function deriveFanGeometry(params) {\n    const { P1, P2, P3, P4 } = params;\n    const centerResult = intersectLine(P1, P2, P4, P3, true);\n    if (!centerResult) {\n        throw new Error('Fan edges appear parallel — no apex found');\n    }\n    const center = centerResult;\n    let startAngle = angleRad(center, P1) * (180 / Math.PI);\n    let endAngle = angleRad(center, P4) * (180 / Math.PI);\n    if (endAngle <= startAngle) {\n        const tempAngle = startAngle;\n        startAngle = endAngle;\n        endAngle = tempAngle;\n    }\n    const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);\n    const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);\n    const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);\n    const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);\n    const innerRadius = Math.min(d1, d4);\n    const outerRadius = Math.max(d2, d3);\n    return {\n        center,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius,\n    };\n}\n","import { cache } from '@cornerstonejs/core';\nimport { segmentLargestUSOutlineFromBuffer } from './segmentLargestUSOutlineFromBuffer';\nimport { generateConvexHullFromContour } from './generateConvexHullFromContour';\nimport { calculateFanShapeCorners } from './calculateFanShapeCorners';\nimport { deriveFanGeometry } from './deriveFanGeometry';\nexport function exportContourJpeg(pixelData, width, height, contour, opts = {}) {\n    const { strokeStyle = '#f00', lineWidth = 2, quality = 0.92 } = opts;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const totalPixels = width * height;\n    const channels = pixelData.length / totalPixels;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        const baseIn = i * channels;\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[baseIn];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    if (contour.length > 0) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);\n        for (let i = 1; i < contour.length; i++) {\n            ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function getPixelData(imageId) {\n    const image = cache.getImage(imageId);\n    if (!image) {\n        return;\n    }\n    const width = image.width;\n    const height = image.height;\n    const pixelData = image.getPixelData();\n    return {\n        pixelData,\n        width,\n        height,\n    };\n}\nexport default function saveBinaryData(url, filename) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.click();\n    a.remove();\n}\nfunction exportFanJpeg(pixelData, width, height, fan, opts = {}) {\n    const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius, } = fan;\n    const { strokeStyle = '#0ff', lineWidth = 2, quality = 0.92 } = opts;\n    const startAngle = (startAngleInDegrees * Math.PI) / 180;\n    const endAngle = (endAngleInDegrees * Math.PI) / 180;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const total = width * height;\n    const channels = pixelData.length / total;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < total; i++) {\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[i];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            const baseIn = i * channels;\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    ctx.beginPath();\n    for (let a = startAngle; a <= endAngle; a += 0.01) {\n        const x = center[0] + innerRadius * Math.cos(a);\n        const y = center[1] + innerRadius * Math.sin(a);\n        if (a === startAngle) {\n            ctx.moveTo(x, y);\n        }\n        else {\n            ctx.lineTo(x, y);\n        }\n    }\n    for (let a = endAngle; a >= startAngle; a -= 0.01) {\n        const x = center[0] + outerRadius * Math.cos(a);\n        const y = center[1] + outerRadius * Math.sin(a);\n        ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function downloadFanJpeg(imageId, contourType = 5) {\n    const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    let jpegDataUrl;\n    if (contourType === 1) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);\n    }\n    else if (contourType === 2) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);\n    }\n    else if (contourType === 3) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);\n    }\n    else if (contourType === 4) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, [\n            refined.P1,\n            refined.P2,\n            refined.P3,\n            refined.P4,\n        ]);\n    }\n    else {\n        jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {\n            strokeStyle: '#f00',\n            lineWidth: 3,\n            quality: 0.95,\n        });\n    }\n    saveBinaryData(jpegDataUrl, 'contour.jpg');\n}\nexport function calculateFanGeometry(imageId) {\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);\n    const { simplified, hull } = generateConvexHullFromContour(contour);\n    const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);\n    const fanGeometry = deriveFanGeometry({\n        P1: refined.P1,\n        P2: refined.P2,\n        P3: refined.P3,\n        P4: refined.P4,\n    });\n    return { contour, simplified, hull, refined, fanGeometry };\n}\n","import * as math from '../../../../utilities/math';\nexport function generateConvexHullFromContour(contour) {\n    const simplified = math.polyline.decimate(contour, 2);\n    const hull = math.polyline.convexHull(simplified);\n    return { simplified, hull };\n}\n","import { floodFill } from '../../../../utilities/segmentation';\nexport function segmentLargestUSOutlineFromBuffer(buffer, width, height) {\n    const totalPixels = width * height;\n    const channelCount = buffer.length / totalPixels;\n    if (![1, 3, 4].includes(channelCount)) {\n        throw new Error('Buffer must be 1, 3, or 4 channels per pixel');\n    }\n    const mask = Array.from({ length: height }, () => new Array(width).fill(false));\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const pixelIndex = y * width + x;\n            const base = pixelIndex * channelCount;\n            let isForeground = false;\n            for (let c = 0; c < Math.min(3, channelCount); c++) {\n                if (buffer[base + c] > 0) {\n                    isForeground = true;\n                    break;\n                }\n            }\n            mask[y][x] = isForeground;\n        }\n    }\n    const labels = Array.from({ length: height }, () => new Array(width).fill(0));\n    let currentLabel = 0;\n    const regionSizes = {};\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (mask[y][x] && labels[y][x] === 0) {\n                currentLabel++;\n                const getter = (px, py) => {\n                    if (px < 0 || px >= width || py < 0 || py >= height) {\n                        return false;\n                    }\n                    return mask[py][px] && labels[py][px] === 0;\n                };\n                let pixelCount = 0;\n                const options = {\n                    onFlood: (px, py) => {\n                        labels[py][px] = currentLabel;\n                        pixelCount++;\n                    },\n                    diagonals: false,\n                };\n                floodFill(getter, [x, y], options);\n                regionSizes[currentLabel] = pixelCount;\n            }\n        }\n    }\n    if (currentLabel === 0) {\n        return [];\n    }\n    const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);\n    function isBorder(x, y) {\n        if (labels[y][x] !== +largestLabel) {\n            return false;\n        }\n        for (const [dx, dy] of [\n            [1, 0],\n            [-1, 0],\n            [0, 1],\n            [0, -1],\n        ]) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                labels[ny][nx] !== +largestLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n    let start = null;\n    outer: for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (isBorder(x, y)) {\n                start = [x, y];\n                break outer;\n            }\n        }\n    }\n    if (!start) {\n        return [];\n    }\n    const dirs = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n    ];\n    const contour = [];\n    let current = start;\n    let prev = [start[0] - 1, start[1]];\n    do {\n        contour.push([current[0], current[1]]);\n        const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];\n        let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);\n        if (startDir < 0) {\n            startDir = 0;\n        }\n        let nextPt = null;\n        for (let k = 1; k <= 8; k++) {\n            const [dx, dy] = dirs[(startDir + k) % 8];\n            const nx = current[0] + dx, ny = current[1] + dy;\n            if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {\n                nextPt = [nx, ny];\n                const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];\n                prev = [current[0] + bdx, current[1] + bdy];\n                break;\n            }\n        }\n        if (!nextPt) {\n            break;\n        }\n        current = nextPt;\n    } while (current[0] !== start[0] || current[1] !== start[1]);\n    return contour;\n}\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { QuadraticSpline } from './QuadraticSpline';\nconst TRANSFORM_MATRIX = [\n    1, 0, 0,\n    -2, 2, 0,\n    1, -2, 1,\n];\nclass QuadraticBezier extends QuadraticSpline {\n    hasTangentPoints() {\n        return true;\n    }\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { QuadraticBezier as default, QuadraticBezier };\n","import { Spline } from './Spline';\nclass QuadraticSpline extends Spline {\n    getSplineCurves() {\n        return [];\n    }\n    getLineSegments() {\n        return [];\n    }\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        return [];\n    }\n}\nexport { QuadraticSpline as default, QuadraticSpline };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { utilities, getEnabledElement, cache, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nclass AnnotationDisplayTool extends BaseTool {\n    constructor() {\n        super(...arguments);\n        this.onImageSpacingCalibrated = (evt) => {\n            const { element, imageId } = evt.detail;\n            const imageURI = utilities.imageIdToURI(imageId);\n            const annotationManager = getAnnotationManager();\n            const framesOfReference = annotationManager.getFramesOfReference();\n            framesOfReference.forEach((frameOfReference) => {\n                const frameOfReferenceSpecificAnnotations = annotationManager.getAnnotations(frameOfReference);\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[this.getToolName()];\n                if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n                    return;\n                }\n                toolSpecificAnnotations.forEach((annotation) => {\n                    if (!annotation.metadata?.referencedImageId) {\n                        return;\n                    }\n                    const referencedImageURI = utilities.imageIdToURI(annotation.metadata.referencedImageId);\n                    if (referencedImageURI === imageURI) {\n                        annotation.invalidated = true;\n                        annotation.data.cachedStats = {};\n                    }\n                });\n                triggerAnnotationRender(element);\n            });\n        };\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations?.length) {\n            return [];\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        return filterAnnotationsForDisplay(viewport, annotations);\n    }\n    createAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp, position: cameraPosition } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const viewReference = viewport.getViewReference({ points: [worldPos] });\n        return {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                ...viewReference,\n                referencedImageId,\n                viewUp,\n                cameraPosition,\n            },\n            data: {\n                cachedStats: {},\n                handles: {\n                    points: [],\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n            },\n        };\n    }\n    getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId = targetId.split(/^[a-zA-Z]+:/)[1];\n        if (viewport instanceof BaseVolumeViewport) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const imageVolume = cache.getVolume(volumeId);\n            referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n        }\n        return referencedImageId;\n    }\n    getStyle(property, specifications, annotation) {\n        return getStyleProperty(property, specifications, getState(annotation), this.mode);\n    }\n}\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import { utilities } from '@cornerstonejs/core';\nimport ToolModes from '../../enums/ToolModes';\nconst { DefaultHistoryMemo } = utilities.HistoryMemo;\nclass BaseTool {\n    static { this.defaults = {\n        configuration: {\n            strategies: {},\n            defaultStrategy: undefined,\n            activeStrategy: undefined,\n            strategyOptions: {},\n        },\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        const mergedDefaults = BaseTool.mergeDefaultProps(BaseTool.defaults, defaultToolProps);\n        const initialProps = utilities.deepMerge(mergedDefaults, toolProps);\n        const { configuration = {}, supportedInteractionTypes, toolGroupId, } = initialProps;\n        this.toolGroupId = toolGroupId;\n        this.supportedInteractionTypes = supportedInteractionTypes || [];\n        this.configuration = Object.assign({}, configuration);\n        this.mode = ToolModes.Disabled;\n    }\n    static mergeDefaultProps(defaultProps = {}, additionalProps) {\n        if (!additionalProps) {\n            return defaultProps;\n        }\n        return utilities.deepMerge(defaultProps, additionalProps);\n    }\n    get toolName() {\n        return this.getToolName();\n    }\n    getToolName() {\n        return this.constructor.toolName;\n    }\n    applyActiveStrategy(enabledElement, operationData) {\n        const { strategies, activeStrategy } = this.configuration;\n        return strategies[activeStrategy]?.call(this, enabledElement, operationData);\n    }\n    applyActiveStrategyCallback(enabledElement, operationData, callbackType, ...extraArgs) {\n        const { strategies, activeStrategy } = this.configuration;\n        if (!strategies[activeStrategy]) {\n            throw new Error(`applyActiveStrategyCallback: active strategy ${activeStrategy} not found, check tool configuration or spellings`);\n        }\n        return strategies[activeStrategy][callbackType]?.call(this, enabledElement, operationData, ...extraArgs);\n    }\n    setConfiguration(newConfiguration) {\n        this.configuration = utilities.deepMerge(this.configuration, newConfiguration);\n    }\n    setActiveStrategy(strategyName) {\n        this.setConfiguration({ activeStrategy: strategyName });\n    }\n    getTargetImageData(targetId) {\n        if (targetId.startsWith('imageId:')) {\n            const imageId = targetId.split('imageId:')[1];\n            const imageURI = utilities.imageIdToURI(imageId);\n            let viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            viewports = viewports.filter((viewport) => {\n                return viewport.getCurrentImageId() === imageId;\n            });\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('volumeId:')) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const viewports = utilities.getViewportsWithVolumeId(volumeId);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('videoId:')) {\n            const imageURI = utilities.imageIdToURI(targetId);\n            const viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else {\n            throw new Error('getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"');\n        }\n    }\n    getTargetId(viewport) {\n        const targetId = viewport.getViewReferenceId?.();\n        if (targetId) {\n            return targetId;\n        }\n        throw new Error('getTargetId: viewport must have a getViewReferenceId method');\n    }\n    undo() {\n        this.doneEditMemo();\n        DefaultHistoryMemo.undo();\n    }\n    redo() {\n        DefaultHistoryMemo.redo();\n    }\n    static createZoomPanMemo(viewport) {\n        const state = {\n            pan: viewport.getPan(),\n            zoom: viewport.getZoom(),\n        };\n        const zoomPanMemo = {\n            restoreMemo: () => {\n                const currentPan = viewport.getPan();\n                const currentZoom = viewport.getZoom();\n                viewport.setZoom(state.zoom);\n                viewport.setPan(state.pan);\n                viewport.render();\n                state.pan = currentPan;\n                state.zoom = currentZoom;\n            },\n        };\n        DefaultHistoryMemo.push(zoomPanMemo);\n        return zoomPanMemo;\n    }\n    doneEditMemo() {\n        if (this.memo?.commitMemo?.()) {\n            DefaultHistoryMemo.push(this.memo);\n        }\n        this.memo = null;\n    }\n    static startGroupRecording() {\n        DefaultHistoryMemo.startGroupRecording();\n    }\n    static endGroupRecording() {\n        DefaultHistoryMemo.endGroupRecording();\n    }\n}\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { cache, getEnabledElementByViewportId, Enums, utilities, } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport { handleContourSegmentation } from './contourHandler/handleContourSegmentation';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport removeContourFromElement from './removeContourFromElement';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { getUniqueSegmentIndices } from '../../../utilities/segmentation/getUniqueSegmentIndices';\nimport { getAnnotation } from '../../../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nconst polySegConversionInProgressForViewportId = new Map();\nconst processedViewportSegmentations = new Map();\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeContourFromElement(viewportId, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, contourRepresentation) {\n    const { segmentationId } = contourRepresentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let contourData = segmentation.representationData[Representations.Contour];\n    const polySeg = getPolySeg();\n    if (!contourData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, Representations.Contour) &&\n        !polySegConversionInProgressForViewportId.get(viewport.id)) {\n        polySegConversionInProgressForViewportId.set(viewport.id, true);\n        contourData = await computeAndAddRepresentation(segmentationId, Representations.Contour, () => polySeg.computeContourData(segmentationId, { viewport }), () => undefined);\n        polySegConversionInProgressForViewportId.set(viewport.id, false);\n    }\n    else if (!contourData && !getPolySeg()) {\n        console.debug(`No contour data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to contour. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!contourData) {\n        return;\n    }\n    if (!contourData.geometryIds?.length) {\n        return;\n    }\n    let hasContourDataButNotMatchingViewport = false;\n    const viewportNormal = viewport.getCamera().viewPlaneNormal;\n    if (contourData.annotationUIDsMap) {\n        hasContourDataButNotMatchingViewport = !_checkContourNormalsMatchViewport(contourData.annotationUIDsMap, viewportNormal);\n    }\n    if (contourData.geometryIds.length > 0) {\n        hasContourDataButNotMatchingViewport = !_checkContourGeometryMatchViewport(contourData.geometryIds, viewportNormal);\n    }\n    const viewportProcessed = processedViewportSegmentations.get(viewport.id) || new Set();\n    if (hasContourDataButNotMatchingViewport &&\n        !polySegConversionInProgressForViewportId.get(viewport.id) &&\n        !viewportProcessed.has(segmentationId) &&\n        viewport.viewportStatus === Enums.ViewportStatus.RENDERED) {\n        polySegConversionInProgressForViewportId.set(viewport.id, true);\n        const segmentIndices = getUniqueSegmentIndices(segmentationId);\n        const surfacesInfo = await polySeg.computeSurfaceData(segmentationId, {\n            segmentIndices,\n            viewport,\n        });\n        const geometryIds = surfacesInfo.geometryIds;\n        const pointsAndPolys = [];\n        for (const geometryId of geometryIds.values()) {\n            const geometry = cache.getGeometry(geometryId);\n            const data = geometry.data;\n            pointsAndPolys.push({\n                points: data.points,\n                polys: data.polys,\n                segmentIndex: data.segmentIndex,\n                id: data.segmentIndex,\n            });\n        }\n        const polyDataCache = await polySeg.clipAndCacheSurfacesForViewport(pointsAndPolys, viewport);\n        const rawResults = polySeg.extractContourData(polyDataCache);\n        const annotationUIDsMap = polySeg.createAndAddContourSegmentationsFromClippedSurfaces(rawResults, viewport, segmentationId);\n        contourData.annotationUIDsMap = new Map([\n            ...contourData.annotationUIDsMap,\n            ...annotationUIDsMap,\n        ]);\n        viewportProcessed.add(segmentationId);\n        processedViewportSegmentations.set(viewport.id, viewportProcessed);\n        polySegConversionInProgressForViewportId.set(viewport.id, false);\n    }\n    handleContourSegmentation(viewport, contourData.geometryIds, contourData.annotationUIDsMap, contourRepresentation);\n}\nfunction _checkContourGeometryMatchViewport(geometryIds, viewportNormal) {\n    let validGeometry = null;\n    let geometryData = null;\n    for (const geometryId of geometryIds) {\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry) {\n            continue;\n        }\n        const data = geometry.data;\n        if (data.contours?.[0]?.points?.length >= 3) {\n            validGeometry = geometry;\n            geometryData = data;\n            break;\n        }\n    }\n    if (!validGeometry || !geometryData) {\n        return false;\n    }\n    const contours = geometryData.contours;\n    const points = contours[0].points;\n    const point1 = points[0];\n    const point2 = points[1];\n    const point3 = points[2];\n    let normal = vec3.cross(vec3.create(), vec3.sub(vec3.create(), point2, point1), vec3.sub(vec3.create(), point3, point1));\n    normal = vec3.normalize(vec3.create(), normal);\n    const dotProduct = vec3.dot(normal, viewportNormal);\n    return Math.abs(dotProduct) > 0.9;\n}\nfunction _checkContourNormalsMatchViewport(annotationUIDsMap, viewportNormal) {\n    const annotationUIDs = Array.from(annotationUIDsMap.values())\n        .flat()\n        .map((uidSet) => Array.from(uidSet))\n        .flat();\n    const randomAnnotationUIDs = utilities.getRandomSampleFromArray(annotationUIDs, 3);\n    for (const annotationUID of randomAnnotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        if (annotation?.metadata) {\n            if (!annotation.metadata.viewPlaneNormal) {\n                continue;\n            }\n            const annotationNormal = annotation.metadata.viewPlaneNormal;\n            const dotProduct = Math.abs(viewportNormal[0] * annotationNormal[0] +\n                viewportNormal[1] * annotationNormal[1] +\n                viewportNormal[2] * annotationNormal[2]);\n            if (Math.abs(dotProduct - 1) > 0.01) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nexport default {\n    render,\n    removeRepresentation,\n};\n","import { getEnabledElementByViewportId, VolumeViewport, } from '@cornerstonejs/core';\nimport addLabelmapToElement from './addLabelmapToElement';\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\nimport { getActiveSegmentation } from '../../../stateManagement/segmentation/activeSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { segmentationStyle } from '../../../stateManagement/segmentation/SegmentationStyle';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport { internalGetHiddenSegmentIndices } from '../../../stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices';\nimport { getActiveSegmentIndex } from '../../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getLabelmapActorEntries } from '../../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { defaultSegmentationStateManager } from '../../../stateManagement/segmentation/SegmentationStateManager';\nexport const MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\nlet polySegConversionInProgress = false;\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    labelMapConfigCache.forEach((value, key) => {\n        if (key.includes(segmentationId)) {\n            labelMapConfigCache.delete(key);\n        }\n    });\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeLabelmapFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId, config } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn('No segmentation found for segmentationId: ', segmentationId);\n        return;\n    }\n    let labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    let labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    if (!labelmapData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, SegmentationRepresentations.Labelmap) &&\n        !polySegConversionInProgress) {\n        polySegConversionInProgress = true;\n        const polySeg = getPolySeg();\n        labelmapData = await computeAndAddRepresentation(segmentationId, SegmentationRepresentations.Labelmap, () => polySeg.computeLabelmapData(segmentationId, { viewport }), () => null, () => {\n            defaultSegmentationStateManager.processLabelmapRepresentationAddition(viewport.id, segmentationId);\n            setTimeout(() => {\n                triggerSegmentationDataModified(segmentationId);\n            }, 0);\n        });\n        if (!labelmapData) {\n            throw new Error(`No labelmap data found for segmentationId ${segmentationId}.`);\n        }\n        polySegConversionInProgress = false;\n    }\n    else if (!labelmapData && !getPolySeg()) {\n        console.debug(`No labelmap data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to labelmap. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!labelmapData) {\n        return;\n    }\n    if (viewport instanceof VolumeViewport) {\n        if (!labelmapActorEntries?.length) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config);\n        }\n        labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    }\n    else {\n        const labelmapImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentationId);\n        if (!labelmapImageIds?.length) {\n            return;\n        }\n        if (!labelmapActorEntries) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config);\n        }\n        labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    }\n    if (!labelmapActorEntries?.length) {\n        return;\n    }\n    for (const labelmapActorEntry of labelmapActorEntries) {\n        _setLabelmapColorAndOpacity(viewport.id, labelmapActorEntry, representation);\n    }\n}\nfunction _setLabelmapColorAndOpacity(viewportId, labelmapActorEntry, segmentationRepresentation) {\n    const { segmentationId } = segmentationRepresentation;\n    const { cfun, ofun } = segmentationRepresentation.config;\n    const { colorLUTIndex } = segmentationRepresentation;\n    const activeSegmentation = getActiveSegmentation(viewportId);\n    const isActiveLabelmap = activeSegmentation?.segmentationId === segmentationId;\n    const labelmapStyle = segmentationStyle.getStyle({\n        viewportId,\n        type: SegmentationRepresentations.Labelmap,\n        segmentationId,\n    });\n    const renderInactiveSegmentations = segmentationStyle.getRenderInactiveSegmentations(viewportId);\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const numColors = Math.min(256, colorLUT.length);\n    const { outlineWidth, renderOutline, outlineOpacity, activeSegmentOutlineWidthDelta, } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap);\n    const segmentsHidden = internalGetHiddenSegmentIndices(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    });\n    for (let i = 0; i < numColors; i++) {\n        const segmentIndex = i;\n        const segmentColor = colorLUT[segmentIndex];\n        const perSegmentStyle = segmentationStyle.getStyle({\n            viewportId,\n            type: SegmentationRepresentations.Labelmap,\n            segmentationId,\n            segmentIndex,\n        });\n        const segmentSpecificLabelmapConfig = perSegmentStyle;\n        const { fillAlpha, outlineWidth, renderFill, renderOutline } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap, segmentSpecificLabelmapConfig);\n        const { forceOpacityUpdate, forceColorUpdate } = _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            segmentColor,\n            outlineWidth,\n            segmentsHidden: segmentsHidden,\n            cfun,\n            ofun,\n        });\n        if (forceColorUpdate) {\n            cfun.addRGBPoint(segmentIndex, segmentColor[0] / MAX_NUMBER_COLORS, segmentColor[1] / MAX_NUMBER_COLORS, segmentColor[2] / MAX_NUMBER_COLORS);\n        }\n        if (forceOpacityUpdate) {\n            if (renderFill) {\n                const segmentOpacity = segmentsHidden.has(segmentIndex)\n                    ? 0\n                    : (segmentColor[3] / 255) * fillAlpha;\n                ofun.removePoint(segmentIndex);\n                ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n            }\n            else {\n                ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n            }\n        }\n    }\n    ofun.setClamping(false);\n    const labelmapActor = labelmapActorEntry.actor;\n    const { preLoad } = labelmapActor.get?.('preLoad') || { preLoad: null };\n    if (preLoad) {\n        preLoad({ cfun, ofun, actor: labelmapActor });\n    }\n    else {\n        labelmapActor.getProperty().setRGBTransferFunction(0, cfun);\n        labelmapActor.getProperty().setScalarOpacity(0, ofun);\n        labelmapActor.getProperty().setInterpolationTypeToNearest();\n    }\n    if (renderOutline) {\n        labelmapActor.getProperty().setUseLabelOutline(renderOutline);\n        labelmapActor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n        const activeSegmentIndex = getActiveSegmentIndex(segmentationRepresentation.segmentationId);\n        const outlineWidths = new Array(numColors - 1);\n        for (let i = 1; i < numColors; i++) {\n            const isHidden = segmentsHidden.has(i);\n            if (isHidden) {\n                outlineWidths[i - 1] = 0;\n                continue;\n            }\n            outlineWidths[i - 1] =\n                i === activeSegmentIndex\n                    ? outlineWidth + activeSegmentOutlineWidthDelta\n                    : outlineWidth;\n        }\n        labelmapActor.getProperty().setLabelOutlineThickness(outlineWidths);\n        labelmapActor.modified();\n        labelmapActor.getProperty().modified();\n        labelmapActor.getMapper().modified();\n    }\n    else {\n        labelmapActor\n            .getProperty()\n            .setLabelOutlineThickness(new Array(numColors - 1).fill(0));\n    }\n    const visible = isActiveLabelmap || renderInactiveSegmentations;\n    labelmapActor.setVisibility(visible);\n}\nfunction _getLabelmapConfig(labelmapConfig, isActiveLabelmap, segmentsLabelmapConfig) {\n    const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n    const configToUse = {\n        ...labelmapConfig,\n        ...segmentLabelmapConfig,\n    };\n    const fillAlpha = isActiveLabelmap\n        ? configToUse.fillAlpha\n        : configToUse.fillAlphaInactive;\n    const outlineWidth = isActiveLabelmap\n        ? configToUse.outlineWidth\n        : configToUse.outlineWidthInactive;\n    const renderFill = isActiveLabelmap\n        ? configToUse.renderFill\n        : configToUse.renderFillInactive;\n    const renderOutline = isActiveLabelmap\n        ? configToUse.renderOutline\n        : configToUse.renderOutlineInactive;\n    const outlineOpacity = isActiveLabelmap\n        ? configToUse.outlineOpacity\n        : configToUse.outlineOpacityInactive;\n    const activeSegmentOutlineWidthDelta = configToUse.activeSegmentOutlineWidthDelta;\n    return {\n        fillAlpha,\n        outlineWidth,\n        renderFill,\n        renderOutline,\n        outlineOpacity,\n        activeSegmentOutlineWidthDelta,\n    };\n}\nfunction _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, { fillAlpha, renderFill, renderOutline, segmentColor, outlineWidth, segmentsHidden, cfun, ofun, }) {\n    const cacheUID = `${viewportId}-${segmentationId}-${segmentIndex}`;\n    const oldConfig = labelMapConfigCache.get(cacheUID);\n    if (!oldConfig) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n        return {\n            forceOpacityUpdate: true,\n            forceColorUpdate: true,\n        };\n    }\n    const { fillAlpha: oldFillAlpha, renderFill: oldRenderFill, renderOutline: oldRenderOutline, outlineWidth: oldOutlineWidth, segmentColor: oldSegmentColor, segmentsHidden: oldSegmentsHidden, cfunMTime: oldCfunMTime, ofunMTime: oldOfunMTime, } = oldConfig;\n    const forceColorUpdate = oldSegmentColor[0] !== segmentColor[0] ||\n        oldSegmentColor[1] !== segmentColor[1] ||\n        oldSegmentColor[2] !== segmentColor[2];\n    const forceOpacityUpdate = oldSegmentColor[3] !== segmentColor[3] ||\n        oldFillAlpha !== fillAlpha ||\n        oldRenderFill !== renderFill ||\n        oldRenderOutline !== renderOutline ||\n        oldOutlineWidth !== outlineWidth ||\n        oldSegmentsHidden !== segmentsHidden;\n    if (forceOpacityUpdate || forceColorUpdate) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n    }\n    return {\n        forceOpacityUpdate,\n        forceColorUpdate,\n    };\n}\nasync function _addLabelmapToViewport(viewport, labelmapData, segmentationId, config) {\n    const result = await addLabelmapToElement(viewport.element, labelmapData, segmentationId, config);\n    return result || undefined;\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { cache, getEnabledElementByViewportId, Enums, } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport removeSurfaceFromElement from './removeSurfaceFromElement';\nimport addOrUpdateSurfaceToElement from './addOrUpdateSurfaceToElement';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { internalGetHiddenSegmentIndices } from '../../../stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices';\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeSurfaceFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId, type } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let SurfaceData = segmentation.representationData[Representations.Surface];\n    if (!SurfaceData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, Representations.Surface)) {\n        const polySeg = getPolySeg();\n        SurfaceData = await computeAndAddRepresentation(segmentationId, Representations.Surface, () => polySeg.computeSurfaceData(segmentationId, { viewport }), () => polySeg.updateSurfaceData(segmentationId, { viewport }));\n        if (!SurfaceData) {\n            throw new Error(`No Surface data found for segmentationId ${segmentationId} even we tried to compute it`);\n        }\n    }\n    else if (!SurfaceData && !getPolySeg()) {\n        console.debug(`No surface data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to surface. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!SurfaceData) {\n        console.warn(`No Surface data found for segmentationId ${segmentationId}. Skipping render.`);\n        return;\n    }\n    const { geometryIds } = SurfaceData;\n    if (!geometryIds?.size) {\n        console.warn(`No Surfaces found for segmentationId ${segmentationId}. Skipping render.`);\n    }\n    const { colorLUTIndex } = representation;\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const surfaces = [];\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry?.data) {\n            console.warn(`No Surfaces found for geometryId ${geometryId}. Skipping render.`);\n            return;\n        }\n        const { segmentIndex } = geometry.data;\n        const hiddenSegments = internalGetHiddenSegmentIndices(viewport.id, {\n            segmentationId,\n            type,\n        });\n        const isHidden = hiddenSegments.has(segmentIndex);\n        const surface = geometry.data;\n        const color = colorLUT[segmentIndex];\n        surface.color = color.slice(0, 3);\n        surface.visible = !isHidden;\n        surfaces.push(surface);\n        addOrUpdateSurfaceToElement(viewport.element, surface, segmentationId);\n    });\n    viewport.render();\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            simplified: true,\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [canvasCoordinates[0], canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const handlesToStart = csUtils.deepClone(points);\n        const startWorld = vec3.clone(points[0]);\n        const endWorld = vec3.clone(points[0]);\n        const indexOfNormal = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        startWorld[indexOfNormal] = startCoordinate;\n        endWorld[indexOfNormal] = endCoordinate;\n        handlesToStart.forEach((handlePoint) => {\n            handlePoint[indexOfNormal] = startCoordinate;\n        });\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        if (distance >= 0) {\n            newProjectionPoints.push(handlesToStart.map((p) => Array.from(p)));\n        }\n        for (let dist = spacingInNormal; dist <= distance; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const baseTopLeftCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[0];\n        const baseBottomRightCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[1];\n        const basePos1 = viewport.canvasToWorld(baseTopLeftCanvas);\n        const basePos2 = viewport.canvasToWorld(baseBottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, basePos1, basePos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles.points);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const currentCanvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([\n                currentCanvasCoordinates[0],\n                currentCanvasCoordinates[1],\n            ]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { Events, SegmentationRepresentations } from '../../enums';\nimport { eventTarget, utilities, getRenderingEngine, } from '@cornerstonejs/core';\nimport PlanarFreehandContourSegmentationTool from '../annotation/PlanarFreehandContourSegmentationTool';\nimport BrushTool from './BrushTool';\nimport * as segmentation from '../../stateManagement/segmentation';\nimport { getSegmentationRepresentationsBySegmentationId } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nclass LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool {\n    static { this.toolName = 'LabelMapEditWithContour'; }\n    static { this.annotationsToViewportMap = new Map(); }\n    static { this.viewportIdsChecked = []; }\n    constructor(toolProps = {}) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.onViewportAddedToToolGroupBinded =\n            this.onViewportAddedToToolGroup.bind(this);\n        this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);\n    }\n    initializeListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n    }\n    cleanUpListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n    }\n    async checkContourSegmentation(viewportId) {\n        if (LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {\n            return;\n        }\n        const activeSeg = segmentation.getActiveSegmentation(viewportId);\n        if (!activeSeg) {\n            console.log('No active segmentation detected');\n            return false;\n        }\n        const segmentationId = activeSeg.segmentationId;\n        if (!activeSeg.representationData.Contour) {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n            await segmentation.addContourRepresentationToViewport(viewportId, [\n                {\n                    segmentationId,\n                    type: SegmentationRepresentations.Contour,\n                },\n            ]);\n            segmentation.addRepresentationData({\n                segmentationId,\n                type: SegmentationRepresentations.Contour,\n                data: {},\n            });\n        }\n        else {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n        }\n        return true;\n    }\n    onViewportAddedToToolGroup(evt) {\n        const { toolGroupId, viewportId } = evt.detail;\n        if (toolGroupId !== this.toolGroupId) {\n            return;\n        }\n        this.checkContourSegmentation(viewportId);\n    }\n    onSegmentationModified(evt) {\n        const { segmentationId } = evt.detail || {};\n        if (!segmentationId) {\n            return;\n        }\n        const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);\n        if (!representations) {\n            return;\n        }\n        representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.cleanUpListeners();\n    }\n    annotationModified(evt) {\n        const { annotation, renderingEngineId, viewportId } = evt.detail;\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        if (!viewport) {\n            return;\n        }\n        LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);\n    }\n    annotationCompleted(evt) {\n        const { annotation } = evt.detail;\n        const { polyline } = annotation.data?.contour || {};\n        if (annotation?.metadata?.toolName !== LabelMapEditWithContourTool.toolName) {\n            return;\n        }\n        if (!polyline) {\n            return;\n        }\n        if (LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {\n            const viewport = LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);\n            if (polyline.length > 3) {\n                BrushTool.viewportContoursToLabelmap(viewport);\n            }\n        }\n    }\n}\nexport default LabelMapEditWithContourTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                    spacingInNormal,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        projectionPointsImageIds: [referencedImageId],\n                        statistics: [],\n                    },\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let startCoord = startCoordinate;\n                let endCoord = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    startCoord = this._getCoordinateForViewplaneNormal(startCoord, viewplaneNormal);\n                    const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal);\n                    data.handles.points.forEach((point) => {\n                        point[indexOfDirection] = startCoord;\n                    });\n                    data.startCoordinate = startCoord;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    endCoord = this._getCoordinateForViewplaneNormal(endCoord, viewplaneNormal);\n                    data.endCoordinate = endCoord;\n                    data.endCoordinate = endCoord;\n                }\n                const roundedStartCoord = csUtils.roundToPrecision(startCoord);\n                const roundedEndCoord = csUtils.roundToPrecision(endCoord);\n                const coord = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCoord = csUtils.roundToPrecision(coord);\n                if (roundedCoord < Math.min(roundedStartCoord, roundedEndCoord) ||\n                    roundedCoord > Math.max(roundedStartCoord, roundedEndCoord)) {\n                    continue;\n                }\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                let firstOrLastSlice = false;\n                if (roundedCoord === roundedStartCoord ||\n                    roundedCoord === roundedEndCoord) {\n                    firstOrLastSlice = true;\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    firstOrLastSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineDashToUse = lineDash;\n                if (!firstOrLastSlice) {\n                    lineDashToUse = 2;\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth,\n                });\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    if (!data.handles.textBox.hasMoved) {\n                        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        const endIJK = transformWorldToIndex(imageData, points[0]);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        if (projectionAxisIndex == 2) {\n            startWorld[2] = startCoordinate;\n            endWorld[2] = endCoordinate;\n        }\n        else if (projectionAxisIndex == 0) {\n            startWorld[0] = startCoordinate;\n            endWorld[0] = endCoordinate;\n        }\n        else if (projectionAxisIndex == 1) {\n            startWorld[1] = startCoordinate;\n            endWorld[1] = endCoordinate;\n        }\n        const direction = vec3.create();\n        vec3.subtract(direction, endWorld, startWorld);\n        const distance = vec3.length(direction);\n        vec3.normalize(direction, direction);\n        const newProjectionPoints = [];\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(points.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, direction, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[3];\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.habdles);\n        const area = Math.abs(worldWidth * worldHeight) /\n            (measureInfo.scale * measureInfo.scale);\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const projectionPoint = projectionPoints[i][0];\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, projectionPoint);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                this.isHandleOutsideImage = false;\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, viewPlaneNormal) {\n        const startPos = worldPos;\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagate * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nclass RectangleROIThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const targetId = this.getTargetId(viewport);\n            let referencedImageId, volumeId;\n            if (viewport instanceof StackViewport) {\n                referencedImageId = targetId.split('imageId:')[1];\n            }\n            else {\n                volumeId = csUtils.getVolumeId(targetId);\n                const imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: null,\n                            worldBoundingBox: null,\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    segmentationId: null,\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                triggerAnnotationModified(annotation, element);\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n}\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n            color: null,\n            background: null,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const color = this.configuration.color ??\n            segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, hoveredSegmentIndex);\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            color,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, color, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const offset = -15;\n        const textBoxPosition = [\n            canvasCoordinates[0] + offset,\n            canvasCoordinates[1] + offset,\n        ];\n        const boundingBox = drawTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ?? '(unnamed segment)'], textBoxPosition, {\n            color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n            background: this.configuration.background ?? undefined,\n        });\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { cache, utilities as csUtils } from '@cornerstonejs/core';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\nimport { getSegmentation } from '../../../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateImageVolume from '../../../../utilities/segmentation/getOrCreateImageVolume';\nexport default {\n    [StrategyCallbacks.EnsureImageVolumeFor3DManipulation]: (data) => {\n        const { operationData, viewport } = data;\n        let referencedImageIds;\n        if (viewport) {\n            referencedImageIds = viewport.getImageIds();\n            const isValidVolumeForSphere = csUtils.isValidVolume(referencedImageIds);\n            if (!isValidVolumeForSphere) {\n                throw new Error('Volume is not reconstructable for sphere manipulation');\n            }\n        }\n        else {\n            const segmentation = getSegmentation(operationData.segmentationId);\n            const imageIds = segmentation.representationData\n                .Labelmap.imageIds;\n            referencedImageIds = imageIds.map((imageId) => {\n                const image = cache.getImage(imageId);\n                return image.referencedImageId;\n            });\n        }\n        const imageVolume = getOrCreateImageVolume(referencedImageIds);\n        if (!imageVolume) {\n            throw new Error('Failed to create or get image volume');\n        }\n        operationData.imageVoxelManager = imageVolume.voxelManager;\n        operationData.imageData = imageVolume.imageData;\n    },\n};\n","import { utilities, cache } from '@cornerstonejs/core';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\nimport getOrCreateSegmentationVolume from '../../../../utilities/segmentation/getOrCreateSegmentationVolume';\nexport default {\n    [StrategyCallbacks.EnsureSegmentationVolumeFor3DManipulation]: (data) => {\n        const { operationData, viewport } = data;\n        const { segmentationId, imageIds: segImageIds } = operationData;\n        const referencedImageIds = viewport\n            ? viewport.getImageIds()\n            : segImageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n        const isValidVolumeForSphere = utilities.isValidVolume(referencedImageIds);\n        if (!isValidVolumeForSphere) {\n            throw new Error('Volume is not reconstructable for sphere manipulation');\n        }\n        const segVolume = getOrCreateSegmentationVolume(segmentationId);\n        if (!segVolume) {\n            return;\n        }\n        operationData.segmentationVoxelManager = segVolume.voxelManager;\n        operationData.segmentationImageData = segVolume.imageData;\n        return;\n    },\n};\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, isEqual } = csUtils;\nexport function getEllipseCornersFromCanvasCoordinates(canvasCoordinates) {\n    const [bottom, top, left, right] = canvasCoordinates;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    const bottomLeft = [left[0], bottom[1]];\n    const topRight = [right[0], top[1]];\n    return [topLeft, bottomRight, bottomLeft, topRight];\n}\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.create();\n        if (points.length >= 2) {\n            vec3.add(center, points[0], points[1]);\n            vec3.scale(center, center, 0.5);\n        }\n        else {\n            vec3.copy(center, points[0]);\n        }\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);\n        const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));\n        const circleCornersIJK = points.map((world) => {\n            return transformWorldToIndex(segmentationImageData, world);\n        });\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.isInObject = createPointInEllipse(cornersInWorld);\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(cornersInWorld = []) {\n    if (!cornersInWorld || cornersInWorld.length !== 4) {\n        throw new Error('createPointInEllipse: cornersInWorld must have 4 points');\n    }\n    const [topLeft, bottomRight, bottomLeft, topRight] = cornersInWorld;\n    const center = vec3.create();\n    vec3.add(center, topLeft, bottomRight);\n    vec3.scale(center, center, 0.5);\n    const majorAxisVec = vec3.create();\n    vec3.subtract(majorAxisVec, topRight, topLeft);\n    const xRadius = vec3.length(majorAxisVec) / 2;\n    vec3.normalize(majorAxisVec, majorAxisVec);\n    const minorAxisVec = vec3.create();\n    vec3.subtract(minorAxisVec, bottomLeft, topLeft);\n    const yRadius = vec3.length(minorAxisVec) / 2;\n    vec3.normalize(minorAxisVec, minorAxisVec);\n    const normal = vec3.create();\n    vec3.cross(normal, majorAxisVec, minorAxisVec);\n    vec3.normalize(normal, normal);\n    if (isEqual(xRadius, yRadius)) {\n        const radius = xRadius;\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n    }\n    return (pointLPS) => {\n        const pointVec = vec3.create();\n        vec3.subtract(pointVec, pointLPS, center);\n        const distToPlane = vec3.dot(pointVec, normal);\n        const proj = vec3.create();\n        vec3.scaleAndAdd(proj, pointVec, normal, -distToPlane);\n        const fromTopLeft = vec3.create();\n        const centerToTopLeft = vec3.create();\n        vec3.subtract(centerToTopLeft, center, topLeft);\n        vec3.subtract(fromTopLeft, proj, centerToTopLeft);\n        const x = vec3.dot(fromTopLeft, majorAxisVec);\n        const y = vec3.dot(fromTopLeft, minorAxisVec);\n        return (x * x) / (xRadius * xRadius) + (y * y) / (yRadius * yRadius) <= 1;\n    };\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const [p0, p1, p2, p3] = points;\n    const axisU = vec3.create();\n    const axisV = vec3.create();\n    vec3.subtract(axisU, p1, p0);\n    vec3.subtract(axisV, p3, p0);\n    const uLen = vec3.length(axisU);\n    const vLen = vec3.length(axisV);\n    vec3.normalize(axisU, axisU);\n    vec3.normalize(axisV, axisV);\n    const normal = vec3.create();\n    vec3.cross(normal, axisU, axisV);\n    vec3.normalize(normal, normal);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointInShapeFn = (pointLPS) => {\n        const v = vec3.create();\n        vec3.subtract(v, pointLPS, p0);\n        const u = vec3.dot(v, axisU);\n        const vproj = vec3.dot(v, axisV);\n        const d = Math.abs(vec3.dot(v, normal));\n        return (u >= -EPS &&\n            u <= uLen + EPS &&\n            vproj >= -EPS &&\n            vproj <= vLen + EPS &&\n            d <= EPS);\n    };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { cache, Enums, eventTarget } from '@cornerstonejs/core';\nimport { getCurrentLabelmapImageIdForViewport } from '../../../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../../../stateManagement/segmentation/helpers';\nimport { getReferenceVolumeForSegmentationVolume } from '../../../../utilities/segmentation/getReferenceVolumeForSegmentationVolume';\nfunction getStrategyDataForVolumeViewport({ operationData }) {\n    const { volumeId } = operationData;\n    if (!volumeId) {\n        const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n            detail: {\n                type: 'Segmentation',\n                message: 'No volume id found for the segmentation',\n            },\n            cancelable: true,\n        });\n        eventTarget.dispatchEvent(event);\n        return null;\n    }\n    const segmentationVolume = cache.getVolume(volumeId);\n    const imageVolume = getReferenceVolumeForSegmentationVolume(volumeId);\n    if (!segmentationVolume || !imageVolume) {\n        return null;\n    }\n    const { imageData: segmentationImageData } = segmentationVolume;\n    const { voxelManager: segmentationVoxelManager } = segmentationVolume;\n    const { voxelManager: imageVoxelManager, imageData } = imageVolume;\n    return {\n        segmentationImageData,\n        segmentationVoxelManager,\n        segmentationScalarData: null,\n        imageScalarData: null,\n        imageVoxelManager,\n        imageData,\n    };\n}\nfunction getStrategyDataForStackViewport({ operationData, viewport, strategy, }) {\n    const { segmentationId } = operationData;\n    let segmentationImageData;\n    let segmentationVoxelManager;\n    let segmentationScalarData;\n    let imageScalarData;\n    let imageVoxelManager;\n    let imageData;\n    if (strategy.ensureSegmentationVolumeFor3DManipulation) {\n        strategy.ensureSegmentationVolumeFor3DManipulation({\n            operationData,\n            viewport,\n        });\n        segmentationVoxelManager = operationData.segmentationVoxelManager;\n        segmentationImageData = operationData.segmentationImageData;\n        segmentationScalarData = null;\n    }\n    else {\n        const labelmapImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n        if (!labelmapImageId) {\n            return null;\n        }\n        const actorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n        if (!actorEntry) {\n            return null;\n        }\n        const currentSegImage = cache.getImage(labelmapImageId);\n        segmentationImageData = actorEntry.actor.getMapper().getInputData();\n        segmentationVoxelManager = currentSegImage.voxelManager;\n        const currentSegmentationImageId = operationData.imageId;\n        const segmentationImage = cache.getImage(currentSegmentationImageId);\n        if (!segmentationImage) {\n            return null;\n        }\n        segmentationScalarData = segmentationImage.getPixelData?.();\n    }\n    if (strategy.ensureImageVolumeFor3DManipulation) {\n        strategy.ensureImageVolumeFor3DManipulation({\n            operationData,\n            viewport,\n        });\n        imageVoxelManager = operationData.imageVoxelManager;\n        imageScalarData = operationData.imageScalarData;\n        imageData = operationData.imageData;\n    }\n    else {\n        const currentImageId = viewport.getCurrentImageId();\n        if (!currentImageId) {\n            return null;\n        }\n        const image = cache.getImage(currentImageId);\n        imageData = image ? null : viewport.getImageData();\n        imageScalarData = image?.getPixelData() || imageData.getScalarData();\n        imageVoxelManager = image?.voxelManager;\n    }\n    return {\n        segmentationImageData,\n        segmentationScalarData,\n        imageScalarData,\n        segmentationVoxelManager,\n        imageVoxelManager,\n        imageData,\n    };\n}\nfunction getStrategyData({ operationData, viewport, strategy, }) {\n    if (!operationData) {\n        return null;\n    }\n    if (('volumeId' in operationData && operationData.volumeId != null) ||\n        ('referencedVolumeId' in operationData &&\n            operationData.referencedVolumeId != null)) {\n        return getStrategyDataForVolumeViewport({ operationData });\n    }\n    return getStrategyDataForStackViewport({ operationData, viewport, strategy });\n}\nexport { getStrategyData };\n","export var ContourWindingDirection;\n(function (ContourWindingDirection) {\n    ContourWindingDirection[ContourWindingDirection[\"CounterClockwise\"] = -1] = \"CounterClockwise\";\n    ContourWindingDirection[ContourWindingDirection[\"Unknown\"] = 0] = \"Unknown\";\n    ContourWindingDirection[ContourWindingDirection[\"Clockwise\"] = 1] = \"Clockwise\";\n})(ContourWindingDirection || (ContourWindingDirection = {}));\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport { ChangeTypes } from '../enums';\nexport default class AnnotationMultiSlice {\n    static setStartRange(viewport, annotation, startRange = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, startRange);\n    }\n    static setEndRange(viewport, annotation, endRange = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, undefined, endRange);\n    }\n    static setRange(viewport, annotation, startRange, endRange) {\n        const { metadata } = annotation;\n        if (startRange === undefined) {\n            startRange = metadata.sliceIndex < endRange ? metadata.sliceIndex : 0;\n            if (endRange === undefined) {\n                endRange = viewport.getNumberOfSlices() - 1;\n            }\n        }\n        const rangeEndSliceIndex = viewport.getSliceIndexForImage(metadata.multiSliceReference);\n        if (endRange === undefined) {\n            endRange =\n                rangeEndSliceIndex >= startRange\n                    ? rangeEndSliceIndex\n                    : viewport.getNumberOfSlices() - 1;\n        }\n        endRange = Math.max(startRange, endRange);\n        metadata.sliceIndex = Math.min(startRange, endRange);\n        metadata.referencedImageId = viewport.getCurrentImageId(metadata.sliceIndex);\n        metadata.referencedImageURI = undefined;\n        if (endRange === metadata.sliceIndex) {\n            metadata.multiSliceReference = undefined;\n        }\n        else if (endRange !== metadata.multiSliceReference?.sliceIndex) {\n            metadata.multiSliceReference = {\n                referencedImageId: viewport.getCurrentImageId(endRange),\n                sliceIndex: endRange,\n            };\n        }\n        const eventDetail = {\n            viewportId: viewport.id,\n            renderingEngineId: viewport.renderingEngineId,\n            changeType: ChangeTypes.MetadataReferenceModified,\n            annotation,\n        };\n        triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n        this.setViewportFrameRange(viewport, metadata);\n    }\n    static setSingle(viewport, annotation, current = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, current, current);\n    }\n    static getFrameRange(annotation) {\n        const { metadata } = annotation;\n        const { sliceIndex, multiSliceReference } = metadata;\n        const rangeEndSliceIndex = multiSliceReference?.sliceIndex;\n        return rangeEndSliceIndex\n            ? [sliceIndex + 1, rangeEndSliceIndex + 1]\n            : sliceIndex + 1;\n    }\n    static getFrameRangeStr(annotation) {\n        const range = this.getFrameRange(annotation);\n        return Array.isArray(range) ? `${range[0]}-${range[1]}` : String(range);\n    }\n    static setViewportFrameRange(viewport, specifier) {\n        if (viewport.setFrameRange && specifier.multiSliceReference?.sliceIndex) {\n            viewport.setFrameRange(specifier.sliceIndex + 1, specifier.multiSliceReference.sliceIndex + 1);\n        }\n    }\n}\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { CONSTANTS } from '@cornerstonejs/core';\nconst { EPSILON } = CONSTANTS;\nfunction calculateBoundingBox(points, dimensions, isWorld = false) {\n    let xMin = Infinity;\n    let xMax = isWorld ? -Infinity : 0;\n    let yMin = Infinity;\n    let yMax = isWorld ? -Infinity : 0;\n    let zMin = Infinity;\n    let zMax = isWorld ? -Infinity : 0;\n    const is3D = points[0]?.length === 3;\n    for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        xMin = Math.min(p[0], xMin);\n        xMax = Math.max(p[0], xMax);\n        yMin = Math.min(p[1], yMin);\n        yMax = Math.max(p[1], yMax);\n        if (is3D) {\n            zMin = Math.min(p[2] ?? zMin, zMin);\n            zMax = Math.max(p[2] ?? zMax, zMax);\n        }\n    }\n    if (dimensions) {\n        xMin = Math.max(isWorld ? dimensions[0] + EPSILON : 0, xMin);\n        xMax = Math.min(isWorld ? dimensions[0] - EPSILON : dimensions[0] - 1, xMax);\n        yMin = Math.max(isWorld ? dimensions[1] + EPSILON : 0, yMin);\n        yMax = Math.min(isWorld ? dimensions[1] - EPSILON : dimensions[1] - 1, yMax);\n        if (is3D && dimensions.length === 3) {\n            zMin = Math.max(isWorld ? dimensions[2] + EPSILON : 0, zMin);\n            zMax = Math.min(isWorld ? dimensions[2] - EPSILON : dimensions[2] - 1, zMax);\n        }\n    }\n    else if (!isWorld) {\n        xMin = Math.max(0, xMin);\n        xMax = Math.min(Infinity, xMax);\n        yMin = Math.max(0, yMin);\n        yMax = Math.min(Infinity, yMax);\n        if (is3D) {\n            zMin = Math.max(0, zMin);\n            zMax = Math.min(Infinity, zMax);\n        }\n    }\n    return is3D\n        ? [\n            [xMin, xMax],\n            [yMin, yMax],\n            [zMin, zMax],\n        ]\n        : [[xMin, xMax], [yMin, yMax], null];\n}\nexport function getBoundingBoxAroundShapeIJK(points, dimensions) {\n    return calculateBoundingBox(points, dimensions, false);\n}\nexport function getBoundingBoxAroundShapeWorld(points, clipBounds) {\n    return calculateBoundingBox(points, clipBounds, true);\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n            bounce: playClipOptions.bounce ?? false,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    if (playClipOptions.bounce !== undefined) {\n        playClipData.bounce = playClipOptions.bounce;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (outOfRange) {\n            if (playClipData.bounce) {\n                playClipData.reverse = !playClipData.reverse;\n                newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n                newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));\n            }\n            else if (!playClipData.loop) {\n                _stopClip(element, {\n                    stopDynamicCine: !isDynamicCinePlaying,\n                    viewportId: viewport.id,\n                });\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n                return;\n            }\n            else {\n                newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;\n            }\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import { getEnabledElement } from '@cornerstonejs/core';\nconst state = {};\nfunction addToolState(element, data) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n    state[viewportId] = data;\n}\nfunction getToolState(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n    return state[viewportId];\n}\nfunction getToolStateByViewportId(viewportId) {\n    return state[viewportId];\n}\nexport { addToolState, getToolState, getToolStateByViewportId };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nexport function addContourSegmentationAnnotation(annotation) {\n    if (annotation.parentAnnotationUID) {\n        return;\n    }\n    if (!annotation.data.segmentation) {\n        throw new Error('addContourSegmentationAnnotation: annotation does not have a segmentation data');\n    }\n    const { segmentationId, segmentIndex } = annotation.data.segmentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation.representationData.Contour) {\n        segmentation.representationData.Contour = { annotationUIDsMap: new Map() };\n    }\n    let { annotationUIDsMap } = segmentation.representationData.Contour;\n    if (!annotationUIDsMap) {\n        annotationUIDsMap = new Map();\n    }\n    let annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        annotationsUIDsSet = new Set();\n        annotationUIDsMap.set(segmentIndex, annotationsUIDsSet);\n    }\n    annotationUIDsMap.set(segmentIndex, annotationsUIDsSet.add(annotation.annotationUID));\n}\n","export default function areSameSegment(firstAnnotation, secondAnnotation) {\n    const { segmentation: firstSegmentation } = firstAnnotation.data;\n    const { segmentation: secondSegmentation } = secondAnnotation.data;\n    return (firstSegmentation.segmentationId === secondSegmentation.segmentationId &&\n        firstSegmentation.segmentIndex === secondSegmentation.segmentIndex);\n}\n","export function areViewReferencesEqual(a, b) {\n    if (!a || !b) {\n        return false;\n    }\n    if (a.FrameOfReferenceUID !== b.FrameOfReferenceUID) {\n        return false;\n    }\n    if (a.referencedImageId !== b.referencedImageId) {\n        return false;\n    }\n    if (!a.viewPlaneNormal || !b.viewPlaneNormal) {\n        return false;\n    }\n    if (a.viewPlaneNormal.length !== b.viewPlaneNormal.length) {\n        return false;\n    }\n    for (let i = 0; i < a.viewPlaneNormal.length; i++) {\n        if (a.viewPlaneNormal[i] !== b.viewPlaneNormal[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import { getAnnotation } from '../../stateManagement/annotation/annotationState';\nimport getViewportsForAnnotation from '../getViewportsForAnnotation';\nimport { convertContourPolylineToCanvasSpace, checkIntersection, createPolylineHole, combinePolylines, } from './sharedOperations';\nexport async function contourSegmentationOperation(sourceAnnotationOrUID, targetAnnotationOrUID, viewport, contourHoleProcessingEnabled = true) {\n    const sourceAnnotation = typeof sourceAnnotationOrUID === 'string'\n        ? getAnnotation(sourceAnnotationOrUID)\n        : sourceAnnotationOrUID;\n    const targetAnnotation = typeof targetAnnotationOrUID === 'string'\n        ? getAnnotation(targetAnnotationOrUID)\n        : targetAnnotationOrUID;\n    if (!sourceAnnotation || !targetAnnotation) {\n        throw new Error('Both source and target annotations must be valid');\n    }\n    if (!viewport) {\n        viewport = getViewportFromAnnotation(sourceAnnotation);\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n    const intersectionInfo = checkIntersection(sourcePolyline, targetPolyline);\n    if (!intersectionInfo.hasIntersection) {\n        console.warn('No intersection found between the two annotations');\n        return;\n    }\n    if (intersectionInfo.isContourHole) {\n        if (!contourHoleProcessingEnabled) {\n            console.warn('Hole processing is disabled');\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction getViewportFromAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    if (!viewports.length) {\n        throw new Error('No viewport found for the annotation');\n    }\n    return viewports[0];\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotation } from '../../stateManagement';\nimport { getViewportAssociatedToSegmentation } from '../../stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { getAnnotationsUIDMapFromSegmentation } from '../../stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation';\nexport function copyAnnotation(annotation, segmentationId, segmentIndex) {\n    const newAnnotation = {\n        annotationUID: utilities.uuidv4(),\n        data: {\n            contour: {\n                closed: true,\n                polyline: [],\n            },\n            segmentation: {\n                segmentationId,\n                segmentIndex,\n            },\n            handles: {},\n        },\n        handles: {},\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            ...annotation.metadata,\n            toolName: annotation.metadata.toolName,\n        },\n    };\n    newAnnotation.data.segmentation.segmentationId = segmentationId;\n    newAnnotation.data.segmentation.segmentIndex = segmentIndex;\n    if (annotation.data.contour?.polyline) {\n        newAnnotation.data.contour.polyline = [...annotation.data.contour.polyline];\n    }\n    if (annotation.data.handles?.points) {\n        newAnnotation.data.handles.points = annotation.data.handles.points.map((point) => [...point]);\n    }\n    return newAnnotation;\n}\nexport function copyContourSegment(segmentationId, segmentIndex, targetSegmentationId, targetSegmentIndex) {\n    const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentationId);\n    const targetAnnotationUIDsMap = getAnnotationsUIDMapFromSegmentation(targetSegmentationId);\n    if (!annotationUIDsMap || !targetAnnotationUIDsMap) {\n        return;\n    }\n    if (!annotationUIDsMap?.has(segmentIndex)) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    const viewport = getViewportAssociatedToSegmentation(targetSegmentationId);\n    if (!viewport) {\n        return;\n    }\n    const toolGroup = getToolGroupForViewport(viewport.id);\n    const copyContourAnnotation = (annotation) => {\n        const newAnnotation = copyAnnotation(annotation, targetSegmentationId, targetSegmentIndex);\n        if (toolGroup) {\n            const instance = toolGroup.getToolInstance(annotation.metadata.toolName);\n            if (instance) {\n                if (typeof instance.isSplineAnnotation === 'function' &&\n                    instance.isSplineAnnotation(annotation)) {\n                    instance.createSplineObjectFromType(newAnnotation, annotation.data.spline.type);\n                }\n            }\n        }\n        addAnnotation(newAnnotation, viewport.element);\n        newAnnotationsUID.add(newAnnotation.annotationUID);\n        return newAnnotation;\n    };\n    const newAnnotationsUID = new Set();\n    for (const annotationUID of annotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        const newAnnotation = copyContourAnnotation(annotation);\n        if (annotation?.childAnnotationUIDs) {\n            newAnnotation.childAnnotationUIDs = [];\n            for (const childAnnotationUID of annotation.childAnnotationUIDs) {\n                const childAnnotation = getAnnotation(childAnnotationUID);\n                const newChildAnnotation = copyContourAnnotation(childAnnotation);\n                newChildAnnotation.parentAnnotationUID = newAnnotation.annotationUID;\n                newAnnotation.childAnnotationUIDs.push(newChildAnnotation.annotationUID);\n            }\n        }\n    }\n    targetAnnotationUIDsMap.set(targetSegmentIndex, newAnnotationsUID);\n}\n","import * as math from '../math';\nfunction findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations) {\n    const intersectingContours = [];\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    for (let i = 0; i < contourSegmentationAnnotations.length; i++) {\n        const targetAnnotation = contourSegmentationAnnotations[i];\n        const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n        const targetAABB = math.polyline.getAABB(targetPolyline);\n        const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n        if (!aabbIntersect) {\n            continue;\n        }\n        const lineSegmentsIntersect = math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n        const isContourHole = !lineSegmentsIntersect &&\n            math.polyline.containsPoints(targetPolyline, sourcePolyline);\n        if (lineSegmentsIntersect || isContourHole) {\n            intersectingContours.push({\n                targetAnnotation,\n                targetPolyline,\n                isContourHole,\n            });\n        }\n    }\n    return intersectingContours;\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport { findAllIntersectingContours };\n","export function getViewReferenceFromAnnotation(annotation) {\n    const { metadata } = annotation;\n    if (!metadata) {\n        return {};\n    }\n    const { FrameOfReferenceUID, referencedImageId, referencedImageURI, multiSliceReference, cameraFocalPoint, viewPlaneNormal, viewUp, sliceIndex, volumeId, bounds, } = metadata;\n    const viewReference = {\n        FrameOfReferenceUID,\n        referencedImageId,\n        referencedImageURI,\n        multiSliceReference,\n        cameraFocalPoint,\n        viewPlaneNormal,\n        viewUp,\n        sliceIndex,\n        volumeId,\n        bounds,\n    };\n    return viewReference;\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, removeAnnotation } from '../../stateManagement';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default function convertContourSegmentationAnnotation(annotation) {\n    const { polyline } = annotation.data?.contour || {};\n    if (!polyline || polyline.length < 3) {\n        console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n        return;\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n    const startPointWorld = polyline[0];\n    const endPointWorld = polyline[polyline.length - 1];\n    const newAnnotation = {\n        metadata: {\n            ...annotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: annotation.data.handles.textBox\n                    ? { ...annotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                ...annotation.data.contour,\n            },\n            spline: annotation.data.spline,\n            segmentation: {\n                ...annotation.data.segmentation,\n            },\n        },\n        annotationUID: utilities.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: annotation.interpolationUID,\n        interpolationCompleted: annotation.interpolationCompleted,\n    };\n    addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);\n    addContourSegmentationAnnotation(newAnnotation);\n    return newAnnotation;\n}\n","export default function isContourSegmentationAnnotation(annotation) {\n    return !!annotation.data?.segmentation;\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation } from '../../stateManagement';\nconst DEFAULT_CONTOUR_SEG_TOOLNAME = 'PlanarFreehandContourSegmentationTool';\nexport default function addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentationId, polylinesInfo, segmentIndex) {\n    polylinesInfo.forEach(({ polyline, viewReference }) => {\n        if (polyline.length < 3) {\n            return;\n        }\n        const contourSegmentationAnnotation = {\n            annotationUID: utilities.uuidv4(),\n            data: {\n                contour: {\n                    closed: true,\n                    polyline,\n                },\n                segmentation: {\n                    segmentationId,\n                    segmentIndex,\n                },\n                handles: {},\n            },\n            handles: {},\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: DEFAULT_CONTOUR_SEG_TOOLNAME,\n                ...viewReference,\n            },\n        };\n        addAnnotation(contourSegmentationAnnotation, viewport.element);\n        const currentSet = annotationUIDsMap?.get(segmentIndex) || new Set();\n        currentSet.add(contourSegmentationAnnotation.annotationUID);\n        annotationUIDsMap.set(segmentIndex, currentSet);\n    });\n    return annotationUIDsMap;\n}\n","import { getAnnotation, removeAnnotation } from '../../stateManagement';\nimport { convertContourPolylineToCanvasSpace, convertContourPolylineToWorld, } from './sharedOperations';\nimport addPolylinesToSegmentation from './addPolylinesToSegmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { copyContourSegment } from './copyAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { getViewportAssociatedToSegmentation } from '../../stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation';\nimport { unifyPolylineSets } from './polylineUnify';\nimport { subtractPolylineSets } from './polylineSubtract';\nimport { intersectPolylinesSets } from './polylineIntersect';\nimport { xorPolylinesSets } from './polylineXor';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nexport var LogicalOperation;\n(function (LogicalOperation) {\n    LogicalOperation[LogicalOperation[\"Union\"] = 0] = \"Union\";\n    LogicalOperation[LogicalOperation[\"Subtract\"] = 1] = \"Subtract\";\n    LogicalOperation[LogicalOperation[\"Intersect\"] = 2] = \"Intersect\";\n    LogicalOperation[LogicalOperation[\"XOR\"] = 3] = \"XOR\";\n    LogicalOperation[LogicalOperation[\"Copy\"] = 4] = \"Copy\";\n    LogicalOperation[LogicalOperation[\"Delete\"] = 5] = \"Delete\";\n})(LogicalOperation || (LogicalOperation = {}));\nfunction getPolylinesInfoWorld(contourRepresentationData, segmentIndex) {\n    const polylinesInfo = [];\n    const { annotationUIDsMap } = contourRepresentationData || {};\n    if (!annotationUIDsMap?.has(segmentIndex)) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    for (const annotationUID of annotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        const { polyline } = annotation.data.contour;\n        polylinesInfo.push({\n            polyline,\n            viewReference: getViewReferenceFromAnnotation(annotation),\n        });\n    }\n    return polylinesInfo;\n}\nfunction extractPolylinesInCanvasSpace(viewport, segment1, segment2) {\n    const segmentation1 = getSegmentation(segment1.segmentationId);\n    const segmentation2 = getSegmentation(segment2.segmentationId);\n    if (!segmentation1 || !segmentation2) {\n        return;\n    }\n    if (!segmentation1.representationData.Contour ||\n        !segmentation2.representationData.Contour) {\n        return;\n    }\n    const polyLinesInfoWorld1 = getPolylinesInfoWorld(segmentation1.representationData.Contour, segment1.segmentIndex);\n    const polyLinesInfoWorld2 = getPolylinesInfoWorld(segmentation2.representationData.Contour, segment2.segmentIndex);\n    if (!polyLinesInfoWorld1 || !polyLinesInfoWorld2) {\n        return;\n    }\n    const polyLinesInfoCanvas1 = polyLinesInfoWorld1.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToCanvasSpace(polyline, viewport),\n            viewReference,\n        };\n    });\n    const polyLinesInfoCanvas2 = polyLinesInfoWorld2.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToCanvasSpace(polyline, viewport),\n            viewReference,\n        };\n    });\n    return { polyLinesInfoCanvas1, polyLinesInfoCanvas2 };\n}\nfunction addSegmentInSegmentation(segmentation, { segmentIndex, label, color }) {\n    if (!segmentation?.segments) {\n        return;\n    }\n    segmentation.segments[segmentIndex] = {\n        active: false,\n        locked: false,\n        label,\n        segmentIndex,\n        cachedStats: {},\n        color,\n    };\n}\nfunction removeAnnotations(annotationUIDList) {\n    annotationUIDList.forEach((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        removeAnnotation(annotationUID);\n        removeContourSegmentationAnnotation(annotation);\n    });\n    annotationUIDList.clear();\n}\nfunction applyLogicalOperation(segment1, segment2, options, operation) {\n    const viewport = getViewportAssociatedToSegmentation(segment1.segmentationId);\n    if (!viewport) {\n        return;\n    }\n    const { polyLinesInfoCanvas1, polyLinesInfoCanvas2 } = extractPolylinesInCanvasSpace(viewport, segment1, segment2) || {};\n    if (!polyLinesInfoCanvas1 || !polyLinesInfoCanvas2) {\n        return;\n    }\n    let polylinesMerged;\n    switch (operation) {\n        case LogicalOperation.Union:\n            polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.Subtract:\n            polylinesMerged = subtractPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.Intersect:\n            polylinesMerged = intersectPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.XOR:\n            polylinesMerged = xorPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        default:\n            polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n    }\n    const polyLinesWorld = polylinesMerged.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToWorld(polyline, viewport),\n            viewReference,\n        };\n    });\n    const resultSegment = options;\n    const segmentation = getSegmentation(resultSegment.segmentationId);\n    const segmentIndex = resultSegment.segmentIndex;\n    const color = resultSegment.color;\n    const label = resultSegment.label;\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    if (segment1.segmentationId === resultSegment.segmentationId &&\n        segment1.segmentIndex === segmentIndex) {\n        const existingAnnotationUIDs = annotationUIDsMap.get(segmentIndex);\n        if (existingAnnotationUIDs) {\n            removeAnnotations(existingAnnotationUIDs);\n        }\n    }\n    addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentation.segmentationId, polyLinesWorld, segmentIndex);\n    addSegmentInSegmentation(segmentation, { segmentIndex, color, label });\n}\nexport function add(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Union);\n}\nexport function subtract(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Subtract);\n}\nexport function intersect(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Intersect);\n}\nexport function xor(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.XOR);\n}\nexport function copy(segment, options) {\n    copyContourSegment(segment.segmentationId, segment.segmentIndex, options.segmentationId, options.segmentIndex);\n}\nexport function deleteOperation(segment) {\n    const segmentation = getSegmentation(segment.segmentationId);\n    if (!segmentation) {\n        console.log('No active segmentation detected');\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.log('No contour representation found');\n        return;\n    }\n    const representationData = segmentation.representationData.Contour;\n    const { annotationUIDsMap } = representationData;\n    if (!annotationUIDsMap) {\n        console.log('No annotation map found');\n        return;\n    }\n    if (!annotationUIDsMap.has(segment.segmentIndex)) {\n        console.log('Segmentation index has no annotations');\n        return;\n    }\n    const annotationUIDList = annotationUIDsMap.get(segment.segmentIndex);\n    removeAnnotations(annotationUIDList);\n}\n","import { utilities as csUtils, getEnabledElement } from '@cornerstonejs/core';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport * as math from '../math';\nimport updateContourPolyline from '../contours/updateContourPolyline';\nimport { addAnnotation, removeAnnotation, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../viewportFilters';\nimport { hasToolByName, hasTool } from '../../store/addTool';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nfunction processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours) {\n    const holeOperations = intersectingContours.filter((item) => item.isContourHole);\n    const mergeOperations = intersectingContours.filter((item) => !item.isContourHole);\n    if (holeOperations.length > 0) {\n        const primaryHoleTarget = holeOperations[0];\n        createPolylineHole(viewport, primaryHoleTarget.targetAnnotation, sourceAnnotation);\n        updateViewportsForAnnotations(viewport, [\n            sourceAnnotation,\n            primaryHoleTarget.targetAnnotation,\n        ]);\n        return;\n    }\n    if (mergeOperations.length === 0) {\n        return;\n    }\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone. Cannot process multiple intersections.`);\n        return;\n    }\n    processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations);\n}\nfunction processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations) {\n    const { element } = viewport;\n    const allAnnotationsToRemove = [sourceAnnotation];\n    const allResultPolylines = [];\n    const allHoles = [];\n    mergeOperations.forEach(({ targetAnnotation }) => {\n        const holes = getContourHolesData(viewport, targetAnnotation);\n        allHoles.push(...holes);\n        allAnnotationsToRemove.push(targetAnnotation);\n    });\n    const sourceStartPoint = sourcePolyline[0];\n    const shouldMerge = mergeOperations.some(({ targetPolyline }) => math.polyline.containsPoint(targetPolyline, sourceStartPoint));\n    if (shouldMerge) {\n        let resultPolyline = sourcePolyline;\n        mergeOperations.forEach(({ targetPolyline }) => {\n            resultPolyline = math.polyline.mergePolylines(resultPolyline, targetPolyline);\n        });\n        allResultPolylines.push(resultPolyline);\n    }\n    else {\n        mergeOperations.forEach(({ targetPolyline }) => {\n            const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n            allResultPolylines.push(...subtractedPolylines);\n        });\n    }\n    allAnnotationsToRemove.forEach((annotation) => {\n        removeAnnotation(annotation.annotationUID);\n        removeContourSegmentationAnnotation(annotation);\n    });\n    allHoles.forEach((holeData) => clearParentAnnotation(holeData.annotation));\n    const baseAnnotation = mergeOperations[0].targetAnnotation;\n    const newAnnotations = [];\n    allResultPolylines.forEach((polyline) => {\n        if (!polyline || polyline.length < 3) {\n            console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n            return;\n        }\n        const newAnnotation = createNewAnnotationFromPolyline(viewport, baseAnnotation, polyline);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        newAnnotations.push(newAnnotation);\n    });\n    reassignHolesToNewAnnotations(viewport, allHoles, newAnnotations);\n    updateViewportsForAnnotations(viewport, allAnnotationsToRemove);\n}\nfunction createNewAnnotationFromPolyline(viewport, baseAnnotation, polyline) {\n    const startPointWorld = viewport.canvasToWorld(polyline[0]);\n    const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);\n    const newAnnotation = {\n        metadata: {\n            ...baseAnnotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: baseAnnotation.metadata.originalToolName ||\n                baseAnnotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: baseAnnotation.data.handles.textBox\n                    ? { ...baseAnnotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                polyline: [],\n                closed: true,\n            },\n            spline: baseAnnotation.data.spline,\n            segmentation: {\n                ...baseAnnotation.data.segmentation,\n            },\n        },\n        annotationUID: csUtils.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: baseAnnotation.interpolationUID,\n        interpolationCompleted: baseAnnotation.interpolationCompleted,\n    };\n    updateContourPolyline(newAnnotation, {\n        points: polyline,\n        closed: true,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n    }, viewport);\n    return newAnnotation;\n}\nfunction reassignHolesToNewAnnotations(viewport, holes, newAnnotations) {\n    holes.forEach((holeData) => {\n        const parentAnnotation = newAnnotations.find((annotation) => {\n            const parentPolyline = convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport);\n            return math.polyline.containsPoints(parentPolyline, holeData.polyline);\n        });\n        if (parentAnnotation) {\n            addChildAnnotation(parentAnnotation, holeData.annotation);\n        }\n    });\n}\nfunction getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const contourHoleAnnotation = holeAnnotation;\n        const polyline = convertContourPolylineToCanvasSpace(contourHoleAnnotation.data.contour.polyline, viewport);\n        return { annotation: contourHoleAnnotation, polyline };\n    });\n}\nfunction createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolylineCanvas = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolylineCanvas,\n        closed: holeContour.closed,\n        targetWindingDirection: targetAnnotation.data.contour.windingDirection ===\n            ContourWindingDirection.Clockwise\n            ? ContourWindingDirection.CounterClockwise\n            : ContourWindingDirection.Clockwise,\n    }, viewport);\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nfunction updateViewportsForAnnotations(viewport, annotations) {\n    const { element } = viewport;\n    const updatedToolNames = new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME]);\n    annotations.forEach((annotation) => {\n        updatedToolNames.add(annotation.metadata.toolName);\n    });\n    for (const toolName of updatedToolNames.values()) {\n        if (hasToolByName(toolName)) {\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        }\n    }\n}\nexport { processMultipleIntersections };\n","import { checkIntersection, cleanupPolylines } from './sharedOperations';\nimport { intersectPolylines } from '../math/polyline';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function intersectPolylinesSets(set1, set2) {\n    if (!set1.length || !set2.length) {\n        return [];\n    }\n    const result = [];\n    for (const polyA of set1) {\n        for (const polyB of set2) {\n            if (!areViewReferencesEqual(polyA.viewReference, polyB.viewReference)) {\n                continue;\n            }\n            if (arePolylinesIdentical(polyA.polyline, polyB.polyline)) {\n                result.push({ ...polyA });\n                continue;\n            }\n            const intersection = checkIntersection(polyA.polyline, polyB.polyline);\n            if (intersection.hasIntersection && !intersection.isContourHole) {\n                const intersectionRegions = cleanupPolylines(intersectPolylines(polyA.polyline, polyB.polyline));\n                if (intersectionRegions && intersectionRegions.length > 0) {\n                    intersectionRegions.forEach((region) => {\n                        result.push({\n                            polyline: region,\n                            viewReference: polyA.viewReference,\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return result;\n}\n","import * as math from '../math';\nimport { checkIntersection, cleanupPolylines, convertContourPolylineToCanvasSpace, removeDuplicatePoints, } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function subtractPolylineSets(polylinesSetA, polylinesSetB) {\n    const result = [];\n    for (let i = 0; i < polylinesSetA.length; i++) {\n        let currentPolylines = [polylinesSetA[i]];\n        for (let j = 0; j < polylinesSetB.length; j++) {\n            const polylineB = polylinesSetB[j];\n            const newPolylines = [];\n            for (const currentPolyline of currentPolylines) {\n                if (!areViewReferencesEqual(currentPolyline.viewReference, polylineB.viewReference)) {\n                    newPolylines.push(currentPolyline);\n                    continue;\n                }\n                if (arePolylinesIdentical(currentPolyline.polyline, polylineB.polyline)) {\n                    continue;\n                }\n                const intersection = checkIntersection(currentPolyline.polyline, polylineB.polyline);\n                if (intersection.hasIntersection && !intersection.isContourHole) {\n                    const subtractedPolylines = cleanupPolylines(math.polyline.subtractPolylines(currentPolyline.polyline, polylineB.polyline));\n                    for (const subtractedPolyline of subtractedPolylines) {\n                        const cleaned = removeDuplicatePoints(subtractedPolyline);\n                        if (cleaned.length >= 3) {\n                            newPolylines.push({\n                                polyline: cleaned,\n                                viewReference: currentPolyline.viewReference,\n                            });\n                        }\n                    }\n                }\n                else {\n                    newPolylines.push({\n                        polyline: currentPolyline.polyline,\n                        viewReference: currentPolyline.viewReference,\n                    });\n                }\n            }\n            currentPolylines = newPolylines;\n        }\n        result.push(...currentPolylines);\n    }\n    return result;\n}\nexport function subtractMultiplePolylineSets(basePolylineSet, subtractorSets) {\n    if (subtractorSets.length === 0) {\n        return [...basePolylineSet];\n    }\n    let result = [...basePolylineSet];\n    for (let i = 0; i < subtractorSets.length; i++) {\n        result = subtractPolylineSets(result, subtractorSets[i]);\n    }\n    return result;\n}\nexport function subtractAnnotationPolylines(baseAnnotations, subtractorAnnotations, viewport) {\n    const basePolylines = baseAnnotations.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    const subtractorPolylines = subtractorAnnotations.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    return subtractPolylineSets(basePolylines, subtractorPolylines);\n}\n","import * as math from '../math';\nimport { checkIntersection, convertContourPolylineToCanvasSpace, } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function unifyPolylineSets(polylinesSetA, polylinesSetB) {\n    const result = [];\n    const processedFromA = new Set();\n    const processedFromB = new Set();\n    for (let i = 0; i < polylinesSetA.length; i++) {\n        if (processedFromA.has(i)) {\n            continue;\n        }\n        const polylineA = polylinesSetA[i];\n        let merged = false;\n        for (let j = 0; j < polylinesSetB.length; j++) {\n            if (processedFromB.has(j)) {\n                continue;\n            }\n            const polylineB = polylinesSetB[j];\n            if (!areViewReferencesEqual(polylineA.viewReference, polylineB.viewReference)) {\n                continue;\n            }\n            if (arePolylinesIdentical(polylineA.polyline, polylineB.polyline)) {\n                result.push(polylineA);\n                processedFromA.add(i);\n                processedFromB.add(j);\n                merged = true;\n                break;\n            }\n            const intersection = checkIntersection(polylineA.polyline, polylineB.polyline);\n            if (intersection.hasIntersection && !intersection.isContourHole) {\n                const mergedPolyline = math.polyline.mergePolylines(polylineA.polyline, polylineB.polyline);\n                result.push({\n                    polyline: mergedPolyline,\n                    viewReference: polylineA.viewReference,\n                });\n                processedFromA.add(i);\n                processedFromB.add(j);\n                merged = true;\n                break;\n            }\n        }\n        if (!merged) {\n            result.push(polylineA);\n            processedFromA.add(i);\n        }\n    }\n    for (let j = 0; j < polylinesSetB.length; j++) {\n        if (!processedFromB.has(j)) {\n            result.push(polylinesSetB[j]);\n        }\n    }\n    return result;\n}\nexport function unifyMultiplePolylineSets(polylineSets) {\n    if (polylineSets.length === 0) {\n        return [];\n    }\n    if (polylineSets.length === 1) {\n        return [...polylineSets[0]];\n    }\n    let result = [...polylineSets[0]];\n    for (let i = 1; i < polylineSets.length; i++) {\n        result = unifyPolylineSets(result, polylineSets[i]);\n    }\n    return result;\n}\nexport function unifyAnnotationPolylines(annotationsSetA, annotationsSetB, viewport) {\n    const polylinesSetA = annotationsSetA.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    const polylinesSetB = annotationsSetB.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    return unifyPolylineSets(polylinesSetA, polylinesSetB);\n}\n","import { cleanupPolylines } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { subtractPolylineSets } from './polylineSubtract';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function xorPolylinesSets(polylinesSetA, polylinesSetB) {\n    if (!polylinesSetA.length && !polylinesSetB.length) {\n        return [];\n    }\n    if (!polylinesSetA.length) {\n        return polylinesSetB;\n    }\n    if (!polylinesSetB.length) {\n        return polylinesSetA;\n    }\n    if (polylinesSetA.length === polylinesSetB.length) {\n        let allIdentical = true;\n        for (let i = 0; i < polylinesSetA.length; i++) {\n            let foundMatch = false;\n            for (let j = 0; j < polylinesSetB.length; j++) {\n                if (!areViewReferencesEqual(polylinesSetA[i].viewReference, polylinesSetB[j].viewReference)) {\n                    continue;\n                }\n                if (arePolylinesIdentical(polylinesSetA[i].polyline, polylinesSetB[j].polyline)) {\n                    foundMatch = true;\n                    break;\n                }\n            }\n            if (!foundMatch) {\n                allIdentical = false;\n                break;\n            }\n        }\n        if (allIdentical) {\n            return [];\n        }\n    }\n    const aMinusB = subtractPolylineSets(polylinesSetA, polylinesSetB);\n    const bMinusA = subtractPolylineSets(polylinesSetB, polylinesSetA);\n    const xorResult = [...aMinusB, ...bMinusA];\n    return xorResult;\n}\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nexport function removeContourSegmentationAnnotation(annotation) {\n    if (!annotation.data.segmentation) {\n        throw new Error('removeContourSegmentationAnnotation: annotation does not have a segmentation data');\n    }\n    const { segmentationId, segmentIndex } = annotation.data.segmentation;\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation?.representationData.Contour || {};\n    const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        return;\n    }\n    annotationsUIDsSet.delete(annotation.annotationUID);\n    if (!annotationsUIDsSet.size) {\n        annotationUIDsMap.delete(segmentIndex);\n    }\n}\n","import { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport * as math from '../math';\nimport updateContourPolyline from '../contours/updateContourPolyline';\nimport { addAnnotation, removeAnnotation, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../viewportFilters';\nimport { hasToolByName } from '../../store/addTool';\nconst TOLERANCE = 1e-10;\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport function convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport function convertContourPolylineToWorld(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.canvasToWorld(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport function checkIntersection(sourcePolyline, targetPolyline) {\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    const targetAABB = math.polyline.getAABB(targetPolyline);\n    const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n    if (!aabbIntersect) {\n        return { hasIntersection: false, isContourHole: false };\n    }\n    const lineSegmentsIntersect = math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n    const isContourHole = !lineSegmentsIntersect &&\n        math.polyline.containsPoints(targetPolyline, sourcePolyline);\n    const hasIntersection = lineSegmentsIntersect || isContourHole;\n    return { hasIntersection, isContourHole };\n}\nexport function getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const contourHoleAnnotation = holeAnnotation;\n        const polyline = convertContourPolylineToCanvasSpace(contourHoleAnnotation.data.contour.polyline, viewport);\n        return { annotation: contourHoleAnnotation, polyline };\n    });\n}\nexport function createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolylineCanvas = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolylineCanvas,\n        closed: holeContour.closed,\n        targetWindingDirection: targetAnnotation.data.contour.windingDirection ===\n            ContourWindingDirection.Clockwise\n            ? ContourWindingDirection.CounterClockwise\n            : ContourWindingDirection.Clockwise,\n    }, viewport);\n    const { element } = viewport;\n    updateViewportsForAnnotations(viewport, [targetAnnotation, holeAnnotation]);\n}\nexport function combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline) {\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone. Cannot combine polylines.`);\n        return;\n    }\n    const sourceStartPoint = sourcePolyline[0];\n    const mergePolylines = math.polyline.containsPoint(targetPolyline, sourceStartPoint);\n    const contourHolesData = getContourHolesData(viewport, targetAnnotation);\n    const unassignedContourHolesSet = new Set(contourHolesData);\n    const reassignedContourHolesMap = new Map();\n    const assignHoleToPolyline = (parentPolyline, holeData) => {\n        let holes = reassignedContourHolesMap.get(parentPolyline);\n        if (!holes) {\n            holes = [];\n            reassignedContourHolesMap.set(parentPolyline, holes);\n        }\n        holes.push(holeData);\n        unassignedContourHolesSet.delete(holeData);\n    };\n    const newPolylines = [];\n    if (mergePolylines) {\n        const mergedPolyline = math.polyline.mergePolylines(targetPolyline, sourcePolyline);\n        newPolylines.push(mergedPolyline);\n        Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => assignHoleToPolyline(mergedPolyline, holeData));\n    }\n    else {\n        const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n        subtractedPolylines.forEach((newPolyline) => {\n            newPolylines.push(newPolyline);\n            Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {\n                const containsHole = math.polyline.containsPoints(newPolyline, holeData.polyline);\n                if (containsHole) {\n                    assignHoleToPolyline(newPolyline, holeData);\n                }\n            });\n        });\n    }\n    Array.from(reassignedContourHolesMap.values()).forEach((contourHolesDataArray) => contourHolesDataArray.forEach((contourHoleData) => clearParentAnnotation(contourHoleData.annotation)));\n    const { element } = viewport;\n    const { metadata, data } = targetAnnotation;\n    const { handles, segmentation } = data;\n    const { textBox } = handles;\n    removeAnnotation(sourceAnnotation.annotationUID);\n    removeAnnotation(targetAnnotation.annotationUID);\n    removeContourSegmentationAnnotation(sourceAnnotation);\n    removeContourSegmentationAnnotation(targetAnnotation);\n    const newAnnotations = [];\n    for (let i = 0; i < newPolylines.length; i++) {\n        const polyline = newPolylines[i];\n        if (!polyline || polyline.length < 3) {\n            console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n            continue;\n        }\n        const newAnnotation = createNewAnnotationFromPolyline(viewport, targetAnnotation, polyline);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        newAnnotations.push(newAnnotation);\n        reassignedContourHolesMap\n            .get(polyline)\n            ?.forEach((holeData) => addChildAnnotation(newAnnotation, holeData.annotation));\n    }\n    updateViewportsForAnnotations(viewport, [targetAnnotation, sourceAnnotation]);\n}\nexport function createNewAnnotationFromPolyline(viewport, templateAnnotation, polyline) {\n    const startPointWorld = viewport.canvasToWorld(polyline[0]);\n    const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);\n    const newAnnotation = {\n        metadata: {\n            ...templateAnnotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: templateAnnotation.metadata.originalToolName ||\n                templateAnnotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: templateAnnotation.data.handles.textBox\n                    ? { ...templateAnnotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                polyline: [],\n                closed: true,\n            },\n            spline: templateAnnotation.data.spline,\n            segmentation: {\n                ...templateAnnotation.data.segmentation,\n            },\n        },\n        annotationUID: csUtils.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: templateAnnotation.interpolationUID,\n        interpolationCompleted: templateAnnotation.interpolationCompleted,\n    };\n    updateContourPolyline(newAnnotation, {\n        points: polyline,\n        closed: true,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n    }, viewport);\n    return newAnnotation;\n}\nexport function updateViewportsForAnnotations(viewport, annotations) {\n    const { element } = viewport;\n    const updatedToolNames = new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME]);\n    annotations.forEach((annotation) => {\n        updatedToolNames.add(annotation.metadata.toolName);\n    });\n    for (const toolName of updatedToolNames.values()) {\n        if (hasToolByName(toolName)) {\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        }\n    }\n}\nexport function removeDuplicatePoints(polyline) {\n    if (!polyline || polyline.length < 2) {\n        return polyline;\n    }\n    const cleaned = [polyline[0]];\n    for (let i = 1; i < polyline.length; i++) {\n        const currentPoint = polyline[i];\n        const lastPoint = cleaned[cleaned.length - 1];\n        const dx = Math.abs(currentPoint[0] - lastPoint[0]);\n        const dy = Math.abs(currentPoint[1] - lastPoint[1]);\n        if (dx > TOLERANCE || dy > TOLERANCE) {\n            cleaned.push(currentPoint);\n        }\n    }\n    return cleaned;\n}\nexport function cleanupPolylines(polylines) {\n    const validPolylines = [];\n    const seenPolylines = new Set();\n    for (let polyline of polylines) {\n        if (!polyline || polyline.length < 3) {\n            continue;\n        }\n        polyline = removeDuplicatePoints(polyline);\n        if (polyline.length < 3) {\n            continue;\n        }\n        const sortedPoints = [...polyline].sort((a, b) => {\n            if (a[0] !== b[0]) {\n                return a[0] - b[0];\n            }\n            return a[1] - b[1];\n        });\n        const polylineKey = sortedPoints\n            .map((p) => `${p[0].toFixed(6)},${p[1].toFixed(6)}`)\n            .join('|');\n        if (!seenPolylines.has(polylineKey)) {\n            seenPolylines.add(polylineKey);\n            validPolylines.push(polyline);\n        }\n    }\n    return validPolylines;\n}\n","function calculatePerimeter(polyline, closed) {\n    let perimeter = 0;\n    for (let i = 0; i < polyline.length - 1; i++) {\n        const point1 = polyline[i];\n        const point2 = polyline[i + 1];\n        perimeter += Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));\n    }\n    if (closed) {\n        const firstPoint = polyline[0];\n        const lastPoint = polyline[polyline.length - 1];\n        perimeter += Math.sqrt(Math.pow(lastPoint[0] - firstPoint[0], 2) +\n            Math.pow(lastPoint[1] - firstPoint[1], 2));\n    }\n    return perimeter;\n}\nexport default calculatePerimeter;\n","function findNextLink(line, lines, contourPoints) {\n    let index = -1;\n    lines.forEach((cell, i) => {\n        if (index >= 0) {\n            return;\n        }\n        if (cell.a == line.b) {\n            index = i;\n        }\n    });\n    if (index >= 0) {\n        const nextLine = lines[index];\n        lines.splice(index, 1);\n        contourPoints.push(nextLine.b);\n        if (contourPoints[0] == nextLine.b) {\n            return {\n                remainingLines: lines,\n                contourPoints,\n                type: 'CLOSED_PLANAR',\n            };\n        }\n        return findNextLink(nextLine, lines, contourPoints);\n    }\n    return {\n        remainingLines: lines,\n        contourPoints,\n        type: 'OPEN_PLANAR',\n    };\n}\nexport function findContours(lines) {\n    if (lines.length == 0) {\n        return [];\n    }\n    const contourPoints = [];\n    const firstCell = lines.shift();\n    contourPoints.push(firstCell.a);\n    contourPoints.push(firstCell.b);\n    const result = findNextLink(firstCell, lines, contourPoints);\n    if (result.remainingLines.length == 0) {\n        return [\n            {\n                type: result.type,\n                contourPoints: result.contourPoints,\n            },\n        ];\n    }\n    else {\n        const extraContours = findContours(result.remainingLines);\n        extraContours.push({\n            type: result.type,\n            contourPoints: result.contourPoints,\n        });\n        return extraContours;\n    }\n}\nexport function findContoursFromReducedSet(lines) {\n    return findContours(lines);\n}\nexport default {\n    findContours,\n    findContoursFromReducedSet,\n};\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isClosed from '../math/polyline/isClosed';\nimport { getSignedArea } from '../math/polyline';\nexport default function findIslands(polylines, threshold) {\n    if (!polylines || polylines.length === 0) {\n        return [];\n    }\n    if (threshold <= 0) {\n        return [];\n    }\n    const islandIndexes = [];\n    for (let i = 0; i < polylines.length; i++) {\n        const polyline = polylines[i];\n        if (!polyline || polyline.length < 3) {\n            continue;\n        }\n        const isClosedPolyline = isClosed(polyline);\n        if (isClosedPolyline) {\n            const area = Math.abs(getSignedArea(polyline)) / 100;\n            if (area < threshold) {\n                islandIndexes.push(i);\n            }\n        }\n    }\n    return islandIndexes;\n}\n","import getContourHolesDataWorld from './getContourHolesDataWorld';\nexport default function getContourHolesDataCanvas(annotation, viewport) {\n    const worldHoleContours = getContourHolesDataWorld(annotation);\n    const canvasHoleContours = [];\n    worldHoleContours.forEach((worldHoleContour) => {\n        const numPoints = worldHoleContour.length;\n        const canvasHoleContour = new Array(numPoints);\n        for (let i = 0; i < numPoints; i++) {\n            canvasHoleContour[i] = viewport.worldToCanvas(worldHoleContour[i]);\n        }\n        canvasHoleContours.push(canvasHoleContour);\n    });\n    return canvasHoleContours;\n}\n","import { getAnnotation } from '../../stateManagement/annotation/annotationState';\nexport default function getContourHolesDataWorld(annotation) {\n    const childAnnotationUIDs = annotation.childAnnotationUIDs ?? [];\n    return childAnnotationUIDs.map((uid) => getAnnotation(uid).data.contour.polyline);\n}\n","export function getDeduplicatedVTKPolyDataPoints(polyData, bypass = false) {\n    const points = polyData.getPoints();\n    const lines = polyData.getLines();\n    const pointsArray = new Array(points.getNumberOfPoints())\n        .fill(0)\n        .map((_, i) => points.getPoint(i).slice());\n    const linesArray = new Array(lines.getNumberOfCells()).fill(0).map((_, i) => {\n        const cell = lines.getCell(i * 3).slice();\n        return { a: cell[0], b: cell[1] };\n    });\n    if (bypass) {\n        return { points: pointsArray, lines: linesArray };\n    }\n    const newPoints = [];\n    for (const [i, pt] of pointsArray.entries()) {\n        const index = newPoints.findIndex((point) => point[0] === pt[0] && point[1] === pt[1] && point[2] === pt[2]);\n        if (index >= 0) {\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = index;\n                }\n                if (line.b === i) {\n                    line.b = index;\n                }\n                return line;\n            });\n        }\n        else {\n            const newIndex = newPoints.length;\n            newPoints.push(pt);\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = newIndex;\n                }\n                if (line.b === i) {\n                    line.b = newIndex;\n                }\n                return line;\n            });\n        }\n    }\n    const newLines = linesArray.filter((line) => line.a !== line.b);\n    return { points: newPoints, lines: newLines };\n}\nexport default { getDeduplicatedVTKPolyDataPoints };\n","import { glMatrix, vec3 } from 'gl-matrix';\nexport default function areCoplanarContours(firstAnnotation, secondAnnotation) {\n    const { viewPlaneNormal: firstViewPlaneNormal } = firstAnnotation.metadata;\n    const { viewPlaneNormal: secondViewPlaneNormal } = secondAnnotation.metadata;\n    const dot = vec3.dot(firstViewPlaneNormal, secondViewPlaneNormal);\n    const parallelPlanes = glMatrix.equals(1, Math.abs(dot));\n    if (!parallelPlanes) {\n        return false;\n    }\n    const { polyline: firstPolyline } = firstAnnotation.data.contour;\n    const { polyline: secondPolyline } = secondAnnotation.data.contour;\n    const firstDistance = vec3.dot(firstViewPlaneNormal, firstPolyline[0]);\n    const secondDistance = vec3.dot(firstViewPlaneNormal, secondPolyline[0]);\n    return glMatrix.equals(firstDistance, secondDistance);\n}\n","const getIsPointInsidePolygon = (point, vertices) => {\n    const x = point[0];\n    const y = point[1];\n    let inside = false;\n    for (let i = 0, j = vertices.length - 1; i < vertices.length; j = i++) {\n        const xi = vertices[i][0], yi = vertices[i][1];\n        const xj = vertices[j][0], yj = vertices[j][1];\n        const intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n};\nfunction checkEnclosed(outerContour, innerContour, points) {\n    const vertices = [];\n    outerContour.contourPoints.forEach((point) => {\n        vertices.push([points[point][0], points[point][1]]);\n    });\n    let pointsNotEnclosed = 0;\n    innerContour.contourPoints.forEach((point) => {\n        const result = getIsPointInsidePolygon([points[point][0], points[point][1]], vertices);\n        if (!result) {\n            pointsNotEnclosed++;\n        }\n    });\n    return pointsNotEnclosed === 0;\n}\nexport function processContourHoles(contours, points, useXOR = true) {\n    const retContours = contours.filter((contour) => contour.type !== 'CLOSED_PLANAR');\n    const closedContours = contours.filter((contour) => contour.type === 'CLOSED_PLANAR');\n    const contourWithHoles = [];\n    let contourWithoutHoles = [];\n    closedContours.forEach((contour, index) => {\n        const holes = [];\n        closedContours.forEach((hContour, hIndex) => {\n            if (index != hIndex) {\n                if (checkEnclosed(contour, hContour, points)) {\n                    holes.push(hIndex);\n                }\n            }\n        });\n        if (holes.length > 0) {\n            contourWithHoles.push({\n                contour,\n                holes,\n            });\n        }\n        else {\n            contourWithoutHoles.push(index);\n        }\n    });\n    if (useXOR) {\n        contourWithHoles.forEach((contourHoleSet) => {\n            contourHoleSet.contour.type = 'CLOSEDPLANAR_XOR';\n            retContours.push(contourHoleSet.contour);\n            contourHoleSet.holes.forEach((holeIndex) => {\n                closedContours[holeIndex].type = 'CLOSEDPLANAR_XOR';\n                retContours.push(closedContours[holeIndex]);\n                contourWithoutHoles = contourWithoutHoles.filter((contourIndex) => {\n                    return contourIndex !== holeIndex;\n                });\n            });\n        });\n        contourWithoutHoles.forEach((contourIndex) => {\n            retContours.push(closedContours[contourIndex]);\n        });\n    }\n    else {\n    }\n    return retContours;\n}\nexport default { processContourHoles };\n","import getSignedArea from '../math/polyline/getSignedArea';\nimport containsPoints from '../math/polyline/containsPoints';\nimport isClosed from '../math/polyline/isClosed';\nfunction isPolygonInsidePolygon(inner, outer) {\n    return containsPoints(outer, inner);\n}\nexport default function findContourHoles(polylines) {\n    const results = [];\n    const closedPolylines = [];\n    polylines.forEach((polyline, index) => {\n        if (isClosed(polyline)) {\n            closedPolylines.push({ polyline, originalIndex: index });\n        }\n    });\n    for (let i = 0; i < closedPolylines.length; i++) {\n        const outerContour = closedPolylines[i];\n        const outerArea = Math.abs(getSignedArea(outerContour.polyline));\n        const holeIndexes = [];\n        for (let j = 0; j < closedPolylines.length; j++) {\n            if (i === j) {\n                continue;\n            }\n            const potentialHole = closedPolylines[j];\n            const holeArea = Math.abs(getSignedArea(potentialHole.polyline));\n            if (holeArea < outerArea &&\n                isPolygonInsidePolygon(potentialHole.polyline, outerContour.polyline)) {\n                holeIndexes.push(potentialHole.originalIndex);\n            }\n        }\n        if (holeIndexes.length > 0) {\n            results.push({\n                contourIndex: outerContour.originalIndex,\n                holeIndexes: holeIndexes.sort((a, b) => a - b),\n            });\n        }\n    }\n    return results.sort((a, b) => a.contourIndex - b.contourIndex);\n}\nexport { findContourHoles };\n","import { cache as cornerstoneCache, getWebWorkerManager, cache, utilities, } from '@cornerstonejs/core';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport { triggerWorkerProgress } from '../segmentation/utilsForWorker';\nimport getOrCreateSegmentationVolume from '../segmentation/getOrCreateSegmentationVolume';\nconst { Labelmap } = SegmentationRepresentations;\nasync function generateContourSetsFromLabelmap({ segmentations }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.GENERATE_CONTOUR_SETS, 0);\n    const { representationData, segments = [0, 1], segmentationId, } = segmentations;\n    let { volumeId: segVolumeId } = representationData[Labelmap];\n    if (!segVolumeId) {\n        const segVolume = getOrCreateSegmentationVolume(segmentationId);\n        if (segVolume) {\n            segVolumeId = segVolume.volumeId;\n        }\n    }\n    const vol = cornerstoneCache.getVolume(segVolumeId);\n    if (!vol) {\n        console.warn(`No volume found for ${segVolumeId}`);\n        return;\n    }\n    const voxelManager = vol.voxelManager;\n    const segScalarData = voxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segScalarData,\n        dimensions: vol.dimensions,\n        spacing: vol.imageData.getSpacing(),\n        origin: vol.imageData.getOrigin(),\n        direction: vol.imageData.getDirection(),\n    };\n    const indices = Array.isArray(segments)\n        ? segments\n            .filter((segment) => segment !== null)\n            .map((segment) => segment.segmentIndex || segment)\n        : Object.values(segments)\n            .filter((segment) => segment !== null)\n            .map((segment) => segment.segmentIndex || segment);\n    const contourSets = await getWebWorkerManager().executeTask('compute', 'generateContourSetsFromLabelmapVolume', {\n        segmentation: segmentationInfo,\n        indices,\n        mode: 'individual',\n    });\n    const refImages = vol.imageIds.map((imageId) => {\n        const refImageId = cache.getImage(imageId)?.referencedImageId;\n        return refImageId ? cache.getImage(refImageId) : undefined;\n    });\n    const refImageDataMetadata = refImages.map((image) => {\n        return utilities.getImageDataMetadata(image);\n    });\n    const processedContourSets = contourSets\n        .map((contourSet) => {\n        const segment = segments[contourSet.segment.segmentIndex] || {};\n        if (!contourSet.sliceContours.length) {\n            return null;\n        }\n        const p1 = contourSet.sliceContours[0].polyData.points[0];\n        let refImageId;\n        if (p1) {\n            const refImageIndex = refImageDataMetadata.findIndex((imageDataMetadata) => {\n                const { scanAxisNormal, origin } = imageDataMetadata;\n                const plane = utilities.planar.planeEquation(scanAxisNormal, origin);\n                return utilities.planar.isPointOnPlane(p1, plane);\n            });\n            if (refImageIndex !== -1) {\n                refImageId = refImages[refImageIndex].imageId;\n            }\n        }\n        return {\n            label: segment.label,\n            color: segment.color,\n            metadata: {\n                FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,\n                referencedImageId: refImageId,\n            },\n            sliceContours: contourSet.sliceContours.map((contourData) => ({\n                contours: contourData.contours,\n                polyData: contourData.polyData,\n                FrameNumber: contourData.sliceIndex + 1,\n                sliceIndex: contourData.sliceIndex,\n                FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,\n                referencedImageId: refImageId,\n            })),\n        };\n    })\n        .filter((contourSet) => contourSet !== null);\n    triggerWorkerProgress(WorkerTypes.GENERATE_CONTOUR_SETS, 100);\n    return processedContourSets;\n}\nexport { generateContourSetsFromLabelmap };\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\nfunction validateAnnotation(annotation) {\n    if (!annotation?.data) {\n        throw new Error('Tool data is empty');\n    }\n    if (!annotation.metadata || annotation.metadata.referencedImageId) {\n        throw new Error('Tool data is not associated with any imageId');\n    }\n}\nclass AnnotationToPointData {\n    static { this.TOOL_NAMES = {}; }\n    constructor() {\n    }\n    static convert(annotation, index, metadataProvider) {\n        validateAnnotation(annotation);\n        const { toolName } = annotation.metadata;\n        const toolClass = AnnotationToPointData.TOOL_NAMES[toolName];\n        if (!toolClass) {\n            throw new Error(`Unknown tool type: ${toolName}, cannot convert to RTSSReport`);\n        }\n        const ContourSequence = toolClass.getContourSequence(annotation, metadataProvider);\n        const color = [\n            Math.floor(Math.random() * 255),\n            Math.floor(Math.random() * 255),\n            Math.floor(Math.random() * 255),\n        ];\n        return {\n            ReferencedROINumber: index + 1,\n            ROIDisplayColor: color,\n            ContourSequence,\n        };\n    }\n    static register(toolClass) {\n        AnnotationToPointData.TOOL_NAMES[toolClass.toolName] = toolClass;\n    }\n}\nAnnotationToPointData.register(RectangleROIStartEndThreshold);\nexport default AnnotationToPointData;\n","import InterpolationManager from '../../segmentation/InterpolationManager/InterpolationManager';\nexport default function acceptAutogeneratedInterpolations(annotationGroupSelector, selector) {\n    InterpolationManager.acceptAutoGenerated(annotationGroupSelector, selector);\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport * as math from '../math';\nimport { getParentAnnotation, invalidateAnnotation, } from '../../stateManagement/annotation/annotationState';\nexport default function updateContourPolyline(annotation, polylineData, transforms, options) {\n    const { canvasToWorld, worldToCanvas } = transforms;\n    const { data } = annotation;\n    const { targetWindingDirection } = polylineData;\n    let { points: polyline } = polylineData;\n    let windingDirection = math.polyline.getWindingDirection(polyline);\n    if (options?.decimate?.enabled) {\n        polyline = math.polyline.decimate(polylineData.points, options?.decimate?.epsilon);\n    }\n    let { closed } = polylineData;\n    const numPoints = polyline.length;\n    const polylineWorldPoints = new Array(numPoints);\n    const currentPolylineWindingDirection = math.polyline.getWindingDirection(polyline);\n    const parentAnnotation = getParentAnnotation(annotation);\n    if (closed === undefined) {\n        let currentClosedState = false;\n        if (polyline.length > 3) {\n            const lastToFirstDist = math.point.distanceToPointSquared(polyline[0], polyline[numPoints - 1]);\n            currentClosedState = csUtils.isEqual(0, lastToFirstDist);\n        }\n        closed = currentClosedState;\n    }\n    if (options?.updateWindingDirection !== false) {\n        let updatedWindingDirection = parentAnnotation\n            ? parentAnnotation.data.contour.windingDirection * -1\n            : targetWindingDirection;\n        if (updatedWindingDirection === undefined) {\n            updatedWindingDirection = windingDirection;\n        }\n        if (updatedWindingDirection !== windingDirection) {\n            polyline.reverse();\n        }\n        const handlePoints = (data.handles?.points ?? []).map(worldToCanvas);\n        if (handlePoints.length > 2) {\n            const currentHandlesWindingDirection = math.polyline.getWindingDirection(handlePoints);\n            if (currentHandlesWindingDirection !== updatedWindingDirection) {\n                data.handles.points.reverse();\n            }\n        }\n        windingDirection = updatedWindingDirection;\n    }\n    for (let i = 0; i < numPoints; i++) {\n        polylineWorldPoints[i] = canvasToWorld(polyline[i]);\n    }\n    data.contour.polyline = polylineWorldPoints;\n    data.contour.closed = closed;\n    data.contour.windingDirection = windingDirection;\n    invalidateAnnotation(annotation);\n}\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { utilities, cache } from '@cornerstonejs/core';\nimport { getVoxelOverlap } from '../segmentation/utilities';\nfunction getDataInTime(dynamicVolume, options) {\n    let dataInTime;\n    const dimensionGroups = options.dimensionGroupNumbers ||\n        options.frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (options.frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    if (!options.maskVolumeId && !options.worldCoordinate) {\n        throw new Error('You should provide either maskVolumeId or imageCoordinate');\n    }\n    if (options.maskVolumeId && options.worldCoordinate) {\n        throw new Error('You can only use one of maskVolumeId or imageCoordinate');\n    }\n    if (options.maskVolumeId) {\n        const segmentationVolume = cache.getVolume(options.maskVolumeId);\n        if (!segmentationVolume) {\n            throw new Error('Segmentation volume not found');\n        }\n        const [dataInTime, ijkCoords] = _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume);\n        return [dataInTime, ijkCoords];\n    }\n    if (options.worldCoordinate) {\n        const dataInTime = _getDimensionGroupDataCoordinate(dimensionGroups, options.worldCoordinate, dynamicVolume);\n        return dataInTime;\n    }\n    return dataInTime;\n}\nfunction _getDimensionGroupDataCoordinate(dimensionGroups, coordinate, volume) {\n    const { dimensions, imageData } = volume;\n    const index = imageData.worldToIndex(coordinate);\n    index[0] = Math.floor(index[0]);\n    index[1] = Math.floor(index[1]);\n    index[2] = Math.floor(index[2]);\n    if (!utilities.indexWithinDimensions(index, dimensions)) {\n        throw new Error('outside bounds');\n    }\n    const yMultiple = dimensions[0];\n    const zMultiple = dimensions[0] * dimensions[1];\n    const value = [];\n    dimensionGroups.forEach((dimensionGroupNumber) => {\n        const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];\n        value.push(volume.voxelManager.getAtIndexAndDimensionGroup(scalarIndex, dimensionGroupNumber));\n    });\n    return value;\n}\nfunction _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume) {\n    const { imageData: maskImageData } = segmentationVolume;\n    const segVoxelManager = segmentationVolume.voxelManager;\n    const scalarDataLength = segVoxelManager.getScalarDataLength();\n    const nonZeroVoxelIndices = [];\n    nonZeroVoxelIndices.length = scalarDataLength;\n    let actualLen = 0;\n    for (let i = 0, len = scalarDataLength; i < len; i++) {\n        if (segVoxelManager.getAtIndex(i) !== 0) {\n            nonZeroVoxelIndices[actualLen++] = i;\n        }\n    }\n    nonZeroVoxelIndices.length = actualLen;\n    const nonZeroVoxelValuesInTime = [];\n    const isSameVolume = dynamicVolume.voxelManager.getScalarDataLength() === scalarDataLength &&\n        JSON.stringify(dynamicVolume.spacing) ===\n            JSON.stringify(segmentationVolume.spacing);\n    const ijkCoords = [];\n    if (isSameVolume) {\n        for (let i = 0; i < nonZeroVoxelIndices.length; i++) {\n            const valuesInTime = [];\n            const index = nonZeroVoxelIndices[i];\n            for (let j = 0; j < dimensionGroups.length; j++) {\n                valuesInTime.push(dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[j]));\n            }\n            nonZeroVoxelValuesInTime.push(valuesInTime);\n            ijkCoords.push(segVoxelManager.toIJK(index));\n        }\n        return [nonZeroVoxelValuesInTime, ijkCoords];\n    }\n    const callback = ({ pointLPS: segPointLPS, value: segValue, pointIJK: segPointIJK, }) => {\n        if (segValue === 0) {\n            return;\n        }\n        const overlapIJKMinMax = getVoxelOverlap(dynamicVolume.imageData, dynamicVolume.dimensions, dynamicVolume.spacing, segPointLPS);\n        let count = 0;\n        const perDimensionGroupSum = new Map();\n        dimensionGroups.forEach((dimensionGroupNumber) => perDimensionGroupSum.set(dimensionGroupNumber, 0));\n        const averageCallback = ({ index }) => {\n            for (let i = 0; i < dimensionGroups.length; i++) {\n                const value = dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[i]);\n                const dimensionGroupNumber = dimensionGroups[i];\n                perDimensionGroupSum.set(dimensionGroupNumber, perDimensionGroupSum.get(dimensionGroupNumber) + value);\n            }\n            count++;\n        };\n        dynamicVolume.voxelManager.forEach(averageCallback, {\n            imageData: dynamicVolume.imageData,\n            boundsIJK: overlapIJKMinMax,\n        });\n        const averageValues = [];\n        perDimensionGroupSum.forEach((sum) => {\n            averageValues.push(sum / count);\n        });\n        ijkCoords.push(segPointIJK);\n        nonZeroVoxelValuesInTime.push(averageValues);\n    };\n    segmentationVolume.voxelManager.forEach(callback, {\n        imageData: maskImageData,\n    });\n    return [nonZeroVoxelValuesInTime, ijkCoords];\n}\nexport default getDataInTime;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport * as ToolGroupManager from '../store/ToolGroupManager';\nfunction getAnnotationNearPoint(element, canvasPoint, proximity = 5) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('getAnnotationNearPoint: enabledElement not found');\n    }\n    return getAnnotationNearPointOnEnabledElement(enabledElement, canvasPoint, proximity);\n}\nfunction getAnnotationNearPointOnEnabledElement(enabledElement, point, proximity) {\n    const { renderingEngineId, viewportId } = enabledElement;\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);\n    if (!toolGroup) {\n        return null;\n    }\n    const { _toolInstances: tools } = toolGroup;\n    for (const name in tools) {\n        const found = findAnnotationNearPointByTool(tools[name], enabledElement, point, proximity);\n        if (found) {\n            return found;\n        }\n    }\n    return null;\n}\nfunction findAnnotationNearPointByTool(tool, enabledElement, point, proximity) {\n    const { viewport } = enabledElement;\n    const annotations = getAnnotations(tool.constructor.toolName, viewport?.element);\n    const currentId = viewport?.getCurrentImageId?.();\n    if (annotations?.length) {\n        const { element } = enabledElement.viewport;\n        for (const annotation of annotations) {\n            const referencedImageId = annotation.metadata?.referencedImageId;\n            if ((currentId && referencedImageId && currentId !== referencedImageId) ||\n                !tool.isPointNearTool) {\n                continue;\n            }\n            if (tool.isPointNearTool(element, annotation, point, proximity, '') ||\n                tool.getHandleNearImagePoint(element, annotation, point, proximity)) {\n                return annotation;\n            }\n        }\n    }\n    return null;\n}\nexport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement };\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { metaData } from '@cornerstonejs/core';\nfunction getPixelValueUnitsImageId(imageId, options) {\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n    return getPixelValueUnits(generalSeriesModule.modality, imageId, options);\n}\nfunction getPixelValueUnits(modality, imageId, options) {\n    if (modality === 'CT') {\n        return 'HU';\n    }\n    else if (modality === 'PT') {\n        return _handlePTModality(imageId, options);\n    }\n    else {\n        return '';\n    }\n}\nfunction _handlePTModality(imageId, options) {\n    if (!options.isPreScaled) {\n        return 'raw';\n    }\n    if (options.isSuvScaled) {\n        return 'SUV';\n    }\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n    if (generalSeriesModule?.modality === 'PT') {\n        const petSeriesModule = metaData.get('petSeriesModule', imageId);\n        return petSeriesModule?.units || 'unitless';\n    }\n    return 'unknown';\n}\nexport { getPixelValueUnits, getPixelValueUnitsImageId };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import { getEnabledElements, utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nexport default function getViewportsForAnnotation(annotation) {\n    const { metadata } = annotation;\n    return getEnabledElements()\n        .filter((enabledElement) => {\n        if (enabledElement.FrameOfReferenceUID === metadata.FrameOfReferenceUID) {\n            const viewport = enabledElement.viewport;\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            return (isEqual(viewPlaneNormal, metadata.viewPlaneNormal) &&\n                (!metadata.viewUp || isEqual(viewUp, metadata.viewUp)));\n        }\n        return;\n    })\n        .map((enabledElement) => enabledElement.viewport);\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nimport * as usFanExtraction from '../tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, usFanExtraction, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import { pointsAreEqual } from './robustSegmentIntersection';\nexport default function arePolylinesIdentical(poly1, poly2) {\n    if (poly1.length !== poly2.length) {\n        return false;\n    }\n    const len = poly1.length;\n    if (len === 0) {\n        return true;\n    }\n    let identicalForward = true;\n    for (let i = 0; i < len; i++) {\n        if (!pointsAreEqual(poly1[i], poly2[i])) {\n            identicalForward = false;\n            break;\n        }\n    }\n    if (identicalForward) {\n        return true;\n    }\n    let identicalReverse = true;\n    for (let i = 0; i < len; i++) {\n        if (!pointsAreEqual(poly1[i], poly2[len - 1 - i])) {\n            identicalReverse = false;\n            break;\n        }\n    }\n    if (identicalReverse) {\n        return true;\n    }\n    for (let offset = 1; offset < len; offset++) {\n        let cyclicForward = true;\n        for (let i = 0; i < len; i++) {\n            if (!pointsAreEqual(poly1[i], poly2[(i + offset) % len])) {\n                cyclicForward = false;\n                break;\n            }\n        }\n        if (cyclicForward) {\n            return true;\n        }\n        let cyclicReverse = true;\n        for (let i = 0; i < len; i++) {\n            if (!pointsAreEqual(poly1[i], poly2[(len - 1 - i + offset) % len])) {\n                cyclicReverse = false;\n                break;\n            }\n        }\n        if (cyclicReverse) {\n            return true;\n        }\n    }\n    return false;\n}\n","import containsPoint from './containsPoint';\nexport default function containsPoints(polyline, points) {\n    for (let i = 0, numPoint = points.length; i < numPoint; i++) {\n        if (!containsPoint(polyline, points[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n","import * as mathLine from '../line';\nconst DEFAULT_EPSILON = 0.1;\nexport default function decimate(polyline, epsilon = DEFAULT_EPSILON) {\n    const numPoints = polyline.length;\n    if (numPoints < 3) {\n        return polyline;\n    }\n    const epsilonSquared = epsilon * epsilon;\n    const partitionQueue = [[0, numPoints - 1]];\n    const polylinePointFlags = new Array(numPoints).fill(false);\n    let numDecimatedPoints = 2;\n    polylinePointFlags[0] = true;\n    polylinePointFlags[numPoints - 1] = true;\n    while (partitionQueue.length) {\n        const [startIndex, endIndex] = partitionQueue.pop();\n        if (endIndex - startIndex === 1) {\n            continue;\n        }\n        const startPoint = polyline[startIndex];\n        const endPoint = polyline[endIndex];\n        let maxDistSquared = -Infinity;\n        let maxDistIndex = -1;\n        for (let i = startIndex + 1; i < endIndex; i++) {\n            const currentPoint = polyline[i];\n            const distSquared = mathLine.distanceToPointSquared(startPoint, endPoint, currentPoint);\n            if (distSquared > maxDistSquared) {\n                maxDistSquared = distSquared;\n                maxDistIndex = i;\n            }\n        }\n        if (maxDistSquared < epsilonSquared) {\n            continue;\n        }\n        polylinePointFlags[maxDistIndex] = true;\n        numDecimatedPoints++;\n        partitionQueue.push([maxDistIndex, endIndex]);\n        partitionQueue.push([startIndex, maxDistIndex]);\n    }\n    const decimatedPolyline = new Array(numDecimatedPoints);\n    for (let srcIndex = 0, dstIndex = 0; srcIndex < numPoints; srcIndex++) {\n        if (polylinePointFlags[srcIndex]) {\n            decimatedPolyline[dstIndex++] = polyline[srcIndex];\n        }\n    }\n    return decimatedPolyline;\n}\n","export default function getSignedArea(polyline) {\n    if (polyline.length < 3) {\n        return 0;\n    }\n    const refPoint = polyline[0];\n    let area = 0;\n    for (let i = 0, len = polyline.length; i < len; i++) {\n        const p1 = polyline[i];\n        const p2Index = i === len - 1 ? 0 : i + 1;\n        const p2 = polyline[p2Index];\n        const aX = p1[0] - refPoint[0];\n        const aY = p1[1] - refPoint[1];\n        const bX = p2[0] - refPoint[0];\n        const bY = p2[1] - refPoint[1];\n        area += aX * bY - aY * bX;\n    }\n    area *= 0.5;\n    return area;\n}\n","import { glMatrix } from 'gl-matrix';\nimport { distanceToPointSquared } from '../point';\nexport default function isClosed(polyline) {\n    if (polyline.length < 3) {\n        return false;\n    }\n    const numPolylinePoints = polyline.length;\n    const firstPoint = polyline[0];\n    const lastPoint = polyline[numPolylinePoints - 1];\n    const distFirstToLastPoints = distanceToPointSquared(firstPoint, lastPoint);\n    return glMatrix.equals(0, distFirstToLastPoints);\n}\n","export default function findClosestPoint(sourcePoints, targetPoint) {\n    let minPoint = [0, 0];\n    let minDistance = Number.MAX_SAFE_INTEGER;\n    sourcePoints.forEach(function (sourcePoint) {\n        const distance = _distanceBetween(targetPoint, sourcePoint);\n        if (distance < minDistance) {\n            minDistance = distance;\n            minPoint = [...sourcePoint];\n        }\n    });\n    return minPoint;\n}\nfunction _distanceBetween(p1, p2) {\n    const [x1, y1] = p1;\n    const [x2, y2] = p2;\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import { StackViewport } from '@cornerstonejs/core';\nimport * as vec3 from 'gl-matrix/vec3';\nexport function moveAnnotationToViewPlane(annotation, viewport) {\n    const { data } = annotation;\n    const { points } = data.handles;\n    const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n    const projectedDistance = vec3.dot(vec3.sub(vec3.create(), points[0], focalPoint), viewPlaneNormal);\n    points.forEach((point) => {\n        vec3.add(point, point, vec3.scale(vec3.create(), [-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]], projectedDistance));\n    });\n    if (viewport instanceof StackViewport) {\n        annotation.metadata.referencedImageId = viewport.getCurrentImageId();\n    }\n    return annotation;\n}\n","import { BaseVolumeViewport, utilities } from '@cornerstonejs/core';\nconst { isEqual } = utilities;\nconst acquisitionMapping = {\n    toIJK: (ijkPrime) => ijkPrime,\n    fromIJK: (ijk) => ijk,\n    type: 'acquistion',\n};\nconst jkMapping = {\n    toIJK: ([j, k, i]) => [i, j, k],\n    fromIJK: ([i, j, k]) => [j, k, i],\n    type: 'jk',\n};\nconst ikMapping = {\n    toIJK: ([i, k, j]) => [i, j, k],\n    fromIJK: ([i, j, k]) => [i, k, j],\n    type: 'ik',\n};\nexport default function normalizeViewportPlane(viewport, boundsIJK) {\n    if (!(viewport instanceof BaseVolumeViewport)) {\n        return { ...acquisitionMapping, boundsIJKPrime: boundsIJK };\n    }\n    const { viewPlaneNormal } = viewport.getCamera();\n    const mapping = (isEqual(Math.abs(viewPlaneNormal[0]), 1) && jkMapping) ||\n        (isEqual(Math.abs(viewPlaneNormal[1]), 1) && ikMapping) ||\n        (isEqual(Math.abs(viewPlaneNormal[2]), 1) && acquisitionMapping);\n    if (!mapping) {\n        return {\n            toIJK: null,\n            boundsIJKPrime: null,\n            fromIJK: null,\n            error: `Only mappings orthogonal to acquisition plane are permitted, but requested ${viewPlaneNormal}`,\n        };\n    }\n    return { ...mapping, boundsIJKPrime: mapping.fromIJK(boundsIJK) };\n}\n","export default function getOrientationStringLPS(vector) {\n    let orientation = '';\n    const orientationX = vector[0] < 0 ? 'R' : 'L';\n    const orientationY = vector[1] < 0 ? 'A' : 'P';\n    const orientationZ = vector[2] < 0 ? 'F' : 'H';\n    const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];\n    const MIN = 0.0001;\n    for (let i = 0; i < 3; i++) {\n        if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {\n            orientation += orientationX;\n            abs[0] = 0;\n        }\n        else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {\n            orientation += orientationY;\n            abs[1] = 0;\n        }\n        else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {\n            orientation += orientationZ;\n            abs[2] = 0;\n        }\n        else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {\n            orientation += orientationX + orientationY;\n            abs[0] = 0;\n            abs[1] = 0;\n        }\n        else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {\n            orientation += orientationX + orientationZ;\n            abs[0] = 0;\n            abs[2] = 0;\n        }\n        else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {\n            orientation += orientationY + orientationZ;\n            abs[1] = 0;\n            abs[2] = 0;\n        }\n        else {\n            break;\n        }\n    }\n    return orientation;\n}\n","export default function invertOrientationStringLPS(orientationString) {\n    let inverted = orientationString.replace('H', 'f');\n    inverted = inverted.replace('F', 'h');\n    inverted = inverted.replace('R', 'l');\n    inverted = inverted.replace('L', 'r');\n    inverted = inverted.replace('A', 'p');\n    inverted = inverted.replace('P', 'a');\n    inverted = inverted.toUpperCase();\n    return inverted;\n}\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\nfunction getBoundsIJKFromRectangleAnnotations(annotations, referenceVolume, options = {}) {\n    const AllBoundsIJK = [];\n    annotations.forEach((annotation) => {\n        const { data } = annotation;\n        const { points } = data.handles;\n        const { imageData, dimensions } = referenceVolume;\n        let pointsToUse = points;\n        if (data.cachedStats?.projectionPoints) {\n            const { projectionPoints } = data.cachedStats;\n            pointsToUse = [].concat(...projectionPoints);\n        }\n        const rectangleCornersIJK = pointsToUse.map((world) => csUtils.transformWorldToIndex(imageData, world));\n        let boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, dimensions);\n        if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n            boundsIJK = extend2DBoundingBoxInViewAxis(boundsIJK, options.numSlicesToProject);\n        }\n        AllBoundsIJK.push(boundsIJK);\n    });\n    if (AllBoundsIJK.length === 1) {\n        return AllBoundsIJK[0];\n    }\n    const boundsIJK = AllBoundsIJK.reduce((accumulator, currentValue) => {\n        return {\n            iMin: Math.min(accumulator.iMin, currentValue.iMin),\n            jMin: Math.min(accumulator.jMin, currentValue.jMin),\n            kMin: Math.min(accumulator.kMin, currentValue.kMin),\n            iMax: Math.max(accumulator.iMax, currentValue.iMax),\n            jMax: Math.max(accumulator.jMax, currentValue.jMax),\n            kMax: Math.max(accumulator.kMax, currentValue.kMax),\n        };\n    }, {\n        iMin: Infinity,\n        jMin: Infinity,\n        kMin: Infinity,\n        iMax: -Infinity,\n        jMax: -Infinity,\n        kMax: -Infinity,\n    });\n    return boundsIJK;\n}\nexport default getBoundsIJKFromRectangleAnnotations;\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nconst iAxis = vec3.fromValues(1, 0, 0);\nconst jAxis = vec3.fromValues(0, 1, 0);\nconst kAxis = vec3.fromValues(0, 0, 1);\nconst axisList = [iAxis, jAxis, kAxis];\nfunction isAxisAlignedRectangle(rectangleCornersIJK) {\n    const rectangleVec1 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);\n    const rectangleVec2 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);\n    const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);\n    const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);\n    const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual(angle, 0) ||\n        isEqual(angle, 90) ||\n        isEqual(angle, 180) ||\n        isEqual(angle, 270));\n    return isAligned;\n}\nfunction calculateAnglesWithAxes(vec, axes) {\n    return axes.map((axis) => (vec3.angle(vec, axis) * 180) / Math.PI);\n}\nexport { isAxisAlignedRectangle };\n","import { getWebWorkerManager } from '@cornerstonejs/core';\nimport { getConfig } from '../config';\nlet registered = false;\nexport function registerComputeWorker() {\n    if (registered) {\n        return;\n    }\n    registered = true;\n    const workerFn = () => {\n        return new Worker(new URL('../workers/computeWorker.js', import.meta.url), {\n            name: 'compute',\n            type: 'module',\n        });\n    };\n    const workerManager = getWebWorkerManager();\n    const config = getConfig();\n    const computeWorkerConfig = config.computeWorker;\n    const options = {\n        maxWorkerInstances: 1,\n        autoTerminateOnIdle: computeWorkerConfig?.autoTerminateOnIdle ?? {\n            enabled: true,\n            idleTimeThreshold: 2000,\n        },\n    };\n    workerManager.registerWorker('compute', workerFn, options);\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { state as annotationState } from '../../../stateManagement/annotation';\nimport getInterpolationDataCollection from '../../contours/interpolation/getInterpolationDataCollection';\nimport interpolate from '../../contours/interpolation/interpolate';\nimport deleteRelatedAnnotations from './deleteRelatedAnnotations';\nimport ChangeTypes from '../../../enums/ChangeTypes';\nimport getViewportForAnnotation from '../../getViewportForAnnotation';\nimport { addContourSegmentationAnnotation } from '../../contourSegmentation/addContourSegmentationAnnotation';\nconst { uuidv4 } = csUtils;\nconst ChangeTypesForInterpolation = [\n    ChangeTypes.HandlesUpdated,\n    ChangeTypes.InterpolationUpdated,\n];\nexport default class InterpolationManager {\n    static { this.toolNames = []; }\n    static addTool(toolName) {\n        if (!this.toolNames.includes(toolName)) {\n            this.toolNames.push(toolName);\n        }\n    }\n    static acceptAutoGenerated(annotationGroupSelector, selector = {}) {\n        const { toolNames, segmentationId, segmentIndex, sliceIndex } = selector;\n        for (const toolName of toolNames || InterpolationManager.toolNames) {\n            const annotations = annotationState.getAnnotations(toolName, annotationGroupSelector);\n            if (!annotations?.length) {\n                continue;\n            }\n            for (const annotation of annotations) {\n                const { interpolationUID, data, autoGenerated, metadata } = annotation;\n                if (interpolationUID) {\n                    annotation.interpolationCompleted = true;\n                }\n                if (!autoGenerated) {\n                    continue;\n                }\n                if (segmentIndex && segmentIndex !== data.segmentation.segmentIndex) {\n                    continue;\n                }\n                if (sliceIndex !== undefined &&\n                    metadata &&\n                    sliceIndex !== metadata.sliceIndex) {\n                    continue;\n                }\n                if (segmentationId &&\n                    segmentationId !== data.segmentation.segmentationId) {\n                    continue;\n                }\n                addContourSegmentationAnnotation(annotation);\n                annotation.autoGenerated = false;\n            }\n        }\n    }\n    static { this.handleAnnotationCompleted = (evt) => {\n        const annotation = evt.detail.annotation;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName, originalToolName } = annotation.metadata;\n        if (!this.toolNames.includes(toolName) &&\n            !this.toolNames.includes(originalToolName)) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn('Unable to find viewport for', annotation);\n            return;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n        };\n        const hasInterpolationUID = !!annotation.interpolationUID;\n        annotation.autoGenerated = false;\n        if (hasInterpolationUID) {\n            deleteRelatedAnnotations(viewportData);\n            interpolate(viewportData);\n            return;\n        }\n        const filterData = [\n            {\n                key: 'segmentIndex',\n                value: annotation.data.segmentation.segmentIndex,\n                parentKey: (annotation) => annotation.data.segmentation,\n            },\n            {\n                key: 'viewPlaneNormal',\n                value: annotation.metadata.viewPlaneNormal,\n                parentKey: (annotation) => annotation.metadata,\n            },\n            {\n                key: 'viewUp',\n                value: annotation.metadata.viewUp,\n                parentKey: (annotation) => annotation.metadata,\n            },\n        ];\n        let interpolationAnnotations = getInterpolationDataCollection(viewportData, filterData);\n        const { sliceIndex } = annotation.metadata;\n        const skipUIDs = new Set();\n        interpolationAnnotations.forEach((interpolationAnnotation) => {\n            if (interpolationAnnotation.interpolationCompleted ||\n                interpolationAnnotation.metadata.sliceIndex === sliceIndex) {\n                const { interpolationUID } = interpolationAnnotation;\n                skipUIDs.add(interpolationUID);\n            }\n        });\n        interpolationAnnotations = interpolationAnnotations.filter((interpolationAnnotation) => !skipUIDs.has(interpolationAnnotation.interpolationUID));\n        annotation.interpolationUID =\n            interpolationAnnotations[0]?.interpolationUID || uuidv4();\n        viewportData.interpolationUID = annotation.interpolationUID;\n        interpolate(viewportData);\n    }; }\n    static { this.handleAnnotationUpdate = (evt) => {\n        const annotation = evt.detail.annotation;\n        const { changeType = ChangeTypes.HandlesUpdated } = evt.detail;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName, originalToolName } = annotation.metadata;\n        if ((!this.toolNames.includes(toolName) &&\n            !this.toolNames.includes(originalToolName)) ||\n            !ChangeTypesForInterpolation.includes(changeType)) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn('Unable to find matching viewport for annotation interpolation', annotation);\n            return;\n        }\n        if (annotation.autoGenerated) {\n            addContourSegmentationAnnotation(annotation);\n            annotation.autoGenerated = false;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n            isInterpolationUpdate: changeType === ChangeTypes.InterpolationUpdated,\n        };\n        interpolate(viewportData);\n    }; }\n    static { this.handleAnnotationDelete = (evt) => {\n        const annotation = evt.detail.annotation;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName } = annotation.metadata;\n        if (!this.toolNames.includes(toolName) || annotation.autoGenerated) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn(\"No viewport, can't delete interpolated results\", annotation);\n            return;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n        };\n        annotation.autoGenerated = false;\n        deleteRelatedAnnotations(viewportData);\n    }; }\n}\nfunction getSliceData(viewport) {\n    const sliceData = {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getCurrentImageIdIndex(),\n    };\n    return sliceData;\n}\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","import { BasicStatsCalculator, InstanceBasicStatsCalculator, } from '../math/basic/BasicStatsCalculator';\nimport { getCalibratedLengthUnitsAndScale } from '../getCalibratedUnits';\nconst TEST_MAX_LOCATIONS = 10;\nfunction createVolumetricState() {\n    return {\n        maxIJKs: [],\n    };\n}\nfunction volumetricStatsCallback(state, data) {\n    const { value } = data;\n    const { maxIJKs } = state;\n    const length = maxIJKs.length;\n    if (typeof value !== 'number' ||\n        (length >= TEST_MAX_LOCATIONS && value < maxIJKs[0].value)) {\n        return;\n    }\n    const dataCopy = {\n        value: data.value,\n        pointLPS: data.pointLPS\n            ? [data.pointLPS[0], data.pointLPS[1], data.pointLPS[2]]\n            : undefined,\n        pointIJK: data.pointIJK\n            ? [data.pointIJK[0], data.pointIJK[1], data.pointIJK[2]]\n            : undefined,\n    };\n    if (!length || value >= maxIJKs[length - 1].value) {\n        maxIJKs.push(dataCopy);\n    }\n    else {\n        for (let i = 0; i < length; i++) {\n            if (value <= maxIJKs[i].value) {\n                maxIJKs.splice(i, 0, dataCopy);\n                break;\n            }\n        }\n    }\n    if (length >= TEST_MAX_LOCATIONS) {\n        maxIJKs.splice(0, 1);\n    }\n}\nfunction volumetricGetStatistics(state, stats, options) {\n    const { spacing, calibration } = options;\n    const { volumeUnit } = getCalibratedLengthUnitsAndScale({\n        calibration,\n        hasPixelSpacing: true,\n    }, []);\n    const volumeScale = spacing ? spacing[0] * spacing[1] * spacing[2] : 1;\n    stats.volume = {\n        value: Array.isArray(stats.count.value)\n            ? stats.count.value.map((v) => v * volumeScale)\n            : stats.count.value * volumeScale,\n        unit: volumeUnit,\n        name: 'volume',\n        label: 'Volume',\n    };\n    stats.maxIJKs = state.maxIJKs.filter((entry) => entry.pointIJK !== undefined);\n    stats.array.push(stats.volume);\n    state.maxIJKs = [];\n    return stats;\n}\nexport class VolumetricCalculator extends BasicStatsCalculator {\n    static { this.volumetricState = createVolumetricState(); }\n    static statsInit(options) {\n        super.statsInit(options);\n        this.volumetricState = createVolumetricState();\n    }\n    static statsCallback(data) {\n        super.statsCallback(data);\n        volumetricStatsCallback(this.volumetricState, data);\n    }\n    static getStatistics(options) {\n        const optionsWithUnit = {\n            ...options,\n            unit: options?.unit || 'none',\n            calibration: options?.calibration,\n            hasPixelSpacing: options?.hasPixelSpacing,\n        };\n        const stats = super.getStatistics(optionsWithUnit);\n        return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);\n    }\n}\nexport class InstanceVolumetricCalculator extends InstanceBasicStatsCalculator {\n    constructor(options) {\n        super(options);\n        this.volumetricState = createVolumetricState();\n    }\n    statsInit(options) {\n        super.statsInit(options);\n        this.volumetricState = createVolumetricState();\n    }\n    statsCallback(data) {\n        super.statsCallback(data);\n        volumetricStatsCallback(this.volumetricState, data);\n    }\n    getStatistics(options) {\n        const optionsWithUnit = {\n            ...options,\n            unit: options?.unit || 'none',\n            calibration: options?.calibration,\n            hasPixelSpacing: options?.hasPixelSpacing,\n        };\n        const stats = super.getStatistics(optionsWithUnit);\n        return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);\n    }\n}\nexport default VolumetricCalculator;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function setBrushSizeForToolGroup(toolGroupId, brushSize, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.configuration.brushSize = brushSize;\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const { renderingEngineId } = viewportsInfoArray[0];\n    const viewportIds = toolGroup.getViewportIds();\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\nexport function getBrushSizeForToolGroup(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n    const brushToolInstance = brushBasedToolInstances[0];\n    if (!brushToolInstance) {\n        return;\n    }\n    return brushToolInstance.configuration.brushSize;\n}\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function setBrushThresholdForToolGroup(toolGroupId, threshold) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        const activeStrategy = tool.configuration.activeStrategy;\n        if (!activeStrategy.toLowerCase().includes('threshold')) {\n            return;\n        }\n        tool.configuration = {\n            ...tool.configuration,\n            threshold: {\n                ...tool.configuration.threshold,\n                ...threshold,\n            },\n        };\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    if (!viewportsInfo.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\nexport function getBrushThresholdForToolGroup(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    const brushToolInstance = brushBasedToolInstances[0];\n    if (!brushToolInstance) {\n        return;\n    }\n    return brushToolInstance.configuration.threshold.range;\n}\n","import { utilities, getWebWorkerManager } from '@cornerstonejs/core';\nimport { triggerWorkerProgress } from './utilsForWorker';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport createMergedLabelmapForIndex from './createMergedLabelmapForIndex';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateSegmentationVolume from './getOrCreateSegmentationVolume';\nimport { getReferenceVolumeForSegmentation } from './getReferenceVolumeForSegmentation';\nasync function computeMetabolicStats({ segmentationIds, segmentIndex, }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const segmentation = getSegmentation(segmentationIds[0]);\n    const { imageIds: segImageIds } = segmentation.representationData\n        .Labelmap;\n    const isValidVolume = utilities.isValidVolume(segImageIds);\n    if (!isValidVolume) {\n        throw new Error('Invalid volume - TMTV cannot be calculated');\n    }\n    const stats = await calculateForVolume({\n        segmentationIds,\n        segmentIndex,\n    });\n    return stats;\n}\nasync function calculateForVolume({ segmentationIds, segmentIndex }) {\n    const labelmapVolumes = segmentationIds.map((id) => {\n        return getOrCreateSegmentationVolume(id);\n    });\n    const mergedLabelmap = createMergedLabelmapForIndex(labelmapVolumes, segmentIndex);\n    if (!mergedLabelmap) {\n        throw new Error('Invalid volume - TMTV cannot be calculated');\n    }\n    const { imageData, dimensions, direction, origin, voxelManager } = mergedLabelmap;\n    const spacing = imageData.getSpacing();\n    const segmentationScalarData = voxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n    };\n    const referenceVolume = getReferenceVolumeForSegmentation(segmentationIds[0]);\n    const imageInfo = {\n        dimensions: referenceVolume.dimensions,\n        spacing: referenceVolume.spacing,\n        origin: referenceVolume.origin,\n        direction: referenceVolume.direction,\n        scalarData: referenceVolume.voxelManager.getCompleteScalarDataArray(),\n    };\n    if (imageInfo.scalarData.length === 0 ||\n        segmentationInfo.scalarData.length === 0) {\n        return {\n            [segmentIndex]: {\n                name: 'TMTV',\n                value: 0,\n            },\n        };\n    }\n    const stats = await getWebWorkerManager().executeTask('compute', 'computeMetabolicStats', {\n        segmentationInfo,\n        imageInfo,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    return stats;\n}\nexport { computeMetabolicStats };\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateImageVolume from './getOrCreateImageVolume';\nexport function getReferenceVolumeForSegmentation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return null;\n    }\n    let referenceImageIds;\n    const labelmap = segmentation.representationData.Labelmap;\n    if ('imageIds' in labelmap) {\n        const { imageIds } = labelmap;\n        const firstImage = cache.getImage(imageIds[0]);\n        const volumeInfo = cache.getVolumeContainingImageId(firstImage.referencedImageId);\n        if (volumeInfo?.volume) {\n            return volumeInfo.volume;\n        }\n        referenceImageIds = imageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n    }\n    else if ('volumeId' in labelmap) {\n        const { volumeId, referencedVolumeId } = labelmap;\n        if (referencedVolumeId) {\n            const refVolume = cache.getVolume(referencedVolumeId);\n            if (refVolume) {\n                return refVolume;\n            }\n        }\n        const segVolume = cache.getVolume(volumeId);\n        if (segVolume) {\n            referenceImageIds = segVolume.imageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n        }\n    }\n    return getOrCreateImageVolume(referenceImageIds);\n}\n","import { generateContourSetsFromLabelmap } from '../contours';\nimport findLargestBidirectional from './findLargestBidirectional';\nimport getOrCreateSegmentationVolume from './getOrCreateSegmentationVolume';\nexport default async function contourAndFindLargestBidirectional(segmentation) {\n    const contours = await generateContourSetsFromLabelmap({\n        segmentations: segmentation,\n    });\n    if (!contours?.length || !contours[0].sliceContours.length) {\n        return;\n    }\n    const { segments = [\n        null,\n        { label: 'Unspecified', color: null, containedSegmentIndices: null },\n    ], } = segmentation;\n    const vol = getOrCreateSegmentationVolume(segmentation.segmentationId);\n    if (!vol) {\n        return;\n    }\n    const segmentIndex = segments.findIndex((it) => !!it);\n    if (segmentIndex === -1) {\n        return;\n    }\n    segments[segmentIndex].segmentIndex = segmentIndex;\n    return findLargestBidirectional(contours[0], vol.volumeId, segments[segmentIndex]);\n}\n","export default function createBidirectionalToolData(bidirectionalData, viewport) {\n    const { majorAxis, minorAxis, label = '', sliceIndex } = bidirectionalData;\n    const [major0, major1] = majorAxis;\n    const [minor0, minor1] = minorAxis;\n    const points = [major0, major1, minor0, minor1];\n    const bidirectionalToolData = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n            toolName: 'Bidirectional',\n            ...viewport.getViewReference({ sliceIndex }),\n        },\n        data: {\n            handles: {\n                points,\n                textBox: {\n                    hasMoved: false,\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n                activeHandleIndex: null,\n            },\n            label,\n            cachedStats: {},\n        },\n        isLocked: false,\n        isVisible: true,\n    };\n    return bidirectionalToolData;\n}\n","import { utilities, eventTarget } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport Events from '../../enums/Events';\nconst { VoxelManager, RLEVoxelMap } = utilities;\nexport function createLabelmapMemo(segmentationId, segmentationVoxelManager) {\n    return createRleMemo(segmentationId, segmentationVoxelManager);\n}\nexport function restoreMemo(isUndo) {\n    const { segmentationVoxelManager, undoVoxelManager, redoVoxelManager } = this;\n    const useVoxelManager = isUndo === false ? redoVoxelManager : undoVoxelManager;\n    useVoxelManager.forEach(({ value, pointIJK }) => {\n        segmentationVoxelManager.setAtIJKPoint(pointIJK, value);\n    });\n    const slices = useVoxelManager.getArrayOfModifiedSlices();\n    triggerSegmentationDataModified(this.segmentationId, slices);\n}\nexport function createRleMemo(segmentationId, segmentationVoxelManager) {\n    const voxelManager = VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n    const state = {\n        segmentationId,\n        restoreMemo,\n        commitMemo,\n        segmentationVoxelManager,\n        voxelManager,\n        id: utilities.uuidv4(),\n        operationType: 'labelmap',\n    };\n    return state;\n}\nfunction commitMemo() {\n    if (this.redoVoxelManager) {\n        return true;\n    }\n    if (!this.voxelManager.modifiedSlices.size) {\n        return false;\n    }\n    const { segmentationVoxelManager } = this;\n    const undoVoxelManager = VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n    RLEVoxelMap.copyMap(undoVoxelManager.map, this.voxelManager.map);\n    for (const key of this.voxelManager.modifiedSlices.keys()) {\n        undoVoxelManager.modifiedSlices.add(key);\n    }\n    this.undoVoxelManager = undoVoxelManager;\n    const redoVoxelManager = VoxelManager.createRLEVolumeVoxelManager({\n        dimensions: this.segmentationVoxelManager.dimensions,\n    });\n    this.redoVoxelManager = redoVoxelManager;\n    undoVoxelManager.forEach(({ index, pointIJK, value }) => {\n        const currentValue = segmentationVoxelManager.getAtIJKPoint(pointIJK);\n        if (currentValue === value) {\n            return;\n        }\n        redoVoxelManager.setAtIndex(index, currentValue);\n    });\n    return true;\n}\n","import { getEnabledElementByIds, volumeLoader, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nexport default async function createLabelmapVolumeForViewport(input) {\n    const { viewportId, renderingEngineId, options } = input;\n    let { segmentationId } = input;\n    const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n    if (!enabledElement) {\n        throw new Error('element disabled');\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof VolumeViewport)) {\n        throw new Error('Segmentation only supports VolumeViewport');\n    }\n    const { uid } = viewport.getDefaultActor();\n    if (segmentationId === undefined) {\n        segmentationId = `${uid}-based-segmentation-${options?.volumeId ?? csUtils.uuidv4().slice(0, 8)}`;\n    }\n    if (options) {\n        const properties = structuredClone(options);\n        await volumeLoader.createLocalVolume(segmentationId, properties);\n    }\n    else {\n        const volumeId = viewport.getVolumeId();\n        volumeLoader.createAndCacheDerivedLabelmapVolume(volumeId, {\n            volumeId: segmentationId,\n        });\n    }\n    return segmentationId;\n}\n","import { volumeLoader, utilities as csUtils, cache } from '@cornerstonejs/core';\nfunction createMergedLabelmapForIndex(labelmaps, segmentIndex = 1, volumeId = 'mergedLabelmap') {\n    labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n        if (!csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n            !csUtils.isEqual(direction, labelmaps[0].direction) ||\n            !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n            !csUtils.isEqual(origin, labelmaps[0].origin)) {\n            throw new Error('labelmaps must have the same size and shape');\n        }\n    });\n    const labelmap = labelmaps[0];\n    const arrayType = labelmap.voxelManager.getConstructor();\n    const outputData = new arrayType(labelmap.voxelManager.getScalarDataLength());\n    labelmaps.forEach((labelmap) => {\n        const voxelManager = labelmap.voxelManager;\n        const scalarDataLength = voxelManager.getScalarDataLength();\n        for (let i = 0; i < scalarDataLength; i++) {\n            if (voxelManager.getAtIndex(i) === segmentIndex) {\n                outputData[i] = segmentIndex;\n            }\n        }\n    });\n    const options = {\n        scalarData: outputData,\n        metadata: labelmap.metadata,\n        spacing: labelmap.spacing,\n        origin: labelmap.origin,\n        direction: labelmap.direction,\n        dimensions: labelmap.dimensions,\n    };\n    const cachedVolume = cache.getVolume(volumeId);\n    let mergedVolume;\n    if (cachedVolume) {\n        mergedVolume = cachedVolume;\n        mergedVolume.voxelManager.setCompleteScalarDataArray(outputData);\n    }\n    else {\n        mergedVolume = volumeLoader.createLocalVolume(volumeId, options);\n    }\n    return mergedVolume;\n}\nexport default createMergedLabelmapForIndex;\n","import { vec3 } from 'gl-matrix';\nimport { createIsInSegment, isLineInSegment } from './isLineInSegment';\nconst EPSILON = 1e-2;\nexport default function findLargestBidirectional(contours, segVolumeId, segment) {\n    const { sliceContours } = contours;\n    const { segmentIndex, containedSegmentIndices } = segment;\n    let maxBidirectional;\n    const isInSegment = createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices);\n    for (const sliceContour of sliceContours) {\n        const bidirectional = createBidirectionalForSlice(sliceContour, isInSegment, maxBidirectional);\n        if (!bidirectional) {\n            continue;\n        }\n        maxBidirectional = bidirectional;\n    }\n    if (maxBidirectional) {\n        Object.assign(maxBidirectional, segment);\n    }\n    return maxBidirectional;\n}\nexport function createBidirectionalForSlice(sliceContour, isInSegment, currentMax = { maxMajor: 0, maxMinor: 0 }) {\n    const { points } = sliceContour.polyData;\n    const { maxMinor: currentMaxMinor, maxMajor: currentMaxMajor } = currentMax;\n    let maxMajor = currentMaxMajor * currentMaxMajor;\n    let maxMinor = currentMaxMinor * currentMaxMinor;\n    let maxMajorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 < maxMajor) {\n                continue;\n            }\n            if (distance2 - EPSILON < maxMajor + EPSILON && maxMajorPoints) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMajor = distance2 - EPSILON;\n            maxMajorPoints = [index1, index2];\n            maxMinor = 0;\n        }\n    }\n    if (!maxMajorPoints) {\n        return;\n    }\n    maxMajor = Math.sqrt(maxMajor + EPSILON);\n    const handle0 = points[maxMajorPoints[0]];\n    const handle1 = points[maxMajorPoints[1]];\n    const unitMajor = vec3.sub(vec3.create(), handle0, handle1);\n    vec3.scale(unitMajor, unitMajor, 1 / maxMajor);\n    let maxMinorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 <= maxMinor) {\n                continue;\n            }\n            const delta = vec3.sub(vec3.create(), point1, point2);\n            const dot = Math.abs(vec3.dot(delta, unitMajor)) / Math.sqrt(distance2);\n            if (dot > EPSILON) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMinor = distance2;\n            maxMinorPoints = [index1, index2];\n        }\n    }\n    if (!maxMinorPoints) {\n        return;\n    }\n    maxMinor = Math.sqrt(maxMinor);\n    const handle2 = points[maxMinorPoints[0]];\n    const handle3 = points[maxMinorPoints[1]];\n    const bidirectional = {\n        majorAxis: [handle0, handle1],\n        minorAxis: [handle2, handle3],\n        maxMajor,\n        maxMinor,\n        ...sliceContour,\n    };\n    return bidirectional;\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return [];\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return [];\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { cache, volumeLoader, utilities as csUtils, } from '@cornerstonejs/core';\nfunction getOrCreateImageVolume(referencedImageIds) {\n    if (!referencedImageIds || referencedImageIds.length <= 1) {\n        return;\n    }\n    const isValidVolume = csUtils.isValidVolume(referencedImageIds);\n    if (!isValidVolume) {\n        return;\n    }\n    const volumeId = cache.generateVolumeId(referencedImageIds);\n    let imageVolume = cache.getVolume(volumeId);\n    if (imageVolume) {\n        return imageVolume;\n    }\n    imageVolume = volumeLoader.createAndCacheVolumeFromImagesSync(volumeId, referencedImageIds);\n    return imageVolume;\n}\nexport default getOrCreateImageVolume;\n","import { cache, volumeLoader, utilities, } from '@cornerstonejs/core';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nfunction getOrCreateSegmentationVolume(segmentationId) {\n    const { representationData } = getSegmentation(segmentationId);\n    let { volumeId } = representationData.Labelmap;\n    let segVolume;\n    if (volumeId) {\n        segVolume = cache.getVolume(volumeId);\n        if (segVolume) {\n            return segVolume;\n        }\n    }\n    const { imageIds: labelmapImageIds } = representationData.Labelmap;\n    volumeId = cache.generateVolumeId(labelmapImageIds);\n    if (!labelmapImageIds || labelmapImageIds.length === 1) {\n        return;\n    }\n    const isValidVolume = utilities.isValidVolume(labelmapImageIds);\n    if (!isValidVolume) {\n        return;\n    }\n    segVolume = volumeLoader.createAndCacheVolumeFromImagesSync(volumeId, labelmapImageIds);\n    return segVolume;\n}\nexport default getOrCreateSegmentationVolume;\n","import { cache } from '@cornerstonejs/core';\nexport function getReferenceVolumeForSegmentationVolume(segmentationVolumeId) {\n    const segmentationVolume = cache.getVolume(segmentationVolumeId);\n    if (!segmentationVolume) {\n        return null;\n    }\n    const referencedVolumeId = segmentationVolume.referencedVolumeId;\n    let imageVolume;\n    if (referencedVolumeId) {\n        imageVolume = cache.getVolume(referencedVolumeId);\n    }\n    else {\n        const imageIds = segmentationVolume.imageIds;\n        const image = cache.getImage(imageIds[0]);\n        const referencedImageId = image.referencedImageId;\n        const volumeInfo = cache.getVolumeContainingImageId(referencedImageId);\n        imageVolume = volumeInfo?.volume;\n    }\n    return imageVolume;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","import { getWebWorkerManager } from '@cornerstonejs/core';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport { triggerWorkerProgress, getSegmentationDataForWorker, prepareVolumeStrategyDataForWorker, prepareStackDataForWorker, } from './utilsForWorker';\nexport async function getSegmentLargestBidirectional({ segmentationId, segmentIndices, mode = 'individual', }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_LARGEST_BIDIRECTIONAL, 0);\n    const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);\n    if (!segData) {\n        return;\n    }\n    const { operationData, segImageIds, reconstructableVolume, indices } = segData;\n    const bidirectionalData = reconstructableVolume\n        ? await calculateVolumeBidirectional({\n            operationData,\n            indices,\n            mode,\n        })\n        : await calculateStackBidirectional({\n            segImageIds,\n            indices,\n            mode,\n        });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_LARGEST_BIDIRECTIONAL, 100);\n    return bidirectionalData;\n}\nasync function calculateVolumeBidirectional({ operationData, indices, mode }) {\n    const strategyData = prepareVolumeStrategyDataForWorker(operationData);\n    const { segmentationVoxelManager, segmentationImageData } = strategyData;\n    const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions: segmentationImageData.getDimensions(),\n        spacing: segmentationImageData.getSpacing(),\n        origin: segmentationImageData.getOrigin(),\n        direction: segmentationImageData.getDirection(),\n    };\n    const bidirectionalData = await getWebWorkerManager().executeTask('compute', 'getSegmentLargestBidirectionalInternal', {\n        segmentationInfo,\n        indices,\n        mode,\n    });\n    return bidirectionalData;\n}\nasync function calculateStackBidirectional({ segImageIds, indices, mode }) {\n    const { segmentationInfo } = prepareStackDataForWorker(segImageIds);\n    const bidirectionalData = await getWebWorkerManager().executeTask('compute', 'getSegmentLargestBidirectionalInternal', {\n        segmentationInfo,\n        indices,\n        mode,\n        isStack: true,\n    });\n    return bidirectionalData;\n}\n","import { utilities, getWebWorkerManager } from '@cornerstonejs/core';\nimport { triggerWorkerProgress, getSegmentationDataForWorker, prepareVolumeStrategyDataForWorker, prepareStackDataForWorker, getImageReferenceInfo, } from './utilsForWorker';\nimport { getPixelValueUnitsImageId } from '../getPixelValueUnits';\nimport VolumetricCalculator from './VolumetricCalculator';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nconst radiusForVol1 = Math.pow((3 * 1000) / (4 * Math.PI), 1 / 3);\nasync function getStatistics({ segmentationId, segmentIndices, mode = 'collective', }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);\n    if (!segData) {\n        return;\n    }\n    const { operationData, segVolumeId, segImageIds, reconstructableVolume, indices, } = segData;\n    const { refImageId, modalityUnitOptions } = getImageReferenceInfo(segVolumeId, segImageIds);\n    const unit = getPixelValueUnitsImageId(refImageId, modalityUnitOptions);\n    const stats = reconstructableVolume\n        ? await calculateVolumeStatistics({\n            operationData,\n            indices,\n            unit,\n            mode,\n        })\n        : await calculateStackStatistics({\n            segImageIds,\n            indices,\n            unit,\n            mode,\n        });\n    return stats;\n}\nasync function calculateVolumeStatistics({ operationData, indices, unit, mode, }) {\n    const strategyData = prepareVolumeStrategyDataForWorker(operationData);\n    const { segmentationVoxelManager, imageVoxelManager, segmentationImageData, imageData, } = strategyData;\n    if (!segmentationVoxelManager || !segmentationImageData) {\n        return;\n    }\n    const spacing = segmentationImageData.getSpacing();\n    const { boundsIJK: boundsOrig } = segmentationVoxelManager;\n    if (!boundsOrig) {\n        return VolumetricCalculator.getStatistics({ spacing });\n    }\n    const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions: segmentationImageData.getDimensions(),\n        spacing: segmentationImageData.getSpacing(),\n        origin: segmentationImageData.getOrigin(),\n        direction: segmentationImageData.getDirection(),\n    };\n    const imageInfo = {\n        scalarData: imageVoxelManager.getCompleteScalarDataArray(),\n        dimensions: imageData.getDimensions(),\n        spacing: imageData.getSpacing(),\n        origin: imageData.getOrigin(),\n        direction: imageData.getDirection(),\n    };\n    if (!imageInfo.scalarData?.length) {\n        return;\n    }\n    const stats = await getWebWorkerManager().executeTask('compute', 'calculateSegmentsStatisticsVolume', {\n        segmentationInfo,\n        imageInfo,\n        indices,\n        unit,\n        mode,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    if (mode === 'collective') {\n        return processSegmentationStatistics({\n            stats,\n            unit,\n            spacing,\n            segmentationImageData,\n            imageVoxelManager,\n        });\n    }\n    else {\n        const finalStats = {};\n        Object.entries(stats).forEach(([segmentIndex, stat]) => {\n            finalStats[segmentIndex] = processSegmentationStatistics({\n                stats: stat,\n                unit,\n                spacing,\n                segmentationImageData,\n                imageVoxelManager,\n            });\n        });\n        return finalStats;\n    }\n}\nconst updateStatsArray = (stats, newStat) => {\n    if (!stats.array) {\n        return;\n    }\n    const existingIndex = stats.array.findIndex((stat) => stat.name === newStat.name);\n    if (existingIndex !== -1) {\n        stats.array[existingIndex] = newStat;\n    }\n    else {\n        stats.array.push(newStat);\n    }\n};\nconst processSegmentationStatistics = ({ stats, unit, spacing, segmentationImageData, imageVoxelManager, }) => {\n    stats.mean.unit = unit;\n    stats.max.unit = unit;\n    stats.min.unit = unit;\n    if (unit !== 'SUV') {\n        return stats;\n    }\n    const radiusIJK = spacing.map((s) => Math.max(1, Math.round((1.1 * radiusForVol1) / s)));\n    for (const testMax of stats.maxIJKs) {\n        const testStats = getSphereStats(testMax, radiusIJK, segmentationImageData, imageVoxelManager, spacing);\n        if (!testStats) {\n            continue;\n        }\n        const { mean } = testStats;\n        if (!stats.peakValue || stats.peakValue.value <= mean.value) {\n            stats.peakValue = {\n                name: 'peakValue',\n                label: 'Peak Value',\n                value: mean.value,\n                unit,\n            };\n            stats.peakPoint = {\n                name: 'peakLPS',\n                label: 'Peak SUV Point',\n                value: testMax.pointLPS ? [...testMax.pointLPS] : null,\n                unit: null,\n            };\n            updateStatsArray(stats, stats.peakValue);\n            updateStatsArray(stats, stats.peakPoint);\n        }\n    }\n    if (stats.volume && stats.mean) {\n        const mtv = stats.volume.value;\n        const suvMean = stats.mean.value;\n        stats.lesionGlycolysis = {\n            name: 'lesionGlycolysis',\n            label: 'Lesion Glycolysis',\n            value: mtv * suvMean,\n            unit: `${stats.volume.unit}·${unit}`,\n        };\n        updateStatsArray(stats, stats.lesionGlycolysis);\n    }\n    return stats;\n};\nasync function calculateStackStatistics({ segImageIds, indices, unit, mode }) {\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const { segmentationInfo, imageInfo } = prepareStackDataForWorker(segImageIds);\n    const stats = await getWebWorkerManager().executeTask('compute', 'calculateSegmentsStatisticsStack', {\n        segmentationInfo,\n        imageInfo,\n        indices,\n        mode,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    const spacing = segmentationInfo[0].spacing;\n    const segmentationImageData = segmentationInfo[0];\n    const imageVoxelManager = imageInfo[0].voxelManager;\n    if (mode === 'collective') {\n        return processSegmentationStatistics({\n            stats,\n            unit,\n            spacing,\n            segmentationImageData,\n            imageVoxelManager,\n        });\n    }\n    else {\n        const finalStats = {};\n        Object.entries(stats).forEach(([segmentIndex, stat]) => {\n            finalStats[segmentIndex] = processSegmentationStatistics({\n                stats: stat,\n                unit,\n                spacing,\n                segmentationImageData,\n                imageVoxelManager,\n            });\n        });\n        return finalStats;\n    }\n}\nfunction getSphereStats(testMax, radiusIJK, segData, imageVoxels, spacing) {\n    const { pointIJK: centerIJK, pointLPS: centerLPS } = testMax;\n    if (!centerIJK) {\n        return;\n    }\n    const boundsIJK = centerIJK.map((ijk, idx) => [\n        ijk - radiusIJK[idx],\n        ijk + radiusIJK[idx],\n    ]);\n    const testFunction = (_pointLPS, pointIJK) => {\n        const i = (pointIJK[0] - centerIJK[0]) / radiusIJK[0];\n        const j = (pointIJK[1] - centerIJK[1]) / radiusIJK[1];\n        const k = (pointIJK[2] - centerIJK[2]) / radiusIJK[2];\n        const radius = i * i + j * j + k * k;\n        return radius <= 1;\n    };\n    const statsFunction = ({ pointIJK, pointLPS }) => {\n        const value = imageVoxels.getAtIJKPoint(pointIJK);\n        if (value === undefined) {\n            return;\n        }\n        VolumetricCalculator.statsCallback({ value, pointLPS, pointIJK });\n    };\n    VolumetricCalculator.statsInit({ storePointData: false });\n    utilities.pointInShapeCallback(segData, {\n        pointInShapeFn: testFunction,\n        callback: statsFunction,\n        boundsIJK,\n    });\n    return VolumetricCalculator.getStatistics({ spacing });\n}\nexport default getStatistics;\n","import { cache } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getCachedSegmentIndices, setCachedSegmentIndices } from './utilities';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nfunction getUniqueSegmentIndices(segmentationId) {\n    const cachedResult = getCachedSegmentIndices(segmentationId);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation found for segmentationId ${segmentationId}`);\n    }\n    let indices;\n    if (segmentation.representationData.Labelmap) {\n        indices = handleLabelmapSegmentation(segmentation, segmentationId);\n    }\n    else if (segmentation.representationData.Contour) {\n        indices = handleContourSegmentation(segmentation);\n    }\n    else if (segmentation.representationData.Surface) {\n        indices = handleSurfaceSegmentation(segmentation);\n    }\n    else {\n        throw new Error(`Unsupported segmentation type: ${segmentation.representationData}`);\n    }\n    setCachedSegmentIndices(segmentationId, indices);\n    return indices;\n}\nfunction handleLabelmapSegmentation(segmentation, segmentationId) {\n    const labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    const keySet = new Set();\n    if (labelmapData.imageIds) {\n        addImageSegmentIndices(keySet, labelmapData.imageIds);\n    }\n    else {\n        addVolumeSegmentIndices(keySet, segmentationId);\n    }\n    return Array.from(keySet)\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nfunction addVolumeSegmentIndices(keySet, segmentationId) {\n    const volume = cache.getVolume(segmentationId);\n    volume.voxelManager.forEach(({ value }) => {\n        if (value !== 0) {\n            keySet.add(value);\n        }\n    });\n}\nfunction addImageSegmentIndices(keySet, imageIds) {\n    imageIds.forEach((segmentationImageId) => {\n        const image = cache.getImage(segmentationImageId);\n        const scalarData = image.voxelManager.getScalarData();\n        scalarData.forEach((segmentIndex) => {\n            if (segmentIndex !== 0) {\n                keySet.add(segmentIndex);\n            }\n        });\n    });\n}\nfunction handleContourSegmentation(segmentation) {\n    const { annotationUIDsMap, geometryIds } = segmentation.representationData.Contour || {};\n    if (!geometryIds) {\n        throw new Error(`No geometryIds found for segmentationId ${segmentation.segmentationId}`);\n    }\n    const indices = new Set([...annotationUIDsMap.keys()]);\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        indices.add(geometry.data.segmentIndex);\n    });\n    return Array.from(indices).sort((a, b) => a - b);\n}\nfunction handleSurfaceSegmentation(segmentation) {\n    const geometryIds = segmentation.representationData.Surface?.geometryIds ?? [];\n    return Array.from(geometryIds.keys())\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nexport { getUniqueSegmentIndices };\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import { cache } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nexport default function isLineInSegment(point1, point2, isInSegment) {\n    const ijk1 = isInSegment.toIJK(point1);\n    const ijk2 = isInSegment.toIJK(point2);\n    const testPoint = vec3.create();\n    const { testIJK } = isInSegment;\n    const delta = vec3.sub(vec3.create(), ijk1, ijk2);\n    const testSize = Math.round(Math.max(...delta.map(Math.abs)));\n    if (testSize < 2) {\n        return true;\n    }\n    const unitDelta = vec3.scale(vec3.create(), delta, 1 / testSize);\n    for (let i = 1; i < testSize; i++) {\n        vec3.scaleAndAdd(testPoint, ijk2, unitDelta, i);\n        if (!testIJK(testPoint)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction createIsInSegmentMetadata({ dimensions, imageData, voxelManager, segmentIndex, containedSegmentIndices, }) {\n    const width = dimensions[0];\n    const pixelsPerSlice = width * dimensions[1];\n    return {\n        testCenter: (point1, point2) => {\n            const point = vec3.add(vec3.create(), point1, point2).map((it) => it / 2);\n            const ijk = imageData.worldToIndex(point).map(Math.round);\n            const [i, j, k] = ijk;\n            const index = i + j * width + k * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n        toIJK: (point) => imageData.worldToIndex(point),\n        testIJK: (ijk) => {\n            const [i, j, k] = ijk;\n            const index = Math.round(i) + Math.round(j) * width + Math.round(k) * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n    };\n}\nfunction createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices) {\n    const vol = cache.getVolume(segVolumeId);\n    if (!vol) {\n        console.warn(`No volume found for ${segVolumeId}`);\n        return;\n    }\n    return createIsInSegmentMetadata({\n        dimensions: vol.dimensions,\n        imageData: vol.imageData,\n        voxelManager: vol.voxelManager,\n        segmentIndex,\n        containedSegmentIndices,\n    });\n}\nexport { createIsInSegment, createIsInSegmentMetadata, isLineInSegment };\n","import { utilities } from '@cornerstonejs/core';\nimport normalizeViewportPlane from '../normalizeViewportPlane';\nconst { RLEVoxelMap, VoxelManager } = utilities;\nconst MAX_IMAGE_SIZE = 65535;\nexport var SegmentationEnum;\n(function (SegmentationEnum) {\n    SegmentationEnum[SegmentationEnum[\"SEGMENT\"] = -1] = \"SEGMENT\";\n    SegmentationEnum[SegmentationEnum[\"ISLAND\"] = -2] = \"ISLAND\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR\"] = -3] = \"INTERIOR\";\n    SegmentationEnum[SegmentationEnum[\"EXTERIOR\"] = -4] = \"EXTERIOR\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR_SMALL\"] = -5] = \"INTERIOR_SMALL\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR_TEST\"] = -6] = \"INTERIOR_TEST\";\n})(SegmentationEnum || (SegmentationEnum = {}));\nexport default class IslandRemoval {\n    constructor(options) {\n        this.fillInternalEdge = false;\n        this.maxInternalRemove = 128;\n        this.maxInternalRemove =\n            options?.maxInternalRemove ?? this.maxInternalRemove;\n        this.fillInternalEdge = options?.fillInternalEdge ?? this.fillInternalEdge;\n    }\n    initialize(viewport, segmentationVoxels, options) {\n        const hasSource = !!segmentationVoxels.sourceVoxelManager;\n        const segmentationVoxelManager = hasSource\n            ? segmentationVoxels.sourceVoxelManager\n            : segmentationVoxels;\n        const previewVoxelManager = hasSource\n            ? segmentationVoxels\n            : VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n        const { segmentIndex = 1, previewSegmentIndex = 1 } = options;\n        const clickedPoints = options.points || segmentationVoxelManager.getPoints();\n        if (!clickedPoints?.length) {\n            return;\n        }\n        const boundsIJK = segmentationVoxelManager\n            .getBoundsIJK()\n            .map((bound, i) => [\n            Math.min(bound[0], ...clickedPoints.map((point) => point[i])),\n            Math.max(bound[1], ...clickedPoints.map((point) => point[i])),\n        ]);\n        if (boundsIJK.find((it) => it[0] < 0 || it[1] > MAX_IMAGE_SIZE)) {\n            return;\n        }\n        const { toIJK, fromIJK, boundsIJKPrime, error } = normalizeViewportPlane(viewport, boundsIJK);\n        if (error) {\n            console.warn('Not performing island removal for planes not orthogonal to acquisition plane', error);\n            return;\n        }\n        const [width, height, depth] = fromIJK(segmentationVoxelManager.dimensions);\n        const segmentSet = new RLEVoxelMap(width, height, depth);\n        const getter = (i, j, k) => {\n            const index = segmentationVoxelManager.toIndex(toIJK([i, j, k]));\n            const oldVal = segmentationVoxelManager.getAtIndex(index);\n            if (oldVal === previewSegmentIndex || oldVal === segmentIndex) {\n                return SegmentationEnum.SEGMENT;\n            }\n        };\n        segmentSet.fillFrom(getter, boundsIJKPrime);\n        segmentSet.normalizer = { toIJK, fromIJK, boundsIJKPrime };\n        this.segmentSet = segmentSet;\n        this.previewVoxelManager = previewVoxelManager;\n        this.segmentIndex = segmentIndex;\n        this.previewSegmentIndex = previewSegmentIndex ?? segmentIndex;\n        this.selectedPoints = clickedPoints;\n        return true;\n    }\n    floodFillSegmentIsland() {\n        const { selectedPoints: clickedPoints, segmentSet } = this;\n        let floodedCount = 0;\n        const { fromIJK } = segmentSet.normalizer;\n        clickedPoints.forEach((clickedPoint) => {\n            const ijkPrime = fromIJK(clickedPoint);\n            const index = segmentSet.toIndex(ijkPrime);\n            const [iPrime, jPrime, kPrime] = ijkPrime;\n            if (segmentSet.get(index) === SegmentationEnum.SEGMENT) {\n                floodedCount += segmentSet.floodFill(iPrime, jPrime, kPrime, SegmentationEnum.ISLAND);\n            }\n        });\n        return floodedCount;\n    }\n    removeExternalIslands() {\n        const { previewVoxelManager, segmentSet } = this;\n        const { toIJK } = segmentSet.normalizer;\n        const callback = (index, rle) => {\n            const [, jPrime, kPrime] = segmentSet.toIJK(index);\n            if (rle.value !== SegmentationEnum.ISLAND) {\n                for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {\n                    const clearPoint = toIJK([iPrime, jPrime, kPrime]);\n                    const v = previewVoxelManager.getAtIJKPoint(clearPoint);\n                    previewVoxelManager.setAtIJKPoint(clearPoint, v === undefined ? 0 : null);\n                }\n            }\n        };\n        segmentSet.forEach(callback, { rowModified: true });\n    }\n    removeInternalIslands() {\n        const { segmentSet, previewVoxelManager, previewSegmentIndex } = this;\n        const { height, normalizer, width } = segmentSet;\n        const { toIJK } = normalizer;\n        segmentSet.forEachRow((baseIndex, row) => {\n            let lastRle;\n            for (const rle of [...row]) {\n                if (rle.value !== SegmentationEnum.ISLAND) {\n                    continue;\n                }\n                if (!lastRle) {\n                    if (this.fillInternalEdge && rle.start > 0) {\n                        for (let iPrime = 0; iPrime < rle.start; iPrime++) {\n                            segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                        }\n                    }\n                    lastRle = rle;\n                    continue;\n                }\n                for (let iPrime = lastRle.end; iPrime < rle.start; iPrime++) {\n                    segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                }\n                lastRle = rle;\n            }\n            if (this.fillInternalEdge && lastRle?.end < width) {\n                for (let iPrime = lastRle.end; iPrime < width; iPrime++) {\n                    segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                }\n            }\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR) {\n                return;\n            }\n            const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);\n            const rowPrev = jPrime > 0 ? segmentSet.getRun(jPrime - 1, kPrime) : null;\n            const rowNext = jPrime + 1 < height ? segmentSet.getRun(jPrime + 1, kPrime) : null;\n            const isLast = jPrime === height - 1;\n            const isFirst = jPrime === 0;\n            const prevCovers = IslandRemoval.covers(rle, rowPrev) ||\n                (isFirst && this.fillInternalEdge);\n            const nextCovers = IslandRemoval.covers(rle, rowNext) || (isLast && this.fillInternalEdge);\n            if (rle.end - rle.start > 2 && (!prevCovers || !nextCovers)) {\n                segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.EXTERIOR, { singlePlane: true });\n            }\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR) {\n                return;\n            }\n            const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);\n            const size = segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.INTERIOR_TEST);\n            const isBig = size > this.maxInternalRemove;\n            const newType = isBig\n                ? SegmentationEnum.EXTERIOR\n                : SegmentationEnum.INTERIOR_SMALL;\n            segmentSet.floodFill(rle.start, jPrime, kPrime, newType);\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR_SMALL) {\n                return;\n            }\n            for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {\n                const clearPoint = toIJK(segmentSet.toIJK(baseIndex + iPrime));\n                previewVoxelManager.setAtIJKPoint(clearPoint, previewSegmentIndex);\n            }\n        });\n        return previewVoxelManager.getArrayOfModifiedSlices();\n    }\n    static covers(rle, row) {\n        if (!row) {\n            return false;\n        }\n        let { start } = rle;\n        const { end } = rle;\n        for (const rowRle of row) {\n            if (start >= rowRle.start && start < rowRle.end) {\n                start = rowRle.end;\n                if (start >= end) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n","import { state } from '../../stateManagement/annotation';\nimport RectangleROIStartEndThresholdTool from '../../tools/segmentation/RectangleROIStartEndThresholdTool';\nimport RectangleROIThresholdTool from '../../tools/segmentation/RectangleROIThresholdTool';\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nfunction rectangleROIThresholdVolumeByRange(annotationUIDs, segmentationVolume, thresholdVolumeInformation, options) {\n    const annotations = annotationUIDs.map((annotationUID) => {\n        return state.getAnnotation(annotationUID);\n    });\n    _validateAnnotations(annotations);\n    let boundsIJK;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();\n        if (volumeSize === segmentationVolume.voxelManager.getScalarDataLength() ||\n            i === 0) {\n            boundsIJK = getBoundsIJKFromRectangleAnnotations(annotations, thresholdVolumeInformation[i].volume, options);\n        }\n    }\n    const outputSegmentationVolume = thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, { ...options, boundsIJK, segmentationId: options.segmentationId });\n    outputSegmentationVolume.modified();\n    return outputSegmentationVolume;\n}\nfunction _validateAnnotations(annotations) {\n    const validToolNames = [\n        RectangleROIThresholdTool.toolName,\n        RectangleROIStartEndThresholdTool.toolName,\n    ];\n    for (const annotation of annotations) {\n        const name = annotation.metadata.toolName;\n        if (!validToolNames.includes(name)) {\n            throw new Error('rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations');\n        }\n    }\n}\nexport default rectangleROIThresholdVolumeByRange;\n","import { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { state as annotationState, config as annotationConfig, } from '../../stateManagement/annotation';\nimport contourAndFindLargestBidirectional from './contourAndFindLargestBidirectional';\nimport createBidirectionalToolData from './createBidirectionalToolData';\nimport BidirectionalTool from '../../tools/annotation/BidirectionalTool';\nimport { getSegmentations } from '../../stateManagement/segmentation/getSegmentations';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nexport default async function segmentContourAction(element, configuration) {\n    console.warn('Deprecation Alert: There is a new getSegmentLargestBidirectional function that handles volume, stack and individual segment cases properly. This function is deprecated and will be removed in a future version.');\n    const { data: configurationData } = configuration;\n    const enabledElement = getEnabledElement(element);\n    const segment = (configurationData.getSegment || defaultGetSegment)(enabledElement, configurationData);\n    if (!segment) {\n        return;\n    }\n    const FrameOfReferenceUID = enabledElement.viewport.getFrameOfReferenceUID();\n    const segmentationsList = getSegmentations();\n    const { segmentIndex, segmentationId } = segment;\n    const bidirectionals = annotationState.getAnnotations(this.toolName || BidirectionalTool.toolName, FrameOfReferenceUID);\n    let hasExistingActiveSegment = false;\n    const existingLargestBidirectionals = bidirectionals.filter((existingBidirectionalItem) => {\n        const segment = existingBidirectionalItem.data.segment;\n        if (!segment) {\n            return false;\n        }\n        if (segment.segmentationId === segmentationId &&\n            segment.segmentIndex === segmentIndex) {\n            hasExistingActiveSegment = true;\n            existingBidirectionalItem.data.segment = segment;\n        }\n        return true;\n    });\n    if (!hasExistingActiveSegment) {\n        existingLargestBidirectionals.push({\n            data: { segment },\n        });\n    }\n    let newBidirectional;\n    existingLargestBidirectionals.forEach(async (existingLargestBidirectional) => {\n        const segments = [];\n        const updateSegment = existingLargestBidirectional.data\n            .segment;\n        const { segmentIndex, segmentationId } = updateSegment;\n        segments[segmentIndex] = updateSegment;\n        annotationState.removeAnnotation(existingLargestBidirectional.annotationUID);\n        const bidirectionalData = await contourAndFindLargestBidirectional({\n            ...segmentationsList.find((segmentation) => segmentation.segmentationId === segmentationId),\n            segments,\n        });\n        if (!bidirectionalData) {\n            return;\n        }\n        const bidirectionalToolData = createBidirectionalToolData(bidirectionalData, enabledElement.viewport);\n        bidirectionalToolData.annotationUID =\n            existingLargestBidirectional.annotationUID;\n        bidirectionalToolData.data.segment = updateSegment;\n        const annotationUID = annotationState.addAnnotation(bidirectionalToolData, FrameOfReferenceUID);\n        if (updateSegment.segmentIndex === segment.segmentIndex &&\n            updateSegment.segmentationId === segment.segmentationId) {\n            newBidirectional = bidirectionalData;\n            const { style } = segment;\n            if (style) {\n                annotationConfig.style.setAnnotationStyles(annotationUID, style);\n            }\n        }\n    });\n    if (newBidirectional) {\n        const { sliceIndex } = newBidirectional;\n        const imageIds = enabledElement.viewport.getImageIds();\n        utilities.jumpToSlice(element, {\n            imageIndex: imageIds.length - 1 - sliceIndex,\n        });\n        enabledElement.viewport.render();\n    }\n    else {\n        console.warn('No bidirectional found');\n    }\n    return newBidirectional;\n}\nexport function defaultGetSegment(enabledElement, configuration) {\n    const segmentationsList = getSegmentations();\n    if (!segmentationsList.length) {\n        return;\n    }\n    const segmentationId = configuration.segmentationId || segmentationsList[0].segmentationId;\n    const segmentIndex = configuration.segmentIndex ?? getActiveSegmentIndex(segmentationId);\n    if (!segmentIndex) {\n        return;\n    }\n    const segmentData = configuration.segmentData?.get(segmentIndex);\n    return {\n        label: `Segment ${segmentIndex}`,\n        segmentIndex,\n        segmentationId,\n        ...segmentData,\n    };\n}\n","import { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getVoxelOverlap, processVolumes } from './utilities';\nfunction thresholdSegmentationByRange(segmentationVolume, segmentationIndex, thresholdVolumeInformation, overlapType, segmentationId) {\n    if (!segmentationId) {\n        throw new Error('Segmentation ID is required to be passed inside thresholdSegmentationByRange');\n    }\n    const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);\n    const { voxelManager } = volumeInfoList[baseVolumeIdx];\n    const refVoxelManager = voxelManager;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    const segVoxelManager = segmentationVolume.voxelManager;\n    volumeInfoList.forEach((volumeInfo) => {\n        const { volumeSize } = volumeInfo;\n        if (volumeSize === scalarDataLength) {\n            _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo);\n        }\n        else {\n            _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType);\n        }\n    });\n    triggerSegmentationDataModified(segmentationId);\n    return segmentationVolume;\n}\nfunction _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType) {\n    const { imageData, lower, upper, dimensions } = volumeInfo;\n    let total, overlaps, range;\n    const segScalarDataLength = segVoxelManager.getScalarDataLength();\n    for (let i = 0; i < segScalarDataLength; i++) {\n        if (segScalarDataLength.getAtIndex(i) === segmentationIndex) {\n            const overlapBounds = getVoxelOverlap(imageData, dimensions, volumeInfoList[baseVolumeIdx].spacing, volumeInfoList[baseVolumeIdx].imageData.getPoint(i));\n            const callbackOverlap = ({ value }) => {\n                total = total + 1;\n                if (value >= range.lower && value <= range.upper) {\n                    overlaps = overlaps + 1;\n                }\n            };\n            total = 0;\n            overlaps = 0;\n            range = { lower, upper };\n            let overlapTest = false;\n            segVoxelManager.forEach(callbackOverlap, {\n                imageData,\n                boundsIJK: overlapBounds,\n            });\n            overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;\n            segVoxelManager.setAtIndex(i, overlapTest ? segmentationIndex : 0);\n        }\n    }\n    return { total, range, overlaps };\n}\nfunction _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo) {\n    const { lower, upper } = volumeInfo;\n    const scalarDataLength = segVoxelManager.getScalarDataLength();\n    for (let i = 0; i < scalarDataLength; i++) {\n        if (segVoxelManager.getAtIndex[i] === segmentationIndex) {\n            const value = refVoxelManager.getAtIndex(i);\n            segVoxelManager.setAtIndex(i, value >= lower && value <= upper ? segmentationIndex : 0);\n        }\n    }\n}\nexport default thresholdSegmentationByRange;\n","import { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getVoxelOverlap, processVolumes } from './utilities';\nfunction thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, options) {\n    const { imageData: segmentationImageData } = segmentationVolume;\n    const { overwrite, boundsIJK, segmentationId } = options;\n    if (!segmentationId) {\n        throw new Error('Segmentation ID is required to be passed inside thresholdVolumeByRange as options');\n    }\n    const overlapType = options?.overlapType || 0;\n    const segVoxelManager = segmentationVolume.voxelManager;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    if (overwrite) {\n        for (let i = 0; i < scalarDataLength; i++) {\n            segVoxelManager.setAtIndex(i, 0);\n        }\n    }\n    const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);\n    let overlaps, total, range;\n    const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n        const callbackOverlap = ({ value }) => {\n            total = total + 1;\n            if (value >= range.lower && value <= range.upper) {\n                overlaps = overlaps + 1;\n            }\n        };\n        const { imageData, dimensions, lower, upper } = volumeInfo;\n        const overlapBounds = getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter);\n        total = 0;\n        overlaps = 0;\n        range = { lower, upper };\n        let overlapTest = false;\n        const { voxelManager } = imageData.get('voxelManager');\n        voxelManager.forEach(callbackOverlap, {\n            imageData,\n            boundsIJK: overlapBounds,\n        });\n        if (overlapType === 0) {\n            overlapTest = overlaps > 0;\n        }\n        else if (overlapType == 1) {\n            overlapTest = overlaps === total;\n        }\n        return overlapTest;\n    };\n    const testRange = (volumeInfo, pointIJK) => {\n        const { imageData, lower, upper } = volumeInfo;\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const offset = voxelManager.toIndex(pointIJK);\n        const value = voxelManager.getAtIndex(offset);\n        if (value <= lower || value >= upper) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    const callback = ({ index, pointIJK, pointLPS }) => {\n        let insert = volumeInfoList.length > 0;\n        for (let i = 0; i < volumeInfoList.length; i++) {\n            if (volumeInfoList[i].volumeSize === scalarDataLength) {\n                insert = testRange(volumeInfoList[i], pointIJK);\n            }\n            else {\n                insert = testOverlapRange(volumeInfoList[i], volumeInfoList[baseVolumeIdx].spacing, pointLPS);\n            }\n            if (!insert) {\n                break;\n            }\n        }\n        if (insert) {\n            segVoxelManager.setAtIndex(index, options.segmentIndex || 1);\n        }\n    };\n    const voxelManager = segmentationVolume.voxelManager;\n    voxelManager.forEach(callback, {\n        imageData: segmentationImageData,\n        boundsIJK,\n    });\n    triggerSegmentationDataModified(options.segmentationId);\n    return segmentationVolume;\n}\nexport default thresholdVolumeByRange;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nconst equalsCheck = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\nexport function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {\n    const halfSpacingX = voxelSpacing[0] / 2;\n    const halfSpacingY = voxelSpacing[1] / 2;\n    const halfSpacingZ = voxelSpacing[2] / 2;\n    const voxelCornersIJK = new Array(8);\n    voxelCornersIJK[0] = csUtils.transformWorldToIndex(imageData, [\n        voxelCenter[0] - halfSpacingX,\n        voxelCenter[1] - halfSpacingY,\n        voxelCenter[2] - halfSpacingZ,\n    ]);\n    const offsets = [\n        [1, -1, -1],\n        [-1, 1, -1],\n        [1, 1, -1],\n        [-1, -1, 1],\n        [1, -1, 1],\n        [-1, 1, 1],\n        [1, 1, 1],\n    ];\n    for (let i = 0; i < 7; i++) {\n        const [xOff, yOff, zOff] = offsets[i];\n        voxelCornersIJK[i + 1] = csUtils.transformWorldToIndex(imageData, [\n            voxelCenter[0] + xOff * halfSpacingX,\n            voxelCenter[1] + yOff * halfSpacingY,\n            voxelCenter[2] + zOff * halfSpacingZ,\n        ]);\n    }\n    return getBoundingBoxAroundShapeIJK(voxelCornersIJK, dimensions);\n}\nexport function processVolumes(segmentationVolume, thresholdVolumeInformation) {\n    const { spacing: segmentationSpacing } = segmentationVolume;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    const volumeInfoList = [];\n    let baseVolumeIdx = 0;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const { imageData, spacing, dimensions, voxelManager } = thresholdVolumeInformation[i].volume;\n        const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();\n        if (volumeSize === scalarDataLength &&\n            equalsCheck(spacing, segmentationSpacing)) {\n            baseVolumeIdx = i;\n        }\n        const lower = thresholdVolumeInformation[i].lower;\n        const upper = thresholdVolumeInformation[i].upper;\n        volumeInfoList.push({\n            imageData,\n            lower,\n            upper,\n            spacing,\n            dimensions,\n            volumeSize,\n            voxelManager,\n        });\n    }\n    return {\n        volumeInfoList,\n        baseVolumeIdx,\n    };\n}\nconst segmentIndicesCache = new Map();\nexport const setSegmentationDirty = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = true;\n    }\n};\nexport const setSegmentationClean = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = false;\n    }\n};\nexport const getCachedSegmentIndices = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached && !cached.isDirty) {\n        return cached.indices;\n    }\n    return null;\n};\nexport const setCachedSegmentIndices = (segmentationId, indices) => {\n    segmentIndicesCache.set(segmentationId, { indices, isDirty: false });\n};\n","import { cache, utilities, eventTarget, Enums, triggerEvent, metaData, } from '@cornerstonejs/core';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getStrategyData } from '../../tools/segmentation/strategies/utils/getStrategyData';\nimport ensureSegmentationVolume from '../../tools/segmentation/strategies/compositions/ensureSegmentationVolume';\nimport ensureImageVolume from '../../tools/segmentation/strategies/compositions/ensureImageVolume';\nexport const triggerWorkerProgress = (workerType, progress) => {\n    triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n        progress,\n        type: workerType,\n    });\n};\nexport const getSegmentationDataForWorker = (segmentationId, segmentIndices) => {\n    const segmentation = getSegmentation(segmentationId);\n    const { representationData } = segmentation;\n    const { Labelmap } = representationData;\n    if (!Labelmap) {\n        console.debug('No labelmap found for segmentation', segmentationId);\n        return null;\n    }\n    const segVolumeId = Labelmap.volumeId;\n    const segImageIds = Labelmap.imageIds;\n    const operationData = {\n        segmentationId,\n        volumeId: segVolumeId,\n        imageIds: segImageIds,\n    };\n    let reconstructableVolume = false;\n    if (segImageIds) {\n        const refImageIds = segImageIds.map((imageId) => {\n            const image = cache.getImage(imageId);\n            return image.referencedImageId;\n        });\n        reconstructableVolume = utilities.isValidVolume(refImageIds);\n    }\n    let indices = segmentIndices;\n    if (!indices) {\n        indices = [getActiveSegmentIndex(segmentationId)];\n    }\n    else if (!Array.isArray(indices)) {\n        indices = [indices, 255];\n    }\n    return {\n        operationData,\n        segVolumeId,\n        segImageIds,\n        reconstructableVolume,\n        indices,\n    };\n};\nexport const prepareVolumeStrategyDataForWorker = (operationData) => {\n    return getStrategyData({\n        operationData,\n        strategy: {\n            ensureSegmentationVolumeFor3DManipulation: ensureSegmentationVolume.ensureSegmentationVolumeFor3DManipulation,\n            ensureImageVolumeFor3DManipulation: ensureImageVolume.ensureImageVolumeFor3DManipulation,\n        },\n    });\n};\nexport const prepareImageInfo = (imageVoxelManager, imageData) => {\n    const imageScalarData = imageVoxelManager.getCompleteScalarDataArray();\n    return {\n        scalarData: imageScalarData,\n        dimensions: imageData.getDimensions(),\n        spacing: imageData.getSpacing(),\n        origin: imageData.getOrigin(),\n        direction: imageData.getDirection(),\n    };\n};\nexport const prepareStackDataForWorker = (segImageIds) => {\n    const segmentationInfo = [];\n    const imageInfo = [];\n    for (const segImageId of segImageIds) {\n        const segImage = cache.getImage(segImageId);\n        const segPixelData = segImage.getPixelData();\n        const { origin, direction, spacing, dimensions } = utilities.getImageDataMetadata(segImage);\n        segmentationInfo.push({\n            scalarData: segPixelData,\n            dimensions,\n            spacing,\n            origin,\n            direction,\n        });\n        const refImageId = segImage.referencedImageId;\n        if (refImageId) {\n            const refImage = cache.getImage(refImageId);\n            if (!refImage) {\n                continue;\n            }\n            const refPixelData = refImage.getPixelData();\n            const refVoxelManager = refImage.voxelManager;\n            const refSpacing = [\n                refImage.rowPixelSpacing,\n                refImage.columnPixelSpacing,\n            ];\n            imageInfo.push({\n                scalarData: refPixelData,\n                dimensions: refVoxelManager\n                    ? refVoxelManager.dimensions\n                    : [refImage.columns, refImage.rows, 1],\n                spacing: refSpacing,\n            });\n        }\n    }\n    return { segmentationInfo, imageInfo };\n};\nexport const getImageReferenceInfo = (segVolumeId, segImageIds) => {\n    let refImageId;\n    if (segVolumeId) {\n        const segmentationVolume = cache.getVolume(segVolumeId);\n        const imageIds = segmentationVolume.imageIds;\n        const cachedImage = cache.getImage(imageIds[0]);\n        if (cachedImage) {\n            refImageId = cachedImage.referencedImageId;\n        }\n    }\n    else if (segImageIds?.length) {\n        const segImage = cache.getImage(segImageIds[0]);\n        refImageId = segImage.referencedImageId;\n    }\n    const refImage = cache.getImage(refImageId);\n    const scalingModule = metaData.get('scalingModule', refImageId);\n    const modalityUnitOptions = {\n        isPreScaled: Boolean(refImage?.preScale?.scaled),\n        isSuvScaled: typeof scalingModule?.suvbw === 'number',\n    };\n    return { refImageId, modalityUnitOptions };\n};\n","import { cache } from '@cornerstonejs/core';\nfunction validateRepresentationData(segmentationRepresentationData) {\n    if ('volumeId' in segmentationRepresentationData) {\n        segmentationRepresentationData =\n            segmentationRepresentationData;\n        const cachedVolume = cache.getVolume(segmentationRepresentationData.volumeId);\n        if (!cachedVolume) {\n            throw new Error(`volumeId of ${segmentationRepresentationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`);\n        }\n    }\n    else if ('imageIds' in segmentationRepresentationData) {\n        segmentationRepresentationData =\n            segmentationRepresentationData;\n        if (!segmentationRepresentationData.imageIds) {\n            throw new Error('The segmentationInput.representationData.imageIds is undefined, please provide a valid representationData.imageIds for stack data');\n        }\n    }\n    else {\n        throw new Error('The segmentationInput.representationData is undefined, please provide a valid representationData');\n    }\n}\nexport function validatePublic(segmentationInput) {\n    if (!segmentationInput.representation.data) {\n        throw new Error('The segmentationInput.representationData.data is undefined, please provide a valid representationData.data');\n    }\n    const representationData = segmentationInput.representation\n        .data;\n    validateRepresentationData(representationData);\n}\nexport function validate(segmentationRepresentationData) {\n    validateRepresentationData(segmentationRepresentationData);\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, clearFromImageIds, getPromiseRemovedHandler, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    minBefore: 2,\n    maxAfter: 2,\n    directionExtraImages: 10,\n    preserveExistingPool: false,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 5;\nconst enable = (element) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    updateToolState(element);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n};\nfunction prefetch(element) {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    const { currentImageIdIndex } = stack;\n    indicesToRequestCopy.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n    }\n    function doneCallback(imageId) {\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        const image = cache.getCachedImageBasedOnImageURI(imageId);\n        const { stats } = stackPrefetch;\n        const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n        if (decodeTimeInMS) {\n            stats.imageIds.set(imageId, decodeTimeInMS);\n            stats.decodeTimeInMS += decodeTimeInMS;\n            const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n            stats.loadTimeInMS += loadTimeInMS;\n        }\n        if (!stackPrefetch.indicesToRequest.length) {\n            if (image?.sizeInBytes) {\n                const { sizeInBytes } = image;\n                const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n                if (!stackPrefetch.cacheFill) {\n                    stats.initialTime = Date.now() - stats.start;\n                    stats.initialSize = stats.imageIds.size;\n                    updateToolState(element, usage);\n                    prefetch(element);\n                }\n                else if (stats.imageIds.size) {\n                    stats.fillTime = Date.now() - stats.start;\n                    const { size } = stats.imageIds;\n                    stats.fillSize = size;\n                }\n            }\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    stackPrefetch.indicesToRequest.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            updateToolState(element);\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nconst signum = (x) => (x < 0 ? -1 : 1);\nconst updateToolState = (element, usage) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    let { maxAfter = 2, minBefore = 2 } = configuration;\n    const { directionExtraImages = 10 } = configuration;\n    const stackPrefetchData = getToolState(element) ||\n        {\n            indicesToRequest: [],\n            currentImageIdIndex,\n            stackCount: 0,\n            enabled: true,\n            direction: 1,\n            stats: {\n                start: Date.now(),\n                imageIds: new Map(),\n                decodeTimeInMS: 0,\n                loadTimeInMS: 0,\n                totalBytes: 0,\n            },\n        };\n    const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n    stackPrefetchData.direction = signum(delta);\n    stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n    stackPrefetchData.enabled = true;\n    if (stackPrefetchData.stackCount < 100) {\n        stackPrefetchData.stackCount += directionExtraImages;\n    }\n    if (Math.abs(delta) > maxAfter || !delta) {\n        stackPrefetchData.stackCount = 0;\n        if (usage) {\n            const positionFraction = currentImageIdIndex / stack.imageIds.length;\n            minBefore = Math.ceil(usage * positionFraction);\n            maxAfter = Math.ceil(usage * (1 - positionFraction));\n            stackPrefetchData.cacheFill = true;\n        }\n        else {\n            stackPrefetchData.cacheFill = false;\n        }\n    }\n    else if (delta < 0) {\n        minBefore += stackPrefetchData.stackCount;\n        maxAfter = 0;\n    }\n    else {\n        maxAfter += stackPrefetchData.stackCount;\n        minBefore = 0;\n    }\n    const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n    const maxIndex = Math.min(stack.imageIds.length - 1, currentImageIdIndex + maxAfter);\n    const indicesToRequest = [];\n    for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n        indicesToRequest.push(i);\n    }\n    for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n        indicesToRequest.push(i);\n    }\n    stackPrefetchData.indicesToRequest = indicesToRequest;\n    addToolState(element, stackPrefetchData);\n};\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData) {\n        stackPrefetchData.enabled = false;\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackContextPrefetch = {\n    enable,\n    disable,\n    getConfiguration,\n    setConfiguration,\n};\nexport default stackContextPrefetch;\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, getPromiseRemovedHandler, nearestIndex, range, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    preserveExistingPool: true,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\nfunction prefetch(element) {\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    const stack = getStackData(element);\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    indicesToRequestCopy.forEach(function (imageIdIndex) {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n    const nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);\n    let imageId;\n    let nextImageIdIndex;\n    const preventCache = false;\n    function doneCallback(image) {\n        console.log('prefetch done: %s', image.imageId);\n        const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n        removeFromList(imageIdIndex);\n    }\n    let lowerIndex = nearest.low;\n    let higherIndex = nearest.high;\n    const imageIdsToPrefetch = [];\n    while (lowerIndex >= 0 ||\n        higherIndex < stackPrefetch.indicesToRequest.length) {\n        const currentIndex = stack.currentImageIdIndex;\n        const shouldSkipLower = currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n            configuration.maxImagesToPrefetch;\n        const shouldSkipHigher = stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n            configuration.maxImagesToPrefetch;\n        const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n        const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n        if (!shouldLoadHigher && !shouldLoadLower) {\n            break;\n        }\n        if (shouldLoadLower) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n        if (shouldLoadHigher) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    imageIdsToPrefetch.forEach((imageId) => {\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nfunction enable(element) {\n    const stack = getStackData(element);\n    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = {\n        indicesToRequest: range(0, stack.imageIds.length - 1),\n        enabled: true,\n        direction: 1,\n    };\n    const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);\n    stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n    addToolState(element, stackPrefetchData);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n}\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n        stackPrefetchData.enabled = false;\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\nexport default stackPrefetch;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nfunction triggerAnnotationRender(element) {\n    annotationRenderingEngine.renderViewport(element);\n}\nexport default triggerAnnotationRender;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","export default function filterViewportsWithFrameOfReferenceUID(viewports, FrameOfReferenceUID) {\n    const numViewports = viewports.length;\n    const viewportsWithFrameOfReferenceUID = [];\n    for (let vp = 0; vp < numViewports; vp++) {\n        const viewport = viewports[vp];\n        if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n            viewportsWithFrameOfReferenceUID.push(viewport);\n        }\n    }\n    return viewportsWithFrameOfReferenceUID;\n}\n","import { vec3 } from 'gl-matrix';\nexport function filterViewportsWithParallelNormals(viewports, camera, EPS = 0.999) {\n    return viewports.filter((viewport) => {\n        const vpCamera = viewport.getCamera();\n        const isParallel = Math.abs(vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >\n            EPS;\n        return isParallel;\n    });\n}\nexport default filterViewportsWithParallelNormals;\n","import { ToolModes } from '../../enums';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst { Active, Passive, Enabled } = ToolModes;\nexport default function filterViewportsWithToolEnabled(viewports, toolName) {\n    const numViewports = viewports.length;\n    const viewportsWithToolEnabled = [];\n    for (let vp = 0; vp < numViewports; vp++) {\n        const viewport = viewports[vp];\n        const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        if (!toolGroup) {\n            continue;\n        }\n        const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName);\n        if (hasTool) {\n            viewportsWithToolEnabled.push(viewport);\n        }\n    }\n    return viewportsWithToolEnabled;\n}\nfunction _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName) {\n    const { toolOptions } = toolGroup;\n    const tool = toolOptions[toolName];\n    if (!tool) {\n        return false;\n    }\n    const toolMode = tool.mode;\n    return toolMode === Active || toolMode === Passive || toolMode === Enabled;\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","export const version = '3.33.0';\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n"],"names":["config","getConfig","setConfig","newConfig","polysegInitialized","getPolySeg","addons","polySeg","console","warn","polyseg","init","DEFINED_CURSORS","Symbol","STANDARD_CURSORS","Set","MouseCursor","constructor","name","fallback","this","getName","addFallbackStyleProperty","style","getStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","get","has","set","setDefinedCursor","cursor","context","symbol","Map","Object","defineProperty","value","standardCursorNames","values","ELEMENT_CURSORS_MAP","initElementCursor","element","_getElementCursors","_setElementCursor","cursors","resetElementCursor","hideElementCursor","map","WeakMap","ImageMouseCursor","url","x","y","super","getUniqueInstanceName","Number","prefix","utilities","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","extend","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Height","Probe","RectangleROI","Label","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","assign","create","registerCursor","toolName","svgCursorNames","keys","STATE","AnnotationStyleStates","Highlighted","MODE","ToolModes","Active","SVGMouseCursor","pointer","color","urn","type","getCursorURN","descriptor","getDefinedSVGCursorDescriptor","options","blob","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","URL","createObjectURL","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","prototype","hasOwnProperty","bind","replace","match","key","svgSize","Math","max","cursorName","log","setElementCursor","CursorNames","svgDrawingHelper","annotationUID","ellipseUID","corner1","corner2","dataId","top","bottom","left","right","canvasCoordinates","width","lineWidth","lineDash","undefined","strokeWidth","svgNodeHash","existingEllipse","getSvgNode","w","hypot","h","angle","atan2","PI","center","attributes","cx","cy","rx","ry","stroke","fill","transform","setNodeTouched","svgEllipseElement","document","createElementNS","setAttribute","appendNode","handleGroupUID","handle","uniqueIndex","handleRadius","opacity","r","Error","side","parseFloat","height","existingHandleElement","newHandleElement","drawLine","lineUID","start","end","isNaN","markerStartId","markerEndId","shadow","strokeOpacity","existingLine","layerId","svgLayerElement","id","dropShadowStyle","x1","y1","x2","y2","newLine","drawPath","pathUID","points","pointsArrays","length","Array","isArray","fillColor","fillOpacity","closePath","existingNode","pointsAttribute","i","numArrays","numPoints","j","point","toFixed","d","newNode","drawPolyline","polylineUID","existingPolyLine","firstPoint","newPolyLine","drawRectByCoordinates","rectangleUID","_width","existingRect","topLeft","topRight","bottomLeft","bottomRight","leftEdgeCenter","svgRectElement","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","querySelector","removeChild","getBBox","insertBefore","firstChild","bBox","textUID","textLines","position","padding","fontFamily","fontSize","background","textGroupBoundingBox","svgns","existingTextGroup","textElement","textSpans","from","children","textSpan","appendChild","textAttributes","textGroupAttributes","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","drawHeight","heightUID","midX","endfirstLine","endsecondLine","firstLine","secondLine","threeLine","fanUID","innerRadius","outerRadius","startAngle","endAngle","zIndex","_getHash","existingFanElement","startRad","endRad","outerStartX","cos","outerStartY","sin","outerEndX","outerEndY","innerStartX","innerStartY","largeArcFlag","pathData","setAttributesIfNecessary","newFanElement","toString","setNewAttributesIfValid","drawArrow","arrowUID","viaMarker","markerSize","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","drawRedactionRect","tlhc","min","abs","svgNode","forEach","currentValue","getAttribute","newValue","removeAttribute","enable","eventTarget","addEventListener","ANNOTATION_COMPLETED","handleAnnotationCompleted","ANNOTATION_MODIFIED","handleAnnotationUpdate","ANNOTATION_REMOVED","handleAnnotationDelete","disable","removeEventListener","Passive","Enabled","onCameraModified","evt","tool","Enums","CAMERA_MODIFIED","onCameraReset","onResetCamera","CAMERA_RESET","onImageRendered","detail","IMAGE_RENDERED","onImageSpacingCalibrated","IMAGE_SPACING_CALIBRATED","KEY_DOWN","KEY_UP","MOUSE_CLICK","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_DOUBLE_CLICK","MOUSE_DRAG","MOUSE_MOVE","MOUSE_UP","MOUSE_WHEEL","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_PRESS","mouseDoubleClickListener","mouseDownListener","mouseMoveListener","capture","preventGhostClick","touchStartListener","passive","wheelListener","segmentationId","modifiedSlicesToUse","representationData","getSegmentation","viewportIds","getViewportIdsWithSegmentation","hasVolumeViewport","some","viewportId","viewport","getEnabledElementByViewportId","VolumeViewport","hasStackViewport","StackViewport","hasBothStackAndVolume","segmentationVolume","cache","getVolume","volumeId","imageData","vtkOpenGLTexture","slicesToUpdate","numSlices","getDimensions","setUpdatedFrame","modified","performVolumeLabelmapUpdate","SegmentationRepresentations","Labelmap","representations","getSegmentationRepresentation","filter","representation","enabledElement","actorEntries","actorEntry","segImageData","actor","getMapper","getInputData","currentSegmentationImageIds","segmentationImage","getImage","performStackLabelmapUpdate","_imageChangeEventListener","eventData","renderingEngineId","getEnabledElementByIds","labelmapRepresentations","actors","getActors","updateLabelmapSegmentationImageReferences","labelmapActors","flatMap","find","derivedImageIds","includes","referencedId","removeActors","uid","currentImageId","getCurrentImageId","shouldTriggerSegmentationRender","derivedImageId","derivedImage","segmentationActorInput","dimensions","spacing","direction","getImageDataMetadata","currentImage","imageId","origin","currentOrigin","originToUse","voxelManager","getConstructor","newPixelData","getScalarData","scalarArray","numberOfComponents","setDimensions","setSpacing","setDirection","setOrigin","getPointData","setScalars","addImages","representationUID","callback","imageActor","setInputData","segmentationImageData","setDerivedImage","render","getEnabledElement","BaseVolumeViewport","PRE_STACK_NEW_IMAGE","async","contourSegmentationCompletedListener","sourceAnnotation","annotation","isContourSegmentationAnnotation","viewports","getViewportsForAnnotation","viewportWithToolRegistered","silent","toolGroup","getToolGroupForViewport","errorMessage","hasTool","getToolOptions","isFreehandContourSegToolRegisteredForViewport","getViewport","contourSegmentationAnnotations","sourceAnnotationUID","getAllAnnotations","targetAnnotation","areSameSegment","isReferenceViewable","metadata","getValidContourSegmentationAnnotations","triggerEvent","Events","ANNOTATION_CUT_MERGE_PROCESS_COMPLETED","sourcePolyline","data","contour","polyline","intersectingContours","targetPolyline","isContourHole","contourHoleProcessingEnabled","annotationCompletedListener","removed","getRenderingEngines","renderingEngine","getViewports","vp","triggerAnnotationRenderForViewportIds","t","annotationRemovedListener","removeContourSegmentationAnnotation","csToolsInitialized","defaultConfiguration","_removeCornerstoneEventListeners","elementEnabledEvent","ELEMENT_ENABLED","elementDisabledEvent","ELEMENT_DISABLED","addEnabledElement","removeEnabledElement","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","ANNOTATION_SELECTION_CHANGE","SEGMENTATION_MODIFIED","SEGMENTATION_DATA_MODIFIED","SEGMENTATION_REPRESENTATION_MODIFIED","SEGMENTATION_REPRESENTATION_ADDED","destroy","annotationManager","getAnnotationManager","segmentationStateManager","restoreAnnotations","resetState","annotationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedViewports","_throwIfDestroyed","elements","_viewportElements","_triggerRender","delete","size","_render","addViewportElement","removeViewportElement","_reset","renderViewport","_setViewportsToBeRenderedNextFrame","hasBeenDestroyed","_setAllViewportsToBeRenderedNextFrame","add","elementsEnabled","indexOf","window","requestAnimationFrame","getRenderingEngine","enabledTools","eventDetail","draw","anyRendered","renderAnnotation","rendered","ANNOTATION_RENDERED","cancelAnimationFrame","clear","FrameOfReferenceSpecificAnnotationManager","getGroupKey","annotationGroupSelector","FrameOfReferenceUID","_imageVolumeModifiedHandler","frameOfReferenceSpecificAnnotations","annotations","invalidated","getFramesOfReference","getAnnotations","groupKey","getAnnotation","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","addAnnotation","preprocessingFn","push","removeAnnotation","groupAnnotations","toolAnnotations","index","findIndex","splice","removeAnnotations","removedAnnotations","annotationsForTool","saveAnnotations","structuredClone","state","flat","getNumberOfAllAnnotations","count","removeAllAnnotations","IMAGE_VOLUME_MODIFIED","setPreprocessingFn","defaultFrameOfReferenceSpecificAnnotationManager","globalLockedAnnotationUIDsSet","setAnnotationLocked","locked","makeEventDetail","lockedAnnotationUIDsSet","added","isLocked","lock","unlock","publish","unlockAllAnnotations","clearLockedAnnotationsSet","getAnnotationsLocked","isAnnotationLocked","getAnnotationsLockedCount","checkAndSetAnnotationLocked","freeze","item","ANNOTATION_LOCK_CHANGE","selectedAnnotationUIDs","setAnnotationSelected","selected","preserveSelected","clearSelectionSet","isSelected","selectAnnotation","deselectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","defaultManager","setAnnotationManager","manager","clearParentAnnotation","childUID","parentAnnotationUID","parentAnnotation","childUIDIndex","childAnnotationUIDs","addChildAnnotation","childAnnotation","parentUID","getParentAnnotation","getChildAnnotations","childAnnotationUID","HTMLDivElement","triggerAnnotationAddedForElement","triggerAnnotationAddedForFOR","triggerAnnotationRemoved","annotationManagerUID","invalidateAnnotation","currAnnotation","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","isVisible","hide","showAllAnnotations","isAnnotationVisible","lastVisible","hidden","ANNOTATION_VISIBILITY_CHANGE","checkAndSetAnnotationVisibility","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxVisibility","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","angleArcLineDash","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","toolGroupId","toolGroups","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","toolStyle","specifications","_getToolStyle","property","annotationToolStyles","viewportToolStyles","global","toolGroupToolStyles","globalStyles","toolStyles","styleSpecifier","mode","alternatives","list","getHierarchalPropertyStyles","highlighted","Selected","Locked","autoGenerated","AutoGenerated","Default","eventType","ANNOTATION_ADDED","getToolGroupsWithToolName","viewportsToRender","viewportsInfo","viewportInfo","triggerAnnotationModified","changeType","ChangeTypes","HandlesUpdated","triggerAnnotationCompleted","_triggerAnnotationCompleted","triggerContourAnnotationCompleted","AnnotationGroup","annotationUIDs","_isVisible","visibleFilter","unboundVisibleFilter","setVisible","baseEvent","findNearby","uids","remove","annotationState","resetAnnotationManager","renderers","Contour","Surface","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","triggerSegmentationRenderBySegmentationId","renderSegmentation","_pendingRenderQueue","_getAllViewports","_renderFlaggedSegmentations","nextViewportIds","shift","_getViewportIdsForSegmentation","segmentationRepresentations","viewportRenderList","segmentationRenderList","_addPlanarFreeHandToolIfAbsent","display","error","Promise","resolve","allSettled","then","results","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","tools","addTool","setToolPassive","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","imageIds","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","segmentation","defaultSegmentationStateManager","getDefaultRenderingConfig","cfun","ofun","addPoint","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","updateSegmentation","payload","draftState","triggerSegmentationModified","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","debug","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","segments","segmentIndex","active","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","volumeViewport","isBaseVolumeSegmentation","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","referencedImageId","asOverlay","_updateLabelmapImageIdReferenceMap","stackViewport","_updateAllLabelmapSegmentationImageReferences","getImageIds","sliceIndex","withNavigation","labelmapData","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getCurrentLabelmapImageIdForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","every","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","getActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","entries","segment","addColorLUT","removeColorLUT","_getStackIdForImageIds","slice","round","join","getAllViewportSegmentationRepresentations","getSegmentationRepresentationsBySegmentationId","result","viewportReps","filteredReps","indexToUse","colorLUTToUse","missingColorLUTs","addSegmentationRepresentations","segmentationInputArray","segmentationInput","addContourRepresentationToViewport","contourInputArray","input","addContourRepresentationToViewportMap","viewportInputMap","inputArray","addLabelmapRepresentationToViewport","labelmapInputArray","addLabelmapRepresentationToViewportMap","addSurfaceRepresentationToViewport","surfaceInputArray","addSurfaceRepresentationToViewportMap","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","label","cachedStats","rest","normalizedSegment","geometryId","geometry","getGeometry","normalizeContourSegments","surfaceData","normalizeSurfaceSegments","normalizeSegments","addSegmentations","suppressEvents","setColorLUT","colorLUTsIndex","segmentationRepresentation","getSegmentIndexColor","colorValue","setSegmentIndexColor","colorReference","getActiveSegmentIndex","activeSegmentIndex","getSegmentations","viewportSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","computeStackLabelmapFromVolume","convertVolumeToStackLabelmap","computeVolumeLabelmapFromStack","args","getActorEntry","filterFn","filteredActors","getLabelmapActorUID","getLabelmapActorEntry","getLabelmapActorEntries","getActorEntries","startsWith","getSurfaceActorEntry","getSurfaceRepresentationUID","updateSegmentations","segmentationUpdateArray","segmentationUpdate","visibility","setSegmentIndexVisibility","getSegmentIndexVisibility","getHiddenSegmentIndices","reduce","acc","getStyle","setStyle","renderInactiveSegmentations","getRenderInactiveSegmentations","resetToGlobalStyle","hasCustomStyle","getAnnotationMapFromSegmentation","contourRepresentationData","annotationMap","segmentIndices","annotationUIDsInSegmentMap","annotationUIDsInSegment","hasChildAnnotations","childPolylinesInformation","isClosed","closed","holesClosed","childInfo","childPolylines","holesPolyline","holesUIDs","closePolyline","lastPoint","extractSegmentPolylines","polyLinesMap","polylines","annotationsInfo","annotationInfo","getPolylinesMap","polylinesCanvasMap","convertContourPolylineToCanvasSpace","decimateContours","epsilon","polylineCanvas","decimatedPolyline2D","decimate","point2D","canvasToWorld","removeCompleteContourAnnotation","removeContourHoles","holeDetectionResults","findContourHoles","hole","holeIndexes","removeContourIslands","threshold","islands","findIslands","smoothContours","knotsRatioPercentage","smoothedPolyline","interpolateSegmentPoints","convertContourHoles","targetSegmentationId","targetSegmentationIndex","annotationsUIDsSet","targetUIDsSet","targetSegmentation","clearSegmentValue","setAtIndex","triggerSegmentationDataModified","removeSegment","setNextSegmentAsActive","isThisSegmentActive","updatedSegments","sort","a","b","currentIndex","nextSegmentIndex","previousSegmentIndex","setActiveSegmentIndex","helpers","convertStackToVolumeLabelmap","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","segmentKeys","firstSegmentIndex","k","colorLUTOrIndex","JSON","parse","stringify","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegmentIndices","parseInt","getAnnotationsUIDMapFromSegmentation","getViewportsAssociatedToSegmentation","getViewportAssociatedToSegmentation","getViewportWithMatchingViewPlaneNormal","dotThreshold","annotationViewPlaneNormal","viewPlaneNormal","normalizedAnnotationNormal","camera","getCamera","normalizedCameraNormal","dotProduct","_getViewportIndex","arr","ar","_containsViewport","synchronizerId","eventName","eventHandler","_viewportOptions","_onEvent","_ignoreFiredEvents","_targetViewports","_eventSource","currentTarget","_sourceViewports","s","fireEvent","_enabled","_eventName","_eventHandler","_options","eventSource","_auxiliaryEvents","auxiliaryEvents","isDisabled","_hasSourceElements","setOptions","setEnabled","enabled","getOptions","addTarget","addSource","source","_updateDisableHandlers","getSourceViewports","getTargetViewports","removeSource","removeTarget","getViewportElement","hasSourceViewport","hasTargetViewport","sourceViewport","sourceEvent","promises","targetViewport","ex","vp1","vp2","unique","vps","concat","u","_getUniqueViewports","_remove","disableHandler","getEventSource","synchronizers","sync","synchronizer","pop","synchronizerIndex","synchronizersFilteredByIds","notDisabled","Disabled","PRIMARY_BINDINGS","mouseButton","MouseBindings","Primary","ToolGroup","toolOptions","currentActivePrimaryToolName","prevActivePrimaryToolName","restoreToolOptions","_toolInstances","getViewportIds","getViewportsInfo","getToolInstance","toolInstanceName","toolInstance","getToolInstances","configuration","toolDefinition","hasToolName","localToolInstance","toolClass","ToolClass","instantiatedTool","addToolInstance","parentClassName","ToolClassToUse","ParentClass","ToolInstance","addViewport","renderingEngineUIDToUse","_findRenderingEngine","vpId","getActivePrimaryMouseButtonTool","setViewportsCursorByToolName","TOOLGROUP_VIEWPORT_ADDED","removeViewports","indices","vpInfo","TOOLGROUP_VIEWPORT_REMOVED","setActiveStrategy","strategyName","setToolMode","setToolDisabled","setToolEnabled","setToolActive","toolBindingsOptions","bindings","binding","TouchBinding","numTouchPoints","MouseBinding","obj","hasSameBinding","_hasMousePrimaryButtonBinding","_setCursorForViewports","onSetToolActive","_renderViewports","TOOL_ACTIVATED","_triggerToolModeChangedEvent","prevToolOptions","matchBindings","removeAllBindings","getDefaultPrimaryBindings","matchBinding","onSetToolPassive","onSetToolEnabled","onSetToolDisabled","toolOptionsForTool","_getCursor","Settings","getRuntimeSettings","setToolConfiguration","overwrite","_configuration","onSetToolConfiguration","getDefaultMousePrimary","getToolConfiguration","configurationPath","getPrevActivePrimaryToolName","setActivePrimaryTool","activeToolName","getCurrentActivePrimaryToolName","clone","newToolGroupId","fnToolFilter","sourceToolInstance","sourceToolOptions","sourceToolMode","primaryBindings","primary","TOOL_MODE_CHANGED","renderingEngines","matchingEngines","engine","binding1","binding2","modifierKey","tg","toolGroupIndex","svgLayer","svgLayerId","classList","pointerEvents","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","viewportUid","renderingEngineUid","dataset","elementHash","svgNodeCache","_setSvgNodeCache","enabledElements","hasToolByName","removeTool","cancelActiveManipulations","toolsWithData","cancel","VIEWPORT_ELEMENT","_removeViewportFromSynchronizers","_removeViewportFromToolGroup","_removeEnabledElement","foundElementIndex","el","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","defaultState","isInteractingWithTool","isMultiPartToolActive","resetCornerstoneToolsState","resetSvgNodeCache","areViewportsCoplanar","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","setCamera","getSpatialRegistration","targetId","sourceId","imageSliceSyncCallback","sViewport","disabled","imageId1","sourceImagePositionPatient","metaData","imagePositionPatient","targetImageIds","registrationMatrixMat4","getFrameOfReferenceUID","useInitialPosition","targetImagePositionPatientWithRegistrationMatrix","closestImageIdIndex2","targetPoint","closestImageIdIndex","distance","Infinity","imageIndexToSet","getCurrentImageIdIndex","imageIndex","presentationViewSyncCallback","_synchronizerInstance","_sourceEvent","presentationView","getViewPresentation","setViewPresentation","slabThicknessSyncCallback","slabThickness","getSlabThickness","setSlabThickness","voiSyncCallback","modifiedEvent","range","invertStateChanged","invert","colormap","tProperties","voiRange","syncInvertState","syncColormap","_actors","setProperties","zoomPanSyncCallback","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createStackImageSynchronizer","createCameraPositionSynchronizer","synchronizerName","createSynchronizer","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","createImageSliceSynchronizer","createPresentationViewSynchronizer","viewPresentation","createVOISynchronizer","VOI_MODIFIED","COLORMAP_MODIFIED","createZoomPanSynchronizer","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","CONSTANTS","AdvancedMagnifyTool","Actions","toolProps","defaultToolProps","supportedInteractionTypes","magnifyingGlass","radius","zoomFactor","zoomFactorList","autoPan","actions","showZoomFactorsList","method","Secondary","KeyboardBindings","Shift","addNewAnnotation","currentPoints","worldPos","world","canvasPos","canvas","canvasHandlePoints","_getCanvasHandlePoints","viewUp","getReferencedImageId","magnifyViewportId","getToolName","sourceViewportId","isCanvasAnnotation","handles","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","delta","len","viewportIdsToRender","getViewportIdsWithToolToRender","preventDefault","dispose","isPointNearTool","canvasCoords","proximity","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","toolSelectedCallback","editData","_activateModify","handleSelectedCallback","handleIndex","p","_endCallback","newAnnotation","_deactivateModify","isDrawing","_dragDrawCallback","deltaPoints","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","renderStatus","filteredAnnotations","filterInteractableAnnotationsForElement","activeHandleCanvasCoords","drawHandles","circleUID","drawCircle","magnifyViewport","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","canvasPoint","viewportElement","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","focus","onChangeCallback","createElement","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","stackActorReInitialized","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","_resizeViewport","_syncViewports","disableElement","parentNode","magnifyToolGroup","_inheritBorderRadius","magnifyElement","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","parallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","_cloneStack","setStack","_cloneVolumes","volumeInputArray","setVolumes","_cloneViewport","sourceViewportOptions","viewportInput","defaultOptions","enableElement","_cancelMouseEventCallback","target","closest","canvasCurrent","magnifyRadius","dist","distanceToPoint","maxDist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","newPosition","_addBrowserEventListeners","_removeBrowserEventListeners","sourceCanvas","_syncViewportsCameras","focalPoint","sqrt","pow","updatedFocalPoint","updatedPosition","_syncStackViewports","setImageIdIndex","sourceProperties","getProperties","getImageData","resize","AnnotationEraserTool","preMouseDownCallback","_deleteNearbyAnnotations","preTouchStartCallback","interactionType","annotationsToRemove","interactableAnnotations","createAnnotationMemo","deleting","RENDERING_DEFAULTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","viewportIndicatorsConfig","panSize","enableHDPIHandles","referenceLinesCenterGapRadius","referenceLinesCenterGapRatio","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","mobile","toolCenter","initializeViewport","_getAnnotations","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","normal","clientWidth","clientHeight","_getViewportsInfo","getToolGroup","resetCrosshairs","resetPan","resetZoom","resetToCenter","resetRotation","resetCamera","resetSlabThickness","_computeToolCenter","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","firstPlane","secondPlane","thirdPlane","setToolCenter","jumpWorld","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_pointNearTool","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","_autoPanViewportIfNecessary","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","worldToCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","mobileConfig","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","buildFromDegree","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","devicePixelRatio","handleUID","referenceColorCoordinates","xOffset","yOffset","circleRadius","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","viewportsAnnotationsToUpdate","sameScene","_applyDeltaShiftToSelectedViewportCameras","_dragCallback","dir1","dir2","centerCanvas","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","translate","otherViewportsIds","renderViewports","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","lastPoints","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","pan","visiblePointCanvas","visiblePointWorld","deltaPointsWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","c","_applyDeltaShiftToViewportCamera","newFocalPoint","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","getVolumeId","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","jumpToWorld","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","_activateDraw","viewportProperties","rotation","originalViewportRotation","magnifyToolElement","STACK","_dragEndCallback","_deactivateDraw","getTargetId","split","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","resolution","AXES","CUSTOM","polyDataURL","_resizeObservers","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","subscribeToElementResize","resizeObserver","ResizeObserver","setTimeout","observe","getOffscreenMultiRenderWindow","getRenderWindow","filterViewportsWithToolEnabled","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","polyData","shallowCopy","getOutputData","setActiveScalars","mapper","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","EPSILON","OverlayGridTool","A","sourceImageIds","_init","imagePlaneModule","pointSets","calculateImageIdPointSets","viewportData","rows","columns","rowCosines","columnCosines","rowPixelSpacing","columnPixelSpacing","pointSet1","pointSet2","imageIdNormal","getImageIdNormal","isParallel","targetViewportPlane","targetData","initializeViewportData","pointSetsToUse","pointSetToUse","topBottomVec","isPerpendicular","lineStartsWorld","lineEndsWorld","lineStartWorld","lineEndWorld","vec1","vec2","dot","imageOrientationPatient","rowCosineVec","colCosineVec","PanTool","touchDragCallback","mouseDragCallback","PlanarRotateTool","mouseWheelCallback","wheel","setAngle","startPoints","currentPointWorld","startPointWorld","centerWorld","v1","v2","cross","rotAngle","rotMat","Float32Array","rotatedViewUp","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","e","crosshairUIDs","upper","lower","centerSpace","lineLength","plane","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","ReferenceLines","enforceSameFrameOfReference","showFullDimension","sourceViewportCanvasCornersInWorld","sourceViewPlaneNormal","topRightVec","newNormal","handleFullDimension","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","indexToWorld","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","offset","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","updateCursorSize","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","dragCallback","sculpt","registerShapes","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mouseCanvasPoint","deltaWorld","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertIndex","insertHandleRadially","last","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","canvasPoints","toolIndex","distanceFromTool","renderShape","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","polyLineUID","actorWorldPointsMap","polyDataUtils","colorArray","colorComponentToString","component","componentString","floor","colorToString","getProperty","getColor","StackScrollTool","debounceIfNotLoaded","loop","deltaY","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","debounceLoading","scrollSlabs","numberOfSlices","getNumberOfSlices","offsetHeight","TrackballRotateTool","rotateIncrementDegrees","rotateSampleDistanceFactor","_hasResolutionChanged","getDefaultActor","originalSampleDistance","getSampleDistance","setSampleDistance","cleanUp","once","_viewportAddedListener","disconnect","rotateCamera","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPointsCanvas","lastPointsCanvas","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","angleX","acos","sign","upVec","atV","rightV","forwardV","angleY","VolumeCroppingControlTool","extendReferenceLines","initialCropFactor","lineColors","AXIAL","CORONAL","SAGITTAL","UNKNOWN","lineWidthActive","_virtualAnnotations","sphereStates","draggingSphereIndex","toolCenterMin","toolCenterMax","_updateToolCentersFromViewport","orientation","_getOrientationFromNormal","resetCroppingSpheres","orientationIds","presentOrientations","Boolean","missingOrientation","presentNormals","presentCenters","presentViewportInfos","virtualNormal","virtualCenter","virtualAnnotation","isVirtual","presentOrientation","presentCenter","canonicalNormals","virtualAnnotations","lineIntersection2D","p1","p2","q1","q2","s1_x","s1_y","s2_x","s2_y","denom","volumeCroppingCenterCanvasMin","volumeCroppingCenterCanvasMax","realViewports","refLinesCenterMin","refLinePointMinOne","refLinePointMinTwo","refLinesCenterMax","refLinePointMaxOne","refLinePointMaxTwo","intersections","otherLine","intersection","with","annotationForViewport","String","idUpper","colorArr","unknown","v","activeLineWidth","sortedIntersections","_onSphereMoved","originalClippingPlanes","_syncWithVolumeCroppingTool","seriesInstanceUID","newMin","newMax","idx","volumeActors","VOLUMECROPPINGCONTROL_TOOL_CHANGED","VOLUME_3D","activeType","handleType","viewportOrientation","VOLUMECROPPING_TOOL_CHANGED","getSpacing","getOrigin","cropFactor","maxCropFactor","cropStart","cropEnd","onSetToolInactive","anyAnnotationExists","canonical","tol","planes","start1","end1","PLANEINDEX","SPHEREINDEX","XMIN","XMAX","YMIN","YMAX","ZMIN","ZMAX","XMIN_YMIN_ZMIN","XMIN_YMIN_ZMAX","XMIN_YMAX_ZMIN","XMIN_YMAX_ZMAX","XMAX_YMIN_ZMIN","XMAX_YMIN_ZMAX","XMAX_YMAX_ZMIN","XMAX_YMAX_ZMAX","VolumeCroppingTool","showCornerSpheres","showHandles","showClippingPlanes","sphereColors","CORNERS","sphereRadius","grabSpherePixelDistance","cornerDragOffset","faceDragOffset","edgeLines","_updateClippingPlanes","mouseCanvas","sphereCanvas","sphereState","mouseWorld","isCorner","axisIdx","z","viewport3D","_updateCornerSpheres","_updateFaceSpheresFromCorners","_updateClippingPlanesFromFaceSpheres","_onMouseMoveSphere","_getViewportAndWorldCoords","newCorner","_calculateNewCornerPosition","_updateSpherePosition","axisFlags","_parseCornerKey","_updateRelatedCorners","sphereSource","setCenter","_updateCornerSpheresFromFaces","_triggerToolChangedEvent","_onControlToolChange","_getViewport","isMin","normals","planeIndices","sphereIndices","orientationAxes","newCenter","sphereActor","setColor","volumeActor","clippingPlanes","getClippingPlanes","_initialize3DViewports","worldBounds","getBounds","xRange","yRange","zRange","xMin","xMax","yMin","yMax","zMin","zMax","planeXmin","planeXmax","planeYmin","planeYmax","planeZmin","planeZmax","originalPlanes","getNormal","sphereXminPoint","sphereXmaxPoint","sphereYminPoint","sphereYmaxPoint","sphereZminPoint","sphereZmaxPoint","adaptiveRadius","_calculateAdaptiveSphereRadius","_addSphere","corners","cornerKeys","key1","key2","state1","state2","_addLine3DBetweenPoints","addClippingPlane","_handleCornerSphereMovement","_updateAfterCornerMovement","_handleFaceSphereMovement","_updateAfterFaceMovement","cornerKey","isXMin","isXMax","isYMin","isYMax","isZMin","isZMax","draggedSphere","_shouldUpdateCorner","_updateCornerCoordinates","_rotateCamera","setHandlesVisible","setClippingPlanesVisible","_updateHandlesVisibility","getHandlesVisible","getClippingPlanesVisible","normalizedCenter","_missingActorWarned","getMatrix","removeAllClippingPlanes","rot","normalMatrix","transformedOrigins","transformedNormals","oVec","o","nVec","n","planeInstance","setVisibility","setNumberOfPoints","setPoint","lines","setPoints","setLines","setLineWidth","setOpacity","setInterpolationToFlat","setAmbient","setDiffuse","setSpecular","addActor","setRadius","sphereMapper","setInputConnection","getOutputPort","diagonal","sphereRadiusScale","minRadius","minSphereRadius","maxRadius","maxSphereRadius","pos","corner","xs","ys","zs","getPoints","DIRECTIONS","VolumeRotateTool","cz","ax","ay","az","WindowLevelRegionTool","minWindowWidth","applyWindowLevelRegion","bottomLeftCanvas","topRightCanvas","bottomRightCanvas","topLeftCanvas","bottomRightWorld","topLeftWorld","getAnnotationStyle","drawRect","windowLevel","startCanvas","endCanvas","pixelLuminanceData","minMaxMean","minPixelValue","maxPixelValue","windowWidth","windowCenter","mean","voiLutFunction","VOILUTFunction","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","scalarData","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint8Array","Uint16Array","Int16Array","frame","buffer","_getMinMax","modality","newRange","viewportsContainingVolumeUID","isPreScaled","properties","volume","Modality","scaling","preScale","scaled","scalingParameters","suvbw","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","imageDynamicRange","imageVolume","calculatedDynamicRange","getMiddleSliceData","pixel","BitsStored","metadataDynamicRange","_getImageDynamicRangeFromViewport","ratio","getRange","imageDataRange","getScalars","getData","voxel","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","initialMousePosWorld","dirVec","_dragParallelProjection","pinch","deltaDistance","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","imageWidth","imageHeight","canvasAspect","displayArea","scaledImageWidth","imageArea","scaledImageHeight","minParallelScaleRequired","minScaleInWorld","maxScaleInWorld","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","_zoom","currentPointsList","parallelProjection","_panCallback","eventDetails","page","client","AngleTool","showAngleArc","arcOffset","getTextLines","defaultGetTextLines","angleStartedNotYetCompleted","getViewReference","movingTextBox","canvasPoint1","canvasPoint2","line1","canvasPoint3","line2","doneEditMemo","createMemo","worldPosDelta","_throttledCalculateCachedStats","_calculateCachedStats","anglePoints","temp","getLinkedTextBoxStyle","canvasTextBoxCoords","textBoxPosition","textBoxUID","boundingBox","drawLinkedTextBox","trailing","hydrate","instance","hydrateBase","serializableOptions","worldPos1","worldPos2","worldPos3","targetIds","StatsUpdated","cachedVolumeStats","fromCharCode","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","arrowHeadStyle","memo","setAnnotationLabel","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","stopImmediatePropagation","updatedText","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","transformWorldToIndex","BidirectionalTool","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","dx","dy","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","unit","dataId1","dataId2","secondLineUID","getTextBoxCoordsCanvas","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","image","index3","index4","handles1","handles2","scale","scale1","units1","scale2","units2","dist1","_calculateLength","dist2","widthUnit","vector1","vector2","majorAxis","minorAxis","major0","major1","minor0","minor1","pos1","pos2","dz","CircleROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","simplified","canvasHandles","radiusCanvas","newRadiusCanvas","canvasCorners","getCanvasCircleCorners","areaUnit","getStackViewports","referencedImageURI","hasImageURI","currentImageURI","area","stdDev","radiusUnit","perimeter","wasInvalidated","pos1Index","pos2Index","boundsIJK","xRadius","yRadius","zRadius","ellipseObj","worldWidth","worldHeight","isEmptyArea","aspect","pixelUnitsOptions","isSuvScaled","modalityUnit","pointsInShape","statsCallback","isInObject","pointLPS","pointInEllipse","fast","returnPoints","stats","getStatistics","statsArray","array","radiusLine","areaLine","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","_mouseDownCallback","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","mid1","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","DragProbeTool","postMouseDownCallback","postTouchStartCallback","ETDRSGridTool","degrees","diameters","dXCanvas","dYCanvas","canvasEnd","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","measurement","p1Canvas","p2Canvas","EllipticalROITool","initialRotation","getRotation","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","newHalfCanvasWidth","canvasRight","newHalfCanvasHeight","getCanvasEllipseCorners","centerPoint","_getCanvasEllipseCenter","post2Index","ellipse","rotLocation","normalized","ellipseCanvasPoints","HeightTool","_calculateHeight","outside","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","createAnnotationForViewport","eventDispatchDetail","it","LabelTool","textGroupElement","bbox","translateX","translateY","matches","initialWorldPos","anchorWorldPos","LabelChange","LengthTool","undo","redo","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","setupBaseEditData","scissors","nearestEdge","repeatInterpolation","interpolation","originalPoints","worldToSlice","sliceToWorld","handleSmoothing","hIndex","testPoint","startSearch","findPathToPoint","minPoint","findMinNearby","acceptedPath","path","addPoints","updateAnnotation","scissorsNext","InterpolationUpdated","renderAnnotationInstance","renderContext","showInterpolationPolyline","polylineCanvasPoints","isContourSegmentationTool","LivewireContourTool","contourHoleAdditionModifierKey","snapHandleNearby","cancelInProgress","proximitySquared","startPoint","endPoint","clearAnnotation","clearEditData","Completed","triggerChangeEvent","doubleClick","worldPosOriginal","controlPoints","currentPath","getControlPoints","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","pathPoints","prependPath","confirmedPath","getLastPoint","addControlPoint","_mouseMoveCallback","lastCanvasPoint","imgWidth","imgHeight","slicePoint","editHandle","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","getCalibratedLengthUnitsAndScale","maxX","canvasMaxX","maxY","canvasMaxY","minX","canvasMinX","minY","canvasMinY","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","_renderStats","textboxStyle","throttle","nextPos","viewportImageData","vtkImageData","sliceImageData","sliceToIndexMatrix","indexToSliceMatrix","ijkPoint","startPos","createInstanceFromRawPixelData","currentPathNext","confirmedPathNext","createAnnotation","event","handlePoints","numHandles","previousHandle","nextHandle","slicePos","pathPointsLeft","pathPointsRight","reverse","appendPath","contourSegmentationAnnotation","annotationStyle","textbox","livewirePath","pointArray","imagePoints","targetWindingDirection","Clockwise","updateContourPolyline","ProbeTool","probeDefaults","textCanvasOffset","mergeDefaultProps","ijk","getAtIJKPoint","imageURI","calibratedResults","hasEnhancedRegionValues","units","RegionSegmentPlusTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","worldPoint","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","growCutData","referencedVolumeId","seeds","positiveSeedIndices","negativeSeedIndices","worldIslandPoints","runGrowCut","getRemoveIslandData","getGrowCutLabelmap","mergedOptions","growCut","RegionSegmentTool","currentWorldPoint","circleBorderPoint","circleCenterPoint","sphereInfo","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","SplineContourSegmentationTool","annotationCutMergeCompletedBinded","annotationCutMergeCompleted","initializeListeners","removeListeners","splineToolNames","simplifiedSpline","convertContourSegmentationAnnotation","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","SplineTypes","spline","Cardinal","Class","CatmullRom","Linear","BSpline","drawPreviewEnabled","enableTwoPointPreview","lastControlPointDeletionKeys","AddControlPoint","DeleteControlPoint","Ctrl","fireChangeOnUpdate","isPointNearCurve","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","closeContour","addNewPoint","closestControlPoint","getClosestControlPointWithinDistance","moveAnnotation","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","getClosestPoint","addControlPointAtU","uValue","deleteControlPointCallback","annotationCompletedBinded","annotationCompleted","cancelAnnotation","annotationLocked","childAnnotations","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","getPolylinePoints","updateWindingDirection","numControlPoints","previewPolylinePoints","getPreviewPolylinePoints","controlPointsConnectors","createInterpolatedSplineControl","increment","isSplineAnnotation","createSplineObjectFromType","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","setControlPoints","fixedResolution","fixedScale","splineInstance","SplineClass","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","lineSegment","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","values2","transformIndexToWorld","UltrasoundPleuraBLineTool","USPleuraBLineAnnotationType","BLINE","PLEURA","bLineColor","pleuraColor","drawDepthGuide","depth_ratio","depthGuideColor","depthGuideThickness","depthGuideDashLength","depthGuideDashGap","depthGuideOpacity","fanOpacity","showFanAnnotations","updatePercentageCallback","pleuraAnnotations","bLineAnnotations","annotationType","getActiveAnnotationType","newPoint","isInsideFanShape","getFanShapeGeometryParameters","fanCenter","indexToCanvasRatio","getIndexToCanvasRatio","unMergedPleuraIntervals","mergedPleuraIntervals","pleuraIntervalsDisplayed","bLineIntervalsDisplayed","drawAnnotation","getColorForLineType","lineInterval","fanNumber","interval","clippedInterval","fanDataId","drawFan","calculateBLinePleuraPercentage","activeAnnotationType","filterAnnotations","filterFunction","countAnnotations","getImageIdIndex","annotationMapping","counts","bLine","pleura","deleteAnnotations","setActiveAnnotationType","deleteLastAnnotationType","annotationList","updateFanGeometryConfiguration","fanGeometry","isFanShapeGeometryParametersValid","deriveFanGeometryFromViewport","calculateFanGeometry","pleuraIntervals","bLineIntervals","diffVector","radToDegree","rad","degreeToRad","indexToCanvas","depth_radius","theta_start","theta_range","arc_length","num_dashes","theta_step","theta1","theta2","start_point","end_point","calculateFanShapeCorners","imageBuffer","hull","roughContour","rough","slack","next","walk","to","i2","i3","P2","P3","pathA","pathB","globalYmin","upperPath","topY","arcPts","P1","best","P4","pickPoints","refined","edgeBuf","opts","directions","snapQuadrant","pt","xmin","xmax","ymin","ymax","xi","yi","xAlign","yAlign","refineCornersDirectional","step","angleRad","deriveFanGeometry","params","centerResult","intersectLine","tempAngle","d1","d4","d2","d3","exportContourJpeg","pixelData","strokeStyle","quality","ctx","getContext","totalPixels","channels","imgData","createImageData","out","baseIn","baseOut","putImageData","beginPath","moveTo","lineTo","toDataURL","getPixelData","saveBinaryData","filename","href","download","body","click","downloadFanJpeg","contourType","jpegDataUrl","fan","startAngleInDegrees","endAngleInDegrees","exportFanJpeg","generateConvexHullFromContour","segmentLargestUSOutlineFromBuffer","channelCount","mask","isForeground","labels","currentLabel","regionSizes","getter","px","py","pixelCount","onFlood","diagonals","floodFill","largestLabel","isBorder","nx","ny","outer","dirs","current","prev","dx0","dy0","startDir","nextPt","bdx","bdy","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","bottomLeftWorld","topRightWorld","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldPos1Index","worldPos2Index","worldToIndexVec3","iMin","iMax","jMin","jMax","kMin","kMax","yMultiple","zMultiple","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","substring","_getTargetStackUID","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","linePoints","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","referencedVolume","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkTopLeft","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","getCompleteScalarDataArray","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","TRANSFORM_MATRIX","getTransformMatrix","CardinalSpline","props","_scale","_fixedScale","s2","CatmullRomSpline","CubicSpline","getPreviewCurveSegments","controlPointPreview","closeSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","curveSegments","curveSegment","_getCurveSegment","getSplineCurves","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","curveSegmentIndex","p0","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","_getLineSegments","numLineSegments","inc","maxU","lineSegments","previousLineSegmentsLength","aabb","curveSegmentLength","lineSegAABB","lineSegLength","LinearSpline","QuadraticBezier","hasTangentPoints","QuadraticSpline","getLineSegments","Spline","_controlPoints","_invalidated","_length","_resolution","_fixedResolution","_closed","_update","_aabb","addControlPoints","_getLineSegmentAt","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","updateControlPoint","newControlPoint","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","squaredDist","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","getClosestPointOnControlPointLines","_convertCurveSegmentsToPolyline","closeDistance","previewCurveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","isVerticalLine","xIntersection","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","AnnotationDisplayTool","arguments","frameOfReference","viewReference","DefaultHistoryMemo","BaseTool","defaults","strategies","defaultStrategy","activeStrategy","strategyOptions","mergedDefaults","initialProps","defaultProps","additionalProps","applyActiveStrategy","operationData","call","applyActiveStrategyCallback","callbackType","extraArgs","setConfiguration","newConfiguration","getViewReferenceId","createZoomPanMemo","zoom","zoomPanMemo","restoreMemo","currentPan","currentZoom","commitMemo","startGroupRecording","endGroupRecording","polySegConversionInProgressForViewportId","processedViewportSegmentations","contourRepresentation","canComputeRequestedRepresentation","computeContourData","hasContourDataButNotMatchingViewport","viewportNormal","uidSet","randomAnnotationUIDs","annotationNormal","_checkContourNormalsMatchViewport","validGeometry","geometryData","contours","_checkContourGeometryMatchViewport","viewportProcessed","viewportStatus","RENDERED","computeSurfaceData","pointsAndPolys","polys","polyDataCache","clipAndCacheSurfacesForViewport","rawResults","extractContourData","createAndAddContourSegmentationsFromClippedSurfaces","renderImmediate","labelMapConfigCache","polySegConversionInProgress","_setLabelmapColorAndOpacity","labelmapActorEntry","activeSegmentation","isActiveLabelmap","labelmapStyle","numColors","outlineWidth","renderOutline","outlineOpacity","activeSegmentOutlineWidthDelta","_getLabelmapConfig","segmentsHidden","segmentColor","segmentSpecificLabelmapConfig","fillAlpha","renderFill","forceOpacityUpdate","forceColorUpdate","_needsTransferFunctionUpdate","addRGBPoint","segmentOpacity","removePoint","addPointLong","setClamping","labelmapActor","preLoad","setRGBTransferFunction","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","outlineWidths","setLabelOutlineThickness","labelmapConfig","segmentsLabelmapConfig","configToUse","fillAlphaInactive","outlineWidthInactive","renderFillInactive","renderOutlineInactive","outlineOpacityInactive","cacheUID","oldConfig","cfunMTime","getMTime","ofunMTime","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","oldCfunMTime","oldOfunMTime","_addLabelmapToViewport","labelmapActorEntries","computeLabelmapData","SurfaceData","updateSurfaceData","surfaces","isHidden","surface","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","_editData","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","segmentationVoxelManager","Preview","OnInteractionEnd","acceptPreview","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","toolMetadata","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","circleUID1","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","throttleTimeout","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","handlesToStart","startWorld","endWorld","indexOfNormal","handlePoint","newProjectionPoints","pointsInsideVolume","baseTopLeftCanvas","baseBottomRightCanvas","basePos1","basePos2","measureInfo","modalityUnitOptions","currentCanvasCoordinates","worldProjectionPointIndex","indexOfProjection","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","_context","CircleScissorsTool","FILL_INSIDE","ERASE_INSIDE","activeLabelmapSegmentation","segmentsLocked","segmentLocking","segmentationImageId","LabelMapEditWithContourTool","annotationsToViewportMap","viewportIdsChecked","allowOpenContours","onViewportAddedToToolGroupBinded","onViewportAddedToToolGroup","onSegmentationModifiedBinded","onSegmentationModified","annotationModified","cleanUpListeners","checkContourSegmentation","activeSeg","viewportContoursToLabelmap","isEqual","PaintFillTool","activeSegmentationRepresentation","currentSegmentationImageId","getDirection","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","framesModified","getFramesModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","toIndex","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","RectangleROIStartEndThresholdTool","projectionPointsImageIds","indexOfDirection","roundedStartCoord","roundedEndCoord","coord","roundedCoord","firstOrLastSlice","startIJK","endIJK","indexToWorldVec3","projectionAxisIndex","habdles","projectionPoint","RectangleROIThresholdTool","RectangleScissorsTool","SegmentBidirectionalTool","existingAnnotation","SegmentLabelTool","hoverTimeout","searchRadius","hoverTimer","_setHoveredSegment","_setHoveredSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","hoveredSegmentLabel","SegmentSelectTool","SelectMode","Inside","Border","_setActiveSegment","_setActiveSegmentForType","getSegmentIndexAtLabelmapBorder","getHoveredContourSegmentationAnnotation","SphereScissorsTool","getEditData","EnsureImageVolumeFor3DManipulation","referencedImageIds","imageVoxelManager","EnsureSegmentationVolumeFor3DManipulation","segImageIds","segVolume","getEllipseCornersFromCanvasCoordinates","initializeCircle","Initialize","centerIJK","cornersInWorld","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","majorAxisVec","minorAxisVec","sphereObj","radius2","pointVec","distToPlane","proj","fromTopLeft","centerToTopLeft","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","fillInsideCircle","strategyFunction","thresholdInsideCircle","fillOutsideCircle","initializeRectangle","pointInShapeFn","rectangleCornersIJK","axisU","axisV","uLen","vLen","EPS","vproj","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","thresholdInsideRectangle","getStrategyData","CustomEvent","ERROR_EVENT","message","cancelable","dispatchEvent","segmentationScalarData","imageScalarData","getStrategyDataForVolumeViewport","ensureSegmentationVolumeFor3DManipulation","currentSegImage","ensureImageVolumeFor3DManipulation","getStrategyDataForStackViewport","ContourWindingDirection","AnnotationMultiSlice","setStartRange","startRange","setRange","setEndRange","endRange","rangeEndSliceIndex","getSliceIndexForImage","multiSliceReference","MetadataReferenceModified","setViewportFrameRange","setSingle","getFrameRange","getFrameRangeStr","setFrameRange","annotationHydration","worldPoints","getClosestImageIdForStackViewport","getClassName","getTargetVolumeId","distanceImagePairs","ImagePositionPatient","dir","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","calculateBoundingBox","isWorld","is3D","getBoundingBoxAroundShapeWorld","clipBounds","calibratedPixelSpacingMetadataProvider","calibrateImageSpacing","calibrationOrScale","USER","calibrateSpacing","ViewportStatus","debounced","dynamicVolumesPlayingMap","playClip","playClipOptions","playClipTimeouts","playClipIsTimeVarying","dynamicCineEnabled","playClipContext","waitForRendered","numScrollSteps","currentStepIndex","getTargetImageIdIndex","frameTimeVectorEnabled","waitForRenderedCount","scroll","_createStackViewportCinePlayContext","_getVolumeFromViewport","isDynamicVolume","numDimensionGroups","dimensionGroupNumber","_createDynamicVolumeViewportCinePlayContext","cachedScrollInfo","scrollInfo","getScrollInfo","volumeViewPlaneNormal","_createVolumeViewportCinePlayContext","VideoViewport","getSliceIndex","play","fps","setPlaybackRate","getFrameRate","_createVideoViewportCinePlayContext","_createCinePlayContext","playClipData","isDynamicCinePlaying","_stopDynamicVolumeCine","_stopClip","stopDynamicCine","intervalId","framesPerSecond","lastFrameTimeStamp","ignoreFrameTimeVector","usingFrameTimeVector","frameTimeVector","speed","frameTimeVectorSpeedMultiplier","bounce","timeouts","isTimeVarying","vector","sample","delay","sum","limit","_getPlayClipTimeouts","playClipAction","newStepIndex","CLIP_STOPPED","_stopClipWithData","playClipTimeoutHandler","setInterval","CLIP_STARTED","stopClip","toolState","pause","dynamicCineElement","clearInterval","dynamicVolumeId","addToolState","getToolState","getToolStateByViewportId","addContourSegmentationAnnotation","firstAnnotation","secondAnnotation","firstSegmentation","secondSegmentation","areViewReferencesEqual","contourSegmentationOperation","sourceAnnotationOrUID","targetAnnotationOrUID","getViewportFromAnnotation","intersectionInfo","hasIntersection","copyAnnotation","copyContourSegment","targetSegmentIndex","targetAnnotationUIDsMap","copyContourAnnotation","newAnnotationsUID","newChildAnnotation","findAllIntersectingContours","sourceAABB","targetAABB","lineSegmentsIntersect","projectedPolyline","getViewReferenceFromAnnotation","bounds","DEFAULT_CONTOUR_SEG_TOOL_NAME","endPointWorld","originalToolName","interpolationUID","interpolationCompleted","DEFAULT_CONTOUR_SEG_TOOLNAME","LogicalOperation","getPolylinesInfoWorld","polylinesInfo","annotationUIDList","applyLogicalOperation","segment1","segment2","operation","polyLinesInfoCanvas1","polyLinesInfoCanvas2","segmentation1","segmentation2","polyLinesInfoWorld1","polyLinesInfoWorld2","extractPolylinesInCanvasSpace","polylinesMerged","Union","Subtract","Intersect","XOR","polyLinesWorld","resultSegment","existingAnnotationUIDs","currentSet","addPolylinesToSegmentation","addSegmentInSegmentation","subtract","intersect","xor","copy","deleteOperation","processMultipleIntersections","holeOperations","mergeOperations","primaryHoleTarget","holeAnnotation","holeContour","holePolylineCanvas","windingDirection","CounterClockwise","createPolylineHole","updateViewportsForAnnotations","allAnnotationsToRemove","allResultPolylines","allHoles","holes","getContourHolesData","sourceStartPoint","shouldMerge","resultPolyline","subtractedPolylines","holeData","baseAnnotation","newAnnotations","createNewAnnotationFromPolyline","parentPolyline","reassignHolesToNewAnnotations","processSequentialIntersections","updatedToolNames","intersectPolylinesSets","set1","set2","polyA","polyB","intersectionRegions","intersectPolylines","region","subtractPolylineSets","polylinesSetA","polylinesSetB","currentPolylines","polylineB","newPolylines","currentPolyline","subtractedPolyline","cleaned","subtractMultiplePolylineSets","basePolylineSet","subtractorSets","subtractAnnotationPolylines","baseAnnotations","subtractorAnnotations","unifyPolylineSets","processedFromA","processedFromB","polylineA","merged","mergedPolyline","unifyMultiplePolylineSets","polylineSets","unifyAnnotationPolylines","annotationsSetA","annotationsSetB","xorPolylinesSets","allIdentical","foundMatch","TOLERANCE","convertContourPolylineToWorld","checkIntersection","combinePolylines","mergePolylines","contourHolesData","unassignedContourHolesSet","reassignedContourHolesMap","assignHoleToPolyline","newPolyline","contourHolesDataArray","contourHoleData","templateAnnotation","removeDuplicatePoints","cleanupPolylines","validPolylines","seenPolylines","polylineKey","findNextLink","contourPoints","cell","nextLine","remainingLines","findContours","firstCell","extraContours","findContoursFromReducedSet","findHandlePolylineIndex","closestDistance","testIndex","islandIndexes","getSignedArea","getContourHolesDataCanvas","worldHoleContours","canvasHoleContours","worldHoleContour","canvasHoleContour","getContourHolesDataWorld","getDeduplicatedVTKPolyDataPoints","bypass","getLines","pointsArray","getNumberOfPoints","_","getPoint","linesArray","getNumberOfCells","getCell","newPoints","newIndex","areCoplanarContours","firstViewPlaneNormal","secondViewPlaneNormal","firstPolyline","secondPolyline","firstDistance","secondDistance","processContourHoles","useXOR","retContours","closedContours","contourWithHoles","contourWithoutHoles","hContour","outerContour","innerContour","vertices","pointsNotEnclosed","inside","xj","yj","getIsPointInsidePolygon","checkEnclosed","contourHoleSet","holeIndex","isPolygonInsidePolygon","inner","containsPoints","closedPolylines","originalIndex","outerArea","potentialHole","generateContourSetsFromLabelmap","registerComputeWorker","WorkerTypes","GENERATE_CONTOUR_SETS","segVolumeId","getOrCreateSegmentationVolume","vol","segmentationInfo","contourSets","getWebWorkerManager","executeTask","refImages","refImageId","refImageDataMetadata","processedContourSets","contourSet","sliceContours","refImageIndex","imageDataMetadata","scanAxisNormal","FrameNumber","AnnotationToPointData","TOOL_NAMES","convert","metadataProvider","validateAnnotation","ContourSequence","getContourSequence","ReferencedROINumber","ROIDisplayColor","random","register","RectangleROIStartEndThreshold","acceptAutogeneratedInterpolations","selector","InterpolationManager","acceptAutoGenerated","polylineData","transforms","polylineWorldPoints","currentClosedState","lastToFirstDist","updatedWindingDirection","sumOverDimensionGroups","dimensionGroups","arrayLength","getScalarDataLength","resultArray","getDimensionGroupScalarData","operationFunctions","SUM","AVERAGE","sumArray","averageOverDimensionGroups","SUBTRACT","scalarData1","scalarData2","generateImageFromTimeData","dynamicVolume","dimensionGroupNumbers","frameNumbers","operationFunction","updateVolumeFromTimeData","targetVolume","targetVoxelManager","resetModifiedSlices","modifiedSlices","maskVolumeId","worldCoordinate","dataInTime","ijkCoords","maskImageData","segVoxelManager","scalarDataLength","nonZeroVoxelIndices","actualLen","getAtIndex","nonZeroVoxelValuesInTime","isSameVolume","valuesInTime","getAtIndexAndDimensionGroup","toIJK","segPointLPS","segValue","pointIJK","segPointIJK","overlapIJKMinMax","perDimensionGroupSum","averageCallback","averageValues","_getDimensionGroupDataMask","coordinate","worldToIndex","scalarIndex","_getDimensionGroupDataCoordinate","getAnnotationNearPoint","getAnnotationNearPointOnEnabledElement","found","findAnnotationNearPointByTool","currentId","CalibrationTypes","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","calibration","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","ERMF","ERROR","PROJECTION","CALIBRATED","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","getPixelValueUnitsImageId","getPixelValueUnits","generalSeriesModule","petSeriesModule","_handlePTModality","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","row","rowCosine","column","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getEnabledElements","roundNumber","arePolylinesIdentical","poly1","poly2","identicalForward","identicalReverse","cyclicForward","cyclicReverse","numPoint","DEFAULT_EPSILON","epsilonSquared","partitionQueue","polylinePointFlags","numDecimatedPoints","startIndex","endIndex","maxDistIndex","decimatedPolyline","srcIndex","dstIndex","refPoint","aX","aY","bX","numPolylinePoints","distFirstToLastPoints","distanceToPointSquared","findClosestPoint","sourcePoints","minDistance","MAX_SAFE_INTEGER","sourcePoint","_distanceBetween","moveAnnotationToViewPlane","projectedDistance","acquisitionMapping","ijkPrime","fromIJK","jkMapping","ikMapping","normalizeViewportPlane","boundsIJKPrime","mapping","getOrientationStringLPS","orientationX","orientationY","orientationZ","MIN","invertOrientationStringLPS","orientationString","inverted","smoothAnnotation","pointInSurroundingSphereCallback","spacings","maxRadiusIJK","ceil","sphereCornersIJK","getBoundingBoxAroundShape","_computeBoundsIJKWithCamera","_getBounds","createScalarVolumeVoxelManager","pointToString","decimals","idx3","getPolyDataPointIndexes","linesData","segmentSize","findStartingPoint","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","contourIndexes","referenceVolume","AllBoundsIJK","pointsToUse","g","accumulator","axisList","isAxisAlignedRectangle","rectangleVec1","rectangleVec2","calculateAnglesWithAxes","vec","registered","workerManager","computeWorkerConfig","computeWorker","maxWorkerInstances","autoTerminateOnIdle","idleTimeThreshold","registerWorker","Worker","uuidv4","ChangeTypesForInterpolation","toolNames","sliceData","getSliceData","hasInterpolationUID","filterData","parentKey","interpolationAnnotations","skipUIDs","interpolationAnnotation","isInterpolationUpdate","SegmentStatsCalculator","calculators","statsInit","statsData","calculator","volumetricStatsCallback","maxIJKs","dataCopy","volumetricGetStatistics","volumeScale","entry","VolumetricCalculator","volumetricState","optionsWithUnit","InstanceVolumetricCalculator","setBrushSizeForToolGroup","viewportsInfoArray","getBrushSizeForToolGroup","toolInstances","brushToolInstance","setBrushThresholdForToolGroup","getBrushThresholdForToolGroup","computeMetabolicStats","segmentationIds","COMPUTE_STATISTICS","labelmapVolumes","mergedLabelmap","createMergedLabelmapForIndex","referenceImageIds","labelmap","firstImage","volumeInfo","getVolumeContainingImageId","getOrCreateImageVolume","getReferenceVolumeForSegmentation","imageInfo","calculateForVolume","contourAndFindLargestBidirectional","containedSegmentIndices","createBidirectionalToolData","bidirectionalData","VoxelManager","RLEVoxelMap","createLabelmapMemo","createRleMemo","isUndo","undoVoxelManager","redoVoxelManager","useVoxelManager","setAtIJKPoint","slices","getArrayOfModifiedSlices","createRLEHistoryVoxelManager","operationType","copyMap","createRLEVolumeVoxelManager","createLabelmapVolumeForViewport","labelmaps","outputData","cachedVolume","mergedVolume","setCompleteScalarDataArray","findLargestBidirectional","maxBidirectional","isInSegment","sliceContour","bidirectional","createBidirectionalForSlice","currentMax","maxMajor","maxMinor","currentMaxMinor","currentMaxMajor","maxMajorPoints","distance2","testCenter","handle0","handle1","unitMajor","maxMinorPoints","lpad","string","character","seed","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","stack","visits","currentArgs","flood","job","getArgs","prevArgs","previousArgs","visited","iKey","markAsVisited","node","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","generateVolumeId","getReferenceVolumeForSegmentationVolume","segmentationVolumeId","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","isPointInsidePolyline3D","getSegmentIndexAtWorldForContour","getSegmentLargestBidirectional","COMPUTE_LARGEST_BIDIRECTIONAL","segData","reconstructableVolume","calculateVolumeBidirectional","isStack","calculateStackBidirectional","radiusForVol1","updateStatsArray","newStat","existingIndex","stat","processSegmentationStatistics","radiusIJK","testMax","testStats","getSphereStats","peakValue","peakPoint","mtv","suvMean","lesionGlycolysis","imageVoxels","centerLPS","_pointLPS","boundsOrig","finalStats","calculateVolumeStatistics","calculateStackStatistics","getUniqueSegmentIndices","cachedResult","keySet","addImageSegmentIndices","addVolumeSegmentIndices","handleLabelmapSegmentation","handleContourSegmentation","handleSurfaceSegmentation","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","byteLength","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","minZ","maxZ","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolume","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","targetBuffer","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","numPixelsPerSlice","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nz","neighborVoxelIndex","neighborPixelValue","worldVecRowDir","worldVecSliceDir","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","ijkVecRowDir","ijkVecColDir","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","startValue","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerIndex","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","isLineInSegment","ijk1","ijk2","testIJK","testSize","unitDelta","createIsInSegment","createIsInSegmentMetadata","SegmentationEnum","IslandRemoval","fillInternalEdge","maxInternalRemove","initialize","segmentationVoxels","hasSource","sourceVoxelManager","previewVoxelManager","previewSegmentIndex","clickedPoints","getBoundsIJK","bound","depth","segmentSet","fillFrom","oldVal","SEGMENT","normalizer","selectedPoints","floodFillSegmentIsland","floodedCount","clickedPoint","iPrime","jPrime","kPrime","ISLAND","removeExternalIslands","rle","clearPoint","rowModified","removeInternalIslands","forEachRow","baseIndex","lastRle","INTERIOR","rowPrev","getRun","rowNext","isLast","isFirst","prevCovers","covers","nextCovers","EXTERIOR","singlePlane","newType","INTERIOR_TEST","INTERIOR_SMALL","rowRle","thresholdVolumeInformation","validToolNames","_validateAnnotations","outputSegmentationVolume","segmentContourAction","configurationData","getSegment","defaultGetSegment","segmentationsList","bidirectionals","hasExistingActiveSegment","existingLargestBidirectionals","existingBidirectionalItem","newBidirectional","existingLargestBidirectional","updateSegment","bidirectionalToolData","segmentData","segmentationIndex","overlapType","baseVolumeIdx","volumeInfoList","refVoxelManager","volumeSize","_handleSameSizeVolume","overlaps","segScalarDataLength","overlapBounds","callbackOverlap","overlapTest","_handleDifferentSizeVolume","testOverlapRange","voxelSpacing","voxelCenter","testRange","insert","equalsCheck","getVoxelOverlap","halfSpacingX","halfSpacingY","halfSpacingZ","voxelCornersIJK","offsets","xOff","yOff","zOff","processVolumes","segmentationSpacing","segmentIndicesCache","setSegmentationDirty","cached","isDirty","getCachedSegmentIndices","setCachedSegmentIndices","triggerWorkerProgress","workerType","progress","WEB_WORKER_PROGRESS","getSegmentationDataForWorker","refImageIds","prepareVolumeStrategyDataForWorker","prepareStackDataForWorker","segImageId","segImage","segPixelData","refImage","refPixelData","refSpacing","getImageReferenceInfo","cachedImage","scalingModule","validateRepresentationData","segmentationRepresentationData","validatePublic","validate","updatedLabel","imageRetrieveMetadataProvider","resetPrefetchTimeout","maxImagesToPrefetch","minBefore","maxAfter","directionExtraImages","preserveExistingPool","prefetch","stackPrefetchData","stackPrefetch","indicesToRequest","removeFromList","imageIdIndex","indicesToRequestCopy","currentImageIdIndex","getImageLoadObject","isLoaded","imageLoadPoolManager","filterRequests","requestFn","retrieveOptions","IMAGE_RETRIEVE_CONFIGURATION","imageLoader","getCachedImageBasedOnImageURI","decodeTimeInMS","loadTimeInMS","sizeInBytes","getMaxCacheSize","cacheFill","fillTime","fillSize","initialTime","initialSize","updateToolState","doneCallback","requestType","addRequest","onImageUpdated","stackCount","totalBytes","positionFraction","minIndex","maxIndex","promiseRemovedHandler","IMAGE_CACHE_IMAGE_REMOVED","getConfiguration","clearRequestStack","nearest","nextImageIdIndex","lowerIndex","low","higherIndex","high","imageIdsToPrefetch","shouldLoadLower","shouldLoadHigher","indexOfCurrentImage","getDeltaPoints","curr","getMeanPoints","_subtractPoints2D","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaRotation","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","filterViewportsWithFrameOfReferenceUID","numViewports","viewportsWithFrameOfReferenceUID","vpCamera","viewportsWithToolEnabled","_toolGroupHasActiveEnabledOrPassiveTool","toolMode","DEFAULTS","MULTIPLIER","RANGE_TEXT_POSITION","Right","TICKS_BAR_SIZE","Colorbar","_isMouseOver","_isInteracting","_mouseOverCallback","showTicks","_mouseOutCallback","hideTicks","_addVOIEventListeners","initialState","multipliers","getVOIMultipliers","_getPointsFromMouseEvent","startVOIRange","local","voiLower","voiUpper","newVoiRange","_mouseUpCallback","_removeVOIEventListeners","_eventListenersManager","_colormaps","getColormapsMap","_activeColormapName","getInitialColormapName","_canvas","_createCanvas","_ticksBar","_createTicksBar","_rangeTextPosition","ticks","appendTo","rootElement","_addRootElementEventListeners","activeColormapName","colormapName","imageRange","currentVoiRange","onVoiChange","showFullImageRange","showFullPixelValueRange","reset","createRootElement","onContainerResize","updateTicksBar","containerSize","colormaps","items","Name","cm","ticksProps","clientPoint","clientX","clientY","pagePoint","pageX","pageY","getBoundingClientRect","pageXOffset","pageYOffset","containerWidth","containerHeight","ticksBar","rangeTextPosition","ticksBarTop","ticksBarLeft","Top","Left","initialDragState","defaultImageRange","ViewportColorbar","_getImageRange","_getVOIRange","autoHideTicks","_hideTicksTimeoutId","timeLeft","_hideTicksTime","_stackNewImageCallback","_element","_imageVolumeModifiedCallback","_volumeId","_viewportVOIModifiedCallback","showAndAutoHideTicks","_viewportColormapModifiedCallback","_addCornerstoneEventListener","getImageActor","minValue","maxValue","getRGBTransferFunction","ColorbarRangeTextPosition","calculateMinMaxMean","pixelLuminance","globalMin","globalMax","numPixels","spv","extractWindowLevelRegionToolData","extractImageDataVolume","getCornerstoneImage","extractImageDataStack","getLuminanceFromRegion","luminance","spIndex","red","green","blue","version","HASH_UNDEFINED","funcTag","genTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","freeGlobal","freeSelf","self","root","Function","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","getNative","nativeCreate","symbolProto","symbolToString","Hash","ListCache","MapCache","assocIndexOf","eq","baseGet","object","isSymbol","test","isKey","stringToPath","toKey","baseIsNative","isObject","func","pattern","tag","isFunction","isHostObject","toSource","getMapData","__data__","getValue","memoize","baseToString","number","quote","resolver","TypeError","memoized","apply","Cache","other","isObjectLike","exports","defaultValue"],"sourceRoot":""}