{"version":3,"file":"5802.bundle.b234ad98d49a210611ff.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/listComponentGenerator.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/utils.ts","webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopyViewport.tsx"],"sourcesContent":["const listComponentGenerator = props => {\n  const { list, itemGenerator } = props;\n  if (!list) {\n    return;\n  }\n  return list.map(item => {\n    if (!item) {\n      return;\n    }\n    const generator = item.generator || itemGenerator;\n    if (!generator) {\n      throw new Error(`No generator for ${item}`);\n    }\n    return generator({ ...props, item });\n  });\n};\n\nexport default listComponentGenerator;\n","import moment from 'moment';\nimport * as cornerstone from '@cornerstonejs/core';\n\n/**\n * Checks if value is valid.\n *\n * @param {number} value\n * @returns {boolean} is valid.\n */\nexport function isValidNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * Formats number precision.\n *\n * @param {number} number\n * @param {number} precision\n * @returns {number} formatted number.\n */\nexport function formatNumberPrecision(number, precision) {\n  if (number !== null) {\n    return parseFloat(number).toFixed(precision);\n  }\n}\n\n/**\n * Formats DICOM date.\n *\n * @param {string} date\n * @param {string} strFormat\n * @returns {string} formatted date.\n */\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\n  return moment(date, 'YYYYMMDD').format(strFormat);\n}\n\n/**\n *    DICOM Time is stored as HHmmss.SSS, where:\n *      HH 24 hour time:\n *        m mm        0..59   Minutes\n *        s ss        0..59   Seconds\n *        S SS SSS    0..999  Fractional seconds\n *\n *        Goal: '24:12:12'\n *\n * @param {*} time\n * @param {string} strFormat\n * @returns {string} formatted name.\n */\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\n  return moment(time, 'HH:mm:ss').format(strFormat);\n}\n\n/**\n * Gets compression type\n *\n * @param {number} imageId\n * @returns {string} compression type.\n */\nexport function getCompression(imageId) {\n  const generalImageModule = cornerstone.metaData.get('generalImageModule', imageId) || {};\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\n    generalImageModule;\n\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\n    return compressionMethod + compressionRatio + ' : 1';\n  }\n\n  return 'Lossless / Uncompressed';\n}\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport listComponentGenerator from './listComponentGenerator';\nimport './ViewportOverlay.css';\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision } from './utils';\nimport { utils } from '@ohif/core';\n\nconst { formatPN } = utils;\n\ninterface OverlayItem {\n  id: string;\n  title: string;\n  value?: (props: any) => string;\n  condition?: (props: any) => boolean;\n  contents?: (props: any) => { className: string; value: any };\n  generator?: (props: any) => any;\n}\n\n/**\n *\n * @param {*} config is a configuration object that defines four lists of elements,\n * one topLeft, topRight, bottomLeft, bottomRight contents.\n * @param {*} extensionManager is used to load the image data.\n * @returns\n */\nexport const generateFromConfig = ({ config, overlayData, ...props }) => {\n  const {\n    topLeft = [],\n    topRight = [],\n    bottomLeft = [],\n    bottomRight = [],\n  }: {\n    topLeft?: OverlayItem[];\n    topRight?: OverlayItem[];\n    bottomLeft?: OverlayItem[];\n    bottomRight?: OverlayItem[];\n  } = overlayData ?? {};\n  const topLeftClass = 'top-viewport left-viewport text-primary-light';\n  const topRightClass = 'top-viewport right-viewport-scrollbar text-primary-light';\n  const bottomRightClass = 'bottom-viewport right-viewport-scrollbar text-primary-light';\n  const bottomLeftClass = 'bottom-viewport left-viewport text-primary-light';\n  const overlay = 'absolute pointer-events-none microscopy-viewport-overlay';\n\n  return (\n    <>\n      {topLeft && topLeft.length > 0 && (\n        <div data-cy={'viewport-overlay-top-left'} className={classnames(overlay, topLeftClass)}>\n          {listComponentGenerator({ ...props, list: topLeft, itemGenerator })}\n        </div>\n      )}\n      {topRight && topRight.length > 0 && (\n        <div data-cy={'viewport-overlay-top-right'} className={classnames(overlay, topRightClass)}>\n          {listComponentGenerator({\n            ...props,\n            list: topRight,\n            itemGenerator,\n          })}\n        </div>\n      )}\n      {bottomRight && bottomRight.length > 0 && (\n        <div\n          data-cy={'viewport-overlay-bottom-right'}\n          className={classnames(overlay, bottomRightClass)}\n        >\n          {listComponentGenerator({\n            ...props,\n            list: bottomRight,\n            itemGenerator,\n          })}\n        </div>\n      )}\n      {bottomLeft && bottomLeft.length > 0 && (\n        <div\n          data-cy={'viewport-overlay-bottom-left'}\n          className={classnames(overlay, bottomLeftClass)}\n        >\n          {listComponentGenerator({\n            ...props,\n            list: bottomLeft,\n            itemGenerator,\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst itemGenerator = (props: any) => {\n  const { item } = props;\n  const { title, value: valueFunc, condition, contents } = item;\n  props.image = { ...props.image, ...props.metadata };\n  props.formatDate = formatDICOMDate;\n  props.formatTime = formatDICOMTime;\n  props.formatPN = formatPN;\n  props.formatNumberPrecision = formatNumberPrecision;\n  if (condition && !condition(props)) {\n    return null;\n  }\n  if (!contents && !valueFunc) {\n    return null;\n  }\n  const value = valueFunc && valueFunc(props);\n  const contentsValue = (contents && contents(props)) || [\n    { className: 'mr-1', value: title },\n    { classname: 'mr-1 font-light', value },\n  ];\n\n  return (\n    <div key={item.id} className=\"flex flex-row\">\n      {contentsValue.map((content, idx) => (\n        <span key={idx} className={content.className}>\n          {content.value}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default generateFromConfig;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { cleanDenaturalizedDataset } from '@ohif/extension-default';\n\nimport './DicomMicroscopyViewport.css';\nimport ViewportOverlay from './components/ViewportOverlay';\nimport getDicomWebClient from './utils/dicomWebClient';\nimport dcmjs from 'dcmjs';\nimport { useSystem } from '@ohif/core';\n\nfunction DicomMicroscopyViewport({\n  activeViewportId,\n  setViewportActive,\n  displaySets,\n  viewportId,\n  dataSource,\n  resizeRef,\n}: {\n  activeViewportId: string;\n  setViewportActive: Function;\n  displaySets: any[];\n  viewportId: string;\n  dataSource: any;\n  resizeRef: any;\n}) {\n  const { servicesManager, extensionManager } = useSystem();\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [viewer, setViewer] = useState(null);\n  const [managedViewer, setManagedViewer] = useState(null);\n  const overlayElement = useRef();\n  const container = useRef();\n  const { microscopyService, customizationService } = servicesManager.services;\n\n  const overlayData = customizationService.getCustomization('microscopyViewport.overlay');\n\n  // install the microscopy renderer into the web page.\n  // you should only do this once.\n  const installOpenLayersRenderer = useCallback(\n    async (container, displaySet) => {\n      const loadViewer = async metadata => {\n        const dicomMicroscopyModule = await microscopyService.importDicomMicroscopyViewer();\n        const { viewer: DicomMicroscopyViewer, metadata: metadataUtils } = dicomMicroscopyModule;\n\n        const microscopyViewer = DicomMicroscopyViewer.VolumeImageViewer;\n\n        const client = getDicomWebClient({\n          extensionManager,\n          servicesManager,\n        });\n\n        // Parse, format, and filter metadata\n        const volumeImages: any[] = [];\n\n        /**\n         * This block of code is the original way of loading DICOM into dicom-microscopy-viewer\n         * as in their documentation.\n         * But we have the metadata already loaded by our loaders.\n         * As the metadata for microscopy DIOM files tends to be big and we don't\n         * want to double load it, below we have the mechanism to reconstruct the\n         * DICOM JSON structure (denaturalized) from naturalized metadata.\n         * (NOTE: Our loaders cache only naturalized metadata, not the denaturalized.)\n         */\n        // {\n        //   const retrieveOptions = {\n        //     studyInstanceUID: metadata[0].StudyInstanceUID,\n        //     seriesInstanceUID: metadata[0].SeriesInstanceUID,\n        //   };\n        //   metadata = await client.retrieveSeriesMetadata(retrieveOptions);\n        //   // Parse, format, and filter metadata\n        //   metadata.forEach(m => {\n        //     if (\n        //       volumeImages.length > 0 &&\n        //       m['00200052'].Value[0] != volumeImages[0].FrameOfReferenceUID\n        //     ) {\n        //       console.warn(\n        //         'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\n        //         m['00200052'].Value[0]\n        //       );\n        //       m['00200052'].Value[0] = volumeImages[0].FrameOfReferenceUID;\n        //     }\n        //     NOTE: depending on different data source, image.ImageType sometimes\n        //     is a string, not a string array.\n        //     m['00080008'] = transformImageTypeUnnaturalized(m['00080008']);\n\n        //     const image = new metadataUtils.VLWholeSlideMicroscopyImage({\n        //       metadata: m,\n        //     });\n        //     const imageFlavor = image.ImageType[2];\n        //     if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\n        //       volumeImages.push(image);\n        //     }\n        //   });\n        // }\n\n        metadata.forEach(m => {\n          // NOTE: depending on different data source, image.ImageType sometimes\n          //    is a string, not a string array.\n          m.ImageType = typeof m.ImageType === 'string' ? m.ImageType.split('\\\\') : m.ImageType;\n\n          const inst = cleanDenaturalizedDataset(\n            dcmjs.data.DicomMetaDictionary.denaturalizeDataset(m),\n            {\n              StudyInstanceUID: m.StudyInstanceUID,\n              SeriesInstanceUID: m.SeriesInstanceUID,\n              dataSourceConfig: dataSource.getConfig(),\n            }\n          );\n          if (!inst['00480105']) {\n            // Optical Path Sequence, no OpticalPathIdentifier?\n            // NOTE: this is actually a not-well formatted DICOM VL Whole Slide Microscopy Image.\n            inst['00480105'] = {\n              vr: 'SQ',\n              Value: [\n                {\n                  '00480106': {\n                    vr: 'SH',\n                    Value: ['1'],\n                  },\n                },\n              ],\n            };\n          }\n          const image = new metadataUtils.VLWholeSlideMicroscopyImage({\n            metadata: inst,\n          });\n\n          const imageFlavor = image.ImageType[2];\n          if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\n            volumeImages.push(image);\n          }\n        });\n\n        // format metadata for microscopy-viewer\n        const options = {\n          client,\n          metadata: volumeImages,\n          retrieveRendered: false,\n          controls: ['overview', 'position'],\n        };\n\n        const viewer = new microscopyViewer(options);\n\n        if (overlayElement && overlayElement.current && viewer.addViewportOverlay) {\n          viewer.addViewportOverlay({\n            element: overlayElement.current,\n            coordinates: [0, 0], // TODO: dicom-microscopy-viewer documentation says this can be false to be automatically, but it is not.\n            navigate: true,\n            className: 'OpenLayersOverlay',\n          });\n        }\n\n        viewer.render({ container });\n\n        const { StudyInstanceUID, SeriesInstanceUID } = displaySet;\n\n        const managedViewer = microscopyService.addViewer(\n          viewer,\n          viewportId,\n          container,\n          StudyInstanceUID,\n          SeriesInstanceUID\n        );\n\n        managedViewer.addContextMenuCallback((event: Event) => {\n          // TODO: refactor this after Bill's changes on ContextMenu feature get merged\n          // const roiAnnotationNearBy = this.getNearbyROI(event);\n        });\n\n        setViewer(viewer);\n        setManagedViewer(managedViewer);\n      };\n\n      microscopyService.clearAnnotations();\n\n      let smDisplaySet = displaySet;\n      if (displaySet.isOverlayDisplaySet) {\n        // for SR displaySet, let's load the actual image displaySet\n        smDisplaySet = displaySet.getSourceDisplaySet();\n      }\n      console.log('Loading viewer metadata', smDisplaySet);\n\n      await loadViewer(smDisplaySet.others);\n\n      if (displaySet.isOverlayDisplaySet && !displaySet.isLoaded && !displaySet.isLoading) {\n        displaySet.load(smDisplaySet);\n      }\n    },\n    [dataSource, extensionManager, microscopyService, servicesManager, viewportId]\n  );\n\n  useEffect(() => {\n    const displaySet = displaySets[0];\n    installOpenLayersRenderer(container.current, displaySet).then(() => {\n      setIsLoaded(true);\n    });\n\n    return () => {\n      if (viewer) {\n        microscopyService.removeViewer(viewer);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const displaySet = displaySets[0];\n\n    microscopyService.clearAnnotations();\n\n    // loading SR - only if not already loaded and not currently loading\n    if (displaySet.isOverlayDisplaySet && !displaySet.isLoaded && !displaySet.isLoading) {\n      const referencedDisplaySet = displaySet.getSourceDisplaySet();\n      displaySet.load(referencedDisplaySet);\n    }\n  }, [managedViewer, displaySets, microscopyService]);\n\n  const style = { width: '100%', height: '100%' };\n  const displaySet = displaySets[0];\n  const firstInstance = displaySet.firstInstance || displaySet.instance;\n  const LoadingIndicatorProgress = customizationService.getCustomization(\n    'ui.loadingIndicatorProgress'\n  );\n\n  return (\n    <div\n      className={'DicomMicroscopyViewer'}\n      style={style}\n      onClick={() => {\n        if (viewportId !== activeViewportId) {\n          setViewportActive(viewportId);\n        }\n      }}\n    >\n      <div style={{ ...style, display: 'none' }}>\n        <div style={{ ...style }} ref={overlayElement}>\n          <div style={{ position: 'relative', height: '100%', width: '100%' }}>\n            {displaySet && firstInstance.imageId && (\n              <ViewportOverlay\n                overlayData={overlayData}\n                displaySet={displaySet}\n                instance={displaySet.instance}\n                metadata={displaySet.metadata}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      <div\n        style={style}\n        ref={(ref: any) => {\n          container.current = ref;\n          resizeRef.current = ref;\n        }}\n      />\n      {isLoaded ? null : <LoadingIndicatorProgress className={'h-full w-full bg-black'} />}\n    </div>\n  );\n}\n\nexport default DicomMicroscopyViewport;\n"],"names":["props","list","itemGenerator","map","item","generator","Error","formatNumberPrecision","number","precision","parseFloat","toFixed","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","formatPN","utils","title","value","valueFunc","condition","contents","image","metadata","formatDate","formatTime","contentsValue","className","classname","React","key","id","content","idx","generateFromConfig","config","overlayData","topLeft","topRight","bottomLeft","bottomRight","overlay","length","classnames","listComponentGenerator","activeViewportId","setViewportActive","displaySets","viewportId","dataSource","resizeRef","servicesManager","extensionManager","useSystem","isLoaded","setIsLoaded","useState","viewer","setViewer","managedViewer","setManagedViewer","overlayElement","useRef","container","microscopyService","customizationService","services","getCustomization","installOpenLayersRenderer","useCallback","async","displaySet","clearAnnotations","smDisplaySet","isOverlayDisplaySet","getSourceDisplaySet","console","log","dicomMicroscopyModule","importDicomMicroscopyViewer","DicomMicroscopyViewer","metadataUtils","microscopyViewer","VolumeImageViewer","client","getDicomWebClient","volumeImages","forEach","m","ImageType","split","inst","cleanDenaturalizedDataset","dcmjs","DicomMetaDictionary","denaturalizeDataset","StudyInstanceUID","SeriesInstanceUID","dataSourceConfig","getConfig","vr","Value","VLWholeSlideMicroscopyImage","imageFlavor","push","retrieveRendered","controls","current","addViewportOverlay","element","coordinates","navigate","render","addViewer","addContextMenuCallback","event","loadViewer","others","isLoading","load","useEffect","then","removeViewer","referencedDisplaySet","style","width","height","firstInstance","instance","LoadingIndicatorProgress","onClick","display","ref","position","imageId","ViewportOverlay"],"sourceRoot":""}