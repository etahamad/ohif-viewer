{"version":3,"file":"9892.bundle.7ee8dbe3711402ecbbe7.js","mappings":"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AAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,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","sources":["webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/drawImageSync.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/calculateTransform.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GenerateImageType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/Settings.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/imageLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/FrameRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/PointsManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/ProgressiveIterator.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/RLEVoxelMap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/actorCheck.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/applyPreset.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/autoLoad.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/buildMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateSpacingBetweenImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clamp.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/colormap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createLinearRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/decimate.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepClone.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/fnv1aHash.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestImageId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageDataMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageSliceDataForVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSliceRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSpacingInNormalDirection.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getTargetVolumeAndSpacingInNormalDir.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVoiFromSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeActorCorners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeSliceRangeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportScrollInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasFloatScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasNaNValues.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageRetrieveMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/TargetEventListeners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/MultiTargetEventListenerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getMinMax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRuntimeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calibratedPixelSpacingMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isOpposite.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/indexWithinDimensions.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportsContainingSameVolumes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isPTPrescaledWithSUV.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasGPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasCPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/loadImageToCanvas.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/asArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/historyMemo/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/worldToImageCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageToWorldCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithImageURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestStackImageIndexForPoint.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getCurrentVolumeViewportSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/spatialRegistrationMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateViewportsSpatialRegistration.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageCornersInWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageLegacy.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isValidVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isVideoTransferSyntax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertStackToVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertVolumeToStackViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/roundNumber.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertToGrayscale.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRandomSampleFromArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/color.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/splitImageIdsBy4DTags.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getDynamicVolumeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scroll.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/jumpToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSubVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeDirectionVectors.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateNeighborhoodStats.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getPixelSpacingInformation.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportModality.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/invertRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/logger.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/makeVolumeMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/planar.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/pointInShapeCallback.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/snapFocalPointToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transferFunctionUtils.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformCanvasToIJK.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformIndexToWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformWorldToIndex.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updatePlaneRestriction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updateVTKImageDataWithCornerstoneImage.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/windowLevel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackContextPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingControlTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@kitware/vtk.js/Filters/General/ContourLoopExtraction.js","webpack:///../../../node_modules/@cornerstonejs/polymorphic-segmentation/dist/esm/workers/polySegConverters.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddRepresentationData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapBaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js","webpack:///../../../node_modules/@kitware/vtk.js/Rendering/Core/ColorTransferFunction.js","webpack:///../../../node_modules/gl-matrix/esm/vec3.js","webpack:///../../../node_modules/d3-array/src/zip.js","webpack:///../../../node_modules/d3-interpolate/src/quantize.js"],"sourcesContent":["import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nimport VoxelManagerEnum from '../enums/VoxelManagerEnum';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd, voxelRepresentation } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        voxelRepresentation,\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        referencedImageId: referencedImageId,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, voxelRepresentation, referencedImageId, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const id = imageId;\n    const voxelManager = (voxelRepresentation === VoxelManagerEnum.RLE &&\n        VoxelManager.createRLEImageVoxelManager({ dimensions, id })) ||\n        VoxelManager.createImageVoxelManager({\n            height,\n            width,\n            numberOfComponents,\n            scalarData: scalarDataToUse,\n            id,\n        });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n        referencedImageId,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            if (!requestDetails) {\n                return;\n            }\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","export default class FrameRange {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    static imageIdToFrames(imageId) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        if (range.length === 1) {\n            return range[0];\n        }\n        return range;\n    }\n    static imageIdToFrameEnd(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[1] : range;\n    }\n    static imageIdToFrameStart(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[0] : range;\n    }\n    static framesToString(range) {\n        if (Array.isArray(range)) {\n            return `${range[0]}-${range[1]}`;\n        }\n        return String(range);\n    }\n    static framesToImageId(imageId, range) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const newRangeString = this.framesToString(range);\n        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);\n    }\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    getTypedArray() {\n        return this.data;\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128, points) {\n        initialSize = Math.max(initialSize, points?.length || 0);\n        const newPoints = new PointsManager({ initialSize, dimensions: 3 });\n        if (points) {\n            points.forEach((point) => newPoints.push(point));\n        }\n        return newPoints;\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","const ADJACENT_ALL = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [0, 0, 1],\n];\nconst ADJACENT_SINGLE_PLANE = [\n    [0, -1, 0],\n    [0, 1, 0],\n];\nconst ADJACENT_IN = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n];\nconst ADJACENT_OUT = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\nexport default class RLEVoxelMap {\n    static copyMap(destination, source) {\n        for (const [index, row] of source.rows) {\n            destination.rows.set(index, structuredClone(row));\n        }\n    }\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numComps = 1;\n        this.pixelDataConstructor = Uint8Array;\n        this.updateScalarData = function (scalarData) {\n            scalarData.fill(0);\n            const callback = (index, rle, row) => {\n                const { start, end, value } = rle;\n                for (let i = start; i < end; i++) {\n                    scalarData[index + i] = value;\n                }\n            };\n            this.forEach(callback);\n        };\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value ?? this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                return;\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev?.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    static { this.getScalarData = function (ArrayType = Uint8ClampedArray) {\n        const scalarData = new ArrayType(this.frameSize);\n        this.map.updateScalarData(scalarData);\n        return scalarData;\n    }; }\n    toIJK(index) {\n        const i = index % this.jMultiple;\n        const j = ((index - i) / this.jMultiple) % this.height;\n        const k = Math.floor(index / this.kMultiple);\n        return [i, j, k];\n    }\n    toIndex([i, j, k]) {\n        return i + k * this.kMultiple + j * this.jMultiple;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    has(index) {\n        const i = index % this.jMultiple;\n        const j = (index - i) / this.jMultiple;\n        const rle = this.getRLE(i, j);\n        return rle?.value !== undefined;\n    }\n    delete(index) {\n        const i = index % this.width;\n        const j = (index - i) / this.width;\n        const row = this.rows.get(j);\n        if (!row) {\n            return;\n        }\n        const rleIndex = this.findIndex(row, i);\n        const rle = row[rleIndex];\n        if (!rle || rle.start > i) {\n            return;\n        }\n        if (rle.end === i + 1) {\n            rle.end--;\n            if (rle.start >= rle.end) {\n                row.splice(rleIndex, 1);\n                if (!row.length) {\n                    this.rows.delete(j);\n                }\n            }\n            return;\n        }\n        if (rle.start === i) {\n            rle.start++;\n            return;\n        }\n        const newRle = {\n            value: rle.value,\n            start: i + 1,\n            end: rle.end,\n        };\n        rle.end = i;\n        row.splice(rleIndex + 1, 0, newRle);\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    forEach(callback, options) {\n        const rowModified = options?.rowModified;\n        for (const [baseIndex, row] of this.rows) {\n            const rowToUse = rowModified ? [...row] : row;\n            for (const rle of rowToUse) {\n                callback(baseIndex * this.width, rle, row);\n            }\n        }\n    }\n    forEachRow(callback) {\n        for (const [baseIndex, row] of this.rows) {\n            callback(baseIndex * this.width, row);\n        }\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numComps);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numComps } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numComps === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numComps;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numComps) {\n                        for (let comp = 0; comp < numComps; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n    floodFill(i, j, k, value, options) {\n        const rle = this.getRLE(i, j, k);\n        if (!rle) {\n            throw new Error(`Initial point ${i},${j},${k} isn't in the RLE`);\n        }\n        const stack = [[rle, j, k]];\n        const replaceValue = rle.value;\n        if (replaceValue === value) {\n            throw new Error(`source (${replaceValue}) and destination (${value}) are identical`);\n        }\n        return this.flood(stack, replaceValue, value, options);\n    }\n    flood(stack, sourceValue, value, options) {\n        let sum = 0;\n        const { planar = true, diagonals = true, singlePlane = false, } = options || {};\n        const childOptions = { planar, diagonals, singlePlane };\n        while (stack.length) {\n            const top = stack.pop();\n            const [current] = top;\n            if (current.value !== sourceValue) {\n                continue;\n            }\n            current.value = value;\n            sum += current.end - current.start;\n            const adjacents = this.findAdjacents(top, childOptions).filter((adjacent) => adjacent && adjacent[0].value === sourceValue);\n            stack.push(...adjacents);\n        }\n        return sum;\n    }\n    fillFrom(getter, boundsIJK) {\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                let rle;\n                let row;\n                for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                    const value = getter(i, j, k);\n                    if (value === undefined) {\n                        rle = undefined;\n                        continue;\n                    }\n                    if (!row) {\n                        row = [];\n                        this.rows.set(j + k * this.height, row);\n                    }\n                    if (rle && rle.value !== value) {\n                        rle = undefined;\n                    }\n                    if (!rle) {\n                        rle = { start: i, end: i, value };\n                        row.push(rle);\n                    }\n                    rle.end++;\n                }\n            }\n        }\n    }\n    findAdjacents(item, { diagonals = true, planar = true, singlePlane = false }) {\n        const [rle, j, k, adjacentsDelta] = item;\n        const { start, end } = rle;\n        const leftRle = start > 0 && this.getRLE(start - 1, j, k);\n        const rightRle = end < this.width && this.getRLE(end, j, k);\n        const range = diagonals\n            ? [start > 0 ? start - 1 : start, end < this.width ? end + 1 : end]\n            : [start, end];\n        const adjacents = [];\n        if (leftRle) {\n            adjacents.push([leftRle, j, k]);\n        }\n        if (rightRle) {\n            adjacents.push([rightRle, j, k]);\n        }\n        for (const delta of adjacentsDelta ||\n            (singlePlane ? ADJACENT_SINGLE_PLANE : ADJACENT_ALL)) {\n            const [, delta1, delta2] = delta;\n            const testJ = delta1 + j;\n            const testK = delta2 + k;\n            if (testJ < 0 || testJ >= this.height) {\n                continue;\n            }\n            if (testK < 0 || testK >= this.depth) {\n                continue;\n            }\n            const row = this.getRun(testJ, testK);\n            if (!row) {\n                continue;\n            }\n            for (const testRle of row) {\n                const newAdjacentDelta = adjacentsDelta ||\n                    (singlePlane && ADJACENT_SINGLE_PLANE) ||\n                    (planar && delta2 > 0 && ADJACENT_OUT) ||\n                    (planar && delta2 < 0 && ADJACENT_IN) ||\n                    ADJACENT_ALL;\n                if (!(testRle.end <= range[0] || testRle.start >= range[1])) {\n                    adjacents.push([testRle, testJ, testK, newAdjacentDelta]);\n                }\n            }\n        }\n        return adjacents;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    if (!actorToCheck) {\n        return false;\n    }\n    return !!actorToCheck.isA(actorType);\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","import * as metaData from '../metaData';\nimport { MetadataModules, VOILUTFunctionType } from '../enums';\nexport function getValidVOILUTFunction(voiLUTFunction) {\n    if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n        return VOILUTFunctionType.LINEAR;\n    }\n    return voiLUTFunction;\n}\nexport function getImagePlaneModule(imageId) {\n    const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n    const newImagePlaneModule = {\n        ...imagePlaneModule,\n    };\n    if (!newImagePlaneModule.columnPixelSpacing) {\n        newImagePlaneModule.columnPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.rowPixelSpacing) {\n        newImagePlaneModule.rowPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.columnCosines) {\n        newImagePlaneModule.columnCosines = [0, 1, 0];\n    }\n    if (!newImagePlaneModule.rowCosines) {\n        newImagePlaneModule.rowCosines = [1, 0, 0];\n    }\n    if (!newImagePlaneModule.imagePositionPatient) {\n        newImagePlaneModule.imagePositionPatient = [0, 0, 0];\n    }\n    if (!newImagePlaneModule.imageOrientationPatient) {\n        newImagePlaneModule.imageOrientationPatient = new Float32Array([\n            1, 0, 0, 0, 1, 0,\n        ]);\n    }\n    return newImagePlaneModule;\n}\nexport function calibrateImagePlaneModule(imageId, imagePlaneModule, currentCalibration) {\n    const calibration = metaData.get('calibratedPixelSpacing', imageId);\n    const isUpdated = currentCalibration !== calibration;\n    const { scale } = calibration || {};\n    const hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n    imagePlaneModule.calibration = calibration;\n    if (!isUpdated) {\n        return { imagePlaneModule, hasPixelSpacing };\n    }\n    return {\n        imagePlaneModule,\n        hasPixelSpacing,\n        calibrationEvent: {\n            scale,\n            calibration,\n        },\n    };\n}\nexport function buildMetadata(image) {\n    const imageId = image.imageId;\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = metaData.get('imagePixelModule', imageId);\n    const { windowWidth, windowCenter, voiLUTFunction } = image;\n    const { modality } = metaData.get('generalSeriesModule', imageId);\n    const imageIdScalingFactor = metaData.get('scalingModule', imageId);\n    const calibration = metaData.get(MetadataModules.CALIBRATION, imageId);\n    const voiLUTFunctionEnum = getValidVOILUTFunction(voiLUTFunction);\n    const imagePlaneModule = getImagePlaneModule(imageId);\n    return {\n        calibration,\n        scalingFactor: imageIdScalingFactor,\n        voiLUTFunction: voiLUTFunctionEnum,\n        modality,\n        imagePlaneModule,\n        imagePixelModule: {\n            bitsAllocated,\n            bitsStored,\n            samplesPerPixel,\n            highBit,\n            photometricInterpretation,\n            pixelRepresentation,\n            windowWidth: windowWidth,\n            windowCenter: windowCenter,\n            modality,\n            voiLUTFunction: voiLUTFunctionEnum,\n        },\n    };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function calculateSpacingBetweenImageIds(imageIds) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const refIppVec = vec3.fromValues(referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    let spacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        const ippVec = vec3.fromValues(imagePositionPatient[0], imagePositionPatient[1], imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, ippVec);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        const numImages = distanceImagePairs.length;\n        spacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        const middleIppVec = vec3.fromValues(metadataForMiddleImage.imagePositionPatient[0], metadataForMiddleImage.imagePositionPatient[1], metadataForMiddleImage.imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, middleIppVec);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        spacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { sliceThickness, spacingBetweenSlices } = metaData.get('imagePlaneModule', imageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if ((spacing === 0 || isNaN(spacing)) && !strictZSpacingForVolumeViewport) {\n        if (spacingBetweenSlices) {\n            console.debug('Could not calculate spacing. Using spacingBetweenSlices');\n            spacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.debug('Could not calculate spacing and no spacingBetweenSlices. Using sliceThickness');\n            spacing = sliceThickness;\n        }\n        else {\n            console.debug('Could not calculate spacing. The VolumeViewport visualization is compromised. Setting spacing to 1 to render');\n            spacing = 1;\n        }\n    }\n    return spacing;\n}\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    colormap.name = colormap.name || colormap.Name;\n    _colormaps.set(colormap.name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    const result = {\n        name: matchedColormap.Name,\n        ...(Array.isArray(opacity) && opacity.length > 0 && { opacity }),\n        ...(typeof opacity === 'number' && { opacity }),\n    };\n    return result;\n}\nexport function setColorMapTransferFunctionForVolumeActor(volumeInfo) {\n    const { volumeActor, preset, opacity = 0.9, threshold = null, colorRange = [0, 5], } = volumeInfo;\n    const mapper = volumeActor.getMapper();\n    mapper.setSampleDistance(1.0);\n    const cfun = vtkColorTransferFunction.newInstance();\n    const presetToUse = preset || vtkColorMaps.getPresetByName('hsv');\n    cfun.applyColorMap(presetToUse);\n    cfun.setMappingRange(colorRange[0], colorRange[1]);\n    volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n    updateOpacityWithThreshold(volumeActor, opacity, threshold);\n}\nexport function updateOpacity(volumeActor, newOpacity) {\n    const currentThreshold = getThresholdValue(volumeActor);\n    updateOpacityWithThreshold(volumeActor, newOpacity, currentThreshold);\n}\nexport function updateThreshold(volumeActor, newThreshold) {\n    const currentOpacity = getMaxOpacity(volumeActor);\n    updateOpacityWithThreshold(volumeActor, currentOpacity, newThreshold);\n}\nfunction updateOpacityWithThreshold(volumeActor, opacity, threshold) {\n    const meta = volumeActor.getMapper().getInputData().get('voxelManager');\n    if (!meta?.voxelManager) {\n        throw new Error('No voxel manager was found for the volume actor, or you cannot yet update opacity with a threshold using stacked images');\n    }\n    const range = meta.voxelManager.getRange();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    if (threshold !== null) {\n        const delta = Math.abs(range[1] - range[0]) * 0.001;\n        const thresholdValue = Math.max(range[0], Math.min(range[1], threshold));\n        ofun.addPoint(range[0], 0);\n        ofun.addPoint(thresholdValue - delta, 0);\n        ofun.addPoint(thresholdValue, opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    else {\n        ofun.addPoint(range[0], opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    volumeActor.getProperty().setScalarOpacity(0, ofun);\n}\nfunction getThresholdValue(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return null;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length <= 4) {\n        return null;\n    }\n    for (let i = 0; i < dataArray.length - 2; i += 2) {\n        const x1 = dataArray[i];\n        const y1 = dataArray[i + 1];\n        const x2 = dataArray[i + 2];\n        const y2 = dataArray[i + 3];\n        if (y1 === 0 && y2 > 0) {\n            return x2;\n        }\n    }\n    return null;\n}\nfunction getMaxOpacity(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return 1.0;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length === 0) {\n        return 1.0;\n    }\n    let maxOpacity = 0;\n    for (let i = 1; i < dataArray.length; i += 2) {\n        if (dataArray[i] > maxOpacity) {\n            maxOpacity = dataArray[i];\n        }\n    }\n    return maxOpacity;\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, getThresholdValue, getMaxOpacity, };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nimport { logit } from './logit';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","export default function fnv1aHash(str) {\n    let hash = 0x811c9dc5;\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        hash +=\n            (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return (hash >>> 0).toString(36);\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { coreLog } from './logger';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nconst log = coreLog.getLogger('utilities', 'getClosestImageId');\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal, options) {\n    const { direction, spacing, imageIds } = imageVolume;\n    const { ignoreSpacing = false } = options || {};\n    if (!imageIds?.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProduct = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProduct) < 1 - EPSILON) {\n        return;\n    }\n    let halfSpacingInNormalDirection;\n    if (!ignoreSpacing) {\n        const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n        halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    }\n    let closestImageId;\n    let minDistance = Infinity;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n        if (!imagePlaneModule?.imagePositionPatient) {\n            log.warn(`Missing imagePositionPatient for imageId: ${imageId}`);\n            continue;\n        }\n        const { imagePositionPatient } = imagePlaneModule;\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const distance = Math.abs(vec3.dot(dir, viewPlaneNormal));\n        if (ignoreSpacing) {\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n        else {\n            if (distance < halfSpacingInNormalDirection && distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n    }\n    if (closestImageId === undefined) {\n        log.warn('No imageId found within the specified criteria (half spacing or absolute closest).');\n    }\n    return closestImageId;\n}\n","import { vec3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nimport { buildMetadata } from './buildMetadata';\nexport function getImageDataMetadata(image) {\n    const { imagePlaneModule, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = buildMetadata(image);\n    let { rowCosines, columnCosines } = imagePlaneModule;\n    if (rowCosines == null || columnCosines == null) {\n        rowCosines = [1, 0, 0];\n        columnCosines = [0, 1, 0];\n    }\n    const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n    const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    let origin = imagePlaneModule.imagePositionPatient;\n    if (origin == null) {\n        origin = [0, 0, 0];\n    }\n    const xSpacing = imagePlaneModule.columnPixelSpacing || image.columnPixelSpacing;\n    const ySpacing = imagePlaneModule.rowPixelSpacing || image.rowPixelSpacing;\n    const xVoxels = image.columns;\n    const yVoxels = image.rows;\n    const zSpacing = EPSILON;\n    const zVoxels = 1;\n    if (!imagePixelModule.photometricInterpretation &&\n        image.sizeInBytes === 3 * image.width * image.height) {\n        image.numberOfComponents = 3;\n    }\n    const numberOfComponents = image.numberOfComponents ||\n        _getNumCompsFromPhotometricInterpretation(imagePixelModule.photometricInterpretation);\n    return {\n        numberOfComponents,\n        origin,\n        direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n        dimensions: [xVoxels, yVoxels, zVoxels],\n        spacing: [xSpacing, ySpacing, zSpacing],\n        numVoxels: xVoxels * yVoxels * zVoxels,\n        imagePlaneModule,\n        imagePixelModule,\n        bitsAllocated: imagePixelModule.bitsAllocated,\n        voiLUTFunction,\n        modality,\n        scalingFactor,\n        calibration,\n        scanAxisNormal: scanAxisNormal,\n    };\n}\nfunction _getNumCompsFromPhotometricInterpretation(photometricInterpretation) {\n    let numberOfComponents = 1;\n    if (photometricInterpretation === 'RGB' ||\n        photometricInterpretation?.includes('YBR') ||\n        photometricInterpretation === 'PALETTE COLOR') {\n        numberOfComponents = 3;\n    }\n    return numberOfComponents;\n}\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const scalingModules = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: scalingModules.suvbw,\n            suvbsa: scalingModules.suvbsa,\n            suvlbm: scalingModules.suvlbm,\n        }),\n        ...(modality === 'RTDOSE' && {\n            doseGridScaling: scalingModules.DoseGridScaling,\n            doseSummation: scalingModules.DoseSummation,\n            doseType: scalingModules.DoseType,\n            doseUnit: scalingModules.DoseUnit,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    clone: () => {\n        return new Map(retrieveConfigurationState);\n    },\n    restore: (state) => {\n        retrieveConfigurationState.clear();\n        state.forEach((value, key) => {\n            retrieveConfigurationState.set(key, value);\n        });\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import { vec3 } from 'gl-matrix';\nimport getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport TiledRenderingEngine from '../RenderingEngine/TiledRenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new TiledRenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const rightVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([1 / devicePixelRatio, 0]), origin);\n            const downVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([0, 1 / devicePixelRatio]), origin);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n                rightVector,\n                downVector,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","export function asArray(item) {\n    if (Array.isArray(item)) {\n        return item;\n    }\n    return [item];\n}\n","import eventTarget from '../../eventTarget';\nimport { asArray } from '../asArray';\nconst Events = {\n    HISTORY_UNDO: 'CORNERSTONE_TOOLS_HISTORY_UNDO',\n    HISTORY_REDO: 'CORNERSTONE_TOOLS_HISTORY_REDO',\n};\nexport class HistoryMemo {\n    constructor(label = 'Tools', size = 50) {\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n        this.ring = new Array();\n        this.isRecordingGrouped = false;\n        this.label = label;\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(newSize) {\n        this.ring = new Array(newSize);\n        this._size = newSize;\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n    }\n    get canUndo() {\n        return this.undoAvailable > 0;\n    }\n    get canRedo() {\n        return this.redoAvailable > 0;\n    }\n    undo(items = 1) {\n        while (items > 0 && this.undoAvailable > 0) {\n            const item = this.ring[this.position];\n            for (const subitem of asArray(item).reverse()) {\n                subitem.restoreMemo(true);\n                this.dispatchHistoryEvent({ item: subitem, isUndo: true });\n            }\n            items--;\n            this.redoAvailable++;\n            this.undoAvailable--;\n            this.position = (this.position - 1 + this.size) % this.size;\n        }\n    }\n    undoIf(condition) {\n        if (this.undoAvailable > 0 && condition(this.ring[this.position])) {\n            this.undo();\n            return true;\n        }\n        return false;\n    }\n    dispatchHistoryEvent({ item, isUndo }) {\n        if (item.id) {\n            eventTarget.dispatchEvent(new CustomEvent(isUndo ? Events.HISTORY_UNDO : Events.HISTORY_REDO, {\n                detail: {\n                    isUndo,\n                    id: item.id,\n                    operationType: item.operationType || 'annotation',\n                    memo: item,\n                },\n            }));\n        }\n    }\n    redo(items = 1) {\n        while (items > 0 && this.redoAvailable > 0) {\n            const newPosition = (this.position + 1) % this.size;\n            const item = this.ring[newPosition];\n            for (const subitem of asArray(item).reverse()) {\n                subitem.restoreMemo(false);\n                this.dispatchHistoryEvent({ item: subitem, isUndo: false });\n            }\n            items--;\n            this.position = newPosition;\n            this.undoAvailable++;\n            this.redoAvailable--;\n        }\n    }\n    initializeGroupItem() {\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = [];\n    }\n    startGroupRecording() {\n        this.isRecordingGrouped = true;\n        this.initializeGroupItem();\n    }\n    rollbackUnusedGroupItem() {\n        this.ring[this.position] = undefined;\n        this.position = (this.position - 1) % this._size;\n        this.undoAvailable--;\n    }\n    endGroupRecording() {\n        this.isRecordingGrouped = false;\n        const lastItem = this.ring[this.position];\n        const lastItemIsEmpty = Array.isArray(lastItem) && lastItem.length === 0;\n        if (lastItemIsEmpty) {\n            this.rollbackUnusedGroupItem();\n        }\n    }\n    pushGrouped(memo) {\n        const lastMemo = this.ring[this.position];\n        if (Array.isArray(lastMemo)) {\n            lastMemo.push(memo);\n            return memo;\n        }\n        throw new Error('Last item should be an array for grouped memos.');\n    }\n    push(item) {\n        if (!item) {\n            return;\n        }\n        const memo = item.restoreMemo\n            ? item\n            : item.createMemo?.();\n        if (!memo) {\n            return;\n        }\n        if (this.isRecordingGrouped) {\n            return this.pushGrouped(memo);\n        }\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = memo;\n        return memo;\n    }\n}\nconst DefaultHistoryMemo = new HistoryMemo();\nexport { DefaultHistoryMemo };\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData() || {};\n    if (!imageData || !dimensions) {\n        return [];\n    }\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    if (imageIds.length <= 1) {\n        return false;\n    }\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, usingDefaultValues, } = metaData.get('imagePlaneModule', imageId0);\n    if (usingDefaultValues) {\n        return false;\n    }\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    let validVolume = true;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        if (seriesInstanceUID !== baseMetadata.seriesInstanceUID) {\n            validVolume = false;\n            break;\n        }\n        if (modality !== baseMetadata.modality) {\n            validVolume = false;\n            break;\n        }\n        if (columns !== baseMetadata.columns) {\n            validVolume = false;\n            break;\n        }\n        if (rows !== baseMetadata.rows) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient)) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(pixelSpacing, baseMetadata.pixelSpacing)) {\n            validVolume = false;\n            break;\n        }\n    }\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport uuidv4 from './uuidv4';\nimport { createLocalVolume } from '../loaders/volumeLoader';\nimport cache from '../cache/cache';\nfunction createSubVolume(referencedVolumeId, boundsIJK, options = {}) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    const { metadata, spacing, direction, dimensions: refVolumeDim, } = referencedVolume;\n    const { minX, maxX, minY, maxY, minZ, maxZ } = boundsIJK;\n    const ijkTopLeft = [\n        Math.min(minX, maxX),\n        Math.min(minY, maxY),\n        Math.min(minZ, maxZ),\n    ];\n    const boundingBoxOriginWorld = transformIndexToWorld(referencedVolume.imageData, ijkTopLeft);\n    const dimensions = [\n        Math.abs(maxX - minX) + 1,\n        Math.abs(maxY - minY) + 1,\n        Math.abs(maxZ - minZ) + 1,\n    ];\n    const { targetBuffer } = options;\n    const subVolumeOptions = {\n        metadata,\n        dimensions,\n        spacing,\n        origin: boundingBoxOriginWorld,\n        direction,\n        targetBuffer,\n        scalarData: targetBuffer?.type === 'Float32Array'\n            ? new Float32Array(dimensions[0] * dimensions[1] * dimensions[2])\n            : undefined,\n    };\n    const subVolume = createLocalVolume(uuidv4(), subVolumeOptions);\n    const subVolumeData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const subVolumeSliceSize = dimensions[0] * dimensions[1];\n    const refVolumeSliceSize = refVolumeDim[0] * refVolumeDim[1];\n    const refVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    for (let z = 0; z < dimensions[2]; z++) {\n        for (let y = 0; y < dimensions[1]; y++) {\n            const rowStartWorld = transformIndexToWorld(subVolume.imageData, [\n                0,\n                y,\n                z,\n            ]);\n            const refVolumeRowStartIJK = transformWorldToIndex(referencedVolume.imageData, rowStartWorld);\n            const refVolumeRowStartOffset = refVolumeRowStartIJK[2] * refVolumeSliceSize +\n                refVolumeRowStartIJK[1] * refVolumeDim[0] +\n                refVolumeRowStartIJK[0];\n            const rowData = refVolumeData.slice(refVolumeRowStartOffset, refVolumeRowStartOffset + dimensions[0]);\n            const subVolumeLineStartOffset = z * subVolumeSliceSize + y * dimensions[0];\n            subVolumeData.set(rowData, subVolumeLineStartOffset);\n        }\n    }\n    subVolume.voxelManager.setCompleteScalarDataArray(subVolumeData);\n    return subVolume;\n}\nexport { createSubVolume as default, createSubVolume };\n","import { vec3 } from 'gl-matrix';\nimport { transformWorldToIndexContinuous } from './transformWorldToIndex';\nfunction getVolumeDirectionVectors(imageData, camera) {\n    const { viewUp, viewPlaneNormal } = camera;\n    const ijkOrigin = transformWorldToIndexContinuous(imageData, [0, 0, 0]);\n    const worldVecColDir = vec3.negate(vec3.create(), viewUp);\n    const worldVecSliceDir = vec3.negate(vec3.create(), viewPlaneNormal);\n    const worldVecRowDir = vec3.cross(vec3.create(), worldVecColDir, worldVecSliceDir);\n    const ijkVecColDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecColDir), ijkOrigin);\n    const ijkVecSliceDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecSliceDir), ijkOrigin);\n    vec3.normalize(ijkVecColDir, ijkVecColDir);\n    vec3.normalize(ijkVecSliceDir, ijkVecSliceDir);\n    const ijkVecRowDir = vec3.cross(vec3.create(), ijkVecColDir, ijkVecSliceDir);\n    return {\n        worldVecRowDir,\n        worldVecColDir,\n        worldVecSliceDir,\n        ijkVecRowDir,\n        ijkVecColDir,\n        ijkVecSliceDir,\n    };\n}\nexport { getVolumeDirectionVectors as default, getVolumeDirectionVectors };\n","export function calculateNeighborhoodStats(scalarData, dimensions, centerIjk, radius) {\n    const [width, height, numSlices] = dimensions;\n    const numPixelsPerSlice = width * height;\n    let sum = 0;\n    let sumSq = 0;\n    let count = 0;\n    const [cx, cy, cz] = centerIjk.map(Math.round);\n    for (let z = cz - radius; z <= cz + radius; z++) {\n        if (z < 0 || z >= numSlices) {\n            continue;\n        }\n        for (let y = cy - radius; y <= cy + radius; y++) {\n            if (y < 0 || y >= height) {\n                continue;\n            }\n            for (let x = cx - radius; x <= cx + radius; x++) {\n                if (x < 0 || x >= width) {\n                    continue;\n                }\n                const index = z * numPixelsPerSlice + y * width + x;\n                const value = scalarData[index];\n                sum += value;\n                sumSq += value * value;\n                count++;\n            }\n        }\n    }\n    if (count === 0) {\n        const centerIndex = cz * numPixelsPerSlice + cy * width + cx;\n        if (centerIndex >= 0 && centerIndex < scalarData.length) {\n            const centerValue = scalarData[centerIndex];\n            return { mean: centerValue, stdDev: 0, count: 1 };\n        }\n        else {\n            return { mean: 0, stdDev: 0, count: 0 };\n        }\n    }\n    const mean = sum / count;\n    const variance = sumSq / count - mean * mean;\n    const stdDev = Math.sqrt(Math.max(0, variance));\n    return { mean, stdDev, count };\n}\n","import { isEqual } from './isEqual';\nimport { CalibrationTypes } from '../enums';\nconst projectionRadiographSOPClassUIDs = new Set([\n    '1.2.840.10008.5.1.4.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.2',\n    '1.2.840.10008.5.1.4.1.1.1.2.1',\n    '1.2.840.10008.5.1.4.1.1.1.3',\n    '1.2.840.10008.5.1.4.1.1.1.3.1',\n    '1.2.840.10008.5.1.4.1.1.12.1',\n    '1.2.840.10008.5.1.4.1.1.12.1.1',\n    '1.2.840.10008.5.1.4.1.1.12.2',\n    '1.2.840.10008.5.1.4.1.1.12.2.1',\n    '1.2.840.10008.5.1.4.1.1.12.3',\n]);\nfunction calculateRadiographicPixelSpacing(instance) {\n    const { PixelSpacing, ImagerPixelSpacing, EstimatedRadiographicMagnificationFactor, PixelSpacingCalibrationType, PixelSpacingCalibrationDescription, } = instance;\n    const isProjection = true;\n    if (!ImagerPixelSpacing) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.UNKNOWN,\n            isProjection,\n        };\n    }\n    if (!PixelSpacing) {\n        if (!EstimatedRadiographicMagnificationFactor) {\n            console.warn('EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.');\n            return {\n                PixelSpacing: ImagerPixelSpacing,\n                type: CalibrationTypes.PROJECTION,\n                isProjection,\n            };\n        }\n        const correctedPixelSpacing = ImagerPixelSpacing.map((pixelSpacing) => pixelSpacing / EstimatedRadiographicMagnificationFactor);\n        return {\n            PixelSpacing: correctedPixelSpacing,\n            type: CalibrationTypes.ERMF,\n            isProjection,\n        };\n    }\n    if (isEqual(PixelSpacing, ImagerPixelSpacing)) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.PROJECTION,\n            isProjection,\n        };\n    }\n    if (PixelSpacingCalibrationType || PixelSpacingCalibrationDescription) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.CALIBRATED,\n            isProjection,\n            PixelSpacingCalibrationType,\n            PixelSpacingCalibrationDescription,\n        };\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.UNKNOWN,\n        isProjection,\n    };\n}\nfunction calculateUSPixelSpacing(instance) {\n    const { SequenceOfUltrasoundRegions } = instance;\n    const isArrayOfSequences = Array.isArray(SequenceOfUltrasoundRegions);\n    if (isArrayOfSequences && SequenceOfUltrasoundRegions.length > 1) {\n        console.warn('Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.');\n        return;\n    }\n    const { PhysicalDeltaX, PhysicalDeltaY } = isArrayOfSequences\n        ? SequenceOfUltrasoundRegions[0]\n        : SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [\n        Math.abs(PhysicalDeltaX) * 10,\n        Math.abs(PhysicalDeltaY) * 10,\n    ];\n    return {\n        PixelSpacing: USPixelSpacing,\n    };\n}\nexport default function getPixelSpacingInformation(instance) {\n    const { PixelSpacing, SOPClassUID, SequenceOfUltrasoundRegions } = instance;\n    if (SequenceOfUltrasoundRegions) {\n        return calculateUSPixelSpacing(instance);\n    }\n    const isProjection = projectionRadiographSOPClassUIDs.has(SOPClassUID);\n    if (isProjection) {\n        return calculateRadiographicPixelSpacing(instance);\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.NOT_APPLICABLE,\n        isProjection: false,\n    };\n}\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex, { transformWorldToIndexContinuous, } from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport * as HistoryMemo from './historyMemo';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nexport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport FrameRange from './FrameRange';\nimport fnv1aHash from './fnv1aHash';\nimport { getImageDataMetadata } from './getImageDataMetadata';\nimport { buildMetadata } from './buildMetadata';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nimport createSubVolume from './createSubVolume';\nimport getVolumeDirectionVectors from './getVolumeDirectionVectors';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport * as logger from './logger';\nimport { calculateNeighborhoodStats } from './calculateNeighborhoodStats';\nimport getPixelSpacingInformation from './getPixelSpacingInformation';\nimport { asArray } from './asArray';\nexport { updatePlaneRestriction } from './updatePlaneRestriction';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport * from './isEqual';\nexport { FrameRange, eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, fnv1aHash, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, getMinMax, getRuntimeId, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, HistoryMemo, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, transformWorldToIndexContinuous, createSubVolume, getVolumeDirectionVectors, calculateSpacingBetweenImageIds, getImageDataMetadata, buildMetadata, calculateNeighborhoodStats, getPixelSpacingInformation, asArray, };\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nexport const isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nexport const isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nexport function isNumber(n) {\n    if (Array.isArray(n)) {\n        return isNumber(n[0]);\n    }\n    return isFinite(n) && !isNaN(n);\n}\nexport default isEqual;\n","import loglevelImport from 'loglevel';\nconst loglevel = loglevelImport.noConflict();\nif (typeof window !== 'undefined') {\n    window.log = loglevel;\n}\nexport function getRootLogger(name) {\n    const logger = loglevel.getLogger(name[0]);\n    logger.getLogger = (...names) => {\n        return getRootLogger(`${name}.${names.join('.')}`);\n    };\n    return logger;\n}\nexport function getLogger(...name) {\n    return getRootLogger(name.join('.'));\n}\nexport const cs3dLog = getRootLogger('cs3d');\nexport const coreLog = cs3dLog.getLogger('core');\nexport const toolsLog = cs3dLog.getLogger('tools');\nexport const loaderLog = cs3dLog.getLogger('dicomImageLoader');\nexport const aiLog = cs3dLog.getLogger('ai');\nexport const examplesLog = cs3dLog.getLogger('examples');\nexport const dicomConsistencyLog = getLogger('consistency', 'dicom');\nexport const imageConsistencyLog = getLogger('consistency', 'image');\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nfunction isPointOnPlane(point, plane, tolerance = EPSILON) {\n    return planeDistanceToPoint(plane, point) < tolerance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, isPointOnPlane, };\n","import { createPositionCallback } from './createPositionCallback';\nexport function pointInShapeCallback(imageData, options) {\n    const { pointInShapeFn, callback, boundsIJK, returnPoints = false } = options;\n    let scalarData;\n    if (imageData.getScalarData) {\n        scalarData = imageData.getScalarData();\n    }\n    else {\n        const scalars = imageData.getPointData().getScalars();\n        if (scalars) {\n            scalarData = scalars.getData();\n        }\n        else {\n            const { voxelManager } = imageData.get('voxelManager') || {};\n            if (voxelManager) {\n                scalarData = voxelManager.getCompleteScalarDataArray();\n            }\n        }\n    }\n    const dimensions = imageData.getDimensions();\n    const defaultBoundsIJK = [\n        [0, dimensions[0]],\n        [0, dimensions[1]],\n        [0, dimensions[2]],\n    ];\n    const bounds = boundsIJK || defaultBoundsIJK;\n    const pointsInShape = iterateOverPointsInShape({\n        imageData,\n        bounds,\n        scalarData,\n        pointInShapeFn,\n        callback,\n    });\n    return returnPoints ? pointsInShape : undefined;\n}\nexport function iterateOverPointsInShape({ imageData, bounds, scalarData, pointInShapeFn, callback, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const { numComps } = imageData;\n    const dimensions = imageData.getDimensions();\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const xMultiple = numComps ||\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n    const yMultiple = dimensions[0] * xMultiple;\n    const zMultiple = dimensions[1] * yMultiple;\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        const indexK = k * zMultiple;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            const indexJK = indexK + j * yMultiple;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = indexJK + i * xMultiple;\n                    let value;\n                    if (xMultiple > 2) {\n                        value = [\n                            scalarData[index],\n                            scalarData[index + 1],\n                            scalarData[index + 2],\n                        ];\n                    }\n                    else {\n                        value = scalarData[index];\n                    }\n                    pointsInShape.push({\n                        value,\n                        index,\n                        pointIJK,\n                        pointLPS: pointLPS.slice(),\n                    });\n                    callback({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\nexport function iterateOverPointsInShapeVoxelManager({ voxelManager, bounds, imageData, pointInShapeFn, callback, returnPoints, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = voxelManager.toIndex(pointIJK);\n                    const value = voxelManager.getAtIndex(index);\n                    if (returnPoints) {\n                        pointsInShape.push({\n                            value,\n                            index,\n                            pointIJK: [...pointIJK],\n                            pointLPS: pointLPS.slice(),\n                        });\n                    }\n                    callback?.({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    const zSpacing = calculateSpacingBetweenImageIds(imageIds);\n    let sortedImageIds;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n    }\n    const { imagePositionPatient: origin } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\nexport function transformWorldToIndexContinuous(imageData, worldPos) {\n    return imageData.worldToIndex(worldPos);\n}\n","import { isEqual } from '../utilities/isEqual';\nimport { vec3 } from 'gl-matrix';\nconst ORTHOGONAL_TEST_VALUE = 0.95;\nexport function updatePlaneRestriction(points, reference) {\n    if (!points?.length || !reference.FrameOfReferenceUID) {\n        return;\n    }\n    reference.planeRestriction ||= {\n        FrameOfReferenceUID: reference.FrameOfReferenceUID,\n        point: points[0],\n        inPlaneVector1: null,\n        inPlaneVector2: null,\n    };\n    const { planeRestriction } = reference;\n    if (points.length === 1) {\n        planeRestriction.inPlaneVector1 = null;\n        planeRestriction.inPlaneVector2 = null;\n        return planeRestriction;\n    }\n    const v1 = vec3.sub(vec3.create(), points[0], points[Math.floor(points.length / 2)]);\n    vec3.normalize(v1, v1);\n    planeRestriction.inPlaneVector1 = v1;\n    planeRestriction.inPlaneVector2 = null;\n    const n = points.length;\n    if (n > 2) {\n        for (let i = Math.floor(n / 3); i < n; i++) {\n            const testVector = vec3.sub(vec3.create(), points[i], points[0]);\n            const length = vec3.length(testVector);\n            if (isEqual(length, 0)) {\n                continue;\n            }\n            if (vec3.dot(testVector, planeRestriction.inPlaneVector1) <\n                length * ORTHOGONAL_TEST_VALUE) {\n                vec3.normalize(testVector, testVector);\n                planeRestriction.inPlaneVector2 = testVector;\n                return planeRestriction;\n            }\n        }\n    }\n    return planeRestriction;\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","import VOILUTFunctionType from '../enums/VOILUTFunctionType';\nimport { logit } from './logit';\nfunction toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n    if (voiLUTFunction === VOILUTFunctionType.LINEAR) {\n        return {\n            lower: windowCenter - 0.5 - (windowWidth - 1) / 2,\n            upper: windowCenter - 0.5 + (windowWidth - 1) / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.LINEAR_EXACT) {\n        return {\n            lower: windowCenter - windowWidth / 2,\n            upper: windowCenter + windowWidth / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n        const xLower = logit(0.01, windowCenter, windowWidth);\n        const xUpper = logit(0.99, windowCenter, windowWidth);\n        return {\n            lower: xLower,\n            upper: xUpper,\n        };\n    }\n    else {\n        throw new Error('Invalid VOI LUT function');\n    }\n}\nexport { toWindowLevel, toLowHighRange };\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n            bounce: playClipOptions.bounce ?? false,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    if (playClipOptions.bounce !== undefined) {\n        playClipData.bounce = playClipOptions.bounce;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (outOfRange) {\n            if (playClipData.bounce) {\n                playClipData.reverse = !playClipData.reverse;\n                newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n                newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));\n            }\n            else if (!playClipData.loop) {\n                _stopClip(element, {\n                    stopDynamicCine: !isDynamicCinePlaying,\n                    viewportId: viewport.id,\n                });\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n                return;\n            }\n            else {\n                newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;\n            }\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nconst iAxis = vec3.fromValues(1, 0, 0);\nconst jAxis = vec3.fromValues(0, 1, 0);\nconst kAxis = vec3.fromValues(0, 0, 1);\nconst axisList = [iAxis, jAxis, kAxis];\nfunction isAxisAlignedRectangle(rectangleCornersIJK) {\n    const rectangleVec1 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);\n    const rectangleVec2 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);\n    const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);\n    const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);\n    const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual(angle, 0) ||\n        isEqual(angle, 90) ||\n        isEqual(angle, 180) ||\n        isEqual(angle, 270));\n    return isAligned;\n}\nfunction calculateAnglesWithAxes(vec, axes) {\n    return axes.map((axis) => (vec3.angle(vec, axis) * 180) / Math.PI);\n}\nexport { isAxisAlignedRectangle };\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, getPromiseRemovedHandler, nearestIndex, range, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    preserveExistingPool: true,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\nfunction prefetch(element) {\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    const stack = getStackData(element);\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    indicesToRequestCopy.forEach(function (imageIdIndex) {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n    const nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);\n    let imageId;\n    let nextImageIdIndex;\n    const preventCache = false;\n    function doneCallback(image) {\n        console.log('prefetch done: %s', image.imageId);\n        const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n        removeFromList(imageIdIndex);\n    }\n    let lowerIndex = nearest.low;\n    let higherIndex = nearest.high;\n    const imageIdsToPrefetch = [];\n    while (lowerIndex >= 0 ||\n        higherIndex < stackPrefetch.indicesToRequest.length) {\n        const currentIndex = stack.currentImageIdIndex;\n        const shouldSkipLower = currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n            configuration.maxImagesToPrefetch;\n        const shouldSkipHigher = stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n            configuration.maxImagesToPrefetch;\n        const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n        const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n        if (!shouldLoadHigher && !shouldLoadLower) {\n            break;\n        }\n        if (shouldLoadLower) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n        if (shouldLoadHigher) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    imageIdsToPrefetch.forEach((imageId) => {\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nfunction enable(element) {\n    const stack = getStackData(element);\n    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = {\n        indicesToRequest: range(0, stack.imageIds.length - 1),\n        enabled: true,\n        direction: 1,\n    };\n    const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);\n    stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n    addToolState(element, stackPrefetchData);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n}\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n        stackPrefetchData.enabled = false;\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\nexport default stackPrefetch;\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, clearFromImageIds, getPromiseRemovedHandler, } from './stackPrefetchUtils';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    minBefore: 2,\n    maxAfter: 2,\n    directionExtraImages: 10,\n    preserveExistingPool: false,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 5;\nconst enable = (element) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    updateToolState(element);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n};\nfunction prefetch(element) {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    const { currentImageIdIndex } = stack;\n    indicesToRequestCopy.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n    }\n    function doneCallback(imageId) {\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        const image = cache.getCachedImageBasedOnImageURI(imageId);\n        const { stats } = stackPrefetch;\n        const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n        if (decodeTimeInMS) {\n            stats.imageIds.set(imageId, decodeTimeInMS);\n            stats.decodeTimeInMS += decodeTimeInMS;\n            const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n            stats.loadTimeInMS += loadTimeInMS;\n        }\n        if (!stackPrefetch.indicesToRequest.length) {\n            if (image?.sizeInBytes) {\n                const { sizeInBytes } = image;\n                const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n                if (!stackPrefetch.cacheFill) {\n                    stats.initialTime = Date.now() - stats.start;\n                    stats.initialSize = stats.imageIds.size;\n                    updateToolState(element, usage);\n                    prefetch(element);\n                }\n                else if (stats.imageIds.size) {\n                    stats.fillTime = Date.now() - stats.start;\n                    const { size } = stats.imageIds;\n                    stats.fillSize = size;\n                }\n            }\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    stackPrefetch.indicesToRequest.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            updateToolState(element);\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nconst signum = (x) => (x < 0 ? -1 : 1);\nconst updateToolState = (element, usage) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    let { maxAfter = 2, minBefore = 2 } = configuration;\n    const { directionExtraImages = 10 } = configuration;\n    const stackPrefetchData = getToolState(element) ||\n        {\n            indicesToRequest: [],\n            currentImageIdIndex,\n            stackCount: 0,\n            enabled: true,\n            direction: 1,\n            stats: {\n                start: Date.now(),\n                imageIds: new Map(),\n                decodeTimeInMS: 0,\n                loadTimeInMS: 0,\n                totalBytes: 0,\n            },\n        };\n    const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n    stackPrefetchData.direction = signum(delta);\n    stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n    stackPrefetchData.enabled = true;\n    if (stackPrefetchData.stackCount < 100) {\n        stackPrefetchData.stackCount += directionExtraImages;\n    }\n    if (Math.abs(delta) > maxAfter || !delta) {\n        stackPrefetchData.stackCount = 0;\n        if (usage) {\n            const positionFraction = currentImageIdIndex / stack.imageIds.length;\n            minBefore = Math.ceil(usage * positionFraction);\n            maxAfter = Math.ceil(usage * (1 - positionFraction));\n            stackPrefetchData.cacheFill = true;\n        }\n        else {\n            stackPrefetchData.cacheFill = false;\n        }\n    }\n    else if (delta < 0) {\n        minBefore += stackPrefetchData.stackCount;\n        maxAfter = 0;\n    }\n    else {\n        maxAfter += stackPrefetchData.stackCount;\n        minBefore = 0;\n    }\n    const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n    const maxIndex = Math.min(stack.imageIds.length - 1, currentImageIdIndex + maxAfter);\n    const indicesToRequest = [];\n    for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n        indicesToRequest.push(i);\n    }\n    for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n        indicesToRequest.push(i);\n    }\n    stackPrefetchData.indicesToRequest = indicesToRequest;\n    addToolState(element, stackPrefetchData);\n};\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData) {\n        stackPrefetchData.enabled = false;\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackContextPrefetch = {\n    enable,\n    disable,\n    getConfiguration,\n    setConfiguration,\n};\nexport default stackContextPrefetch;\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","export function pickPoints(hull, slack = 7) {\n    if (!hull.length) {\n        throw new Error('Convex hull is empty');\n    }\n    const n = hull.length;\n    const next = (i) => (i + 1) % n;\n    const walk = (from, to) => {\n        const idx = [];\n        for (let i = from;; i = next(i)) {\n            idx.push(i);\n            if (i === to) {\n                break;\n            }\n        }\n        return idx;\n    };\n    let i2 = 0, i3 = 0;\n    for (let i = 1; i < n; i++) {\n        if (hull[i][0] < hull[i2][0]) {\n            i2 = i;\n        }\n        if (hull[i][0] > hull[i3][0]) {\n            i3 = i;\n        }\n    }\n    const P2 = hull[i2];\n    const P3 = hull[i3];\n    const pathA = walk(i2, i3);\n    const pathB = walk(i3, i2);\n    const globalYmin = Math.min(...hull.map((p) => p[1]));\n    const upperPath = pathA.some((i) => hull[i][1] === globalYmin)\n        ? pathA\n        : pathB;\n    const topY = Math.min(...upperPath.map((i) => hull[i][1]));\n    let arcPts = upperPath\n        .map((i) => hull[i])\n        .filter((p) => Math.abs(p[1] - topY) <= slack);\n    if (arcPts.length < 2) {\n        arcPts = upperPath\n            .map((i) => hull[i])\n            .sort((a, b) => a[1] - b[1])\n            .slice(0, 2);\n    }\n    const P1 = arcPts.reduce((best, p) => (p[0] < best[0] ? p : best), arcPts[0]);\n    const P4 = arcPts.reduce((best, p) => (p[0] > best[0] ? p : best), arcPts[0]);\n    return { P1, P2, P3, P4 };\n}\nexport function computeEdgeBuffer(buffer, width, height) {\n    const total = width * height;\n    const channels = buffer.length / total;\n    if (![1, 3, 4].includes(channels)) {\n        throw new Error('Buffer must be 1,3 or 4 channels per pixel');\n    }\n    const gray = new Float32Array(total);\n    for (let i = 0; i < total; i++) {\n        if (channels === 1) {\n            gray[i] = buffer[i];\n        }\n        else {\n            const base = i * channels;\n            const r = buffer[base];\n            const g = buffer[base + 1];\n            const b = buffer[base + 2];\n            gray[i] = 0.299 * r + 0.587 * g + 0.114 * b;\n        }\n    }\n    const edgeBuf = new Float32Array(total);\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = y * width + x;\n            const i00 = idx - width - 1;\n            const i01 = idx - width;\n            const i02 = idx - width + 1;\n            const i10 = idx - 1;\n            const i11 = idx;\n            const i12 = idx + 1;\n            const i20 = idx + width - 1;\n            const i21 = idx + width;\n            const i22 = idx + width + 1;\n            const gx = -gray[i00] +\n                gray[i02] +\n                -2 * gray[i10] +\n                2 * gray[i12] +\n                -gray[i20] +\n                gray[i22];\n            const gy = gray[i00] +\n                2 * gray[i01] +\n                gray[i02] -\n                gray[i20] -\n                2 * gray[i21] -\n                gray[i22];\n            edgeBuf[idx] = Math.hypot(gx, gy);\n        }\n    }\n    return edgeBuf;\n}\nexport function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {\n    const { maxDist = 15, slack = 2 } = opts;\n    const directions = {\n        P1: { dx: -1, dy: -1 },\n        P2: { dx: -1, dy: +1 },\n        P3: { dx: +1, dy: +1 },\n        P4: { dx: +1, dy: -1 },\n    };\n    function snapQuadrant(pt, { dx, dy }, threshold = 5) {\n        const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;\n        const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;\n        const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;\n        const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;\n        let best = pt;\n        for (const [cx, cy] of contour) {\n            if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {\n                continue;\n            }\n            const xi = Math.round(cx);\n            const yi = Math.round(cy);\n            if (xi < 0 || xi >= width || yi < 0 || yi >= height) {\n                continue;\n            }\n            const xAlign = (xi - best[0]) * dx;\n            const yAlign = (yi - best[0]) * dy;\n            const v = edgeBuf[yi * width + xi];\n            if (v > threshold && (xAlign > 0 || yAlign > 0)) {\n                best = [cx, cy];\n            }\n        }\n        return best;\n    }\n    return {\n        P1: snapQuadrant(rough.P1, directions.P1),\n        P2: snapQuadrant(rough.P2, directions.P2),\n        P3: snapQuadrant(rough.P3, directions.P3),\n        P4: snapQuadrant(rough.P4, directions.P4),\n    };\n}\nexport function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {\n    const rough = pickPoints(hull);\n    const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {\n        maxDist: 20,\n        step: 0.5,\n    });\n    return refined;\n}\n","import { intersectLine } from '../../../../utilities/math/line';\nfunction angleRad(center, p) {\n    return Math.atan2(p[1] - center[1], p[0] - center[0]);\n}\nexport function deriveFanGeometry(params) {\n    const { P1, P2, P3, P4 } = params;\n    const centerResult = intersectLine(P1, P2, P4, P3, true);\n    if (!centerResult) {\n        throw new Error('Fan edges appear parallel — no apex found');\n    }\n    const center = centerResult;\n    let startAngle = angleRad(center, P1) * (180 / Math.PI);\n    let endAngle = angleRad(center, P4) * (180 / Math.PI);\n    if (endAngle <= startAngle) {\n        const tempAngle = startAngle;\n        startAngle = endAngle;\n        endAngle = tempAngle;\n    }\n    const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);\n    const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);\n    const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);\n    const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);\n    const innerRadius = Math.min(d1, d4);\n    const outerRadius = Math.max(d2, d3);\n    return {\n        center,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius,\n    };\n}\n","import { cache } from '@cornerstonejs/core';\nimport { segmentLargestUSOutlineFromBuffer } from './segmentLargestUSOutlineFromBuffer';\nimport { generateConvexHullFromContour } from './generateConvexHullFromContour';\nimport { calculateFanShapeCorners } from './calculateFanShapeCorners';\nimport { deriveFanGeometry } from './deriveFanGeometry';\nexport function exportContourJpeg(pixelData, width, height, contour, opts = {}) {\n    const { strokeStyle = '#f00', lineWidth = 2, quality = 0.92 } = opts;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const totalPixels = width * height;\n    const channels = pixelData.length / totalPixels;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        const baseIn = i * channels;\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[baseIn];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    if (contour.length > 0) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);\n        for (let i = 1; i < contour.length; i++) {\n            ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function getPixelData(imageId) {\n    const image = cache.getImage(imageId);\n    if (!image) {\n        return;\n    }\n    const width = image.width;\n    const height = image.height;\n    const pixelData = image.getPixelData();\n    return {\n        pixelData,\n        width,\n        height,\n    };\n}\nexport default function saveBinaryData(url, filename) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.click();\n    a.remove();\n}\nfunction exportFanJpeg(pixelData, width, height, fan, opts = {}) {\n    const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius, } = fan;\n    const { strokeStyle = '#0ff', lineWidth = 2, quality = 0.92 } = opts;\n    const startAngle = (startAngleInDegrees * Math.PI) / 180;\n    const endAngle = (endAngleInDegrees * Math.PI) / 180;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const total = width * height;\n    const channels = pixelData.length / total;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < total; i++) {\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[i];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            const baseIn = i * channels;\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    ctx.beginPath();\n    for (let a = startAngle; a <= endAngle; a += 0.01) {\n        const x = center[0] + innerRadius * Math.cos(a);\n        const y = center[1] + innerRadius * Math.sin(a);\n        if (a === startAngle) {\n            ctx.moveTo(x, y);\n        }\n        else {\n            ctx.lineTo(x, y);\n        }\n    }\n    for (let a = endAngle; a >= startAngle; a -= 0.01) {\n        const x = center[0] + outerRadius * Math.cos(a);\n        const y = center[1] + outerRadius * Math.sin(a);\n        ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function downloadFanJpeg(imageId, contourType = 5) {\n    const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    let jpegDataUrl;\n    if (contourType === 1) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);\n    }\n    else if (contourType === 2) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);\n    }\n    else if (contourType === 3) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);\n    }\n    else if (contourType === 4) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, [\n            refined.P1,\n            refined.P2,\n            refined.P3,\n            refined.P4,\n        ]);\n    }\n    else {\n        jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {\n            strokeStyle: '#f00',\n            lineWidth: 3,\n            quality: 0.95,\n        });\n    }\n    saveBinaryData(jpegDataUrl, 'contour.jpg');\n}\nexport function calculateFanGeometry(imageId) {\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);\n    const { simplified, hull } = generateConvexHullFromContour(contour);\n    const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);\n    const fanGeometry = deriveFanGeometry({\n        P1: refined.P1,\n        P2: refined.P2,\n        P3: refined.P3,\n        P4: refined.P4,\n    });\n    return { contour, simplified, hull, refined, fanGeometry };\n}\n","import { floodFill } from '../../../../utilities/segmentation';\nexport function segmentLargestUSOutlineFromBuffer(buffer, width, height) {\n    const totalPixels = width * height;\n    const channelCount = buffer.length / totalPixels;\n    if (![1, 3, 4].includes(channelCount)) {\n        throw new Error('Buffer must be 1, 3, or 4 channels per pixel');\n    }\n    const mask = Array.from({ length: height }, () => new Array(width).fill(false));\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const pixelIndex = y * width + x;\n            const base = pixelIndex * channelCount;\n            let isForeground = false;\n            for (let c = 0; c < Math.min(3, channelCount); c++) {\n                if (buffer[base + c] > 0) {\n                    isForeground = true;\n                    break;\n                }\n            }\n            mask[y][x] = isForeground;\n        }\n    }\n    const labels = Array.from({ length: height }, () => new Array(width).fill(0));\n    let currentLabel = 0;\n    const regionSizes = {};\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (mask[y][x] && labels[y][x] === 0) {\n                currentLabel++;\n                const getter = (px, py) => {\n                    if (px < 0 || px >= width || py < 0 || py >= height) {\n                        return false;\n                    }\n                    return mask[py][px] && labels[py][px] === 0;\n                };\n                let pixelCount = 0;\n                const options = {\n                    onFlood: (px, py) => {\n                        labels[py][px] = currentLabel;\n                        pixelCount++;\n                    },\n                    diagonals: false,\n                };\n                floodFill(getter, [x, y], options);\n                regionSizes[currentLabel] = pixelCount;\n            }\n        }\n    }\n    if (currentLabel === 0) {\n        return [];\n    }\n    const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);\n    function isBorder(x, y) {\n        if (labels[y][x] !== +largestLabel) {\n            return false;\n        }\n        for (const [dx, dy] of [\n            [1, 0],\n            [-1, 0],\n            [0, 1],\n            [0, -1],\n        ]) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                labels[ny][nx] !== +largestLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n    let start = null;\n    outer: for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (isBorder(x, y)) {\n                start = [x, y];\n                break outer;\n            }\n        }\n    }\n    if (!start) {\n        return [];\n    }\n    const dirs = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n    ];\n    const contour = [];\n    let current = start;\n    let prev = [start[0] - 1, start[1]];\n    do {\n        contour.push([current[0], current[1]]);\n        const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];\n        let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);\n        if (startDir < 0) {\n            startDir = 0;\n        }\n        let nextPt = null;\n        for (let k = 1; k <= 8; k++) {\n            const [dx, dy] = dirs[(startDir + k) % 8];\n            const nx = current[0] + dx, ny = current[1] + dy;\n            if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {\n                nextPt = [nx, ny];\n                const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];\n                prev = [current[0] + bdx, current[1] + bdy];\n                break;\n            }\n        }\n        if (!nextPt) {\n            break;\n        }\n        current = nextPt;\n    } while (current[0] !== start[0] || current[1] !== start[1]);\n    return contour;\n}\n","import * as math from '../../../../utilities/math';\nexport function generateConvexHullFromContour(contour) {\n    const simplified = math.polyline.decimate(contour, 2);\n    const hull = math.polyline.convexHull(simplified);\n    return { simplified, hull };\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nimport * as usFanExtraction from '../tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, usFanExtraction, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkSphereSource from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport { BaseTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, Enums, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nconst PLANEINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n};\nconst SPHEREINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n    XMIN_YMIN_ZMIN: 6,\n    XMIN_YMIN_ZMAX: 7,\n    XMIN_YMAX_ZMIN: 8,\n    XMIN_YMAX_ZMAX: 9,\n    XMAX_YMIN_ZMIN: 10,\n    XMAX_YMIN_ZMAX: 11,\n    XMAX_YMAX_ZMIN: 12,\n    XMAX_YMAX_ZMAX: 13,\n};\nclass VolumeCroppingTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            showCornerSpheres: true,\n            showHandles: true,\n            showClippingPlanes: true,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            initialCropFactor: 0.08,\n            sphereColors: {\n                SAGITTAL: [1.0, 1.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                AXIAL: [1.0, 0.0, 0.0],\n                CORNERS: [0.0, 0.0, 1.0],\n            },\n            sphereRadius: 8,\n            grabSpherePixelDistance: 20,\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.originalClippingPlanes = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.cornerDragOffset = null;\n        this.faceDragOffset = null;\n        this.sphereStates = [];\n        this.edgeLines = {};\n        this.onSetToolConfiguration = () => {\n            console.debug('Setting tool settoolconfiguration : volumeCropping');\n        };\n        this.onSetToolEnabled = () => {\n            console.debug('Setting tool enabled: volumeCropping');\n        };\n        this.onCameraModified = (evt) => {\n            const { element } = evt.currentTarget\n                ? { element: evt.currentTarget }\n                : evt.detail;\n            const enabledElement = getEnabledElement(element);\n            this._updateClippingPlanes(enabledElement.viewport);\n            enabledElement.viewport.render();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const mouseCanvas = [\n                evt.detail.currentPoints.canvas[0],\n                evt.detail.currentPoints.canvas[1],\n            ];\n            this.draggingSphereIndex = null;\n            this.cornerDragOffset = null;\n            this.faceDragOffset = null;\n            for (let i = 0; i < this.sphereStates.length; ++i) {\n                const sphereCanvas = viewport.worldToCanvas(this.sphereStates[i].point);\n                const dist = Math.sqrt(Math.pow(mouseCanvas[0] - sphereCanvas[0], 2) +\n                    Math.pow(mouseCanvas[1] - sphereCanvas[1], 2));\n                if (dist < this.configuration.grabSpherePixelDistance) {\n                    this.draggingSphereIndex = i;\n                    element.style.cursor = 'grabbing';\n                    const sphereState = this.sphereStates[i];\n                    const mouseWorld = viewport.canvasToWorld(mouseCanvas);\n                    if (sphereState.isCorner) {\n                        this.cornerDragOffset = [\n                            sphereState.point[0] - mouseWorld[0],\n                            sphereState.point[1] - mouseWorld[1],\n                            sphereState.point[2] - mouseWorld[2],\n                        ];\n                        this.faceDragOffset = null;\n                    }\n                    else {\n                        const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                        this.faceDragOffset =\n                            sphereState.point[axisIdx] - mouseWorld[axisIdx];\n                        this.cornerDragOffset = null;\n                    }\n                    return true;\n                }\n            }\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    evt.target.style.cursor = '';\n                    if (this.draggingSphereIndex !== null) {\n                        const sphereState = this.sphereStates[this.draggingSphereIndex];\n                        const [viewport3D] = this._getViewportsInfo();\n                        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n                        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n                        if (sphereState.isCorner) {\n                            this._updateCornerSpheres();\n                            this._updateFaceSpheresFromCorners();\n                            this._updateClippingPlanesFromFaceSpheres(viewport);\n                        }\n                    }\n                    this.draggingSphereIndex = null;\n                    this.cornerDragOffset = null;\n                    this.faceDragOffset = null;\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._onMouseMoveSphere = (evt) => {\n            if (this.draggingSphereIndex === null) {\n                return false;\n            }\n            const sphereState = this.sphereStates[this.draggingSphereIndex];\n            if (!sphereState) {\n                return false;\n            }\n            const { viewport, world } = this._getViewportAndWorldCoords(evt);\n            if (!viewport || !world) {\n                return false;\n            }\n            if (sphereState.isCorner) {\n                const newCorner = this._calculateNewCornerPosition(world);\n                this._updateSpherePosition(sphereState, newCorner);\n                const axisFlags = this._parseCornerKey(sphereState.uid);\n                this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            else {\n                const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                let newValue = world[axisIdx];\n                if (this.faceDragOffset !== null) {\n                    newValue += this.faceDragOffset;\n                }\n                sphereState.point[axisIdx] = newValue;\n                sphereState.sphereSource.setCenter(...sphereState.point);\n                sphereState.sphereSource.modified();\n                this._updateCornerSpheresFromFaces();\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n            viewport.render();\n            this._triggerToolChangedEvent(sphereState);\n            return true;\n        };\n        this._onControlToolChange = (evt) => {\n            const viewport = this._getViewport();\n            if (!evt.detail.toolCenter) {\n                triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                    originalClippingPlanes: this.originalClippingPlanes,\n                    viewportId: viewport.id,\n                    renderingEngineId: viewport.renderingEngineId,\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const isMin = evt.detail.handleType === 'min';\n                const toolCenter = isMin\n                    ? evt.detail.toolCenterMin\n                    : evt.detail.toolCenterMax;\n                const normals = isMin\n                    ? [\n                        [1, 0, 0],\n                        [0, 1, 0],\n                        [0, 0, 1],\n                    ]\n                    : [\n                        [-1, 0, 0],\n                        [0, -1, 0],\n                        [0, 0, -1],\n                    ];\n                const planeIndices = isMin\n                    ? [PLANEINDEX.XMIN, PLANEINDEX.YMIN, PLANEINDEX.ZMIN]\n                    : [PLANEINDEX.XMAX, PLANEINDEX.YMAX, PLANEINDEX.ZMAX];\n                const sphereIndices = isMin\n                    ? [SPHEREINDEX.XMIN, SPHEREINDEX.YMIN, SPHEREINDEX.ZMIN]\n                    : [SPHEREINDEX.XMAX, SPHEREINDEX.YMAX, SPHEREINDEX.ZMAX];\n                const axes = ['x', 'y', 'z'];\n                const orientationAxes = [\n                    Enums.OrientationAxis.SAGITTAL,\n                    Enums.OrientationAxis.CORONAL,\n                    Enums.OrientationAxis.AXIAL,\n                ];\n                for (let i = 0; i < 3; ++i) {\n                    const origin = [0, 0, 0];\n                    origin[i] = toolCenter[i];\n                    const plane = vtkPlane.newInstance({\n                        origin,\n                        normal: normals[i],\n                    });\n                    this.originalClippingPlanes[planeIndices[i]].origin = plane.getOrigin();\n                    this.sphereStates[sphereIndices[i]].point[i] = plane.getOrigin()[i];\n                    this.sphereStates[sphereIndices[i]].sphereSource.setCenter(...this.sphereStates[sphereIndices[i]].point);\n                    this.sphereStates[sphereIndices[i]].sphereSource.modified();\n                    const otherSphere = this.sphereStates.find((s, idx) => s.axis === axes[i] && idx !== sphereIndices[i]);\n                    const newCenter = (otherSphere.point[i] + plane.getOrigin()[i]) / 2;\n                    this.sphereStates.forEach((state) => {\n                        if (!state.isCorner &&\n                            state.axis !== axes[i] &&\n                            !evt.detail.viewportOrientation.includes(orientationAxes[i])) {\n                            state.point[i] = newCenter;\n                            state.sphereSource.setCenter(state.point);\n                            state.sphereActor.getProperty().setColor(state.color);\n                            state.sphereSource.modified();\n                        }\n                    });\n                    const volumeActor = viewport.getDefaultActor()?.actor;\n                    if (volumeActor) {\n                        const mapper = volumeActor.getMapper();\n                        const clippingPlanes = mapper.getClippingPlanes();\n                        if (clippingPlanes) {\n                            clippingPlanes[planeIndices[i]].setOrigin(plane.getOrigin());\n                        }\n                    }\n                }\n                this._updateCornerSpheres();\n                viewport.render();\n            }\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this._initialize3DViewports = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo.length || !viewportsInfo[0]) {\n                console.warn('VolumeCroppingTool: No viewportsInfo available for initialization of volumecroppingtool.');\n                return;\n            }\n            const viewport = this._getViewport();\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || volumeActors.length === 0) {\n                console.warn('VolumeCroppingTool: No volume actors found in the viewport.');\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (!imageData) {\n                console.warn('VolumeCroppingTool: No image data found for volume actor.');\n                return;\n            }\n            this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n            const worldBounds = imageData.getBounds();\n            const cropFactor = this.configuration.initialCropFactor || 0.1;\n            const xRange = worldBounds[1] - worldBounds[0];\n            const yRange = worldBounds[3] - worldBounds[2];\n            const zRange = worldBounds[5] - worldBounds[4];\n            const xMin = worldBounds[0] + cropFactor * xRange;\n            const xMax = worldBounds[1] - cropFactor * xRange;\n            const yMin = worldBounds[2] + cropFactor * yRange;\n            const yMax = worldBounds[3] - cropFactor * yRange;\n            const zMin = worldBounds[4] + cropFactor * zRange;\n            const zMax = worldBounds[5] - cropFactor * zRange;\n            const planes = [];\n            const planeXmin = vtkPlane.newInstance({\n                origin: [xMin, 0, 0],\n                normal: [1, 0, 0],\n            });\n            const planeXmax = vtkPlane.newInstance({\n                origin: [xMax, 0, 0],\n                normal: [-1, 0, 0],\n            });\n            const planeYmin = vtkPlane.newInstance({\n                origin: [0, yMin, 0],\n                normal: [0, 1, 0],\n            });\n            const planeYmax = vtkPlane.newInstance({\n                origin: [0, yMax, 0],\n                normal: [0, -1, 0],\n            });\n            const planeZmin = vtkPlane.newInstance({\n                origin: [0, 0, zMin],\n                normal: [0, 0, 1],\n            });\n            const planeZmax = vtkPlane.newInstance({\n                origin: [0, 0, zMax],\n                normal: [0, 0, -1],\n            });\n            const mapper = viewport\n                .getDefaultActor()\n                .actor.getMapper();\n            planes.push(planeXmin);\n            planes.push(planeXmax);\n            planes.push(planeYmin);\n            planes.push(planeYmax);\n            planes.push(planeZmin);\n            planes.push(planeZmax);\n            const originalPlanes = planes.map((plane) => ({\n                origin: [...plane.getOrigin()],\n                normal: [...plane.getNormal()],\n            }));\n            this.originalClippingPlanes = originalPlanes;\n            const sphereXminPoint = [xMin, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereXmaxPoint = [xMax, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereYminPoint = [(xMax + xMin) / 2, yMin, (zMax + zMin) / 2];\n            const sphereYmaxPoint = [(xMax + xMin) / 2, yMax, (zMax + zMin) / 2];\n            const sphereZminPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMin];\n            const sphereZmaxPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMax];\n            const adaptiveRadius = this._calculateAdaptiveSphereRadius(Math.sqrt(xRange * xRange + yRange * yRange + zRange * zRange));\n            this._addSphere(viewport, sphereXminPoint, 'x', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereXmaxPoint, 'x', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYminPoint, 'y', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYmaxPoint, 'y', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZminPoint, 'z', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZmaxPoint, 'z', 'max', null, adaptiveRadius);\n            const corners = [\n                [xMin, yMin, zMin],\n                [xMin, yMin, zMax],\n                [xMin, yMax, zMin],\n                [xMin, yMax, zMax],\n                [xMax, yMin, zMin],\n                [xMax, yMin, zMax],\n                [xMax, yMax, zMin],\n                [xMax, yMax, zMax],\n            ];\n            const cornerKeys = [\n                'XMIN_YMIN_ZMIN',\n                'XMIN_YMIN_ZMAX',\n                'XMIN_YMAX_ZMIN',\n                'XMIN_YMAX_ZMAX',\n                'XMAX_YMIN_ZMIN',\n                'XMAX_YMIN_ZMAX',\n                'XMAX_YMAX_ZMIN',\n                'XMAX_YMAX_ZMAX',\n            ];\n            for (let i = 0; i < corners.length; i++) {\n                this._addSphere(viewport, corners[i], 'corner', null, cornerKeys[i], adaptiveRadius);\n            }\n            const edgeCornerPairs = [\n                ['XMIN_YMIN_ZMIN', 'XMAX_YMIN_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMAX_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMIN_YMAX_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMAX_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMAX_YMIN_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMIN_ZMAX'],\n                ['XMAX_YMAX_ZMIN', 'XMAX_YMAX_ZMAX'],\n            ];\n            edgeCornerPairs.forEach(([key1, key2], i) => {\n                const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n                const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n                if (state1 && state2) {\n                    const uid = `edge_${key1}_${key2}`;\n                    const { actor, source } = this._addLine3DBetweenPoints(viewport, state1.point, state2.point, [0.7, 0.7, 0.7], uid);\n                    this.edgeLines[uid] = { actor, source, key1, key2 };\n                }\n            });\n            mapper.addClippingPlane(planeXmin);\n            mapper.addClippingPlane(planeXmax);\n            mapper.addClippingPlane(planeYmin);\n            mapper.addClippingPlane(planeYmax);\n            mapper.addClippingPlane(planeZmin);\n            mapper.addClippingPlane(planeZmax);\n            eventTarget.addEventListener(Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, (evt) => {\n                this._onControlToolChange(evt);\n            });\n            viewport.render();\n        };\n        this._getViewportAndWorldCoords = (evt) => {\n            const viewport = this._getViewport();\n            const x = evt.detail.currentPoints.canvas[0];\n            const y = evt.detail.currentPoints.canvas[1];\n            const world = viewport.canvasToWorld([x, y]);\n            return { viewport, world };\n        };\n        this._getViewport = () => {\n            const [viewport3D] = this._getViewportsInfo();\n            const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n            return renderingEngine.getViewport(viewport3D.viewportId);\n        };\n        this._handleCornerSphereMovement = (sphereState, world, viewport) => {\n            const newCorner = this._calculateNewCornerPosition(world);\n            this._updateSpherePosition(sphereState, newCorner);\n            const axisFlags = this._parseCornerKey(sphereState.uid);\n            this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n            this._updateAfterCornerMovement(viewport);\n        };\n        this._handleFaceSphereMovement = (sphereState, world, viewport) => {\n            const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n            let newValue = world[axisIdx];\n            if (this.faceDragOffset !== null) {\n                newValue += this.faceDragOffset;\n            }\n            sphereState.point[axisIdx] = newValue;\n            sphereState.sphereSource.setCenter(...sphereState.point);\n            sphereState.sphereSource.modified();\n            this._updateAfterFaceMovement(viewport);\n        };\n        this._calculateNewCornerPosition = (world) => {\n            let newCorner = [world[0], world[1], world[2]];\n            if (this.cornerDragOffset) {\n                newCorner = [\n                    world[0] + this.cornerDragOffset[0],\n                    world[1] + this.cornerDragOffset[1],\n                    world[2] + this.cornerDragOffset[2],\n                ];\n            }\n            return newCorner;\n        };\n        this._parseCornerKey = (uid) => {\n            const cornerKey = uid.replace('corner_', '');\n            return {\n                isXMin: cornerKey.includes('XMIN'),\n                isXMax: cornerKey.includes('XMAX'),\n                isYMin: cornerKey.includes('YMIN'),\n                isYMax: cornerKey.includes('YMAX'),\n                isZMin: cornerKey.includes('ZMIN'),\n                isZMax: cornerKey.includes('ZMAX'),\n            };\n        };\n        this._updateSpherePosition = (sphereState, newPosition) => {\n            sphereState.point = newPosition;\n            sphereState.sphereSource.setCenter(...newPosition);\n            sphereState.sphereSource.modified();\n        };\n        this._updateRelatedCorners = (draggedSphere, newCorner, axisFlags) => {\n            this.sphereStates.forEach((state) => {\n                if (!state.isCorner || state === draggedSphere) {\n                    return;\n                }\n                const key = state.uid.replace('corner_', '');\n                const shouldUpdate = this._shouldUpdateCorner(key, axisFlags);\n                if (shouldUpdate) {\n                    this._updateCornerCoordinates(state, newCorner, key, axisFlags);\n                }\n            });\n        };\n        this._shouldUpdateCorner = (cornerKey, axisFlags) => {\n            return ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX')) ||\n                (axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX')) ||\n                (axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX')));\n        };\n        this._updateCornerCoordinates = (state, newCorner, cornerKey, axisFlags) => {\n            if ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX'))) {\n                state.point[0] = newCorner[0];\n            }\n            if ((axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX'))) {\n                state.point[1] = newCorner[1];\n            }\n            if ((axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX'))) {\n                state.point[2] = newCorner[2];\n            }\n            state.sphereSource.setCenter(...state.point);\n            state.sphereSource.modified();\n        };\n        this._updateAfterCornerMovement = (viewport) => {\n            this._updateFaceSpheresFromCorners();\n            this._updateCornerSpheres();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._updateAfterFaceMovement = (viewport) => {\n            this._updateCornerSpheresFromFaces();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._triggerToolChangedEvent = (sphereState) => {\n            triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                toolCenter: sphereState.point,\n                axis: sphereState.isCorner ? 'corner' : sphereState.axis,\n                draggingSphereIndex: this.draggingSphereIndex,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this.originalClippingPlanes = [];\n            this.sphereStates = [];\n            this.edgeLines = {};\n            this._initialize3DViewports(viewportsInfo);\n        };\n        this._rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    onSetToolActive() {\n        if (this.sphereStates && this.sphereStates.length > 0) {\n            if (this.configuration.showHandles) {\n                this.setHandlesVisible(false);\n                this.setClippingPlanesVisible(false);\n            }\n            else {\n                this.setHandlesVisible(true);\n                this.setClippingPlanesVisible(true);\n            }\n        }\n        else {\n            const viewportsInfo = this._getViewportsInfo();\n            const subscribeToElementResize = () => {\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._initialize3DViewports(viewportsInfo);\n            if (this.sphereStates && this.sphereStates.length > 0) {\n                this.setHandlesVisible(true);\n            }\n            else {\n                this.originalClippingPlanes = [];\n                this._initialize3DViewports(viewportsInfo);\n            }\n        }\n    }\n    onSetToolDisabled() {\n        this._resizeObservers.forEach((resizeObserver, viewportId) => {\n            resizeObserver.disconnect();\n            this._resizeObservers.delete(viewportId);\n        });\n        if (this._viewportAddedListener) {\n            eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._viewportAddedListener = null;\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    }\n    setHandlesVisible(visible) {\n        this.configuration.showHandles = visible;\n        if (visible) {\n            this.sphereStates[SPHEREINDEX.XMIN].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMIN].origin[0];\n            this.sphereStates[SPHEREINDEX.XMAX].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMAX].origin[0];\n            this.sphereStates[SPHEREINDEX.YMIN].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMIN].origin[1];\n            this.sphereStates[SPHEREINDEX.YMAX].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMAX].origin[1];\n            this.sphereStates[SPHEREINDEX.ZMIN].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMIN].origin[2];\n            this.sphereStates[SPHEREINDEX.ZMAX].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMAX].origin[2];\n            [\n                SPHEREINDEX.XMIN,\n                SPHEREINDEX.XMAX,\n                SPHEREINDEX.YMIN,\n                SPHEREINDEX.YMAX,\n                SPHEREINDEX.ZMIN,\n                SPHEREINDEX.ZMAX,\n            ].forEach((idx) => {\n                const s = this.sphereStates[idx];\n                s.sphereSource.setCenter(...s.point);\n                s.sphereSource.modified();\n            });\n            this._updateCornerSpheres();\n        }\n        this._updateHandlesVisibility();\n        const viewportsInfo = this._getViewportsInfo();\n        const [viewport3D] = viewportsInfo;\n        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n        viewport.render();\n    }\n    getHandlesVisible() {\n        return this.configuration.showHandles;\n    }\n    getClippingPlanesVisible() {\n        return this.configuration.showClippingPlanes;\n    }\n    setClippingPlanesVisible(visible) {\n        this.configuration.showClippingPlanes = visible;\n        const viewport = this._getViewport();\n        this._updateClippingPlanes(viewport);\n        viewport.render();\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        if (this.draggingSphereIndex !== null) {\n            this._onMouseMoveSphere(evt);\n        }\n        else {\n            const currentPointsCanvas = currentPoints.canvas;\n            const lastPointsCanvas = lastPoints.canvas;\n            const { rotateIncrementDegrees } = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const normalizedPosition = [\n                currentPointsCanvas[0] / width,\n                currentPointsCanvas[1] / height,\n            ];\n            const normalizedPreviousPosition = [\n                lastPointsCanvas[0] / width,\n                lastPointsCanvas[1] / height,\n            ];\n            const center = [width * 0.5, height * 0.5];\n            const centerWorld = viewport.canvasToWorld(center);\n            const normalizedCenter = [0.5, 0.5];\n            const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n            const op = [normalizedPreviousPosition[0], 0, 0];\n            const oe = [normalizedPosition[0], 0, 0];\n            const opsq = op[0] ** 2;\n            const oesq = oe[0] ** 2;\n            const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n            const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n            const nop = [op[0], 0, lop];\n            vtkMath.normalize(nop);\n            const noe = [oe[0], 0, loe];\n            vtkMath.normalize(noe);\n            const dot = vtkMath.dot(nop, noe);\n            if (Math.abs(dot) > 0.0001) {\n                const angleX = -2 *\n                    Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                    Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                    rotateIncrementDegrees;\n                const upVec = camera.viewUp;\n                const atV = camera.viewPlaneNormal;\n                const rightV = [0, 0, 0];\n                const forwardV = [0, 0, 0];\n                vtkMath.cross(upVec, atV, rightV);\n                vtkMath.normalize(rightV);\n                vtkMath.cross(atV, rightV, forwardV);\n                vtkMath.normalize(forwardV);\n                vtkMath.normalize(upVec);\n                this._rotateCamera(viewport, centerWorld, forwardV, angleX);\n                const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                    rotateIncrementDegrees;\n                this._rotateCamera(viewport, centerWorld, rightV, angleY);\n            }\n            viewport.render();\n        }\n    }\n    _updateClippingPlanes(viewport) {\n        const actorEntry = viewport.getDefaultActor();\n        if (!actorEntry || !actorEntry.actor) {\n            if (!viewport._missingActorWarned) {\n                console.warn('VolumeCroppingTool._updateClippingPlanes: No default actor found in viewport.');\n                viewport._missingActorWarned = true;\n            }\n            return;\n        }\n        const actor = actorEntry.actor;\n        const mapper = actor.getMapper();\n        const matrix = actor.getMatrix();\n        if (!this.configuration.showClippingPlanes) {\n            mapper.removeAllClippingPlanes();\n            return;\n        }\n        const rot = mat3.create();\n        mat3.fromMat4(rot, matrix);\n        const normalMatrix = mat3.create();\n        mat3.invert(normalMatrix, rot);\n        mat3.transpose(normalMatrix, normalMatrix);\n        const originalPlanes = this.originalClippingPlanes;\n        if (!originalPlanes || !originalPlanes.length) {\n            return;\n        }\n        mapper.removeAllClippingPlanes();\n        const transformedOrigins = [];\n        const transformedNormals = [];\n        for (let i = 0; i < originalPlanes.length; ++i) {\n            const plane = originalPlanes[i];\n            const oVec = vec3.create();\n            vec3.transformMat4(oVec, new Float32Array(plane.origin), matrix);\n            const o = [oVec[0], oVec[1], oVec[2]];\n            const nVec = vec3.create();\n            vec3.transformMat3(nVec, new Float32Array(plane.normal), normalMatrix);\n            vec3.normalize(nVec, nVec);\n            const n = [nVec[0], nVec[1], nVec[2]];\n            transformedOrigins.push(o);\n            transformedNormals.push(n);\n        }\n        for (let i = 0; i < transformedOrigins.length; ++i) {\n            const planeInstance = vtkPlane.newInstance({\n                origin: transformedOrigins[i],\n                normal: transformedNormals[i],\n            });\n            mapper.addClippingPlane(planeInstance);\n        }\n    }\n    _updateHandlesVisibility() {\n        this.sphereStates.forEach((state) => {\n            if (state.sphereActor) {\n                state.sphereActor.setVisibility(this.configuration.showHandles);\n            }\n        });\n        Object.values(this.edgeLines).forEach(({ actor }) => {\n            if (actor) {\n                actor.setVisibility(this.configuration.showHandles);\n            }\n        });\n    }\n    _addLine3DBetweenPoints(viewport, point1, point2, color = [0.7, 0.7, 0.7], uid = '') {\n        if (point1[0] === point2[0] &&\n            point1[1] === point2[1] &&\n            point1[2] === point2[2]) {\n            return { actor: null, source: null };\n        }\n        const points = vtkPoints.newInstance();\n        points.setNumberOfPoints(2);\n        points.setPoint(0, point1[0], point1[1], point1[2]);\n        points.setPoint(1, point2[0], point2[1], point2[2]);\n        const lines = vtkCellArray.newInstance({ values: [2, 0, 1] });\n        const polyData = vtkPolyData.newInstance();\n        polyData.setPoints(points);\n        polyData.setLines(lines);\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.getProperty().setColor(...color);\n        actor.getProperty().setLineWidth(0.5);\n        actor.getProperty().setOpacity(1.0);\n        actor.getProperty().setInterpolationToFlat();\n        actor.getProperty().setAmbient(1.0);\n        actor.getProperty().setDiffuse(0.0);\n        actor.getProperty().setSpecular(0.0);\n        actor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor, uid });\n        return { actor, source: polyData };\n    }\n    _addSphere(viewport, point, axis, position, cornerKey = null, adaptiveRadius) {\n        const uid = cornerKey ? `corner_${cornerKey}` : `${axis}_${position}`;\n        const sphereState = this.sphereStates.find((s) => s.uid === uid);\n        if (sphereState) {\n            return;\n        }\n        const sphereSource = vtkSphereSource.newInstance();\n        sphereSource.setCenter(point);\n        sphereSource.setRadius(adaptiveRadius);\n        const sphereMapper = vtkMapper.newInstance();\n        sphereMapper.setInputConnection(sphereSource.getOutputPort());\n        const sphereActor = vtkActor.newInstance();\n        sphereActor.setMapper(sphereMapper);\n        let color = [0.0, 1.0, 0.0];\n        const sphereColors = this.configuration.sphereColors || {};\n        if (cornerKey) {\n            color = sphereColors.CORNERS || [0.0, 0.0, 1.0];\n        }\n        else if (axis === 'z') {\n            color = sphereColors.AXIAL || [1.0, 0.0, 0.0];\n        }\n        else if (axis === 'x') {\n            color = sphereColors.SAGITTAL || [1.0, 1.0, 0.0];\n        }\n        else if (axis === 'y') {\n            color = sphereColors.CORONAL || [0.0, 1.0, 0.0];\n        }\n        const idx = this.sphereStates.findIndex((s) => s.uid === uid);\n        if (idx === -1) {\n            this.sphereStates.push({\n                point: point.slice(),\n                axis,\n                uid,\n                sphereSource,\n                sphereActor,\n                isCorner: !!cornerKey,\n                color,\n            });\n        }\n        else {\n            this.sphereStates[idx].point = point.slice();\n            this.sphereStates[idx].sphereSource = sphereSource;\n        }\n        const existingActors = viewport.getActors();\n        const existing = existingActors.find((a) => a.uid === uid);\n        if (existing) {\n            return;\n        }\n        sphereActor.getProperty().setColor(color);\n        sphereActor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor: sphereActor, uid: uid });\n    }\n    _calculateAdaptiveSphereRadius(diagonal) {\n        const baseRadius = this.configuration.sphereRadius !== undefined\n            ? this.configuration.sphereRadius\n            : 8;\n        const scaleFactor = this.configuration.sphereRadiusScale || 0.01;\n        const adaptiveRadius = diagonal * scaleFactor;\n        const minRadius = this.configuration.minSphereRadius || 2;\n        const maxRadius = this.configuration.maxSphereRadius || 50;\n        return Math.max(minRadius, Math.min(maxRadius, adaptiveRadius));\n    }\n    _updateClippingPlanesFromFaceSpheres(viewport) {\n        const mapper = viewport.getDefaultActor().actor.getMapper();\n        this.originalClippingPlanes[0].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMIN].point,\n        ];\n        this.originalClippingPlanes[1].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMAX].point,\n        ];\n        this.originalClippingPlanes[2].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMIN].point,\n        ];\n        this.originalClippingPlanes[3].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMAX].point,\n        ];\n        this.originalClippingPlanes[4].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMIN].point,\n        ];\n        this.originalClippingPlanes[5].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMAX].point,\n        ];\n        mapper.removeAllClippingPlanes();\n        for (let i = 0; i < 6; ++i) {\n            const origin = this.originalClippingPlanes[i].origin;\n            const normal = this.originalClippingPlanes[i].normal;\n            const plane = vtkPlane.newInstance({\n                origin,\n                normal,\n            });\n            mapper.addClippingPlane(plane);\n        }\n    }\n    _updateCornerSpheresFromFaces() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n    }\n    _updateFaceSpheresFromCorners() {\n        const corners = [\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMAX].point,\n        ];\n        const xs = corners.map((p) => p[0]);\n        const ys = corners.map((p) => p[1]);\n        const zs = corners.map((p) => p[2]);\n        const xMin = Math.min(...xs), xMax = Math.max(...xs);\n        const yMin = Math.min(...ys), yMax = Math.max(...ys);\n        const zMin = Math.min(...zs), zMax = Math.max(...zs);\n        this.sphereStates[SPHEREINDEX.XMIN].point = [\n            xMin,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.XMAX].point = [\n            xMax,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMIN].point = [\n            (xMin + xMax) / 2,\n            yMin,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMAX].point = [\n            (xMin + xMax) / 2,\n            yMax,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMIN].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMin,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMAX].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMax,\n        ];\n        [\n            SPHEREINDEX.XMIN,\n            SPHEREINDEX.XMAX,\n            SPHEREINDEX.YMIN,\n            SPHEREINDEX.YMAX,\n            SPHEREINDEX.ZMIN,\n            SPHEREINDEX.ZMAX,\n        ].forEach((idx) => {\n            const s = this.sphereStates[idx];\n            s.sphereSource.setCenter(...s.point);\n            s.sphereSource.modified();\n        });\n    }\n    _updateCornerSpheres() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n        Object.values(this.edgeLines).forEach(({ source, key1, key2 }) => {\n            const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n            const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n            if (state1 && state2) {\n                const points = source.getPoints();\n                points.setPoint(0, state1.point[0], state1.point[1], state1.point[2]);\n                points.setPoint(1, state2.point[0], state2.point[1], state2.point[2]);\n                points.modified();\n                source.modified();\n            }\n        });\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n}\nVolumeCroppingTool.toolName = 'VolumeCropping';\nexport default VolumeCroppingTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { AnnotationTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass VolumeCroppingControlTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            extendReferenceLines: true,\n            initialCropFactor: 0.2,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            lineColors: {\n                AXIAL: [1.0, 0.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                SAGITTAL: [1.0, 1.0, 0.0],\n                UNKNOWN: [0.0, 0.0, 1.0],\n            },\n            lineWidth: 1.5,\n            lineWidthActive: 2.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._virtualAnnotations = [];\n        this.sphereStates = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.toolCenterMin = [0, 0, 0];\n        this.toolCenterMax = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            if (!renderingEngineId || !viewportId) {\n                console.warn('VolumeCroppingControlTool: Missing renderingEngineId or viewportId');\n                return;\n            }\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            this._updateToolCentersFromViewport(viewport);\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        toolCenter: this.toolCenter,\n                        toolCenterMin: this.toolCenterMin,\n                        toolCenterMax: this.toolCenterMax,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                    referenceLines: [],\n                    orientation,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([100, 100]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCroppingSpheres = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo[0]) {\n                console.warn('  _computeToolCenter : No valid viewportsInfo for computeToolCenter.');\n                return;\n            }\n            const orientationIds = ['AXIAL', 'CORONAL', 'SAGITTAL'];\n            const presentOrientations = viewportsInfo\n                .map((vp) => {\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                        if (orientation) {\n                            return orientation;\n                        }\n                    }\n                }\n                return null;\n            })\n                .filter(Boolean);\n            const missingOrientation = orientationIds.find((id) => !presentOrientations.includes(id));\n            const presentNormals = [];\n            const presentCenters = [];\n            const presentViewportInfos = viewportsInfo.filter((vp) => {\n                let orientation = null;\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                return orientation && orientationIds.includes(orientation);\n            });\n            presentViewportInfos.forEach((vpInfo) => {\n                const { normal, point } = this.initializeViewport(vpInfo);\n                presentNormals.push(normal);\n                presentCenters.push(point);\n            });\n            if (presentViewportInfos.length === 2 && missingOrientation) {\n                const virtualNormal = [0, 0, 0];\n                vec3.cross(virtualNormal, presentNormals[0], presentNormals[1]);\n                vec3.normalize(virtualNormal, virtualNormal);\n                const virtualCenter = [\n                    (presentCenters[0][0] + presentCenters[1][0]) / 2,\n                    (presentCenters[0][1] + presentCenters[1][1]) / 2,\n                    (presentCenters[0][2] + presentCenters[1][2]) / 2,\n                ];\n                const orientation = null;\n                const virtualAnnotation = {\n                    highlighted: false,\n                    metadata: {\n                        cameraPosition: [...virtualCenter],\n                        cameraFocalPoint: [...virtualCenter],\n                        toolName: this.getToolName(),\n                    },\n                    data: {\n                        handles: {\n                            activeOperation: null,\n                            toolCenter: this.toolCenter,\n                            toolCenterMin: this.toolCenterMin,\n                            toolCenterMax: this.toolCenterMax,\n                        },\n                        activeViewportIds: [],\n                        viewportId: missingOrientation,\n                        referenceLines: [],\n                        orientation,\n                    },\n                    isVirtual: true,\n                    virtualNormal,\n                };\n                this._virtualAnnotations = [virtualAnnotation];\n            }\n            else if (presentViewportInfos.length === 1) {\n                let presentOrientation = null;\n                const vpInfo = presentViewportInfos[0];\n                if (vpInfo.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vpInfo.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vpInfo.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        presentOrientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                const presentCenter = presentCenters[0];\n                const canonicalNormals = {\n                    AXIAL: [0, 0, 1],\n                    CORONAL: [0, 1, 0],\n                    SAGITTAL: [1, 0, 0],\n                };\n                const missingIds = orientationIds.filter((id) => id !== presentOrientation);\n                const virtualAnnotations = missingIds.map((orientation) => {\n                    const normal = canonicalNormals[orientation];\n                    const virtualAnnotation = {\n                        highlighted: false,\n                        metadata: {\n                            cameraPosition: [...presentCenter],\n                            cameraFocalPoint: [...presentCenter],\n                            toolName: this.getToolName(),\n                        },\n                        data: {\n                            handles: {\n                                activeOperation: null,\n                                toolCenter: this.toolCenter,\n                                toolCenterMin: this.toolCenterMin,\n                                toolCenterMax: this.toolCenterMax,\n                            },\n                            activeViewportIds: [],\n                            viewportId: orientation,\n                            referenceLines: [],\n                            orientation,\n                        },\n                        isVirtual: true,\n                        virtualNormal: normal,\n                    };\n                    return virtualAnnotation;\n                });\n                this._virtualAnnotations = virtualAnnotations;\n            }\n            if (viewportsInfo && viewportsInfo.length) {\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n            }\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCroppingSpheres();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            if (!filteredToolAnnotations) {\n                return;\n            }\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                let near = false;\n                near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            let orientation = null;\n            if (enabledElement.viewport && enabledElement.viewport.getCamera) {\n                orientation = this._getOrientationFromNormal(enabledElement.viewport.getCamera().viewPlaneNormal);\n            }\n            const filtered = annotations.filter((annotation) => {\n                if (annotation.isVirtual) {\n                    return true;\n                }\n                if (annotation.data.orientation &&\n                    orientation &&\n                    annotation.data.orientation === orientation) {\n                    return true;\n                }\n                return false;\n            });\n            return filtered;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            function lineIntersection2D(p1, p2, q1, q2) {\n                const s1_x = p2[0] - p1[0];\n                const s1_y = p2[1] - p1[1];\n                const s2_x = q2[0] - q1[0];\n                const s2_y = q2[1] - q1[1];\n                const denom = -s2_x * s1_y + s1_x * s2_y;\n                if (Math.abs(denom) < 1e-8) {\n                    return null;\n                }\n                const s = (-s1_y * (p1[0] - q1[0]) + s1_x * (p1[1] - q1[1])) / denom;\n                const t = (s2_x * (p1[1] - q1[1]) - s2_y * (p1[0] - q1[0])) / denom;\n                if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n                    return [p1[0] + t * s1_x, p1[1] + t * s1_y];\n                }\n                return null;\n            }\n            const viewportsInfo = this._getViewportsInfo();\n            if (!viewportsInfo || viewportsInfo.length === 0) {\n                return false;\n            }\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            let annotations = this._getAnnotations(enabledElement);\n            if (this._virtualAnnotations && this._virtualAnnotations.length) {\n                annotations = annotations.concat(this._virtualAnnotations);\n            }\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation || !viewportAnnotation.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const data = viewportAnnotation.data;\n            const otherViewportAnnotations = annotations;\n            const volumeCroppingCenterCanvasMin = viewport.worldToCanvas(this.toolCenterMin);\n            const volumeCroppingCenterCanvasMax = viewport.worldToCanvas(this.toolCenterMax);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const data = annotation.data;\n                const isVirtual = 'isVirtual' in annotation &&\n                    annotation.isVirtual === true;\n                data.handles.toolCenter = this.toolCenter;\n                let otherViewport, otherCamera, clientWidth, clientHeight, otherCanvasDiagonalLength, otherCanvasCenter, otherViewportCenterWorld;\n                if (isVirtual) {\n                    const realViewports = viewportsInfo.filter((vp) => vp.viewportId !== data.viewportId);\n                    if (realViewports.length === 2) {\n                        const vp1 = renderingEngine.getViewport(realViewports[0].viewportId);\n                        const vp2 = renderingEngine.getViewport(realViewports[1].viewportId);\n                        const normal1 = vp1.getCamera().viewPlaneNormal;\n                        const normal2 = vp2.getCamera().viewPlaneNormal;\n                        const virtualNormal = vec3.create();\n                        vec3.cross(virtualNormal, normal1, normal2);\n                        vec3.normalize(virtualNormal, virtualNormal);\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                    else {\n                        const virtualNormal = annotation\n                            .virtualNormal ?? [0, 0, 1];\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                }\n                else {\n                    otherViewport = renderingEngine.getViewport(data.viewportId);\n                    otherCamera = otherViewport.getCamera();\n                    clientWidth = otherViewport.canvas.clientWidth;\n                    clientHeight = otherViewport.canvas.clientHeight;\n                    otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                    otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                    otherViewportCenterWorld =\n                        otherViewport.canvasToWorld(otherCanvasCenter);\n                }\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas([\n                    otherViewportCenterWorld[0] ?? 0,\n                    otherViewportCenterWorld[1] ?? 0,\n                    otherViewportCenterWorld[2] ?? 0,\n                ]);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const refLinesCenterMin = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMin)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMinOne = vec2.create();\n                const refLinePointMinTwo = vec2.create();\n                vec2.add(refLinePointMinOne, refLinesCenterMin, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMinTwo, refLinesCenterMin, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMinOne, refLinePointMinTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMinOne,\n                    refLinePointMinTwo,\n                    'min',\n                ]);\n                const refLinesCenterMax = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMax)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMaxOne = vec2.create();\n                const refLinePointMaxTwo = vec2.create();\n                vec2.add(refLinePointMaxOne, refLinesCenterMax, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMaxTwo, refLinesCenterMax, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMaxOne, refLinePointMaxTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMaxOne,\n                    refLinePointMaxTwo,\n                    'max',\n                ]);\n            });\n            data.referenceLines = referenceLines;\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const intersections = [];\n                for (let j = 0; j < referenceLines.length; ++j) {\n                    if (j === lineIndex) {\n                        continue;\n                    }\n                    const otherLine = referenceLines[j];\n                    const intersection = lineIntersection2D(line[1], line[2], otherLine[1], otherLine[2]);\n                    if (intersection) {\n                        intersections.push({\n                            with: otherLine[3],\n                            point: intersection,\n                        });\n                    }\n                }\n                const otherViewport = line[0];\n                let orientation = null;\n                if (otherViewport && otherViewport.id) {\n                    const annotationForViewport = annotations.find((a) => a.data.viewportId === otherViewport.id);\n                    if (annotationForViewport && annotationForViewport.data.orientation) {\n                        orientation = String(annotationForViewport.data.orientation).toUpperCase();\n                    }\n                    else {\n                        const idUpper = otherViewport.id.toUpperCase();\n                        if (idUpper.includes('AXIAL')) {\n                            orientation = 'AXIAL';\n                        }\n                        else if (idUpper.includes('CORONAL')) {\n                            orientation = 'CORONAL';\n                        }\n                        else if (idUpper.includes('SAGITTAL')) {\n                            orientation = 'SAGITTAL';\n                        }\n                    }\n                }\n                const lineColors = this.configuration.lineColors || {};\n                const colorArr = lineColors[orientation] ||\n                    lineColors.unknown || [1.0, 0.0, 0.0];\n                const color = Array.isArray(colorArr)\n                    ? `rgb(${colorArr.map((v) => Math.round(v * 255)).join(',')})`\n                    : colorArr;\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let lineWidth = this.configuration.lineWidth ?? 1.5;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = this.configuration.activeLineWidth ?? 2.5;\n                }\n                const lineUID = `${lineIndex}`;\n                if (viewportControllable) {\n                    if (intersections.length === 2) {\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, intersections[0].point, intersections[1].point, {\n                            color,\n                            lineWidth,\n                        });\n                    }\n                    if (this.configuration.extendReferenceLines &&\n                        intersections.length === 2) {\n                        if (this.configuration.extendReferenceLines &&\n                            intersections.length === 2) {\n                            const sortedIntersections = intersections\n                                .map((intersection) => ({\n                                ...intersection,\n                                distance: vec2.distance(line[1], intersection.point),\n                            }))\n                                .sort((a, b) => a.distance - b.distance);\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_before', line[1], sortedIntersections[0].point, { color, lineWidth, lineDash: [4, 4] });\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_after', sortedIntersections[1].point, line[2], { color, lineWidth, lineDash: [4, 4] });\n                        }\n                    }\n                }\n            });\n            renderStatus = true;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onSphereMoved = (evt) => {\n            if (evt.detail.originalClippingPlanes) {\n                this._syncWithVolumeCroppingTool(evt.detail.originalClippingPlanes);\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const { draggingSphereIndex, toolCenter } = evt.detail;\n                const newMin = [...this.toolCenterMin];\n                const newMax = [...this.toolCenterMax];\n                if (draggingSphereIndex >= 0 && draggingSphereIndex <= 5) {\n                    const axis = Math.floor(draggingSphereIndex / 2);\n                    const isMin = draggingSphereIndex % 2 === 0;\n                    (isMin ? newMin : newMax)[axis] = toolCenter[axis];\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                    return;\n                }\n                if (draggingSphereIndex >= 6 && draggingSphereIndex <= 13) {\n                    const idx = draggingSphereIndex;\n                    if (idx < 10) {\n                        newMin[0] = toolCenter[0];\n                    }\n                    else {\n                        newMax[0] = toolCenter[0];\n                    }\n                    if ([6, 7, 10, 11].includes(idx)) {\n                        newMin[1] = toolCenter[1];\n                    }\n                    else {\n                        newMax[1] = toolCenter[1];\n                    }\n                    if (idx % 2 === 0) {\n                        newMin[2] = toolCenter[2];\n                    }\n                    else {\n                        newMax[2] = toolCenter[2];\n                    }\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                }\n            }\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            if (viewportsInfo && viewportsInfo.length > 0) {\n                const { viewportId, renderingEngineId } = viewportsInfo[0];\n                const renderingEngine = getRenderingEngine(renderingEngineId);\n                const viewport = renderingEngine.getViewport(viewportId);\n                const volumeActors = viewport.getActors();\n                if (volumeActors.length > 0) {\n                    const imageData = volumeActors[0].actor.getMapper().getInputData();\n                    if (imageData) {\n                        this.seriesInstanceUID = imageData.seriesInstanceUID;\n                        this._updateToolCentersFromViewport(viewport);\n                        const annotations = getAnnotations(this.getToolName(), viewportId) || [];\n                        annotations.forEach((annotation) => {\n                            if (annotation.data && annotation.data.handles) {\n                                annotation.data.handles.toolCenter = [...this.toolCenter];\n                            }\n                        });\n                    }\n                }\n            }\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            if (viewport.type === Enums.ViewportType.VOLUME_3D) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                if (handles.activeType === 'min') {\n                    this.toolCenterMin[0] += delta[0];\n                    this.toolCenterMin[1] += delta[1];\n                    this.toolCenterMin[2] += delta[2];\n                }\n                else if (handles.activeType === 'max') {\n                    this.toolCenterMax[0] += delta[0];\n                    this.toolCenterMax[1] += delta[1];\n                    this.toolCenterMax[2] += delta[2];\n                }\n                else {\n                    this.toolCenter[0] += delta[0];\n                    this.toolCenter[1] += delta[1];\n                    this.toolCenter[2] += delta[2];\n                }\n                const viewportsInfo = this._getViewportsInfo();\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n                triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                    toolGroupId: this.toolGroupId,\n                    toolCenter: this.toolCenter,\n                    toolCenterMin: this.toolCenterMin,\n                    toolCenterMax: this.toolCenterMax,\n                    handleType: handles.activeType,\n                    viewportOrientation: [],\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        const viewportsInfo = getToolGroup(this.toolGroupId)?.viewportsInfo;\n        eventTarget.addEventListener(Events.VOLUMECROPPING_TOOL_CHANGED, this._onSphereMoved);\n        if (viewportsInfo && viewportsInfo.length > 0) {\n            const { viewportId, renderingEngineId } = viewportsInfo[0];\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const viewport = renderingEngine.getViewport(viewportId);\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || !volumeActors.length) {\n                console.warn(`VolumeCroppingControlTool: No volume actors found in viewport ${viewportId}.`);\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (imageData) {\n                const dimensions = imageData.getDimensions();\n                const spacing = imageData.getSpacing();\n                const origin = imageData.getOrigin();\n                this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n                const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n                this.toolCenter = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                const maxCropFactor = 1 - cropFactor;\n                this.toolCenterMin = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                this.toolCenterMax = [\n                    origin[0] + maxCropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + maxCropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + maxCropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n            }\n        }\n    }\n    _updateToolCentersFromViewport(viewport) {\n        const volumeActors = viewport.getActors();\n        if (!volumeActors || !volumeActors.length) {\n            return;\n        }\n        const imageData = volumeActors[0].actor.getMapper().getInputData();\n        if (!imageData) {\n            return;\n        }\n        this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n        const dimensions = imageData.getDimensions();\n        const spacing = imageData.getSpacing();\n        const origin = imageData.getOrigin();\n        const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n        const cropStart = cropFactor / 2;\n        const cropEnd = 1 - cropFactor / 2;\n        this.toolCenter = [\n            origin[0] +\n                ((cropStart + cropEnd) / 2) * (dimensions[0] - 1) * spacing[0],\n            origin[1] +\n                ((cropStart + cropEnd) / 2) * (dimensions[1] - 1) * spacing[1],\n            origin[2] +\n                ((cropStart + cropEnd) / 2) * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMin = [\n            origin[0] + cropStart * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropStart * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropStart * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMax = [\n            origin[0] + cropEnd * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropEnd * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropEnd * (dimensions[2] - 1) * spacing[2],\n        ];\n    }\n    onSetToolInactive() {\n        console.debug(`VolumeCroppingControlTool: onSetToolInactive called for tool ${this.getToolName()}`);\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        let anyAnnotationExists = false;\n        for (const vpInfo of viewportsInfo) {\n            const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations && annotations.length > 0) {\n                anyAnnotationExists = true;\n                break;\n            }\n        }\n        if (!anyAnnotationExists) {\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        }\n        else {\n            for (const vpInfo of viewportsInfo) {\n                const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n                if (!enabledElement) {\n                    continue;\n                }\n                const annotations = this._getAnnotations(enabledElement);\n                if (annotations && annotations.length > 0) {\n                    annotations.forEach((annotation) => {\n                        removeAnnotation(annotation.annotationUID);\n                    });\n                }\n                enabledElement.viewport.render();\n            }\n        }\n    }\n    onSetToolEnabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolEnabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n    }\n    onSetToolDisabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolDisabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    _getOrientationFromNormal(normal) {\n        if (!normal) {\n            return null;\n        }\n        const canonical = {\n            AXIAL: [0, 0, 1],\n            CORONAL: [0, 1, 0],\n            SAGITTAL: [1, 0, 0],\n        };\n        const tol = 1e-2;\n        for (const [key, value] of Object.entries(canonical)) {\n            if (Math.abs(normal[0] - value[0]) < tol &&\n                Math.abs(normal[1] - value[1]) < tol &&\n                Math.abs(normal[2] - value[2]) < tol) {\n                return key;\n            }\n            if (Math.abs(normal[0] + value[0]) < tol &&\n                Math.abs(normal[1] + value[1]) < tol &&\n                Math.abs(normal[2] + value[2]) < tol) {\n                return key;\n            }\n        }\n        return null;\n    }\n    _syncWithVolumeCroppingTool(originalClippingPlanes) {\n        const planes = originalClippingPlanes;\n        if (planes.length >= 6) {\n            this.toolCenterMin = [\n                planes[0].origin[0],\n                planes[2].origin[1],\n                planes[4].origin[2],\n            ];\n            this.toolCenterMax = [\n                planes[1].origin[0],\n                planes[3].origin[1],\n                planes[5].origin[2],\n            ];\n            this.toolCenter = [\n                (this.toolCenterMin[0] + this.toolCenterMax[0]) / 2,\n                (this.toolCenterMin[1] + this.toolCenterMax[1]) / 2,\n                (this.toolCenterMin[2] + this.toolCenterMax[2]) / 2,\n            ];\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                if (enabledElement) {\n                    const annotations = this._getAnnotations(enabledElement);\n                    annotations.forEach((annotation) => {\n                        if (annotation.data &&\n                            annotation.data.handles &&\n                            annotation.data.orientation) {\n                            const orientation = annotation.data.orientation;\n                            if (orientation === 'AXIAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    planes[2].origin[1],\n                                    annotation.data.handles.toolCenterMin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    planes[3].origin[1],\n                                    annotation.data.handles.toolCenterMax[2],\n                                ];\n                            }\n                            else if (orientation === 'CORONAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    annotation.data.handles.toolCenterMin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    annotation.data.handles.toolCenterMax[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            else if (orientation === 'SAGITTAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    annotation.data.handles.toolCenterMin[0],\n                                    planes[2].origin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    annotation.data.handles.toolCenterMax[0],\n                                    planes[3].origin[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            annotation.data.handles.toolCenter = [\n                                (annotation.data.handles.toolCenterMin[0] +\n                                    annotation.data.handles.toolCenterMax[0]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[1] +\n                                    annotation.data.handles.toolCenterMax[1]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[2] +\n                                    annotation.data.handles.toolCenterMax[2]) /\n                                    2,\n                            ];\n                        }\n                    });\n                }\n            });\n            if (this._virtualAnnotations && this._virtualAnnotations.length > 0) {\n                this._virtualAnnotations.forEach((annotation) => {\n                    if (annotation.data &&\n                        annotation.data.handles &&\n                        annotation.data.orientation) {\n                        const orientation = annotation.data.orientation.toUpperCase();\n                        if (orientation === 'AXIAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                planes[2].origin[1],\n                                annotation.data.handles.toolCenterMin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                planes[3].origin[1],\n                                annotation.data.handles.toolCenterMax[2],\n                            ];\n                        }\n                        else if (orientation === 'CORONAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                annotation.data.handles.toolCenterMin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                annotation.data.handles.toolCenterMax[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        else if (orientation === 'SAGITTAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                annotation.data.handles.toolCenterMin[0],\n                                planes[2].origin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                annotation.data.handles.toolCenterMax[0],\n                                planes[3].origin[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        annotation.data.handles.toolCenter = [\n                            (annotation.data.handles.toolCenterMin[0] +\n                                annotation.data.handles.toolCenterMax[0]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[1] +\n                                annotation.data.handles.toolCenterMax[1]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[2] +\n                                annotation.data.handles.toolCenterMax[2]) /\n                                2,\n                        ];\n                    }\n                });\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        }\n    }\n    setToolCenter(toolCenter, handleType) {\n        if (handleType === 'min') {\n            this.toolCenterMin = [...toolCenter];\n        }\n        else if (handleType === 'max') {\n            this.toolCenterMax = [...toolCenter];\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const annotations = this._getAnnotations(enabledElement);\n        const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n        if (!filteredAnnotations ||\n            filteredAnnotations.length === 0 ||\n            !filteredAnnotations[0]) {\n            return null;\n        }\n        const { data } = filteredAnnotations[0];\n        const viewportIdArray = [];\n        const referenceLines = data.referenceLines || [];\n        for (let i = 0; i < referenceLines.length; ++i) {\n            const otherViewport = referenceLines[i][0];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            viewportIdArray.push(otherViewport.id);\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        data.handles.activeOperation = OPERATION.DRAG;\n        evt.preventDefault();\n        hideElementCursor(element);\n        this._activateModify(element);\n        return filteredAnnotations[0];\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType) {\n        this.toolSelectedCallback(evt, annotation, interactionType);\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const referenceLines = data.referenceLines;\n        const viewportIdArray = [];\n        if (referenceLines) {\n            for (let i = 0; i < referenceLines.length; ++i) {\n                const otherViewport = referenceLines[i][0];\n                const start1 = referenceLines[i][1];\n                const end1 = referenceLines[i][2];\n                const type = referenceLines[i][3];\n                const distance1 = lineSegment.distanceToPoint(start1, end1, [\n                    canvasCoords[0],\n                    canvasCoords[1],\n                ]);\n                if (distance1 <= proximity) {\n                    viewportIdArray.push(otherViewport.id);\n                    data.handles.activeOperation = 1;\n                    data.handles.activeType = type;\n                }\n            }\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === 1 ? true : false;\n    }\n}\nVolumeCroppingControlTool.toolName = 'VolumeCroppingControl';\nexport default VolumeCroppingControlTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            imageDynamicRange = Math.min(calculatedDynamicRange[1] - calculatedDynamicRange[0], metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return ratio > 1 ? Math.round(ratio) : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Enums, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { Events } from '../enums';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                spacing = imageData.spacing;\n                const { dimensions } = imageData;\n                const imageWidth = dimensions[0] * spacing[0];\n                const imageHeight = dimensions[1] * spacing[1];\n                const canvasAspect = size[0] / size[1];\n                const displayArea = viewport.options?.displayArea;\n                const imageAreaScaleX = displayArea?.imageArea?.[0] ?? 1.1;\n                const imageAreaScaleY = displayArea?.imageArea?.[1] ?? 1.1;\n                const scaledImageWidth = imageWidth * imageAreaScaleX;\n                const scaledImageHeight = imageHeight * imageAreaScaleY;\n                const scaledImageAspect = scaledImageWidth / scaledImageHeight;\n                let minParallelScaleRequired;\n                if (scaledImageAspect > canvasAspect) {\n                    minParallelScaleRequired = (scaledImageWidth / canvasAspect) * 0.5;\n                }\n                else {\n                    minParallelScaleRequired = scaledImageHeight * 0.5;\n                }\n                const { minZoomScale, maxZoomScale } = this.configuration;\n                const minScaleInWorld = minParallelScaleRequired / maxZoomScale;\n                const maxScaleInWorld = minParallelScaleRequired / minZoomScale;\n                if (parallelScaleToSet < minScaleInWorld) {\n                    cappedParallelScale = minScaleInWorld;\n                    thresholdExceeded = true;\n                }\n                else if (parallelScaleToSet > maxScaleInWorld) {\n                    cappedParallelScale = maxScaleInWorld;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    mouseWheelCallback(evt) {\n        this._zoom(evt);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _zoom(evt) {\n        const { element, points } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const wheelData = evt.detail.wheel;\n        const direction = wheelData.direction;\n        const eventDetails = {\n            detail: {\n                element,\n                eventName: Events.MOUSE_WHEEL,\n                renderingEngineId: enabledElement.renderingEngineId,\n                viewportId: viewport.id,\n                camera: {},\n                deltaPoints: {\n                    page: points.page,\n                    client: points.client,\n                    world: points.world,\n                    canvas: [0, -direction * 5],\n                },\n                startPoints: points,\n                lastPoints: points,\n                currentPoints: points,\n            },\n        };\n        if (viewport.type === Enums.ViewportType.STACK) {\n            this.preMouseDownCallback(eventDetails);\n        }\n        this._dragCallback(eventDetails);\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            referenceLinesCenterGapRatio: null,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n                referenceLinesCenterGapRatio: 0.05,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const mobileConfig = this.configuration.mobile;\n                const { referenceLinesCenterGapRatio } = mobileConfig?.enabled\n                    ? mobileConfig\n                    : this.configuration;\n                const centerGap = referenceLinesCenterGapRatio > 0\n                    ? canvasMinDimensionLength * referenceLinesCenterGapRatio\n                    : this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = (this.editData.annotation.data).handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        this.toolCenter = toolCenter;\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            const { element } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = (annotation).data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n            updateCursorSize: 'dynamic',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            deltaWorld: eventData.deltaPoints.world,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            if (this.configuration.updateCursorSize === 'dynamic') {\n                cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n            }\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID: null,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.text], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle, interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n            textCanvasOffset: {\n                x: 6,\n                y: -6,\n            },\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + this.configuration.textCanvasOffset.x,\n                        canvasCoordinates[1] + this.configuration.textCanvasOffset.y,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n                annotation.invalidated = true;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    initialRotation: viewport.getRotation(),\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const [bottom, top, left, right] = canvasCoordinates;\n            const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n            const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n            const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);\n            const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n            const minorEllipse = {\n                center,\n                xRadius: (w - proximity) / 2,\n                yRadius: (h - proximity) / 2,\n                angle,\n            };\n            const majorEllipse = {\n                center,\n                xRadius: (w + proximity) / 2,\n                yRadius: (h + proximity) / 2,\n                angle,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const post2Index = transformWorldToIndex(imageData, worldPos2);\n                post2Index[0] = Math.floor(post2Index[0]);\n                post2Index[1] = Math.floor(post2Index[1]);\n                post2Index[2] = Math.floor(post2Index[2]);\n                this.isHandleOutsideImage = !this._isInsideVolume(pos1Index, post2Index, dimensions);\n                const iMin = Math.min(pos1Index[0], post2Index[0]);\n                const iMax = Math.max(pos1Index[0], post2Index[0]);\n                const jMin = Math.min(pos1Index[1], post2Index[1]);\n                const jMax = Math.max(pos1Index[1], post2Index[1]);\n                const kMin = Math.min(pos1Index[2], post2Index[2]);\n                const kMax = Math.max(pos1Index[2], post2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = [\n                    (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                    (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                    (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                ];\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                const handles = [pos1Index, post2Index];\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n                    scale /\n                    scale;\n                const pixelUnitsOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                let pointsInShape;\n                if (voxelManager) {\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        boundsIJK,\n                        imageData,\n                        isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                        returnPoints: this.configuration.storePointData,\n                    });\n                }\n                const stats = this.configuration.statsCalculator.getStatistics();\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    mean: stats.mean?.value,\n                    max: stats.max?.value,\n                    min: stats.min?.value,\n                    stdDev: stats.stdDev?.value,\n                    statsArray: stats.array,\n                    pointsInShape,\n                    isEmptyArea,\n                    areaUnit,\n                    modalityUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const { xRadius, yRadius, center, angle } = ellipse;\n        const rotLocation = vec2.rotate(vec2.create(), location, center, -angle);\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2, vec3 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            simplified: true,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { points } = annotation.data.handles;\n            const canvasHandles = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasHandles[0];\n            const radius = getCanvasCircleRadius([canvasCenter, canvasHandles[1]]);\n            const radiusPoint = getCanvasCircleRadius([canvasCenter, canvasCoords]);\n            return Math.abs(radiusPoint - radius) < proximity / 2;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { world: worldPos, canvas: currentCanvasPoints } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const centerWorld = data.handles.points[0];\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            if (this.configuration.simplified) {\n                data.handles.points[1] = worldPos;\n            }\n            else {\n                const radiusCanvas = vec2.distance(centerCanvas, currentCanvasPoints);\n                data.handles.points[0] = [...centerWorld];\n                data.handles.points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - radiusCanvas,\n                ]);\n                data.handles.points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + radiusCanvas,\n                ]);\n                data.handles.points[3] = canvasToWorld([\n                    centerCanvas[0] - radiusCanvas,\n                    centerCanvas[1],\n                ]);\n                data.handles.points[4] = canvasToWorld([\n                    centerCanvas[0] + radiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints, deltaPoints } = eventDetail;\n            if (handleIndex === 0) {\n                const worldPosDelta = deltaPoints.world;\n                points.forEach((point) => {\n                    vec3.add(point, point, worldPosDelta);\n                });\n            }\n            else {\n                const centerWorld = points[0];\n                const centerCanvas = worldToCanvas(centerWorld);\n                const currentCanvasPoint = currentPoints.canvas;\n                const newRadiusCanvas = vec2.distance(centerCanvas, currentCanvasPoint);\n                points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - newRadiusCanvas,\n                ]);\n                points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + newRadiusCanvas,\n                ]);\n                points[3] = canvasToWorld([\n                    centerCanvas[0] - newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n                points[4] = canvasToWorld([\n                    centerCanvas[0] + newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                annotation.highlighted = false;\n                annotation.data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([center, canvasCoordinates[1]]);\n                const canvasCorners = getCanvasCircleCorners([\n                    center,\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.calculateStats) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, targetId);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [center, canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasCoordinates[0];\n            const canvasTop = canvasCoordinates[1];\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([canvasCenter, canvasTop]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = points[0];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(radius)) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nconst splineToolNames = [\n    'CatmullRomSplineROI',\n    'LinearSplineROI',\n    'BSplineROI',\n    'CardinalSplineROI',\n];\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            simplifiedSpline: false,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                enableTwoPointPreview: false,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.splineToolNames = [\n            'CatmullRomSplineROI',\n            'LinearSplineROI',\n            'BSplineROI',\n            'CardinalSplineROI',\n        ];\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n        this.annotationCompletedBinded = this.annotationCompleted.bind(this);\n    }\n    annotationCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline ||\n            !this.isContourSegmentationTool()) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.removeListeners();\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints >= 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const { enableTwoPointPreview } = this.configuration.spline;\n            if (spline.numControlPoints === 1 && enableTwoPointPreview) {\n                const firstPoint = canvasCoordinates[0];\n                const previewPolylinePoints = [firstPoint, lastCanvasPoint];\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n            else if (spline.numControlPoints > 1) {\n                const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    isSplineAnnotation(annotation) {\n        return splineToolNames.includes(annotation?.metadata?.toolName);\n    }\n    createSplineObjectFromType(annotation, splineType) {\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        annotation.data.spline = {\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        };\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { eventTarget, utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nimport { Events } from '../../enums';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.annotationCutMergeCompletedBinded =\n            this.annotationCutMergeCompleted.bind(this);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    annotationCutMergeCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const { arrowFirst } = this.configuration;\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        arrowFirst,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((text) => {\n                    if (!text) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.text = text;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, text);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, text } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text: text || '',\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawPath as drawPathSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            showAngleArc: false,\n            arcOffset: 5,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (this.configuration.showAngleArc) {\n                    const center = canvasCoordinates[1];\n                    const offset = this.configuration.arcOffset;\n                    const radius = Math.min(lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;\n                    const anglePoints = [];\n                    let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);\n                    let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);\n                    if (endAngle < startAngle) {\n                        endAngle += 2 * Math.PI;\n                    }\n                    const angleDifference = endAngle - startAngle;\n                    if (angleDifference > Math.PI) {\n                        const temp = startAngle;\n                        startAngle = endAngle;\n                        endAngle = temp + 2 * Math.PI;\n                    }\n                    const segments = 32;\n                    for (let i = 0; i <= segments; i++) {\n                        const angle = startAngle + (i / segments) * (endAngle - startAngle);\n                        anglePoints.push([\n                            center[0] + radius * Math.cos(angle),\n                            center[1] + radius * Math.sin(angle),\n                        ]);\n                    }\n                    drawPathSvg(svgDrawingHelper, annotationUID, '3', anglePoints, {\n                        color: color,\n                        width: lineWidth,\n                        lineDash: angleArcLineDash,\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events, ChangeTypes } from '../../../enums';\nimport { getEnabledElement, utilities, metaData, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawFan as drawFanSvg, } from '../../../drawingSvg';\nimport { state } from '../../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../../cursors/elementCursor';\nimport { angleFromCenter, calculateInnerFanPercentage, clipInterval, intervalFromPoints, mergeIntervals, subtractIntervals, } from '../../../utilities/math/fan/fanUtils';\nimport { calculateFanGeometry } from './utils/fanExtraction';\nconst { transformIndexToWorld } = utilities;\nclass UltrasoundPleuraBLineTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundPleuraBLineTool'; }\n    static { this.USPleuraBLineAnnotationType = {\n        BLINE: 'bLine',\n        PLEURA: 'pleura',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            center: null,\n            innerRadius: null,\n            outerRadius: null,\n            startAngle: null,\n            endAngle: null,\n            bLineColor: 'rgb(60, 255, 60)',\n            pleuraColor: 'rgb(0, 4, 255)',\n            drawDepthGuide: true,\n            depth_ratio: 0.5,\n            depthGuideColor: 'rgb(0, 255, 255)',\n            depthGuideThickness: 4,\n            depthGuideDashLength: 20,\n            depthGuideDashGap: 16,\n            depthGuideOpacity: 0.2,\n            fanOpacity: 0.1,\n            showFanAnnotations: true,\n            updatePercentageCallback: null,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.pleuraAnnotations = [];\n        this.bLineAnnotations = [];\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    annotationType: this.getActiveAnnotationType(),\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element) || {};\n            if (!viewport) {\n                return;\n            }\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                const allPointsInsideShape = points.every((point) => {\n                    const newPoint = [\n                        point[0] + worldPosDelta[0],\n                        point[1] + worldPosDelta[1],\n                        point[2] + worldPosDelta[2],\n                    ];\n                    return this.isInsideFanShape(viewport, newPoint);\n                });\n                if (allPointsInsideShape) {\n                    points.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                    annotation.invalidated = true;\n                }\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                if (this.isInsideFanShape(viewport, worldPos)) {\n                    data.handles.points[handleIndex] = [...worldPos];\n                    annotation.invalidated = true;\n                }\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            if (!this.getFanShapeGeometryParameters(viewport)) {\n                return;\n            }\n            const { imageData } = viewport.getImageData() || {};\n            if (!imageData) {\n                return renderStatus;\n            }\n            if (this.configuration.drawDepthGuide) {\n                this.drawDepthGuide(svgDrawingHelper, viewport);\n            }\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const fanCenter = viewport.worldToCanvas(transformIndexToWorld(imageData, this.configuration.center));\n            const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);\n            const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;\n            const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;\n            const currentImageId = viewport.getCurrentImageId();\n            const unMergedPleuraIntervals = annotations\n                .filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId)\n                .map((annotation) => {\n                const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n                const interval = intervalFromPoints(fanCenter, canvasCoordinates);\n                return interval;\n            });\n            const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);\n            const pleuraIntervalsDisplayed = [];\n            const bLineIntervalsDisplayed = [];\n            const drawAnnotation = (annotation) => {\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    return;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color: this.getColorForLineType(annotation),\n                        fill: this.getColorForLineType(annotation),\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color: this.getColorForLineType(annotation),\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                if (this.configuration.showFanAnnotations) {\n                    const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);\n                    let fanNumber = 0;\n                    if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                        const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval) => {\n                            const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);\n                            clippedIntervals.forEach((clippedInterval) => {\n                                fanNumber++;\n                                const fanIndex = fanNumber;\n                                const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                                const fanUID = `2-${fanIndex}`;\n                                drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {\n                                    color: 'transparent',\n                                    fill: this.getColorForLineType(annotation),\n                                    fillOpacity: this.configuration.fanOpacity,\n                                    width: lineWidth,\n                                    lineDash,\n                                    shadow,\n                                }, fanDataId, 10);\n                                bLineIntervalsDisplayed.push(clippedInterval);\n                            });\n                        });\n                    }\n                    else if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                        const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval, index) => {\n                            fanNumber++;\n                            const fanIndex = fanNumber;\n                            const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                            const fanUID = `2-${fanIndex}`;\n                            drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {\n                                color: 'transparent',\n                                fill: this.getColorForLineType(annotation),\n                                fillOpacity: this.configuration.fanOpacity,\n                                width: lineWidth,\n                                lineDash,\n                                shadow,\n                            }, fanDataId, 5);\n                            pleuraIntervalsDisplayed.push(interval);\n                        });\n                    }\n                }\n            };\n            const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId);\n            pleuraAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n                annotation.metadata.referencedImageId === currentImageId);\n            bLineAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            renderStatus = true;\n            if (this.configuration.updatePercentageCallback && viewport) {\n                this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));\n            }\n            return renderStatus;\n        };\n        this.activeAnnotationType =\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;\n    }\n    static filterAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return [];\n        }\n        const filteredAnnotations = annotations.filter((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            return filterFunction(currentImageId);\n        });\n        return filteredAnnotations;\n    }\n    static countAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        const { viewport } = getEnabledElement(element);\n        const imageIds = viewport.getImageIds();\n        const getImageIdIndex = (imageId) => {\n            const index = imageIds.findIndex((id) => id === imageId);\n            if (index === -1) {\n                return 0;\n            }\n            return index;\n        };\n        if (!annotations?.length) {\n            return;\n        }\n        const annotationMapping = new Map();\n        annotations.forEach((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            if (!filterFunction(currentImageId)) {\n                return;\n            }\n            const { annotationType } = annotation.data;\n            let counts;\n            if (annotationMapping.has(currentImageId)) {\n                counts = annotationMapping.get(currentImageId);\n            }\n            else {\n                counts = {\n                    frame: getImageIdIndex(currentImageId),\n                    bLine: 0,\n                    pleura: 0,\n                };\n            }\n            if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                counts.pleura++;\n            }\n            else if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                counts.bLine++;\n            }\n            annotationMapping.set(currentImageId, counts);\n        });\n        return annotationMapping;\n    }\n    static deleteAnnotations(element, filterFunction = () => false) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return;\n        }\n        annotations.forEach((annotation) => {\n            if (!filterFunction(annotation.metadata.referencedImageId)) {\n                return;\n            }\n            removeAnnotation(annotation.annotationUID);\n        });\n    }\n    setActiveAnnotationType(type) {\n        this.activeAnnotationType = type;\n    }\n    getActiveAnnotationType() {\n        return this.activeAnnotationType;\n    }\n    deleteLastAnnotationType(element, type) {\n        let annotationList;\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);\n        }\n        else if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);\n        }\n        if (annotationList?.length > 0) {\n            const annotation = annotationList.pop();\n            removeAnnotation(annotation.annotationUID);\n        }\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(UltrasoundPleuraBLineTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    isInsideFanShape(viewport, point) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return false;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (imageData) {\n            const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            const angle = angleFromCenter(fanCenter, canvasCoordinates);\n            return (angle >= this.configuration.startAngle &&\n                angle <= this.configuration.endAngle);\n        }\n    }\n    updateFanGeometryConfiguration(fanGeometry) {\n        if (!fanGeometry) {\n            return;\n        }\n        if (this.isFanShapeGeometryParametersValid(fanGeometry)) {\n            this.configuration.center = [\n                fanGeometry.center[0],\n                fanGeometry.center[1],\n                0,\n            ];\n        }\n        this.configuration.innerRadius = fanGeometry.innerRadius;\n        this.configuration.outerRadius = fanGeometry.outerRadius;\n        this.configuration.startAngle = fanGeometry.startAngle;\n        this.configuration.endAngle = fanGeometry.endAngle;\n    }\n    deriveFanGeometryFromViewport(viewport) {\n        const imageId = viewport.getCurrentImageId();\n        const { fanGeometry } = calculateFanGeometry(imageId) || {};\n        if (fanGeometry) {\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n    }\n    isFanShapeGeometryParametersValid(fanGeometry) {\n        if (!fanGeometry) {\n            fanGeometry = this.configuration;\n        }\n        return (fanGeometry?.center &&\n            fanGeometry?.innerRadius > 0 &&\n            fanGeometry?.outerRadius &&\n            fanGeometry?.startAngle > 0 &&\n            fanGeometry?.startAngle < 360 &&\n            fanGeometry?.endAngle > 0 &&\n            fanGeometry?.endAngle < 360);\n    }\n    getFanShapeGeometryParameters(viewport) {\n        if (this.isFanShapeGeometryParametersValid()) {\n            return true;\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            const imageId = viewport.getCurrentImageId();\n            const fanGeometry = metaData.get('ultrasoundFanShapeGeometry', imageId);\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            this.deriveFanGeometryFromViewport(viewport);\n        }\n        return this.isFanShapeGeometryParametersValid();\n    }\n    calculateBLinePleuraPercentage(viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const { element } = viewport;\n        const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n        const currentImageId = viewport.getCurrentImageId();\n        const annotations = getAnnotations(this.getToolName(), element) || [];\n        const pleuraIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        const bLineIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);\n    }\n    getColorForLineType(annotation) {\n        const { annotationType } = annotation.data;\n        const { bLineColor, pleuraColor } = this.configuration;\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            return bLineColor;\n        }\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            return pleuraColor;\n        }\n        return bLineColor;\n    }\n    getIndexToCanvasRatio(viewport) {\n        const { imageData } = viewport.getImageData() || {};\n        const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));\n        const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));\n        const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];\n        const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);\n        return vectorSize;\n    }\n    drawDepthGuide(svgDrawingHelper, viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const radToDegree = (rad) => (rad * 180) / Math.PI;\n        const degreeToRad = (degree) => (degree * Math.PI) / 180;\n        const indexToCanvas = (point) => {\n            return viewport.worldToCanvas(transformIndexToWorld(imageData, point));\n        };\n        const depth_radius = this.configuration.innerRadius +\n            this.configuration.depth_ratio *\n                (this.configuration.outerRadius - this.configuration.innerRadius);\n        const theta_start = this.configuration.startAngle;\n        const theta_end = this.configuration.endAngle;\n        const theta_range = theta_end - theta_start;\n        const arc_length = degreeToRad(theta_range) * depth_radius;\n        let num_dashes = Math.round(arc_length /\n            (this.configuration.depthGuideDashLength +\n                this.configuration.depthGuideDashGap));\n        if (num_dashes <= 0) {\n            num_dashes = Math.max(15, Math.round(theta_range / 5));\n        }\n        const theta_step = theta_range / num_dashes;\n        for (let i = 0; i < num_dashes; i++) {\n            const theta1 = degreeToRad(theta_start + i * theta_step);\n            const theta2 = degreeToRad(theta_start +\n                i * theta_step +\n                radToDegree(this.configuration.depthGuideDashLength) / depth_radius);\n            const start_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta1),\n                this.configuration.center[1] + depth_radius * Math.sin(theta1),\n                0,\n            ];\n            const end_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta2),\n                this.configuration.center[1] + depth_radius * Math.sin(theta2),\n                0,\n            ];\n            drawLineSvg(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {\n                color: this.configuration.depthGuideColor,\n                lineWidth: this.configuration.depthGuideThickness,\n                strokeOpacity: this.configuration.depthGuideOpacity,\n            });\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (utilities.indexWithinDimensions(index1, dimensions) &&\n            utilities.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    return [''];\n}\nexport default UltrasoundPleuraBLineTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            simplified: true,\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [canvasCoordinates[0], canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const handlesToStart = csUtils.deepClone(points);\n        const startWorld = vec3.clone(points[0]);\n        const endWorld = vec3.clone(points[0]);\n        const indexOfNormal = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        startWorld[indexOfNormal] = startCoordinate;\n        endWorld[indexOfNormal] = endCoordinate;\n        handlesToStart.forEach((handlePoint) => {\n            handlePoint[indexOfNormal] = startCoordinate;\n        });\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        if (distance >= 0) {\n            newProjectionPoints.push(handlesToStart.map((p) => Array.from(p)));\n        }\n        for (let dist = spacingInNormal; dist <= distance; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const baseTopLeftCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[0];\n        const baseBottomRightCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[1];\n        const basePos1 = viewport.canvasToWorld(baseTopLeftCanvas);\n        const basePos2 = viewport.canvasToWorld(baseBottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, basePos1, basePos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles.points);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const currentCanvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([\n                currentCanvasCoordinates[0],\n                currentCanvasCoordinates[1],\n            ]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewport.id)\n                .getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewportId)\n                .getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n            color: null,\n            background: null,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const color = this.configuration.color ??\n            segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, hoveredSegmentIndex);\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            color,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, color, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const offset = -15;\n        const textBoxPosition = [\n            canvasCoordinates[0] + offset,\n            canvasCoordinates[1] + offset,\n        ];\n        const boundingBox = drawTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ?? '(unnamed segment)'], textBoxPosition, {\n            color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n            background: this.configuration.background ?? undefined,\n        });\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { Events, SegmentationRepresentations } from '../../enums';\nimport { eventTarget, utilities, getRenderingEngine, } from '@cornerstonejs/core';\nimport PlanarFreehandContourSegmentationTool from '../annotation/PlanarFreehandContourSegmentationTool';\nimport BrushTool from './BrushTool';\nimport * as segmentation from '../../stateManagement/segmentation';\nimport { getSegmentationRepresentationsBySegmentationId } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nclass LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool {\n    static { this.toolName = 'LabelMapEditWithContour'; }\n    static { this.annotationsToViewportMap = new Map(); }\n    static { this.viewportIdsChecked = []; }\n    constructor(toolProps = {}) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.onViewportAddedToToolGroupBinded =\n            this.onViewportAddedToToolGroup.bind(this);\n        this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);\n    }\n    initializeListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n    }\n    cleanUpListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n    }\n    async checkContourSegmentation(viewportId) {\n        if (LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {\n            return;\n        }\n        const activeSeg = segmentation.getActiveSegmentation(viewportId);\n        if (!activeSeg) {\n            console.log('No active segmentation detected');\n            return false;\n        }\n        const segmentationId = activeSeg.segmentationId;\n        if (!activeSeg.representationData.Contour) {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n            await segmentation.addContourRepresentationToViewport(viewportId, [\n                {\n                    segmentationId,\n                    type: SegmentationRepresentations.Contour,\n                },\n            ]);\n            segmentation.addRepresentationData({\n                segmentationId,\n                type: SegmentationRepresentations.Contour,\n                data: {},\n            });\n        }\n        else {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n        }\n        return true;\n    }\n    onViewportAddedToToolGroup(evt) {\n        const { toolGroupId, viewportId } = evt.detail;\n        if (toolGroupId !== this.toolGroupId) {\n            return;\n        }\n        this.checkContourSegmentation(viewportId);\n    }\n    onSegmentationModified(evt) {\n        const { segmentationId } = evt.detail || {};\n        if (!segmentationId) {\n            return;\n        }\n        const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);\n        if (!representations) {\n            return;\n        }\n        representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.cleanUpListeners();\n    }\n    annotationModified(evt) {\n        const { annotation, renderingEngineId, viewportId } = evt.detail;\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        if (!viewport) {\n            return;\n        }\n        LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);\n    }\n    annotationCompleted(evt) {\n        const { annotation } = evt.detail;\n        const { polyline } = annotation.data?.contour || {};\n        if (annotation?.metadata?.toolName !== LabelMapEditWithContourTool.toolName) {\n            return;\n        }\n        if (!polyline) {\n            return;\n        }\n        if (LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {\n            const viewport = LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);\n            if (polyline.length > 3) {\n                BrushTool.viewportContoursToLabelmap(viewport);\n            }\n        }\n    }\n}\nexport default LabelMapEditWithContourTool;\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nconst Dir = {\n  Forward: 1,\n  Backward: -1\n};\nconst visited = new Set();\nfunction vtkContourLoopExtraction(publicAPI, model) {\n  publicAPI.requestData = (inData, outData) => {\n    const [input] = inData;\n    if (!outData[0]) {\n      outData[0] = vtkPolyData.newInstance();\n    }\n    const [output] = outData;\n    publicAPI.extractContours(input, output);\n    output.modified();\n  };\n  publicAPI.traverseLoop = (pd, dir, startLineId, startPtId, loopPoints) => {\n    let lineId = startLineId;\n    let lastPtId = startPtId;\n    let terminated = false;\n    let numInserted = 0;\n    while (!terminated) {\n      const {\n        cellPointIds\n      } = pd.getCellPoints(lineId);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      lastPtId = cellPointIds[0] !== lastPtId ? cellPointIds[0] : cellPointIds[1];\n      numInserted++;\n\n      // parametric point value\n      const t = dir * numInserted;\n      loopPoints.push({\n        t,\n        ptId: lastPtId\n      });\n      const lineCell = pd.getPointCells(lastPtId);\n      if (lineCell.length !== 2 || lastPtId === startPtId) {\n        // looped\n        return lastPtId;\n      }\n      if (lineCell.length === 2) {\n        // continue along loop\n        lineId = lineCell[0] !== lineId ? lineCell[0] : lineCell[1];\n        visited.add(lineId);\n      } else {\n        // empty or invalid cell\n        terminated = true;\n      }\n    }\n    return lastPtId;\n  };\n  publicAPI.extractContours = (input, output) => {\n    const loops = [];\n    visited.clear();\n    const inLines = input.getLines();\n    output.getPoints().setData(Float32Array.from(input.getPoints().getData()));\n\n    // TODO skip if cached input mtime hasn't changed.\n    // iterate over input lines\n    for (let li = 0; li < inLines.getNumberOfCells(); li++) {\n      if (visited.has(li)) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      const {\n        cellPointIds\n      } = input.getCellPoints(li);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      visited.add(li);\n      const startPtId = cellPointIds[0];\n      const loopPoints = [];\n      loopPoints.push({\n        t: 0,\n        ptId: startPtId\n      });\n      const endPtId = publicAPI.traverseLoop(input, Dir.Forward, li, startPtId, loopPoints);\n      if (startPtId !== endPtId) {\n        // didn't find a loop. Go other direction to see where we end up\n        publicAPI.traverseLoop(input, Dir.Backward, li, startPtId, loopPoints);\n        loopPoints.sort((a, b) => a.t < b.t ? -1 : 1);\n        // make closed contour\n        if (loopPoints.length && loopPoints[0].ptId !== loopPoints[loopPoints.length - 1]?.ptId) {\n          loopPoints.push({\n            ...loopPoints[loopPoints.length - 1]\n          });\n        }\n      }\n      if (loopPoints.length) {\n        loops.push(loopPoints);\n      }\n    }\n\n    // clear output lines\n    const outLines = output.getLines();\n    outLines.resize(0);\n    loops.forEach(loop => {\n      outLines.insertNextCell(loop.map(pt => pt.ptId));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 1);\n  vtkContourLoopExtraction(publicAPI);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkContourLoopExtraction');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\nexport { index as default, extend, newInstance };\n","import { expose } from 'comlink';\nimport { utilities } from '@cornerstonejs/core';\nimport { utilities as ToolsUtilities } from '@cornerstonejs/tools';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkContourLoopExtraction from '@kitware/vtk.js/Filters/General/ContourLoopExtraction';\nimport vtkCutter from '@kitware/vtk.js/Filters/Core/Cutter';\nconst { math: { polyline: { containsPoint, getAABB, projectTo2D }, }, geometricSurfaceUtils: { checkStandardBasis, rotatePoints }, boundingBox: { getBoundingBoxAroundShapeWorld }, planar: { isPlaneIntersectingAABB }, } = ToolsUtilities;\nasync function peerImport(moduleId) {\n    try {\n        if (moduleId === '@icr/polyseg-wasm') {\n            return import('@icr/polyseg-wasm');\n        }\n    }\n    catch (error) {\n        console.warn('Error importing module:', error);\n        return null;\n    }\n}\nconst polySegConverters = {\n    polySeg: null,\n    polySegInitializing: false,\n    polySegInitializingPromise: null,\n    async initializePolySeg(progressCallback) {\n        let ICRPolySeg;\n        try {\n            ICRPolySeg = (await peerImport('@icr/polyseg-wasm')).default;\n        }\n        catch (error) {\n            console.error(error);\n            console.debug(\"Warning: '@icr/polyseg-wasm' module not found. Please install it separately.\");\n            return;\n        }\n        if (this.polySegInitializing) {\n            await this.polySegInitializingPromise;\n            return;\n        }\n        if (this.polySeg?.instance) {\n            return;\n        }\n        this.polySegInitializing = true;\n        this.polySegInitializingPromise = new Promise((resolve) => {\n            this.polySeg = new ICRPolySeg();\n            this.polySeg\n                .initialize({\n                updateProgress: progressCallback,\n            })\n                .then(() => {\n                this.polySegInitializing = false;\n                resolve();\n            });\n        });\n        await this.polySegInitializingPromise;\n    },\n    async convertContourToSurface(args, ...callbacks) {\n        const { polylines, numPointsArray } = args;\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = await this.polySeg.instance.convertContourRoiToSurface(polylines, numPointsArray);\n        return results;\n    },\n    async convertLabelmapToSurface(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertLabelmapToSurface(args.scalarData, args.dimensions, args.spacing, args.direction, args.origin, [args.segmentIndex]);\n        const rotationInfo = checkStandardBasis(args.direction);\n        if (!rotationInfo.isStandard) {\n            const rotatedPoints = rotatePoints(rotationInfo.rotationMatrix, args.origin, results.points);\n            results.points = [...rotatedPoints];\n        }\n        return results;\n    },\n    async convertContourToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentIndices, scalarData, annotationUIDsInSegmentMap, dimensions, origin, direction, spacing, } = args;\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const imageData = vtkImageData.newInstance();\n        imageData.setDimensions(dimensions);\n        imageData.setOrigin(origin);\n        imageData.setDirection(direction);\n        imageData.setSpacing(spacing);\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: scalarData,\n        });\n        imageData.getPointData().setScalars(scalarArray);\n        imageData.modified();\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                    dimensions,\n                    scalarData,\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        return segmentationVoxelManager.scalarData;\n    },\n    async convertContourToStackLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentationsInfo, annotationUIDsInSegmentMap, segmentIndices } = args;\n        const segmentationVoxelManagers = new Map();\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { dimensions, scalarData, direction, spacing, origin } = segmentationInfo;\n            const manager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData,\n            });\n            const imageData = vtkImageData.newInstance();\n            imageData.setDimensions(dimensions);\n            imageData.setOrigin(origin);\n            imageData.setDirection(direction);\n            imageData.setSpacing(spacing);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: scalarData,\n            });\n            imageData.getPointData().setScalars(scalarArray);\n            imageData.modified();\n            segmentationVoxelManagers.set(referencedImageId, { manager, imageData });\n        });\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline, referencedImageId } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const { manager: segmentationVoxelManager, imageData } = segmentationVoxelManagers.get(referencedImageId);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createImageVoxelManager({\n                    width: imageData.getDimensions()[0],\n                    height: imageData.getDimensions()[1],\n                    scalarData: imageData.getPointData().getScalars().getData(),\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { manager: segmentationVoxelManager } = segmentationVoxelManagers.get(referencedImageId);\n            segmentationInfo.scalarData = segmentationVoxelManager.scalarData;\n        });\n        return segmentationsInfo;\n    },\n    async convertSurfaceToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertSurfaceToLabelmap(args.points, args.polys, args.dimensions, args.spacing, args.direction, args.origin);\n        return results;\n    },\n    async convertSurfacesToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentsInfo } = args;\n        const promises = Array.from(segmentsInfo.keys()).map((segmentIndex) => {\n            const { points, polys } = segmentsInfo.get(segmentIndex);\n            const result = this.polySeg.instance.convertSurfaceToLabelmap(points, polys, args.dimensions, args.spacing, args.direction, args.origin);\n            return {\n                ...result,\n                segmentIndex,\n            };\n        });\n        const results = await Promise.all(promises);\n        const targetImageData = vtkImageData.newInstance();\n        targetImageData.setDimensions(args.dimensions);\n        targetImageData.setOrigin(args.origin);\n        targetImageData.setSpacing(args.spacing);\n        targetImageData.setDirection(args.direction);\n        const totalSize = args.dimensions[0] * args.dimensions[1] * args.dimensions[2];\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: new Uint8Array(totalSize),\n        });\n        targetImageData.getPointData().setScalars(scalarArray);\n        targetImageData.modified();\n        const { dimensions } = args;\n        const scalarData = targetImageData.getPointData().getScalars().getData();\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const outputVolumesInfo = results.map((result) => {\n            const { data, dimensions, direction, origin, spacing } = result;\n            const volume = vtkImageData.newInstance();\n            volume.setDimensions(dimensions);\n            volume.setOrigin(origin);\n            volume.setSpacing(spacing);\n            volume.setDirection(direction);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: data,\n            });\n            volume.getPointData().setScalars(scalarArray);\n            volume.modified();\n            const voxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData: data,\n            });\n            const extent = volume.getExtent();\n            return {\n                volume,\n                voxelManager,\n                extent,\n                scalarData: data,\n                segmentIndex: result.segmentIndex,\n            };\n        });\n        const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions: targetImageData.getDimensions(),\n            scalarData: targetImageData.getPointData().getScalars().getData(),\n        });\n        voxels.forEach(({ pointIJK, pointLPS }) => {\n            try {\n                for (const volumeInfo of outputVolumesInfo) {\n                    const { volume, extent, voxelManager, segmentIndex } = volumeInfo;\n                    const index = volume.worldToIndex(pointLPS);\n                    if (index[0] < extent[0] ||\n                        index[0] > extent[1] ||\n                        index[1] < extent[2] ||\n                        index[1] > extent[3] ||\n                        index[2] < extent[4] ||\n                        index[2] > extent[5]) {\n                        continue;\n                    }\n                    const roundedIndex = index.map(Math.round);\n                    const value = voxelManager.getAtIJK(...roundedIndex);\n                    if (value > 0) {\n                        segmentationVoxelManager.setAtIJKPoint(pointIJK, segmentIndex);\n                        break;\n                    }\n                }\n            }\n            catch (error) {\n            }\n        }, { imageData: targetImageData });\n        return segmentationVoxelManager.scalarData;\n    },\n    getSurfacesAABBs({ surfacesInfo }) {\n        const aabbs = new Map();\n        for (const { points, id } of surfacesInfo) {\n            const aabb = getAABB(points, { numDimensions: 3 });\n            aabbs.set(id, aabb);\n        }\n        return aabbs;\n    },\n    cutSurfacesIntoPlanes({ planesInfo, surfacesInfo, surfacesAABB = new Map() }, progressCallback, updateCacheCallback) {\n        const numberOfPlanes = planesInfo.length;\n        const cutter = vtkCutter.newInstance();\n        const plane1 = vtkPlane.newInstance();\n        cutter.setCutFunction(plane1);\n        const surfacePolyData = vtkPolyData.newInstance();\n        try {\n            for (const [index, planeInfo] of planesInfo.entries()) {\n                const { sliceIndex, planes } = planeInfo;\n                const polyDataResults = new Map();\n                for (const polyDataInfo of surfacesInfo) {\n                    const { points, polys, id, segmentIndex } = polyDataInfo;\n                    const aabb3 = surfacesAABB.get(id) || getAABB(points, { numDimensions: 3 });\n                    if (!surfacesAABB.has(id)) {\n                        surfacesAABB.set(id, aabb3);\n                    }\n                    const { minX, minY, minZ, maxX, maxY, maxZ } = aabb3;\n                    const { origin, normal } = planes[0];\n                    if (!isPlaneIntersectingAABB(origin, normal, minX, minY, minZ, maxX, maxY, maxZ)) {\n                        continue;\n                    }\n                    surfacePolyData.getPoints().setData(points, 3);\n                    surfacePolyData.getPolys().setData(polys);\n                    surfacePolyData.modified();\n                    cutter.setInputData(surfacePolyData);\n                    plane1.setOrigin(origin);\n                    plane1.setNormal(normal);\n                    try {\n                        cutter.update();\n                    }\n                    catch (e) {\n                        console.warn('Error during clipping', e);\n                        continue;\n                    }\n                    const polyData = cutter.getOutputData();\n                    if (!polyData ||\n                        !polyData.getPoints() ||\n                        polyData.getPoints().getNumberOfPoints() === 0) {\n                        continue;\n                    }\n                    const cutterOutput = polyData;\n                    cutterOutput.buildLinks();\n                    const loopExtraction = vtkContourLoopExtraction.newInstance();\n                    loopExtraction.setInputData(cutterOutput);\n                    try {\n                        loopExtraction.update();\n                        const loopOutput = loopExtraction.getOutputData();\n                        if (loopOutput &&\n                            loopOutput.getPoints() &&\n                            loopOutput.getLines() &&\n                            loopOutput.getPoints().getNumberOfPoints() > 0 &&\n                            loopOutput.getLines().getNumberOfCells() > 0) {\n                            polyDataResults.set(segmentIndex, {\n                                points: loopOutput.getPoints().getData(),\n                                lines: loopOutput.getLines().getData(),\n                                numberOfCells: loopOutput.getLines().getNumberOfCells(),\n                                segmentIndex,\n                            });\n                        }\n                    }\n                    catch (loopError) {\n                        console.warn('Error during loop extraction:', loopError);\n                        continue;\n                    }\n                }\n                progressCallback({ progress: (index + 1) / numberOfPlanes });\n                updateCacheCallback({ sliceIndex, polyDataResults });\n            }\n        }\n        catch (e) {\n            console.warn('Error during processing', e);\n        }\n        finally {\n            surfacesInfo = null;\n            plane1.delete();\n        }\n    },\n};\nexpose(polySegConverters);\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","import { state } from '../store/state';\nimport { getEnabledElement } from '@cornerstonejs/core';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction getSvgDrawingHelper(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement;\n    const canvasHash = `${viewportId}:${renderingEngineId}`;\n    const svgLayerElement = _getSvgLayer(element);\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        state.svgNodeCache[canvasHash][cacheKey].touched = false;\n    });\n    return {\n        svgLayerElement: svgLayerElement,\n        svgNodeCacheForCanvas: state.svgNodeCache,\n        getSvgNode: getSvgNode.bind(this, canvasHash),\n        appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n        setNodeTouched: setNodeTouched.bind(this, canvasHash),\n        clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n    };\n}\nfunction _getSvgLayer(element) {\n    const viewportElement = `.${VIEWPORT_ELEMENT}`;\n    const internalDivElement = element.querySelector(viewportElement);\n    const svgLayer = internalDivElement?.querySelector(':scope > .svg-layer');\n    return svgLayer;\n}\nfunction getSvgNode(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        return state.svgNodeCache[canvasHash][cacheKey].domRef;\n    }\n}\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return null;\n    }\n    state.svgNodeCache[canvasHash][cacheKey] = {\n        touched: true,\n        domRef: svgNode,\n    };\n    svgLayerElement.appendChild(svgNode);\n}\nfunction setNodeTouched(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        state.svgNodeCache[canvasHash][cacheKey].touched = true;\n    }\n}\nfunction clearUntouched(svgLayerElement, canvasHash) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n        if (!cacheEntry.touched && cacheEntry.domRef) {\n            svgLayerElement.removeChild(cacheEntry.domRef);\n            delete state.svgNodeCache[canvasHash][cacheKey];\n        }\n    });\n}\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\nfunction draw(element, fn) {\n    const svgDrawingHelper = getSvgDrawingHelper(element);\n    fn(svgDrawingHelper);\n    svgDrawingHelper.clearUntouched();\n}\nexport default draw;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = '') {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n    const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        r: `${radius}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingCircleElement) {\n        setAttributesIfNecessary(attributes, existingCircleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newCircleElement = document.createElementNS(svgns, 'circle');\n        if (dataId !== '') {\n            newCircleElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newCircleElement);\n        svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n    }\n}\nexport default drawCircle;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import drawHandle from './drawHandle';\nfunction drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {\n    handlePoints.forEach((handle, i) => {\n        drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options, i);\n    });\n}\nexport default drawHandles;\n","import drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nfunction drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {\n    const start = annotationAnchorPoints.length > 0\n        ? findClosestPoint(annotationAnchorPoints, refPoint)\n        : refPoint;\n    const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n    const end = findClosestPoint(boundingBoxPoints, start);\n    const mergedOptions = Object.assign({\n        color: 'rgb(255, 255, 0)',\n        lineWidth: '1',\n        lineDash: '2,3',\n    }, options);\n    drawLine(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);\n}\nfunction _boundingBoxPoints(boundingBox) {\n    const { x: left, y: top, height, width } = boundingBox;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const topMiddle = [left + halfWidth, top];\n    const leftMiddle = [left, top + halfHeight];\n    const bottomMiddle = [left + halfWidth, top + height];\n    const rightMiddle = [left + width, top + halfHeight];\n    return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\nexport default drawLink;\n","import drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nfunction drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {\n    const mergedOptions = Object.assign({\n        handleRadius: '6',\n        centering: {\n            x: false,\n            y: true,\n        },\n    }, options);\n    const canvasBoundingBox = drawTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);\n    drawLink(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);\n    return canvasBoundingBox;\n}\nexport default drawLinkedTextBox;\n","import _getHash from './_getHash';\nimport drawRectByCoordinates from './drawRectByCoordinates';\nexport default function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {\n    const topLeft = [start[0], start[1]];\n    const topRight = [end[0], start[1]];\n    const bottomLeft = [start[0], end[1]];\n    const bottomRight = [end[0], end[1]];\n    drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, [topLeft, topRight, bottomLeft, bottomRight], options, dataId);\n}\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = '', zIndex) {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'fan', fanUID);\n    const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    const centerX = center[0];\n    const centerY = center[1];\n    const outerStartX = centerX + outerRadius * Math.cos(startRad);\n    const outerStartY = centerY + outerRadius * Math.sin(startRad);\n    const outerEndX = centerX + outerRadius * Math.cos(endRad);\n    const outerEndY = centerY + outerRadius * Math.sin(endRad);\n    const innerStartX = centerX + innerRadius * Math.cos(startRad);\n    const innerStartY = centerY + innerRadius * Math.sin(startRad);\n    const innerEndX = centerX + innerRadius * Math.cos(endRad);\n    const innerEndY = centerY + innerRadius * Math.sin(endRad);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    let pathData = `M ${outerStartX} ${outerStartY}`;\n    pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;\n    pathData += ` L ${innerEndX} ${innerEndY}`;\n    pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;\n    pathData += ` Z`;\n    const attributes = {\n        d: pathData,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n        'mix-blend-mode': 'normal',\n    };\n    if (existingFanElement) {\n        setAttributesIfNecessary(attributes, existingFanElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newFanElement = document.createElementNS(svgns, 'path');\n        if (dataId !== '') {\n            newFanElement.setAttribute('data-id', dataId);\n        }\n        if (zIndex !== undefined) {\n            newFanElement.style.zIndex = zIndex.toString();\n        }\n        setNewAttributesIfValid(attributes, newFanElement);\n        svgDrawingHelper.appendNode(newFanElement, svgNodeHash);\n    }\n}\nexport default drawFan;\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        let shouldTriggerSegmentationRender = false;\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                shouldTriggerSegmentationRender = true;\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        if (shouldTriggerSegmentationRender) {\n            triggerSegmentationRender(viewportId);\n        }\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._pendingRenderQueue = [];\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            if (this._pendingRenderQueue.length > 0) {\n                const nextViewportIds = this._pendingRenderQueue.shift();\n                if (nextViewportIds && nextViewportIds.length > 0) {\n                    this._setViewportsToBeRenderedNextFrame(nextViewportIds);\n                }\n            }\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        if (this._animationFrameSet) {\n            this._pendingRenderQueue.push(viewportIds);\n            return;\n        }\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport * as Enums from '../../enums';\nimport { utilities } from '@cornerstonejs/core';\nclass SegmentationStyle {\n    constructor() {\n        this.config = {\n            global: {},\n            segmentations: {},\n            viewportsStyle: {},\n        };\n    }\n    setStyle(specifier, styles) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        const currentStyles = this.getStyle(specifier);\n        let updatedStyles;\n        if (!viewportId && !segmentationId) {\n            updatedStyles = {\n                ...currentStyles,\n                ...styles,\n            };\n        }\n        else {\n            updatedStyles = this.copyActiveToInactiveIfNotProvided({\n                ...currentStyles,\n                ...styles,\n            }, type);\n        }\n        if (!type) {\n            throw new Error('Type is required to set a style');\n        }\n        if (viewportId) {\n            if (!this.config.viewportsStyle[viewportId]) {\n                this.config.viewportsStyle[viewportId] = {\n                    renderInactiveSegmentations: false,\n                    representations: {},\n                };\n            }\n            const representations = this.config.viewportsStyle[viewportId].representations;\n            if (segmentationId) {\n                if (!representations[segmentationId]) {\n                    representations[segmentationId] = {};\n                }\n                if (!representations[segmentationId][type]) {\n                    representations[segmentationId][type] = {};\n                }\n                const repConfig = representations[segmentationId][type];\n                if (segmentIndex !== undefined) {\n                    if (!repConfig.perSegment) {\n                        repConfig.perSegment = {};\n                    }\n                    repConfig.perSegment[segmentIndex] = updatedStyles;\n                }\n                else {\n                    repConfig.allSegments = updatedStyles;\n                }\n            }\n            else {\n                const ALL_SEGMENTATIONS_KEY = '__allSegmentations__';\n                if (!representations[ALL_SEGMENTATIONS_KEY]) {\n                    representations[ALL_SEGMENTATIONS_KEY] = {};\n                }\n                if (!representations[ALL_SEGMENTATIONS_KEY][type]) {\n                    representations[ALL_SEGMENTATIONS_KEY][type] = {};\n                }\n                representations[ALL_SEGMENTATIONS_KEY][type].allSegments =\n                    updatedStyles;\n            }\n        }\n        else if (segmentationId) {\n            if (!this.config.segmentations[segmentationId]) {\n                this.config.segmentations[segmentationId] = {};\n            }\n            if (!this.config.segmentations[segmentationId][type]) {\n                this.config.segmentations[segmentationId][type] = {};\n            }\n            const segConfig = this.config.segmentations[segmentationId][type];\n            if (segmentIndex !== undefined) {\n                if (!segConfig.perSegment) {\n                    segConfig.perSegment = {};\n                }\n                segConfig.perSegment[segmentIndex] = updatedStyles;\n            }\n            else {\n                segConfig.allSegments = updatedStyles;\n            }\n        }\n        else {\n            this.config.global[type] = updatedStyles;\n        }\n    }\n    copyActiveToInactiveIfNotProvided(styles, type) {\n        const processedStyles = { ...styles };\n        if (type === Enums.SegmentationRepresentations.Labelmap) {\n            const labelmapStyles = processedStyles;\n            labelmapStyles.renderOutlineInactive ??= labelmapStyles.renderOutline;\n            labelmapStyles.outlineWidthInactive ??= labelmapStyles.outlineWidth;\n            labelmapStyles.renderFillInactive ??= labelmapStyles.renderFill;\n            labelmapStyles.fillAlphaInactive ??= labelmapStyles.fillAlpha;\n            labelmapStyles.outlineOpacityInactive ??= labelmapStyles.outlineOpacity;\n        }\n        else if (type === Enums.SegmentationRepresentations.Contour) {\n            const contourStyles = processedStyles;\n            contourStyles.outlineWidthInactive ??= contourStyles.outlineWidth;\n            contourStyles.outlineOpacityInactive ??= contourStyles.outlineOpacity;\n            contourStyles.outlineDashInactive ??= contourStyles.outlineDash;\n            contourStyles.renderOutlineInactive ??= contourStyles.renderOutline;\n            contourStyles.renderFillInactive ??= contourStyles.renderFill;\n            contourStyles.fillAlphaInactive ??= contourStyles.fillAlpha;\n        }\n        return processedStyles;\n    }\n    getStyle(specifier) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        let combinedStyle = this.getDefaultStyle(type);\n        let renderInactiveSegmentations = false;\n        if (this.config.global[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.global[type],\n            };\n        }\n        if (this.config.segmentations[segmentationId]?.[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.segmentations[segmentationId][type].allSegments,\n            };\n            if (segmentIndex !== undefined &&\n                this.config.segmentations[segmentationId][type].perSegment?.[segmentIndex]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.segmentations[segmentationId][type].perSegment[segmentIndex],\n                };\n            }\n        }\n        if (viewportId && this.config.viewportsStyle[viewportId]) {\n            renderInactiveSegmentations =\n                this.config.viewportsStyle[viewportId].renderInactiveSegmentations;\n            const allSegmentationsKey = '__allSegmentations__';\n            if (this.config.viewportsStyle[viewportId].representations[allSegmentationsKey]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[allSegmentationsKey][type].allSegments,\n                };\n            }\n            if (segmentationId &&\n                this.config.viewportsStyle[viewportId].representations[segmentationId]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].allSegments,\n                };\n                if (segmentIndex !== undefined &&\n                    this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment?.[segmentIndex]) {\n                    combinedStyle = {\n                        ...combinedStyle,\n                        ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment[segmentIndex],\n                    };\n                }\n            }\n        }\n        return combinedStyle;\n    }\n    getRenderInactiveSegmentations(viewportId) {\n        return this.config.viewportsStyle[viewportId]?.renderInactiveSegmentations;\n    }\n    setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n        if (!this.config.viewportsStyle[viewportId]) {\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations: false,\n                representations: {},\n            };\n        }\n        this.config.viewportsStyle[viewportId].renderInactiveSegmentations =\n            renderInactiveSegmentations;\n    }\n    getDefaultStyle(type) {\n        switch (type) {\n            case Enums.SegmentationRepresentations.Labelmap:\n                return getDefaultLabelmapConfig();\n            case Enums.SegmentationRepresentations.Contour:\n                return getDefaultContourConfig();\n            case Enums.SegmentationRepresentations.Surface:\n                return {};\n            default:\n                throw new Error(`Unknown representation type: ${type}`);\n        }\n    }\n    clearSegmentationStyle(segmentationId) {\n        if (this.config.segmentations[segmentationId]) {\n            delete this.config.segmentations[segmentationId];\n        }\n    }\n    clearAllSegmentationStyles() {\n        this.config.segmentations = {};\n    }\n    clearViewportStyle(viewportId) {\n        if (this.config.viewportsStyle[viewportId]) {\n            delete this.config.viewportsStyle[viewportId];\n        }\n    }\n    clearAllViewportStyles() {\n        for (const viewportId in this.config.viewportsStyle) {\n            const viewportStyle = this.config.viewportsStyle[viewportId];\n            const renderInactiveSegmentations = viewportStyle.renderInactiveSegmentations;\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations,\n                representations: {},\n            };\n        }\n    }\n    resetToGlobalStyle() {\n        this.clearAllSegmentationStyles();\n        this.clearAllViewportStyles();\n    }\n    hasCustomStyle(specifier) {\n        const { type } = specifier;\n        const style = this.getStyle(specifier);\n        const defaultStyle = this.getDefaultStyle(type);\n        return !utilities.deepEqual(style, defaultStyle);\n    }\n}\nconst segmentationStyle = new SegmentationStyle();\nexport { segmentationStyle };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            const { label, locked, cachedStats, active, ...rest } = segment;\n            const normalizedSegment = {\n                segmentIndex: Number(segmentIndex),\n                label: label ?? `Segment ${segmentIndex}`,\n                locked: locked ?? false,\n                cachedStats: cachedStats ?? {},\n                active: active ?? false,\n                ...rest,\n            };\n            normalizedSegments[segmentIndex] = normalizedSegment;\n        });\n    }\n    else if (type === SegmentationRepresentations.Contour) {\n        normalizeContourSegments(normalizedSegments, data);\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeContourSegments(normalizedSegments, contourData) {\n    const { geometryIds } = contourData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { setSegmentationDirty } from '../../../utilities/segmentation/utilities';\nexport function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse, segmentIndex) {\n    const eventDetail = {\n        segmentationId,\n        modifiedSlicesToUse,\n        segmentIndex,\n    };\n    setSegmentationDirty(segmentationId);\n    triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getActiveSegmentation(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getActiveSegmentation(viewportId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentationVisibility(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationVisibility(viewportId, specifier);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport * as utilities from './utilities';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, utilities, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import { getSegmentation } from './getSegmentation';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nfunction internalAddRepresentationData({ segmentationId, type, data, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`Segmentation ${segmentationId} not found`);\n    }\n    if (segmentation.representationData[type]) {\n        console.warn(`Representation data of type ${type} already exists for segmentation ${segmentationId}, overwriting it.`);\n    }\n    switch (type) {\n        case SegmentationRepresentations.Labelmap:\n            if (data) {\n                segmentation.representationData[type] =\n                    data;\n            }\n            break;\n        case SegmentationRepresentations.Contour:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        case SegmentationRepresentations.Surface:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        default:\n            throw new Error(`Invalid representation type ${type}`);\n    }\n}\nexport default internalAddRepresentationData;\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getActiveSegmentIndex, setActiveSegmentIndex } from './segmentIndex';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (!getActiveSegmentIndex(segmentationId)) {\n        const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n        if (segmentation) {\n            const segmentKeys = Object.keys(segmentation.segments);\n            if (segmentKeys.length > 0) {\n                const firstSegmentIndex = segmentKeys.map((k) => Number(k)).sort()[0];\n                setActiveSegmentIndex(segmentationId, firstSegmentIndex);\n            }\n        }\n    }\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { state } from '../state';\nfunction getToolGroupForViewport(viewportId, renderingEngineId) {\n    if (!renderingEngineId) {\n        renderingEngineId = getRenderingEngines().find((re) => re.getViewports().find((vp) => vp.id === viewportId))?.id;\n    }\n    const toolGroupFilteredByIds = state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)));\n    if (!toolGroupFilteredByIds.length) {\n        return;\n    }\n    if (toolGroupFilteredByIds.length > 1) {\n        throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`);\n    }\n    return toolGroupFilteredByIds[0];\n}\nexport default getToolGroupForViewport;\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { utilities } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport PlanarFreehandROITool from './PlanarFreehandROITool';\nclass PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool {\n    static { this.toolName = 'PlanarFreehandContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    renderAnnotationInstance(renderContext) {\n        const annotation = renderContext.annotation;\n        const { invalidated } = annotation;\n        const renderResult = super.renderAnnotationInstance(renderContext);\n        if (invalidated) {\n            const { segmentationId } = annotation.data.segmentation;\n            triggerSegmentationDataModified(segmentationId);\n        }\n        return renderResult;\n    }\n}\nexport default PlanarFreehandContourSegmentationTool;\n","import { AnnotationTool } from '../base';\nimport { CONSTANTS, getEnabledElement, VolumeViewport, utilities as csUtils, metaData, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport * as math from '../../utilities/math';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getLineSegmentIntersectionsCoordinates } from '../../utilities/math/polyline';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport calculatePerimeter from '../../utilities/contours/calculatePerimeter';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { KeyboardBindings, ChangeTypes } from '../../enums';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\nclass PlanarFreehandROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'PlanarFreehandROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            alwaysRenderOpenContourHandles: {\n                enabled: false,\n                radius: 2,\n            },\n            allowOpenContours: true,\n            closeContourProximity: 10,\n            checkCanvasEditFallbackProximity: 6,\n            makeClockWise: true,\n            subPixelResolution: 4,\n            smoothing: {\n                smoothOnAdd: false,\n                smoothOnEdit: false,\n                knotsRatioPercentageOnAdd: 40,\n                knotsRatioPercentageOnEdit: 40,\n            },\n            interpolation: {\n                enabled: false,\n                onInterpolationComplete: null,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            displayOnePointAsCrosshairs: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isEditingClosed = false;\n        this.isEditingOpen = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const annotation = this.createAnnotation(evt);\n            this.addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateDraw(evt, annotation, viewportIdsToRender);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            if (annotation.data.contour.closed) {\n                this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            else {\n                this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { polyline: points } = annotation.data.contour;\n            let previousPoint = viewport.worldToCanvas(points[0]);\n            for (let i = 1; i < points.length; i++) {\n                const p1 = previousPoint;\n                const p2 = viewport.worldToCanvas(points[i]);\n                const canProject = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n                if (canProject) {\n                    return true;\n                }\n                previousPoint = p2;\n            }\n            if (!annotation.data.contour.closed) {\n                return false;\n            }\n            const pStart = viewport.worldToCanvas(points[0]);\n            const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n            return pointCanProjectOnLine(canvasCoords, pStart, pEnd, proximity);\n        };\n        this.cancel = (element) => {\n            const isDrawing = this.isDrawing;\n            const isEditingOpen = this.isEditingOpen;\n            const isEditingClosed = this.isEditingClosed;\n            if (isDrawing) {\n                this.cancelDrawing(element);\n            }\n            else if (isEditingOpen) {\n                this.cancelOpenContourEdit(element);\n            }\n            else if (isEditingClosed) {\n                this.cancelClosedContourEdit(element);\n            }\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { cachedStats } = data;\n            const { polyline: points, closed } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const modalityUnitOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n                const calibratedScale = getCalibratedLengthUnitsAndScale(image, () => {\n                    const polyline = data.contour.polyline;\n                    const numPoints = polyline.length;\n                    const projectedPolyline = new Array(numPoints);\n                    for (let i = 0; i < numPoints; i++) {\n                        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n                    }\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(projectedPolyline);\n                    const topLeftBBWorld = viewport.canvasToWorld([canvasMinX, canvasMinY]);\n                    const topLeftBBIndex = csUtils.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = csUtils.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                if (closed) {\n                    this.updateClosedCachedStats({\n                        targetId,\n                        viewport,\n                        canvasCoordinates,\n                        points,\n                        imageData,\n                        metadata,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        deltaInX,\n                        deltaInY,\n                    });\n                }\n                else {\n                    this.updateOpenCachedStats({\n                        metadata,\n                        canvasCoordinates,\n                        targetId,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        deltaInX,\n                        deltaInY,\n                    });\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n            const { data } = annotation;\n            const targetId = this.getTargetId(viewport);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n                annotationUID: annotation.annotationUID,\n            };\n            const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n            if (!options.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = '1';\n            const boundingBox = drawLinkedTextBox(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        registerDrawLoop(this);\n        registerEditLoopCommon(this);\n        registerClosedContourEditLoop(this);\n        registerOpenContourEditLoop(this);\n        registerOpenContourEndEditLoop(this);\n        registerRenderMethods(this);\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations || !annotations.length) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let annotationsToDisplay;\n        if (viewport instanceof VolumeViewport) {\n            const camera = viewport.getCamera();\n            const { spacingInNormalDirection } = csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n            annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);\n        }\n        else {\n            annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n        }\n        return annotationsToDisplay;\n    }\n    filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {\n        const { viewPlaneNormal } = camera;\n        const annotationsWithParallelNormals = annotations.filter((td) => {\n            let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n            if (!td.metadata.referencedImageId &&\n                !annotationViewPlaneNormal &&\n                td.metadata.FrameOfReferenceUID) {\n                for (const point of td.data.contour.polyline) {\n                    const vector = vec3.sub(vec3.create(), point, camera.focalPoint);\n                    const dotProduct = vec3.dot(vector, camera.viewPlaneNormal);\n                    if (!csUtils.isEqual(dotProduct, 0)) {\n                        return false;\n                    }\n                }\n                td.metadata.viewPlaneNormal = camera.viewPlaneNormal;\n                td.metadata.cameraFocalPoint = camera.focalPoint;\n                return true;\n            }\n            if (!annotationViewPlaneNormal) {\n                const { referencedImageId } = td.metadata;\n                const { imageOrientationPatient } = metaData.get('imagePlaneModule', referencedImageId);\n                const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n                const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n                annotationViewPlaneNormal = vec3.create();\n                vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n                td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n            }\n            const isParallel = Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n                PARALLEL_THRESHOLD;\n            return annotationViewPlaneNormal && isParallel;\n        });\n        if (!annotationsWithParallelNormals.length) {\n            return [];\n        }\n        const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n        const { focalPoint } = camera;\n        const annotationsWithinSlice = [];\n        for (const annotation of annotationsWithParallelNormals) {\n            const data = annotation.data;\n            const point = data.contour.polyline[0];\n            if (!annotation.isVisible) {\n                continue;\n            }\n            const dir = vec3.create();\n            vec3.sub(dir, focalPoint, point);\n            const dot = vec3.dot(dir, viewPlaneNormal);\n            if (Math.abs(dot) < halfSpacingInNormalDirection) {\n                annotationsWithinSlice.push(annotation);\n            }\n        }\n        return annotationsWithinSlice;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const worldPos = evt.detail.currentPoints.world;\n        const contourAnnotation = super.createAnnotation(evt);\n        const onInterpolationComplete = (annotation) => {\n            annotation.data.handles.points.length = 0;\n        };\n        const annotation = csUtils.deepMerge(contourAnnotation, {\n            data: {\n                contour: {\n                    polyline: [[...worldPos]],\n                },\n                label: '',\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n        return annotation;\n    }\n    getAnnotationStyle(context) {\n        return super.getAnnotationStyle(context);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        let renderStatus = false;\n        const { viewport, renderingEngine } = enabledElement;\n        const isDrawing = this.isDrawing;\n        const isEditingOpen = this.isEditingOpen;\n        const isEditingClosed = this.isEditingClosed;\n        if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n            if (this.configuration.displayOnePointAsCrosshairs &&\n                annotation.data.contour.polyline.length === 1) {\n                this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n            }\n            else {\n                this.renderContour(enabledElement, svgDrawingHelper, annotation);\n            }\n        }\n        else {\n            const activeAnnotationUID = this.commonData.annotation.annotationUID;\n            if (annotation.annotationUID === activeAnnotationUID) {\n                if (isDrawing) {\n                    this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingClosed) {\n                    this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingOpen) {\n                    this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);\n                }\n            }\n            else {\n                if (this.configuration.displayOnePointAsCrosshairs &&\n                    annotation.data.contour.polyline.length === 1) {\n                    this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    this.renderContour(enabledElement, svgDrawingHelper, annotation);\n                }\n            }\n            renderStatus = true;\n        }\n        if (!this.configuration.calculateStats) {\n            return;\n        }\n        this._calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement);\n        this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n        return renderStatus;\n    }\n    _calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement) {\n        const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n        if (annotation.annotationUID === activeAnnotationUID &&\n            !this.commonData?.movingTextBox) {\n            return;\n        }\n        if (!this.commonData?.movingTextBox) {\n            const { data } = annotation;\n            if (!data.cachedStats[targetId]?.unit) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    area: null,\n                    max: null,\n                    mean: null,\n                    stdDev: null,\n                    areaUnit: null,\n                    unit: null,\n                };\n                this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n        }\n    }\n    updateClosedCachedStats({ viewport, points, imageData, metadata, cachedStats, targetId, modalityUnit, canvasCoordinates, calibratedScale, deltaInX, deltaInY, }) {\n        const { scale, areaUnit, unit } = calibratedScale;\n        const { voxelManager } = viewport.getImageData();\n        const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        let iMin = worldPosIndex[0];\n        let iMax = worldPosIndex[0];\n        let jMin = worldPosIndex[1];\n        let jMax = worldPosIndex[1];\n        let kMin = worldPosIndex[2];\n        let kMax = worldPosIndex[2];\n        for (let j = 1; j < points.length; j++) {\n            const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[j]);\n            worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n            worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n            worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n            iMin = Math.min(iMin, worldPosIndex[0]);\n            iMax = Math.max(iMax, worldPosIndex[0]);\n            jMin = Math.min(jMin, worldPosIndex[1]);\n            jMax = Math.max(jMax, worldPosIndex[1]);\n            kMin = Math.min(kMin, worldPosIndex[2]);\n            kMax = Math.max(kMax, worldPosIndex[2]);\n        }\n        const worldPosIndex2 = csUtils.transformWorldToIndex(imageData, points[1]);\n        worldPosIndex2[0] = Math.floor(worldPosIndex2[0]);\n        worldPosIndex2[1] = Math.floor(worldPosIndex2[1]);\n        worldPosIndex2[2] = Math.floor(worldPosIndex2[2]);\n        let area = polyline.getArea(canvasCoordinates) / scale / scale;\n        area *= deltaInX * deltaInY;\n        let perimeter = calculatePerimeter(canvasCoordinates, closed) / scale;\n        perimeter *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));\n        const iDelta = 0.01 * (iMax - iMin);\n        const jDelta = 0.01 * (jMax - jMin);\n        const kDelta = 0.01 * (kMax - kMin);\n        iMin = Math.floor(iMin - iDelta);\n        iMax = Math.ceil(iMax + iDelta);\n        jMin = Math.floor(jMin - jDelta);\n        jMax = Math.ceil(jMax + jDelta);\n        kMin = Math.floor(kMin - kDelta);\n        kMax = Math.ceil(kMax + kDelta);\n        const boundsIJK = [\n            [iMin, iMax],\n            [jMin, jMax],\n            [kMin, kMax],\n        ];\n        const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n        const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n        let curRow = 0;\n        let intersections = [];\n        let intersectionCounter = 0;\n        let pointsInShape;\n        if (voxelManager) {\n            pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                imageData,\n                isInObject: (pointLPS, _pointIJK) => {\n                    let result = true;\n                    const point = viewport.worldToCanvas(pointLPS);\n                    if (point[1] != curRow) {\n                        intersectionCounter = 0;\n                        curRow = point[1];\n                        intersections = getLineSegmentIntersectionsCoordinates(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);\n                        intersections.sort((function (index) {\n                            return function (a, b) {\n                                return a[index] === b[index]\n                                    ? 0\n                                    : a[index] < b[index]\n                                        ? -1\n                                        : 1;\n                            };\n                        })(0));\n                    }\n                    if (intersections.length && point[0] > intersections[0][0]) {\n                        intersections.shift();\n                        intersectionCounter++;\n                    }\n                    if (intersectionCounter % 2 === 0) {\n                        result = false;\n                    }\n                    return result;\n                },\n                boundsIJK,\n                returnPoints: this.configuration.storePointData,\n            });\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            area,\n            perimeter,\n            mean: stats.mean?.value,\n            max: stats.max?.value,\n            min: stats.min?.value,\n            stdDev: stats.stdDev?.value,\n            statsArray: stats.array,\n            pointsInShape: pointsInShape,\n            areaUnit,\n            modalityUnit,\n            unit,\n        };\n    }\n    updateOpenCachedStats({ targetId, metadata, canvasCoordinates, cachedStats, modalityUnit, calibratedScale, deltaInX, deltaInY, }) {\n        const { scale, unit } = calibratedScale;\n        let length = calculatePerimeter(canvasCoordinates, closed) / scale;\n        length *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            length,\n            modalityUnit,\n            unit,\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, length, perimeter, max, min, isEmptyArea, unit, areaUnit, modalityUnit, } = cachedVolumeStats || {};\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(perimeter)) {\n        textLines.push(`Perimeter: ${csUtils.roundNumber(perimeter)} ${unit}`);\n    }\n    if (csUtils.isNumber(length)) {\n        textLines.push(`${csUtils.roundNumber(length)} ${unit}`);\n    }\n    return textLines;\n}\nexport default PlanarFreehandROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawRectByCoordinates as drawRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROITool extends AnnotationTool {\n    static { this.toolName = 'RectangleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    cachedStats: {},\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { viewPlaneNormal, viewUp } = viewport.getCamera();\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    activeHandleIndex !== undefined) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const { data } = annotation;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        stdDev: stats.stdDev?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        statsArray: stats.array,\n                        pointsInShape: pointsInShape,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(RectangleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    if (mean === undefined || mean === null) {\n        return;\n    }\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Max: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default RectangleROITool;\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { getEnabledElement, cache, utilities as csUtils, Enums, eventTarget, BaseVolumeViewport, StackViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/getActiveSegmentation';\nimport { getLockedSegmentIndices } from '../../stateManagement/segmentation/segmentLocking';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getCurrentLabelmapImageIdForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { StrategyCallbacks } from '../../enums';\nimport * as LabelmapMemo from '../../utilities/segmentation/createLabelmapMemo';\nimport { getAllAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport { isPointInsidePolyline3D } from '../../utilities/math/polyline';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { fillInsideCircle } from './strategies';\nexport default class LabelmapBaseTool extends BaseTool {\n    static { this.previewData = {\n        preview: null,\n        element: null,\n        timerStart: 0,\n        timer: null,\n        startPoint: [NaN, NaN],\n        isDrag: false,\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        super(toolProps, defaultToolProps);\n        this.memoMap = new Map();\n        this.acceptedMemoIds = new Map();\n        this.centerSegmentIndexInfo = {\n            segmentIndex: null,\n            hasSegmentIndex: false,\n            hasPreviewIndex: false,\n            changedIndices: [],\n        };\n    }\n    _historyRedoHandler(evt) {\n        const { id, operationType } = evt.detail;\n        if (operationType !== 'labelmap') {\n            return;\n        }\n        if (this.acceptedMemoIds.has(id)) {\n            this._hoverData = null;\n            const memoData = this.acceptedMemoIds.get(id);\n            const element = memoData?.element;\n            const operationData = this.getOperationData(element);\n            operationData.segmentIndex = memoData?.segmentIndex;\n            if (element) {\n                this.applyActiveStrategyCallback(getEnabledElement(element), operationData, StrategyCallbacks.AcceptPreview);\n            }\n        }\n        this._previewData.isDrag = true;\n    }\n    get _previewData() {\n        return LabelmapBaseTool.previewData;\n    }\n    hasPreviewData() {\n        return !!this._previewData.preview;\n    }\n    shouldResolvePreviewRequests() {\n        return ((this.mode === 'Active' || this.mode === 'Enabled') &&\n            this.hasPreviewData());\n    }\n    createMemo(segmentationId, segmentationVoxelManager) {\n        const voxelManagerId = segmentationVoxelManager.id;\n        if (this.memo &&\n            this.memo.segmentationVoxelManager === segmentationVoxelManager) {\n            return this.memo;\n        }\n        let memo = this.memoMap.get(voxelManagerId);\n        if (!memo) {\n            memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n            this.memoMap.set(voxelManagerId, memo);\n        }\n        else {\n            if (memo.redoVoxelManager) {\n                memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n                this.memoMap.set(voxelManagerId, memo);\n            }\n        }\n        this.memo = memo;\n        return memo;\n    }\n    createEditData(element) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                detail: {\n                    type: 'Segmentation',\n                    message: 'No active segmentation detected, create a segmentation representation before using the brush tool',\n                },\n                cancelable: true,\n            });\n            eventTarget.dispatchEvent(event);\n            return null;\n        }\n        const { segmentationId } = activeSegmentation;\n        const segmentsLocked = getLockedSegmentIndices(segmentationId);\n        const { representationData } = getSegmentation(segmentationId);\n        const editData = this.getEditData({\n            viewport,\n            representationData,\n            segmentsLocked,\n            segmentationId,\n        });\n        return editData;\n    }\n    getEditData({ viewport, representationData, segmentsLocked, segmentationId, }) {\n        if (viewport instanceof BaseVolumeViewport) {\n            const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n            const actors = viewport.getActors();\n            const isStackViewport = viewport instanceof StackViewport;\n            if (isStackViewport) {\n                const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                    detail: {\n                        type: 'Segmentation',\n                        message: 'Cannot perform brush operation on the selected viewport',\n                    },\n                    cancelable: true,\n                });\n                eventTarget.dispatchEvent(event);\n                return null;\n            }\n            const volumes = actors.map((actorEntry) => cache.getVolume(actorEntry.referencedId));\n            const segmentationVolume = cache.getVolume(volumeId);\n            const referencedVolumeIdToThreshold = volumes.find((volume) => csUtils.isEqual(volume.dimensions, segmentationVolume.dimensions))?.volumeId || volumes[0]?.volumeId;\n            return {\n                volumeId,\n                referencedVolumeId: this.configuration.threshold?.volumeId ??\n                    referencedVolumeIdToThreshold,\n                segmentsLocked,\n            };\n        }\n        else {\n            const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n            if (!segmentationImageId) {\n                return;\n            }\n            return {\n                imageId: segmentationImageId,\n                segmentsLocked,\n            };\n        }\n    }\n    createHoverData(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const viewportIdsToRender = [viewport.id];\n        const { segmentIndex, segmentationId, segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        const brushCursor = {\n            metadata: {\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                referencedImageId: '',\n                toolName: this.getToolName(),\n                segmentColor,\n            },\n            data: {},\n        };\n        return {\n            brushCursor,\n            centerCanvas,\n            segmentIndex,\n            viewport,\n            segmentationId,\n            segmentColor,\n            viewportIdsToRender,\n        };\n    }\n    getActiveSegmentationData(viewport) {\n        const viewportId = viewport.id;\n        const activeRepresentation = getActiveSegmentation(viewportId);\n        if (!activeRepresentation) {\n            return;\n        }\n        const { segmentationId } = activeRepresentation;\n        const segmentIndex = getActiveSegmentIndex(segmentationId);\n        if (!segmentIndex) {\n            return;\n        }\n        const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n        return {\n            segmentIndex,\n            segmentationId,\n            segmentColor,\n        };\n    }\n    getOperationData(element) {\n        const editData = this._editData || this.createEditData(element);\n        const { segmentIndex, segmentationId, brushCursor } = this._hoverData || this.createHoverData(element);\n        const { data, metadata = {} } = brushCursor || {};\n        const { viewPlaneNormal, viewUp } = metadata;\n        const configColor = this.configuration.preview?.previewColors?.[segmentIndex];\n        const { viewport } = getEnabledElement(element);\n        const segmentColor = getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n        if (!configColor && !segmentColor) {\n            return;\n        }\n        let previewColor = null, previewSegmentIndex = null;\n        if (this.configuration.preview?.enabled) {\n            previewColor = configColor || lightenColor(...segmentColor);\n            previewSegmentIndex = 255;\n        }\n        const operationData = {\n            ...editData,\n            points: data?.handles?.points,\n            segmentIndex,\n            viewPlaneNormal,\n            previewOnHover: !this._previewData.isDrag,\n            toolGroupId: this.toolGroupId,\n            segmentationId,\n            viewUp,\n            centerSegmentIndexInfo: this.centerSegmentIndexInfo,\n            activeStrategy: this.configuration.activeStrategy,\n            configuration: this.configuration,\n            previewColor,\n            previewSegmentIndex,\n            createMemo: this.createMemo.bind(this),\n        };\n        return operationData;\n    }\n    addPreview(element = this._previewData.element, options) {\n        const { _previewData } = this;\n        const acceptReject = options?.acceptReject;\n        if (acceptReject === true) {\n            this.acceptPreview(element);\n        }\n        else if (acceptReject === false) {\n            this.rejectPreview(element);\n        }\n        const enabledElement = getEnabledElement(element);\n        const results = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.AddPreview);\n        _previewData.isDrag = true;\n        if (results?.modified) {\n            _previewData.preview = results;\n            _previewData.element = element;\n        }\n        return results;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        const operationData = this.getOperationData(element);\n        if (this.memo && this.memo.id) {\n            this.acceptedMemoIds.set(this.memo.id, {\n                element,\n                segmentIndex: operationData.segmentIndex,\n            });\n        }\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.AcceptPreview);\n        this.doneEditMemo();\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    static viewportContoursToLabelmap(viewport, options) {\n        const removeContours = options?.removeContours ?? true;\n        const annotations = getAllAnnotations();\n        const viewAnnotations = filterAnnotationsForDisplay(viewport, annotations);\n        if (!viewAnnotations?.length) {\n            return;\n        }\n        const contourAnnotations = viewAnnotations.filter((annotation) => annotation.data.contour?.polyline?.length);\n        if (!contourAnnotations.length) {\n            return;\n        }\n        const brushInstance = new LabelmapBaseTool({}, {\n            configuration: {\n                strategies: {\n                    FILL_INSIDE_CIRCLE: fillInsideCircle,\n                },\n                activeStrategy: 'FILL_INSIDE_CIRCLE',\n            },\n        });\n        const preview = brushInstance.addPreview(viewport.element);\n        const { memo, segmentationId } = preview;\n        const previewVoxels = memo?.voxelManager;\n        const segmentationVoxels = previewVoxels.sourceVoxelManager || previewVoxels;\n        const { dimensions } = previewVoxels;\n        const imageData = viewport\n            .getDefaultActor()\n            .actor.getMapper()\n            .getInputData();\n        for (const annotation of contourAnnotations) {\n            const boundsIJK = [\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n            ];\n            const { polyline } = annotation.data.contour;\n            for (const point of polyline) {\n                const indexPoint = imageData.worldToIndex(point);\n                indexPoint.forEach((v, idx) => {\n                    boundsIJK[idx][0] = Math.min(boundsIJK[idx][0], v);\n                    boundsIJK[idx][1] = Math.max(boundsIJK[idx][1], v);\n                });\n            }\n            boundsIJK.forEach((bound, idx) => {\n                bound[0] = Math.round(Math.max(0, bound[0]));\n                bound[1] = Math.round(Math.min(dimensions[idx] - 1, bound[1]));\n            });\n            const activeIndex = getActiveSegmentIndex(segmentationId);\n            const startPoint = annotation.data.handles?.[0] || polyline[0];\n            const startIndex = imageData.worldToIndex(startPoint).map(Math.round);\n            const startValue = segmentationVoxels.getAtIJKPoint(startIndex) || 0;\n            let hasZeroIndex = false;\n            let hasPositiveIndex = false;\n            for (const polyPoint of polyline) {\n                const polyIndex = imageData.worldToIndex(polyPoint).map(Math.round);\n                const polyValue = segmentationVoxels.getAtIJKPoint(polyIndex);\n                if (polyValue === startValue) {\n                    hasZeroIndex = true;\n                }\n                else if (polyValue >= 0) {\n                    hasPositiveIndex = true;\n                }\n            }\n            const hasBoth = hasZeroIndex && hasPositiveIndex;\n            const segmentIndex = hasBoth\n                ? startValue\n                : startValue === 0\n                    ? activeIndex\n                    : 0;\n            for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                    for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n                        const worldPoint = imageData.indexToWorld([i, j, k]);\n                        const isContained = isPointInsidePolyline3D(worldPoint, polyline);\n                        if (isContained) {\n                            previewVoxels.setAtIJK(i, j, k, segmentIndex);\n                        }\n                    }\n                }\n            }\n            if (removeContours) {\n                removeAnnotation(annotation.annotationUID);\n            }\n        }\n        const slices = previewVoxels.getArrayOfModifiedSlices();\n        triggerSegmentationDataModified(segmentationId, slices);\n    }\n}\nfunction lightenColor(r, g, b, a, factor = 0.4) {\n    return [\n        Math.round(r + (255 - r) * factor),\n        Math.round(g + (255 - g) * factor),\n        Math.round(b + (255 - b) * factor),\n        a,\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, isEqual } = csUtils;\nexport function getEllipseCornersFromCanvasCoordinates(canvasCoordinates) {\n    const [bottom, top, left, right] = canvasCoordinates;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    const bottomLeft = [left[0], bottom[1]];\n    const topRight = [right[0], top[1]];\n    return [topLeft, bottomRight, bottomLeft, topRight];\n}\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.create();\n        if (points.length >= 2) {\n            vec3.add(center, points[0], points[1]);\n            vec3.scale(center, center, 0.5);\n        }\n        else {\n            vec3.copy(center, points[0]);\n        }\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);\n        const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));\n        const circleCornersIJK = points.map((world) => {\n            return transformWorldToIndex(segmentationImageData, world);\n        });\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.isInObject = createPointInEllipse(cornersInWorld);\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(cornersInWorld = []) {\n    if (!cornersInWorld || cornersInWorld.length !== 4) {\n        throw new Error('createPointInEllipse: cornersInWorld must have 4 points');\n    }\n    const [topLeft, bottomRight, bottomLeft, topRight] = cornersInWorld;\n    const center = vec3.create();\n    vec3.add(center, topLeft, bottomRight);\n    vec3.scale(center, center, 0.5);\n    const majorAxisVec = vec3.create();\n    vec3.subtract(majorAxisVec, topRight, topLeft);\n    const xRadius = vec3.length(majorAxisVec) / 2;\n    vec3.normalize(majorAxisVec, majorAxisVec);\n    const minorAxisVec = vec3.create();\n    vec3.subtract(minorAxisVec, bottomLeft, topLeft);\n    const yRadius = vec3.length(minorAxisVec) / 2;\n    vec3.normalize(minorAxisVec, minorAxisVec);\n    const normal = vec3.create();\n    vec3.cross(normal, majorAxisVec, minorAxisVec);\n    vec3.normalize(normal, normal);\n    if (isEqual(xRadius, yRadius)) {\n        const radius = xRadius;\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n    }\n    return (pointLPS) => {\n        const pointVec = vec3.create();\n        vec3.subtract(pointVec, pointLPS, center);\n        const distToPlane = vec3.dot(pointVec, normal);\n        const proj = vec3.create();\n        vec3.scaleAndAdd(proj, pointVec, normal, -distToPlane);\n        const fromTopLeft = vec3.create();\n        const centerToTopLeft = vec3.create();\n        vec3.subtract(centerToTopLeft, center, topLeft);\n        vec3.subtract(fromTopLeft, proj, centerToTopLeft);\n        const x = vec3.dot(fromTopLeft, majorAxisVec);\n        const y = vec3.dot(fromTopLeft, minorAxisVec);\n        return (x * x) / (xRadius * xRadius) + (y * y) / (yRadius * yRadius) <= 1;\n    };\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const [p0, p1, p2, p3] = points;\n    const axisU = vec3.create();\n    const axisV = vec3.create();\n    vec3.subtract(axisU, p1, p0);\n    vec3.subtract(axisV, p3, p0);\n    const uLen = vec3.length(axisU);\n    const vLen = vec3.length(axisV);\n    vec3.normalize(axisU, axisU);\n    vec3.normalize(axisV, axisV);\n    const normal = vec3.create();\n    vec3.cross(normal, axisU, axisV);\n    vec3.normalize(normal, normal);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointInShapeFn = (pointLPS) => {\n        const v = vec3.create();\n        vec3.subtract(v, pointLPS, p0);\n        const u = vec3.dot(v, axisU);\n        const vproj = vec3.dot(v, axisV);\n        const d = Math.abs(vec3.dot(v, normal));\n        return (u >= -EPS &&\n            u <= uLen + EPS &&\n            vproj >= -EPS &&\n            vproj <= vLen + EPS &&\n            d <= EPS);\n    };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { CONSTANTS } from '@cornerstonejs/core';\nconst { EPSILON } = CONSTANTS;\nfunction calculateBoundingBox(points, dimensions, isWorld = false) {\n    let xMin = Infinity;\n    let xMax = isWorld ? -Infinity : 0;\n    let yMin = Infinity;\n    let yMax = isWorld ? -Infinity : 0;\n    let zMin = Infinity;\n    let zMax = isWorld ? -Infinity : 0;\n    const is3D = points[0]?.length === 3;\n    for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        xMin = Math.min(p[0], xMin);\n        xMax = Math.max(p[0], xMax);\n        yMin = Math.min(p[1], yMin);\n        yMax = Math.max(p[1], yMax);\n        if (is3D) {\n            zMin = Math.min(p[2] ?? zMin, zMin);\n            zMax = Math.max(p[2] ?? zMax, zMax);\n        }\n    }\n    if (dimensions) {\n        xMin = Math.max(isWorld ? dimensions[0] + EPSILON : 0, xMin);\n        xMax = Math.min(isWorld ? dimensions[0] - EPSILON : dimensions[0] - 1, xMax);\n        yMin = Math.max(isWorld ? dimensions[1] + EPSILON : 0, yMin);\n        yMax = Math.min(isWorld ? dimensions[1] - EPSILON : dimensions[1] - 1, yMax);\n        if (is3D && dimensions.length === 3) {\n            zMin = Math.max(isWorld ? dimensions[2] + EPSILON : 0, zMin);\n            zMax = Math.min(isWorld ? dimensions[2] - EPSILON : dimensions[2] - 1, zMax);\n        }\n    }\n    else if (!isWorld) {\n        xMin = Math.max(0, xMin);\n        xMax = Math.min(Infinity, xMax);\n        yMin = Math.max(0, yMin);\n        yMax = Math.min(Infinity, yMax);\n        if (is3D) {\n            zMin = Math.max(0, zMin);\n            zMax = Math.min(Infinity, zMax);\n        }\n    }\n    return is3D\n        ? [\n            [xMin, xMax],\n            [yMin, yMax],\n            [zMin, zMax],\n        ]\n        : [[xMin, xMax], [yMin, yMax], null];\n}\nexport function getBoundingBoxAroundShapeIJK(points, dimensions) {\n    return calculateBoundingBox(points, dimensions, false);\n}\nexport function getBoundingBoxAroundShapeWorld(points, clipBounds) {\n    return calculateBoundingBox(points, clipBounds, true);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, removeAnnotation } from '../../stateManagement';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default function convertContourSegmentationAnnotation(annotation) {\n    const { polyline } = annotation.data?.contour || {};\n    if (!polyline || polyline.length < 3) {\n        console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n        return;\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n    const startPointWorld = polyline[0];\n    const endPointWorld = polyline[polyline.length - 1];\n    const newAnnotation = {\n        metadata: {\n            ...annotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: annotation.data.handles.textBox\n                    ? { ...annotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                ...annotation.data.contour,\n            },\n            spline: annotation.data.spline,\n            segmentation: {\n                ...annotation.data.segmentation,\n            },\n        },\n        annotationUID: utilities.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: annotation.interpolationUID,\n        interpolationCompleted: annotation.interpolationCompleted,\n    };\n    addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);\n    addContourSegmentationAnnotation(newAnnotation);\n    return newAnnotation;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isObject from './isObject';\nfunction debounce(func, wait, options) {\n    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n    let lastInvokeTime = 0;\n    let leading = false;\n    let maxing = false;\n    let trailing = true;\n    const useRAF = !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = Number(wait) || 0;\n    if (isObject(options)) {\n        leading = Boolean(options.leading);\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    function invokeFunc(time) {\n        const args = lastArgs;\n        const thisArg = lastThis;\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n    function startTimer(pendingFunc, wait) {\n        if (useRAF) {\n            return window.requestAnimationFrame(pendingFunc);\n        }\n        return setTimeout(pendingFunc, wait);\n    }\n    function cancelTimer(id) {\n        if (useRAF) {\n            return window.cancelAnimationFrame(id);\n        }\n        clearTimeout(id);\n    }\n    function leadingEdge(time) {\n        lastInvokeTime = time;\n        timerId = startTimer(timerExpired, wait);\n        return leading ? invokeFunc(time) : result;\n    }\n    function remainingWait(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = wait - timeSinceLastCall;\n        return maxing\n            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n            : timeWaiting;\n    }\n    function shouldInvoke(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        return (lastCallTime === undefined ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait));\n    }\n    function timerExpired() {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        timerId = startTimer(timerExpired, remainingWait(time));\n    }\n    function trailingEdge(time) {\n        timerId = undefined;\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n    function cancel() {\n        if (timerId !== undefined) {\n            cancelTimer(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n    function flush() {\n        return timerId === undefined ? result : trailingEdge(Date.now());\n    }\n    function pending() {\n        return timerId !== undefined;\n    }\n    function debounced(...args) {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n        lastArgs = args;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                timerId = startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    debounced.pending = pending;\n    return debounced;\n}\nexport default debounce;\n","export default function getTextBoxCoordsCanvas(annotationCanvasPoints) {\n    const corners = _determineCorners(annotationCanvasPoints);\n    const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n    const textBoxCanvas = [corners.right[0], centerY];\n    return textBoxCanvas;\n}\nfunction _determineCorners(canvasPoints) {\n    const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n    const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n    const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n    const top = handlesTopToBottom[0];\n    const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n    return {\n        top,\n        bottom,\n        right,\n    };\n    function _compareX(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    }\n    function _compareY(a, b) {\n        return a[1] < b[1] ? -1 : 1;\n    }\n}\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import getViewportsForAnnotation from './getViewportsForAnnotation';\nexport default function getViewportForAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    return viewports.length ? viewports[0] : undefined;\n}\n","function isObject(value) {\n    const type = typeof value;\n    return value !== null && (type === 'object' || type === 'function');\n}\nexport default isObject;\n","export default function pointInSphere(sphere, pointLPS) {\n    const { center, radius } = sphere;\n    const radius2 = sphere.radius2 || radius * radius;\n    return ((pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) +\n        (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) +\n        (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <=\n        radius2);\n}\n","import { interpolatePoints } from './algorithms/bspline';\nfunction getContinuousUniformDistributionValues(minDistributionDistance, closedInterval) {\n    const result = [];\n    const [intervalIni, intervalEnd] = closedInterval;\n    const intervalSize = intervalEnd - intervalIni + 1;\n    const intensity = Math.floor(intervalSize / minDistributionDistance);\n    let x = 0;\n    let continuosDistributionValue = Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    while (continuosDistributionValue <= intervalEnd) {\n        result.push(continuosDistributionValue);\n        x++;\n        continuosDistributionValue =\n            Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    }\n    return result;\n}\nexport default function interpolateSegmentPoints(points, iniIndex, endIndex, knotsRatioPercentage) {\n    const segmentSize = endIndex - iniIndex + 1;\n    const amountOfKnots = Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n    const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n    if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n        return points;\n    }\n    if (segmentSize / minKnotDistance < 2) {\n        return points;\n    }\n    const interpolationIniIndex = Math.max(0, iniIndex);\n    const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n    const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n    const segmentPointsUnchangedEnd = points.slice(interpolationEndIndex + 1, points.length);\n    const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n        interpolationIniIndex,\n        interpolationEndIndex,\n    ]);\n    const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n    return [\n        ...segmentPointsUnchangedBeg,\n        ...interpolatedPoints,\n        ...segmentPointsUnchangedEnd,\n    ];\n}\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return [];\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return [];\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import debounce from './debounce';\nimport isObject from './isObject';\nfunction throttle(func, wait, options) {\n    let leading = true;\n    let trailing = true;\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    if (isObject(options)) {\n        leading = 'leading' in options ? Boolean(options.leading) : leading;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    return debounce(func, wait, {\n        leading,\n        trailing,\n        maxWait: wait,\n    });\n}\nexport default throttle;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","import { cache, StackViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nfunction isViewportPreScaled(viewport, targetId) {\n    if (viewport instanceof BaseVolumeViewport) {\n        const volumeId = utilities.getVolumeId(targetId);\n        const volume = cache.getVolume(volumeId);\n        return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n    }\n    else if (viewport instanceof StackViewport) {\n        const { preScale } = viewport.getImageData() || {};\n        return !!preScale?.scaled;\n    }\n    else {\n        return false;\n    }\n}\nexport { isViewportPreScaled };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import { m as macro } from '../../macros2.js';\nimport { b as roundVector, c as clampVector } from '../Core/Math/index.js';\nimport vtkBoundingBox from './BoundingBox.js';\nimport vtkDataSet from './DataSet.js';\nimport vtkStructuredData from './StructuredData.js';\nimport { StructuredType } from './StructuredData/Constants.js';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageData');\n  publicAPI.setExtent = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {\n      inExtent[_key] = arguments[_key];\n    }\n    const extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;\n    if (extentArray.length !== 6) {\n      return false;\n    }\n    const changeDetected = model.extent.some((item, index) => item !== extentArray[index]);\n    if (changeDetected) {\n      model.extent = extentArray.slice();\n      model.dataDescription = vtkStructuredData.getDataDescriptionFromExtent(model.extent);\n      publicAPI.modified();\n    }\n    return changeDetected;\n  };\n  publicAPI.setDimensions = function () {\n    let i;\n    let j;\n    let k;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (arguments.length === 1) {\n      const array = arguments.length <= 0 ? undefined : arguments[0];\n      i = array[0];\n      j = array[1];\n      k = array[2];\n    } else if (arguments.length === 3) {\n      i = arguments.length <= 0 ? undefined : arguments[0];\n      j = arguments.length <= 1 ? undefined : arguments[1];\n      k = arguments.length <= 2 ? undefined : arguments[2];\n    } else {\n      vtkErrorMacro('Bad dimension specification');\n      return;\n    }\n    publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);\n  };\n  publicAPI.getDimensions = () => [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];\n  publicAPI.getNumberOfCells = () => {\n    const dims = publicAPI.getDimensions();\n    let nCells = 1;\n    for (let i = 0; i < 3; i++) {\n      if (dims[i] === 0) {\n        return 0;\n      }\n      if (dims[i] > 1) {\n        nCells *= dims[i] - 1;\n      }\n    }\n    return nCells;\n  };\n  publicAPI.getNumberOfPoints = () => {\n    const dims = publicAPI.getDimensions();\n    return dims[0] * dims[1] * dims[2];\n  };\n  publicAPI.getPoint = index => {\n    const dims = publicAPI.getDimensions();\n    if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {\n      vtkErrorMacro('Requesting a point from an empty image.');\n      return null;\n    }\n    const ijk = new Float64Array(3);\n    switch (model.dataDescription) {\n      case StructuredType.EMPTY:\n        return null;\n      case StructuredType.SINGLE_POINT:\n        break;\n      case StructuredType.X_LINE:\n        ijk[0] = index;\n        break;\n      case StructuredType.Y_LINE:\n        ijk[1] = index;\n        break;\n      case StructuredType.Z_LINE:\n        ijk[2] = index;\n        break;\n      case StructuredType.XY_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0];\n        break;\n      case StructuredType.YZ_PLANE:\n        ijk[1] = index % dims[1];\n        ijk[2] = index / dims[1];\n        break;\n      case StructuredType.XZ_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[2] = index / dims[0];\n        break;\n      case StructuredType.XYZ_GRID:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0] % dims[1];\n        ijk[2] = index / (dims[0] * dims[1]);\n        break;\n      default:\n        vtkErrorMacro('Invalid dataDescription');\n        break;\n    }\n    const coords = [0, 0, 0];\n    publicAPI.indexToWorld(ijk, coords);\n    return coords;\n  };\n\n  // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;\n  // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;\n  // virtual vtkIdType FindPoint(double x, double y, double z)\n  // {\n  //   return this->vtkDataSet::FindPoint(x, y, z);\n  // }\n  // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,\n  //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkGenericCell *gencell,\n  //   vtkIdType cellId, double tol2, int& subId,\n  //   double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,\n  //                                 double tol2, int& subId, double pcoords[3],\n  //                                 double *weights) VTK_OVERRIDE;\n  // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,\n  //                                     this->GetDimensions());}\n  // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}\n  // void ComputeBounds() VTK_OVERRIDE;\n  // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest\n\n  publicAPI.getBounds = () => publicAPI.extentToBounds(publicAPI.getSpatialExtent());\n  publicAPI.extentToBounds = ex => vtkBoundingBox.transformBounds(ex, model.indexToWorld);\n  publicAPI.getSpatialExtent = () => vtkBoundingBox.inflate([...model.extent], 0.5);\n\n  // Internal, shouldn't need to call this manually.\n  publicAPI.computeTransforms = () => {\n    mat4.fromTranslation(model.indexToWorld, model.origin);\n    model.indexToWorld[0] = model.direction[0];\n    model.indexToWorld[1] = model.direction[1];\n    model.indexToWorld[2] = model.direction[2];\n    model.indexToWorld[4] = model.direction[3];\n    model.indexToWorld[5] = model.direction[4];\n    model.indexToWorld[6] = model.direction[5];\n    model.indexToWorld[8] = model.direction[6];\n    model.indexToWorld[9] = model.direction[7];\n    model.indexToWorld[10] = model.direction[8];\n    mat4.scale(model.indexToWorld, model.indexToWorld, model.spacing);\n    mat4.invert(model.worldToIndex, model.indexToWorld);\n  };\n  publicAPI.indexToWorld = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.indexToWorld);\n    return aout;\n  };\n  publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;\n  publicAPI.worldToIndex = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.worldToIndex);\n    return aout;\n  };\n  publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;\n  publicAPI.indexToWorldBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.indexToWorld, bout);\n  };\n  publicAPI.worldToIndexBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.worldToIndex, bout);\n  };\n\n  // Make sure the transform is correct\n  publicAPI.onModified(publicAPI.computeTransforms);\n  publicAPI.computeTransforms();\n  publicAPI.getCenter = () => vtkBoundingBox.getCenter(publicAPI.getBounds());\n  publicAPI.computeHistogram = function (worldBounds) {\n    let voxelFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const bounds = [0, 0, 0, 0, 0, 0];\n    publicAPI.worldToIndexBounds(worldBounds, bounds);\n    const point1 = [0, 0, 0];\n    const point2 = [0, 0, 0];\n    vtkBoundingBox.computeCornerPoints(bounds, point1, point2);\n    roundVector(point1, point1);\n    roundVector(point2, point2);\n    const dimensions = publicAPI.getDimensions();\n    clampVector(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);\n    clampVector(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);\n    const yStride = dimensions[0];\n    const zStride = dimensions[0] * dimensions[1];\n    const pixels = publicAPI.getPointData().getScalars().getData();\n    let maximum = -Infinity;\n    let minimum = Infinity;\n    let sumOfSquares = 0;\n    let isum = 0;\n    let inum = 0;\n    for (let z = point1[2]; z <= point2[2]; z++) {\n      for (let y = point1[1]; y <= point2[1]; y++) {\n        let index = point1[0] + y * yStride + z * zStride;\n        for (let x = point1[0]; x <= point2[0]; x++) {\n          if (!voxelFunction || voxelFunction([x, y, z], bounds)) {\n            const pixel = pixels[index];\n            if (pixel > maximum) maximum = pixel;\n            if (pixel < minimum) minimum = pixel;\n            sumOfSquares += pixel * pixel;\n            isum += pixel;\n            inum += 1;\n          }\n          ++index;\n        }\n      }\n    }\n    const average = inum > 0 ? isum / inum : 0;\n    const variance = inum ? Math.abs(sumOfSquares / inum - average * average) : 0;\n    const sigma = Math.sqrt(variance);\n    return {\n      minimum,\n      maximum,\n      average,\n      variance,\n      sigma,\n      count: inum\n    };\n  };\n\n  // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).\n  // Scalar data could be tuples for color information?\n  publicAPI.computeIncrements = function (extent) {\n    let numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const increments = [];\n    let incr = numberOfComponents;\n\n    // Calculate array increment offsets\n    // similar to c++ vtkImageData::ComputeIncrements\n    for (let idx = 0; idx < 3; ++idx) {\n      increments[idx] = incr;\n      incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;\n    }\n    return increments;\n  };\n\n  /**\n   * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.\n   * @return {Number} the corresponding flattened index in the scalar array\n   */\n  publicAPI.computeOffsetIndex = _ref => {\n    let [i, j, k] = _ref;\n    const extent = publicAPI.getExtent();\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    const increments = publicAPI.computeIncrements(extent, numberOfComponents);\n    // Use the array increments to find the pixel index\n    // similar to c++ vtkImageData::GetArrayPointer\n    // Math.floor to catch \"practically 0\" e^-15 scenarios.\n    return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);\n  };\n\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @return {Number|NaN} the corresponding pixel's index in the scalar array\n   */\n  publicAPI.getOffsetIndexFromWorld = xyz => {\n    const extent = publicAPI.getExtent();\n    const index = publicAPI.worldToIndex(xyz);\n\n    // Confirm indexed i,j,k coords are within the bounds of the volume\n    for (let idx = 0; idx < 3; ++idx) {\n      if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {\n        vtkErrorMacro(`GetScalarPointer: Pixel ${index} is not in memory. Current extent = ${extent}`);\n        return NaN;\n      }\n    }\n\n    // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream\n    return publicAPI.computeOffsetIndex(index);\n  };\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @param {Number?} comp the scalar component index for multi-component scalars\n   * @return {Number|NaN} the corresponding pixel's scalar value\n   */\n  publicAPI.getScalarValueFromWorld = function (xyz) {\n    let comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    if (comp < 0 || comp >= numberOfComponents) {\n      vtkErrorMacro(`GetScalarPointer: Scalar Component ${comp} is not within bounds. Current Scalar numberOfComponents: ${numberOfComponents}`);\n      return NaN;\n    }\n    const offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);\n    if (Number.isNaN(offsetIndex)) {\n      // VTK Error Macro will have been tripped already, no need to do it again,\n      return offsetIndex;\n    }\n    return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  direction: null,\n  // a mat3\n  indexToWorld: null,\n  // a mat4\n  worldToIndex: null,\n  // a mat4\n  spacing: [1.0, 1.0, 1.0],\n  origin: [0.0, 0.0, 0.0],\n  extent: [0, -1, 0, -1, 0, -1],\n  dataDescription: StructuredType.EMPTY\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkDataSet.extend(publicAPI, model, initialValues);\n  if (!model.direction) {\n    model.direction = mat3.identity(new Float64Array(9));\n  } else if (Array.isArray(model.direction)) {\n    model.direction = new Float64Array(model.direction.slice(0, 9));\n  }\n  model.indexToWorld = new Float64Array(16);\n  model.worldToIndex = new Float64Array(16);\n\n  // Set/Get methods\n  macro.get(publicAPI, model, ['indexToWorld', 'worldToIndex']);\n  macro.setGetArray(publicAPI, model, ['origin', 'spacing'], 3);\n  macro.setGetArray(publicAPI, model, ['direction'], 9);\n  macro.getArray(publicAPI, model, ['extent'], 6);\n\n  // Object specific methods\n  vtkImageData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageData$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { h as hsv2rgb, i as isNan, K as floor, L as isInf, M as rgb2hsv, N as rgb2lab, O as lab2rgb } from '../../Common/Core/Math/index.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport Constants from './ColorTransferFunction/Constants.js';\n\nconst {\n  ColorSpace,\n  Scale\n} = Constants;\nconst {\n  ScalarMappingTarget\n} = vtkScalarsToColors;\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-continue                                                */\n\n// Convert to and from a special polar version of CIELAB (useful for creating\n// continuous diverging color maps).\nfunction vtkColorTransferFunctionLabToMsh(lab, msh) {\n  const L = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  const M = Math.sqrt(L * L + a * a + b * b);\n  const s = M > 0.001 ? Math.acos(L / M) : 0.0;\n  const h = s > 0.001 ? Math.atan2(b, a) : 0.0;\n  msh[0] = M;\n  msh[1] = s;\n  msh[2] = h;\n}\nfunction vtkColorTransferFunctionMshToLab(msh, lab) {\n  const M = msh[0];\n  const s = msh[1];\n  const h = msh[2];\n  lab[0] = M * Math.cos(s);\n  lab[1] = M * Math.sin(s) * Math.cos(h);\n  lab[2] = M * Math.sin(s) * Math.sin(h);\n}\n\n// For the case when interpolating from a saturated color to an unsaturated\n// color, find a hue for the unsaturated color that makes sense.\nfunction vtkColorTransferFunctionAdjustHue(msh, unsatM) {\n  if (msh[0] >= unsatM - 0.1) {\n    // The best we can do is hold hue constant.\n    return msh[2];\n  }\n\n  // This equation is designed to make the perceptual change of the\n  // interpolation to be close to constant.\n  const hueSpin = msh[1] * Math.sqrt(unsatM * unsatM - msh[0] * msh[0]) / (msh[0] * Math.sin(msh[1]));\n  // Spin hue away from 0 except in purple hues.\n  if (msh[2] > -0.3 * Math.PI) {\n    return msh[2] + hueSpin;\n  }\n  return msh[2] - hueSpin;\n}\nfunction vtkColorTransferFunctionAngleDiff(a1, a2) {\n  let adiff = a1 - a2;\n  if (adiff < 0.0) {\n    adiff = -adiff;\n  }\n  while (adiff >= 2.0 * Math.PI) {\n    adiff -= 2.0 * Math.PI;\n  }\n  if (adiff > Math.PI) {\n    adiff = 2.0 * Math.PI - adiff;\n  }\n  return adiff;\n}\n\n// Interpolate a diverging color map.\nfunction vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, result) {\n  const lab1 = [];\n  const lab2 = [];\n  rgb2lab(rgb1, lab1);\n  rgb2lab(rgb2, lab2);\n  const msh1 = [];\n  const msh2 = [];\n  vtkColorTransferFunctionLabToMsh(lab1, msh1);\n  vtkColorTransferFunctionLabToMsh(lab2, msh2);\n\n  // If the endpoints are distinct saturated colors, then place white in between\n  // them.\n  let localS = s;\n  if (msh1[1] > 0.05 && msh2[1] > 0.05 && vtkColorTransferFunctionAngleDiff(msh1[2], msh2[2]) > 0.33 * Math.PI) {\n    // Insert the white midpoint by setting one end to white and adjusting the\n    // scalar value.\n    let Mmid = Math.max(msh1[0], msh2[0]);\n    Mmid = Math.max(88.0, Mmid);\n    if (s < 0.5) {\n      msh2[0] = Mmid;\n      msh2[1] = 0.0;\n      msh2[2] = 0.0;\n      localS *= 2.0;\n    } else {\n      msh1[0] = Mmid;\n      msh1[1] = 0.0;\n      msh1[2] = 0.0;\n      localS = 2.0 * localS - 1.0;\n    }\n  }\n\n  // If one color has no saturation, then its hue value is invalid.  In this\n  // case, we want to set it to something logical so that the interpolation of\n  // hue makes sense.\n  if (msh1[1] < 0.05 && msh2[1] > 0.05) {\n    msh1[2] = vtkColorTransferFunctionAdjustHue(msh2, msh1[0]);\n  } else if (msh2[1] < 0.05 && msh1[1] > 0.05) {\n    msh2[2] = vtkColorTransferFunctionAdjustHue(msh1, msh2[0]);\n  }\n  const mshTmp = [];\n  mshTmp[0] = (1 - localS) * msh1[0] + localS * msh2[0];\n  mshTmp[1] = (1 - localS) * msh1[1] + localS * msh2[1];\n  mshTmp[2] = (1 - localS) * msh1[2] + localS * msh2[2];\n\n  // Now convert back to RGB\n  const labTmp = [];\n  vtkColorTransferFunctionMshToLab(mshTmp, labTmp);\n  lab2rgb(labTmp, result);\n}\n\n// ----------------------------------------------------------------------------\n// vtkColorTransferFunction methods\n// ----------------------------------------------------------------------------\n\nfunction vtkColorTransferFunction(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkColorTransferFunction');\n\n  // Return the number of points which specify this function\n  publicAPI.getSize = () => model.nodes.length;\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPoint = (x, r, g, b) => publicAPI.addRGBPointLong(x, r, g, b, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPointLong = function (x, r, g, b) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    // Error check\n    if (midpoint < 0.0 || midpoint > 1.0) {\n      vtkErrorMacro('Midpoint outside range [0.0, 1.0]');\n      return -1;\n    }\n    if (sharpness < 0.0 || sharpness > 1.0) {\n      vtkErrorMacro('Sharpness outside range [0.0, 1.0]');\n      return -1;\n    }\n\n    // remove any node already at this X location\n    if (!model.allowDuplicateScalars) {\n      publicAPI.removePoint(x);\n    }\n\n    // Create the new node\n    const node = {\n      x,\n      r,\n      g,\n      b,\n      midpoint,\n      sharpness\n    };\n\n    // Add it, then sort to get everything in order\n    model.nodes.push(node);\n    publicAPI.sortAndUpdateRange();\n\n    // We need to find the index of the node we just added in order\n    // to return this value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n\n    // If we didn't find it, something went horribly wrong so\n    // return -1\n    if (i < model.nodes.length) {\n      return i;\n    }\n    return -1;\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPoint = (x, h, s, v) => publicAPI.addHSVPointLong(x, h, s, v, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPointLong = function (x, h, s, v) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    const rgb = [];\n    const hsv = [h, s, v];\n    hsv2rgb(hsv, rgb);\n    return publicAPI.addRGBPoint(x, rgb[0], rgb[1], rgb[2], midpoint, sharpness);\n  };\n\n  //----------------------------------------------------------------------------\n  // Set nodes directly\n  publicAPI.setNodes = nodes => {\n    if (model.nodes !== nodes) {\n      const before = JSON.stringify(model.nodes);\n      model.nodes = nodes;\n      const after = JSON.stringify(model.nodes);\n      if (publicAPI.sortAndUpdateRange() || before !== after) {\n        publicAPI.modified();\n        return true;\n      }\n    }\n    return false;\n  };\n\n  //----------------------------------------------------------------------------\n  // Sort the vector in increasing order, then fill in\n  // the Range\n  publicAPI.sortAndUpdateRange = () => {\n    const before = JSON.stringify(model.nodes);\n    model.nodes.sort((a, b) => a.x - b.x);\n    const after = JSON.stringify(model.nodes);\n    const modifiedInvoked = publicAPI.updateRange();\n    // If range is updated, Modified() has been called, don't call it again.\n    if (!modifiedInvoked && before !== after) {\n      publicAPI.modified();\n      return true;\n    }\n    return modifiedInvoked;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.updateRange = () => {\n    const oldRange = [2];\n    oldRange[0] = model.mappingRange[0];\n    oldRange[1] = model.mappingRange[1];\n    const size = model.nodes.length;\n    if (size) {\n      model.mappingRange[0] = model.nodes[0].x;\n      model.mappingRange[1] = model.nodes[size - 1].x;\n    } else {\n      model.mappingRange[0] = 0;\n      model.mappingRange[1] = 0;\n    }\n\n    // If the range is the same, then no need to call Modified()\n    if (oldRange[0] === model.mappingRange[0] && oldRange[1] === model.mappingRange[1]) {\n      return false;\n    }\n    publicAPI.modified();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove a point\n  publicAPI.removePoint = x => {\n    // First find the node since we need to know its\n    // index as our return value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n    const retVal = i;\n\n    // If the node doesn't exist, we return -1\n    if (i >= model.nodes.length) {\n      return -1;\n    }\n\n    // If the first or last point has been removed, then we update the range\n    // No need to sort here as the order of points hasn't changed.\n    let modifiedInvoked = false;\n    model.nodes.splice(i, 1);\n    if (i === 0 || i === model.nodes.length) {\n      modifiedInvoked = publicAPI.updateRange();\n    }\n    if (!modifiedInvoked) {\n      publicAPI.modified();\n    }\n    return retVal;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.movePoint = (oldX, newX) => {\n    if (oldX === newX) {\n      // Nothing to do.\n      return;\n    }\n    publicAPI.removePoint(newX);\n    for (let i = 0; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === oldX) {\n        model.nodes[i].x = newX;\n        publicAPI.sortAndUpdateRange();\n        break;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove all points\n  publicAPI.removeAllPoints = () => {\n    model.nodes = [];\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in RGB\n  publicAPI.addRGBSegment = (x1, r1, g1, b1, x2, r2, g2, b2) => {\n    // First, find all points in this range and remove them\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= x1 && model.nodes[i].x <= x2) {\n        model.nodes.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n\n    // Now add the points\n    publicAPI.addRGBPointLong(x1, r1, g1, b1, 0.5, 0.0);\n    publicAPI.addRGBPointLong(x2, r2, g2, b2, 0.5, 0.0);\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in HSV\n  publicAPI.addHSVSegment = (x1, h1, s1, v1, x2, h2, s2, v2) => {\n    const hsv1 = [h1, s1, v1];\n    const hsv2 = [h2, s2, v2];\n    const rgb1 = [];\n    const rgb2 = [];\n    hsv2rgb(hsv1, rgb1);\n    hsv2rgb(hsv2, rgb2);\n    publicAPI.addRGBSegment(x1, rgb1[0], rgb1[1], rgb1[2], x2, rgb2[0], rgb2[1], rgb2[2]);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGBA color evaluated at the specified location\n  publicAPI.mapValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return [Math.floor(255.0 * rgb[0] + 0.5), Math.floor(255.0 * rgb[1] + 0.5), Math.floor(255.0 * rgb[2] + 0.5), 255];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGB color evaluated at the specified location\n  publicAPI.getColor = (x, rgb) => {\n    if (model.indexedLookup) {\n      const numNodes = publicAPI.getSize();\n      // todo\n      const idx = publicAPI.getAnnotatedValueIndexInternal(x);\n      if (idx < 0 || numNodes === 0) {\n        const nanColor = publicAPI.getNanColorByReference();\n        rgb[0] = nanColor[0];\n        rgb[1] = nanColor[1];\n        rgb[2] = nanColor[2];\n      } else {\n        const nodeVal = [];\n        publicAPI.getNodeValue(idx % numNodes, nodeVal);\n        // nodeVal[0] is the x value. nodeVal[1...3] is rgb.\n        rgb[0] = nodeVal[1];\n        rgb[1] = nodeVal[2];\n        rgb[2] = nodeVal[3];\n      }\n      return;\n    }\n    publicAPI.getTable(x, x, 1, rgb);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the red color evaluated at the specified location\n  publicAPI.getRedValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[0];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the green color evaluated at the specified location\n  publicAPI.getGreenValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[1];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the blue color evaluated at the specified location\n  publicAPI.getBlueValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[2];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns a table of RGB colors at regular intervals along the function\n  publicAPI.getTable = (xStart_, xEnd_, size, table) => {\n    // To handle BigInt limitation\n    const xStart = Number(xStart_);\n    const xEnd = Number(xEnd_);\n\n    // Special case: If either the start or end is a NaN, then all any\n    // interpolation done on them is also a NaN.  Therefore, fill the table with\n    // the NaN color.\n    if (isNan(xStart) || isNan(xEnd)) {\n      for (let i = 0; i < size; i++) {\n        table[i * 3 + 0] = model.nanColor[0];\n        table[i * 3 + 1] = model.nanColor[1];\n        table[i * 3 + 2] = model.nanColor[2];\n      }\n      return;\n    }\n    let idx = 0;\n    const numNodes = model.nodes.length;\n\n    // Need to keep track of the last value so that\n    // we can fill in table locations past this with\n    // this value if Clamping is On.\n    let lastR = 0.0;\n    let lastG = 0.0;\n    let lastB = 0.0;\n    if (numNodes !== 0) {\n      lastR = model.nodes[numNodes - 1].r;\n      lastG = model.nodes[numNodes - 1].g;\n      lastB = model.nodes[numNodes - 1].b;\n    }\n    let x = 0.0;\n    let x1 = 0.0;\n    let x2 = 0.0;\n    const rgb1 = [0.0, 0.0, 0.0];\n    const rgb2 = [0.0, 0.0, 0.0];\n    let midpoint = 0.0;\n    let sharpness = 0.0;\n    const tmpVec = [];\n\n    // If the scale is logarithmic, make sure the range is valid.\n    let usingLogScale = model.scale === Scale.LOG10;\n    if (usingLogScale) {\n      // Note: This requires range[0] <= range[1].\n      usingLogScale = model.mappingRange[0] > 0.0;\n    }\n    let logStart = 0.0;\n    let logEnd = 0.0;\n    let logX = 0.0;\n    if (usingLogScale) {\n      logStart = Math.log10(xStart);\n      logEnd = Math.log10(xEnd);\n    }\n\n    // For each table entry\n    for (let i = 0; i < size; i++) {\n      // Find our location in the table\n      const tidx = 3 * i;\n\n      // Find our X location. If we are taking only 1 sample, make\n      // it halfway between start and end (usually start and end will\n      // be the same in this case)\n      if (size > 1) {\n        if (usingLogScale) {\n          logX = logStart + i / (size - 1.0) * (logEnd - logStart);\n          x = 10.0 ** logX;\n        } else {\n          x = xStart + i / (size - 1.0) * (xEnd - xStart);\n        }\n      } else if (usingLogScale) {\n        logX = 0.5 * (logStart + logEnd);\n        x = 10.0 ** logX;\n      } else {\n        x = 0.5 * (xStart + xEnd);\n      }\n\n      // Linearly map x from mappingRange to [0, numberOfValues-1],\n      // discretize (round down to the closest integer),\n      // then map back to mappingRange\n      if (model.discretize) {\n        const range = model.mappingRange;\n        if (x >= range[0] && x <= range[1]) {\n          const numberOfValues = model.numberOfValues;\n          const deltaRange = range[1] - range[0];\n          if (numberOfValues <= 1) {\n            x = range[0] + deltaRange / 2.0;\n          } else {\n            // normalize x\n            const xn = (x - range[0]) / deltaRange;\n            // discretize\n            const discretizeIndex = floor(numberOfValues * xn);\n            // get discretized x\n            x = range[0] + discretizeIndex / (numberOfValues - 1) * deltaRange;\n          }\n        }\n      }\n\n      // Do we need to move to the next node?\n      while (idx < numNodes && x > model.nodes[idx].x) {\n        idx++;\n        // If we are at a valid point index, fill in\n        // the value at this node, and the one before (the\n        // two that surround our current sample location)\n        // idx cannot be 0 since we just incremented it.\n        if (idx < numNodes) {\n          x1 = model.nodes[idx - 1].x;\n          x2 = model.nodes[idx].x;\n          if (usingLogScale) {\n            x1 = Math.log10(x1);\n            x2 = Math.log10(x2);\n          }\n          rgb1[0] = model.nodes[idx - 1].r;\n          rgb2[0] = model.nodes[idx].r;\n          rgb1[1] = model.nodes[idx - 1].g;\n          rgb2[1] = model.nodes[idx].g;\n          rgb1[2] = model.nodes[idx - 1].b;\n          rgb2[2] = model.nodes[idx].b;\n\n          // We only need the previous midpoint and sharpness\n          // since these control this region\n          midpoint = model.nodes[idx - 1].midpoint;\n          sharpness = model.nodes[idx - 1].sharpness;\n\n          // Move midpoint away from extreme ends of range to avoid\n          // degenerate math\n          if (midpoint < 0.00001) {\n            midpoint = 0.00001;\n          }\n          if (midpoint > 0.99999) {\n            midpoint = 0.99999;\n          }\n        }\n      }\n\n      // Are we at or past the end? If so, just use the last value\n      if (x > model.mappingRange[1]) {\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseAboveRangeColor()) {\n            table[tidx] = model.aboveRangeColor[0];\n            table[tidx + 1] = model.aboveRangeColor[1];\n            table[tidx + 2] = model.aboveRangeColor[2];\n          } else {\n            table[tidx] = lastR;\n            table[tidx + 1] = lastG;\n            table[tidx + 2] = lastB;\n          }\n        }\n      } else if (x < model.mappingRange[0] || isInf(x) && x < 0) {\n        // we are before the first node? If so, duplicate this node's values.\n        // We have to deal with -inf here\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseBelowRangeColor()) {\n            table[tidx] = model.belowRangeColor[0];\n            table[tidx + 1] = model.belowRangeColor[1];\n            table[tidx + 2] = model.belowRangeColor[2];\n          } else if (numNodes > 0) {\n            table[tidx] = model.nodes[0].r;\n            table[tidx + 1] = model.nodes[0].g;\n            table[tidx + 2] = model.nodes[0].b;\n          }\n        }\n      } else if (idx === 0 && (Math.abs(x - xStart) < 1e-6 || model.discretize)) {\n        if (numNodes > 0) {\n          table[tidx] = model.nodes[0].r;\n          table[tidx + 1] = model.nodes[0].g;\n          table[tidx + 2] = model.nodes[0].b;\n        } else {\n          table[tidx] = 0.0;\n          table[tidx + 1] = 0.0;\n          table[tidx + 2] = 0.0;\n        }\n      } else {\n        // OK, we are between two nodes - interpolate\n        // Our first attempt at a normalized location [0,1] -\n        // we will be modifying this based on midpoint and\n        // sharpness to get the curve shape we want and to have\n        // it pass through (y1+y2)/2 at the midpoint.\n        let s = 0.0;\n        if (usingLogScale) {\n          s = (logX - x1) / (x2 - x1);\n        } else {\n          s = (x - x1) / (x2 - x1);\n        }\n\n        // Readjust based on the midpoint - linear adjustment\n        if (s < midpoint) {\n          s = 0.5 * s / midpoint;\n        } else {\n          s = 0.5 + 0.5 * (s - midpoint) / (1.0 - midpoint);\n        }\n\n        // override for sharpness > 0.99\n        // In this case we just want piecewise constant\n        if (sharpness > 0.99) {\n          // Use the first value since we are below the midpoint\n          if (s < 0.5) {\n            table[tidx] = rgb1[0];\n            table[tidx + 1] = rgb1[1];\n            table[tidx + 2] = rgb1[2];\n            continue;\n          } else {\n            // Use the second value at or above the midpoint\n            table[tidx] = rgb2[0];\n            table[tidx + 1] = rgb2[1];\n            table[tidx + 2] = rgb2[2];\n            continue;\n          }\n        }\n\n        // Override for sharpness < 0.01\n        // In this case we want piecewise linear\n        if (sharpness < 0.01) {\n          // Simple linear interpolation\n          if (model.colorSpace === ColorSpace.RGB) {\n            table[tidx] = (1 - s) * rgb1[0] + s * rgb2[0];\n            table[tidx + 1] = (1 - s) * rgb1[1] + s * rgb2[1];\n            table[tidx + 2] = (1 - s) * rgb1[2] + s * rgb2[2];\n          } else if (model.colorSpace === ColorSpace.HSV) {\n            const hsv1 = [];\n            const hsv2 = [];\n            rgb2hsv(rgb1, hsv1);\n            rgb2hsv(rgb2, hsv2);\n            if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n              if (hsv1[0] > hsv2[0]) {\n                hsv1[0] -= 1.0;\n              } else {\n                hsv2[0] -= 1.0;\n              }\n            }\n            const hsvTmp = [];\n            hsvTmp[0] = (1.0 - s) * hsv1[0] + s * hsv2[0];\n            if (hsvTmp[0] < 0.0) {\n              hsvTmp[0] += 1.0;\n            }\n            hsvTmp[1] = (1.0 - s) * hsv1[1] + s * hsv2[1];\n            hsvTmp[2] = (1.0 - s) * hsv1[2] + s * hsv2[2];\n\n            // Now convert this back to RGB\n            hsv2rgb(hsvTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.LAB) {\n            const lab1 = [];\n            const lab2 = [];\n            rgb2lab(rgb1, lab1);\n            rgb2lab(rgb2, lab2);\n            const labTmp = [];\n            labTmp[0] = (1 - s) * lab1[0] + s * lab2[0];\n            labTmp[1] = (1 - s) * lab1[1] + s * lab2[1];\n            labTmp[2] = (1 - s) * lab1[2] + s * lab2[2];\n\n            // Now convert back to RGB\n            lab2rgb(labTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.DIVERGING) {\n            vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else {\n            vtkErrorMacro('ColorSpace set to invalid value.', model.colorSpace);\n          }\n          continue;\n        }\n\n        // We have a sharpness between [0.01, 0.99] - we will\n        // used a modified hermite curve interpolation where we\n        // derive the slope based on the sharpness, and we compress\n        // the curve non-linearly based on the sharpness\n\n        // First, we will adjust our position based on sharpness in\n        // order to make the curve sharper (closer to piecewise constant)\n        if (s < 0.5) {\n          s = 0.5 * (s * 2.0) ** (1.0 + 10.0 * sharpness);\n        } else if (s > 0.5) {\n          s = 1.0 - 0.5 * ((1.0 - s) * 2) ** (1 + 10.0 * sharpness);\n        }\n\n        // Compute some coefficients we will need for the hermite curve\n        const ss = s * s;\n        const sss = ss * s;\n        const h1 = 2.0 * sss - 3 * ss + 1;\n        const h2 = -2 * sss + 3 * ss;\n        const h3 = sss - 2 * ss + s;\n        const h4 = sss - ss;\n        let slope;\n        let t;\n        if (model.colorSpace === ColorSpace.RGB) {\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = rgb2[j] - rgb1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            table[tidx + j] = h1 * rgb1[j] + h2 * rgb2[j] + h3 * t + h4 * t;\n          }\n        } else if (model.colorSpace === ColorSpace.HSV) {\n          const hsv1 = [];\n          const hsv2 = [];\n          rgb2hsv(rgb1, hsv1);\n          rgb2hsv(rgb2, hsv2);\n          if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n            if (hsv1[0] > hsv2[0]) {\n              hsv1[0] -= 1.0;\n            } else {\n              hsv2[0] -= 1.0;\n            }\n          }\n          const hsvTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = hsv2[j] - hsv1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            hsvTmp[j] = h1 * hsv1[j] + h2 * hsv2[j] + h3 * t + h4 * t;\n            if (j === 0 && hsvTmp[j] < 0.0) {\n              hsvTmp[j] += 1.0;\n            }\n          }\n          // Now convert this back to RGB\n          hsv2rgb(hsvTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.LAB) {\n          const lab1 = [];\n          const lab2 = [];\n          rgb2lab(rgb1, lab1);\n          rgb2lab(rgb2, lab2);\n          const labTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = lab2[j] - lab1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            labTmp[j] = h1 * lab1[j] + h2 * lab2[j] + h3 * t + h4 * t;\n          }\n          // Now convert this back to RGB\n          lab2rgb(labTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.DIVERGING) {\n          // I have not implemented proper interpolation by a hermite curve for\n          // the diverging color map, but I cannot think of a good use case for\n          // that anyway.\n          vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else {\n          vtkErrorMacro('ColorSpace set to invalid value.');\n        }\n\n        // Final error check to make sure we don't go outside [0,1]\n        for (let j = 0; j < 3; j++) {\n          table[tidx + j] = table[tidx + j] < 0.0 ? 0.0 : table[tidx + j];\n          table[tidx + j] = table[tidx + j] > 1.0 ? 1.0 : table[tidx + j];\n        }\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getUint8Table = function (xStart, xEnd, size) {\n    let withAlpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (publicAPI.getMTime() <= model.buildTime && model.tableSize === size && model.tableWithAlpha !== withAlpha) {\n      return model.table;\n    }\n    if (model.nodes.length === 0) {\n      vtkErrorMacro('Attempting to lookup a value with no points in the function');\n      return model.table;\n    }\n    const nbChannels = withAlpha ? 4 : 3;\n    if (model.tableSize !== size || model.tableWithAlpha !== withAlpha) {\n      model.table = new Uint8Array(size * nbChannels);\n      model.tableSize = size;\n      model.tableWithAlpha = withAlpha;\n    }\n    const tmpTable = [];\n    publicAPI.getTable(xStart, xEnd, size, tmpTable);\n    for (let i = 0; i < size; i++) {\n      model.table[i * nbChannels + 0] = Math.floor(tmpTable[i * 3 + 0] * 255.0 + 0.5);\n      model.table[i * nbChannels + 1] = Math.floor(tmpTable[i * 3 + 1] * 255.0 + 0.5);\n      model.table[i * nbChannels + 2] = Math.floor(tmpTable[i * 3 + 2] * 255.0 + 0.5);\n      if (withAlpha) {\n        model.table[i * nbChannels + 3] = 255;\n      }\n    }\n    model.buildTime.modified();\n    return model.table;\n  };\n  publicAPI.buildFunctionFromArray = array => {\n    publicAPI.removeAllPoints();\n    const numComponents = array.getNumberOfComponents();\n    for (let i = 0; i < array.getNumberOfTuples(); i++) {\n      switch (numComponents) {\n        case 3:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 4:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 5:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n        case 6:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n      }\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.buildFunctionFromTable = (xStart, xEnd, size, table) => {\n    let inc = 0.0;\n    publicAPI.removeAllPoints();\n    if (size > 1) {\n      inc = (xEnd - xStart) / (size - 1.0);\n    }\n    for (let i = 0; i < size; i++) {\n      const node = {\n        x: xStart + inc * i,\n        r: table[i * 3],\n        g: table[i * 3 + 1],\n        b: table[i * 3 + 2],\n        sharpness: 0.0,\n        midpoint: 0.5\n      };\n      model.nodes.push(node);\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.getNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    val[0] = model.nodes[index].x;\n    val[1] = model.nodes[index].r;\n    val[2] = model.nodes[index].g;\n    val[3] = model.nodes[index].b;\n    val[4] = model.nodes[index].midpoint;\n    val[5] = model.nodes[index].sharpness;\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.setNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    const oldX = model.nodes[index].x;\n    model.nodes[index].x = val[0];\n    model.nodes[index].r = val[1];\n    model.nodes[index].g = val[2];\n    model.nodes[index].b = val[3];\n    model.nodes[index].midpoint = val[4];\n    model.nodes[index].sharpness = val[5];\n    if (oldX !== val[0]) {\n      // The point has been moved, the order of points or the range might have\n      // been modified.\n      publicAPI.sortAndUpdateRange();\n      // No need to call Modified() here because SortAndUpdateRange() has done it\n      // already.\n    } else {\n      publicAPI.modified();\n    }\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getNumberOfAvailableColors = () => {\n    if (model.indexedLookup && publicAPI.getSize()) {\n      return publicAPI.getSize();\n    }\n    if (model.tableSize) {\n      // Not sure if this is correct since it is only set if\n      // \"const unsigned char *::GetTable(double xStart, double xEnd,int size)\"\n      // has been called.\n      return model.tableSize;\n    }\n    const nNodes = model.nodes?.length ?? 0;\n    // The minimum is 4094 colors so that it fills in the 4096 texels texture in `mapScalarsToTexture`\n    return Math.max(4094, nNodes);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getIndexedColor = (idx, rgba) => {\n    const n = publicAPI.getSize();\n    if (n > 0 && idx >= 0) {\n      const nodeValue = [];\n      publicAPI.getNodeValue(idx % n, nodeValue);\n      for (let j = 0; j < 3; ++j) {\n        rgba[j] = nodeValue[j + 1];\n      }\n      rgba[3] = 1.0; // NodeColor is RGB-only.\n      return;\n    }\n    const nanColor = publicAPI.getNanColorByReference();\n    rgba[0] = nanColor[0];\n    rgba[1] = nanColor[1];\n    rgba[2] = nanColor[2];\n    rgba[3] = 1.0; // NanColor is RGB-only.\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.fillFromDataPointer = (nb, ptr) => {\n    if (nb <= 0 || !ptr) {\n      return;\n    }\n    publicAPI.removeAllPoints();\n    for (let i = 0; i < nb; i++) {\n      publicAPI.addRGBPoint(ptr[i * 4], ptr[i * 4 + 1], ptr[i * 4 + 2], ptr[i * 4 + 3]);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.setMappingRange = (min, max) => {\n    const range = [min, max];\n    const originalRange = publicAPI.getRange();\n    if (originalRange[1] === range[1] && originalRange[0] === range[0]) {\n      return;\n    }\n    if (range[1] === range[0]) {\n      vtkErrorMacro('attempt to set zero width color range');\n      return;\n    }\n    const scale = (range[1] - range[0]) / (originalRange[1] - originalRange[0]);\n    const shift = range[0] - originalRange[0] * scale;\n    for (let i = 0; i < model.nodes.length; ++i) {\n      model.nodes[i].x = model.nodes[i].x * scale + shift;\n    }\n    model.mappingRange[0] = range[0];\n    model.mappingRange[1] = range[1];\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.adjustRange = range => {\n    const functionRange = publicAPI.getRange();\n\n    // Make sure we have points at each end of the range\n    const rgb = [];\n    if (functionRange[0] < range[0]) {\n      publicAPI.getColor(range[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    }\n    if (functionRange[1] > range[1]) {\n      publicAPI.getColor(range[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    }\n\n    // Remove all points out-of-range\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= range[0] && model.nodes[i].x <= range[1]) {\n        model.nodes.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    return 1;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.estimateMinNumberOfSamples = (x1, x2) => {\n    const d = publicAPI.findMinimumXDistance();\n    return Math.ceil((x2 - x1) / d);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.findMinimumXDistance = () => {\n    if (model.nodes.length < 2) {\n      return -1.0;\n    }\n    let distance = Number.MAX_VALUE;\n    for (let i = 0; i < model.nodes.length - 1; i++) {\n      const currentDist = model.nodes[i + 1].x - model.nodes[i].x;\n      if (currentDist < distance) {\n        distance = currentDist;\n      }\n    }\n    return distance;\n  };\n  publicAPI.mapScalarsThroughTable = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkDebugMacro('Transfer Function Has No Points!');\n      return;\n    }\n    if (model.indexedLookup) {\n      publicAPI.mapDataIndexed(input, output, outFormat, inputOffset);\n    } else {\n      publicAPI.mapData(input, output, outFormat, inputOffset);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.mapData = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkWarningMacro('Transfer Function Has No Points!');\n      return;\n    }\n    const alpha = Math.floor(publicAPI.getAlpha() * 255.0 + 0.5);\n    const length = input.getNumberOfTuples();\n    const inIncr = input.getNumberOfComponents();\n    const outputV = output.getData();\n    const inputV = input.getData();\n    const rgb = [];\n    if (outFormat === ScalarMappingTarget.RGBA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 4] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 4 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 4 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n        outputV[i * 4 + 3] = alpha;\n      }\n    }\n    if (outFormat === ScalarMappingTarget.RGB) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 3] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 3 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 3 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE_ALPHA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 2] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n        outputV[i * 2 + 1] = alpha;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.applyColorMap = colorMap => {\n    const oldColorSpace = JSON.stringify(model.colorSpace);\n    if (colorMap.ColorSpace) {\n      model.colorSpace = ColorSpace[colorMap.ColorSpace.toUpperCase()];\n      if (model.colorSpace === undefined) {\n        vtkErrorMacro(`ColorSpace ${colorMap.ColorSpace} not supported, using RGB instead`);\n        model.colorSpace = ColorSpace.RGB;\n      }\n    }\n    let isModified = oldColorSpace !== JSON.stringify(model.colorSpace);\n    const oldNanColor = isModified || JSON.stringify(model.nanColor);\n    if (colorMap.NanColor) {\n      model.nanColor = [].concat(colorMap.NanColor);\n      while (model.nanColor.length < 4) {\n        model.nanColor.push(1.0);\n      }\n    }\n    isModified = isModified || oldNanColor !== JSON.stringify(model.nanColor);\n    const oldNodes = isModified || JSON.stringify(model.nodes);\n    if (colorMap.RGBPoints) {\n      const size = colorMap.RGBPoints.length;\n      model.nodes = [];\n      const midpoint = 0.5;\n      const sharpness = 0.0;\n      for (let i = 0; i < size; i += 4) {\n        model.nodes.push({\n          x: colorMap.RGBPoints[i],\n          r: colorMap.RGBPoints[i + 1],\n          g: colorMap.RGBPoints[i + 2],\n          b: colorMap.RGBPoints[i + 3],\n          midpoint,\n          sharpness\n        });\n      }\n    }\n    const modifiedInvoked = publicAPI.sortAndUpdateRange();\n    const callModified = !modifiedInvoked && (isModified || oldNodes !== JSON.stringify(model.nodes));\n    if (callModified) publicAPI.modified();\n    return modifiedInvoked || callModified;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clamping: true,\n  colorSpace: ColorSpace.RGB,\n  hSVWrap: true,\n  scale: Scale.LINEAR,\n  nanColor: null,\n  belowRangeColor: null,\n  aboveRangeColor: null,\n  useAboveRangeColor: false,\n  useBelowRangeColor: false,\n  allowDuplicateScalars: false,\n  table: null,\n  tableSize: 0,\n  buildTime: null,\n  nodes: null,\n  discretize: false,\n  numberOfValues: 256\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkScalarsToColors.extend(publicAPI, model, initialValues);\n\n  // Internal objects initialization\n  model.table = [];\n  model.nodes = [];\n  model.nanColor = [0.5, 0.0, 0.0, 1.0];\n  model.belowRangeColor = [0.0, 0.0, 0.0, 1.0];\n  model.aboveRangeColor = [1.0, 1.0, 1.0, 1.0];\n  model.buildTime = {};\n  macro.obj(model.buildTime);\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['buildTime', 'mappingRange']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['useAboveRangeColor', 'useBelowRangeColor', 'discretize', 'numberOfValues', {\n    type: 'enum',\n    name: 'colorSpace',\n    enum: ColorSpace\n  }, {\n    type: 'enum',\n    name: 'scale',\n    enum: Scale\n  }]);\n  macro.setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkColorTransferFunction(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkColorTransferFunction');\n\n// ----------------------------------------------------------------------------\n\nvar vtkColorTransferFunction$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkColorTransferFunction$1 as default, extend, newInstance };\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n"],"names":["enabledElement","invalidated","image","canvas","start","stats","lastGetPixelDataTime","lastStoredPixelDataToCanvasImageDataTime","lastPutImageDataTime","lastRenderTime","lastLutGenerateTime","render","viewport","colormap","color","renderTimeInMs","invalid","needsRedraw","scale","transform","displayedArea","translate","width","height","angle","rotation","rotate","Math","PI","widthScale","heightScale","brhc","x","tlhc","y","presentationSizeMode","rowPixelSpacing","columnPixelSpacing","verticalScale","horizontalScale","min","translation","undefined","hflip","vflip","modality","Error","scaleFactor","voi","isPreScaled","windowWidth","windowCenter","Array","isArray","invert","pixelReplication","modalityLUT","voiLUT","columns","rows","GenerateImageType","DEFAULT_SETTINGS","Symbol","RUNTIME_SETTINGS","OBJECT_SETTINGS_MAP","DICTIONARY","Settings","constructor","base","dictionary","Object","create","seal","defineProperty","this","value","set","key","get","unset","name","endsWith","deleteCount","namespace","slice","deleteAll","length","prototype","hasOwnProperty","call","startsWith","forEach","callback","iterate","extend","import","root","isPlainObject","keys","dump","context","deepSet","assert","subject","getRuntimeSettings","getDefaultSettings","subfield","defaultSettings","settingObj","setting","split","runtimeSettings","getObjectSettings","from","settings","objectSettingsMap","WeakMap","extendRuntimeSettings","references","last","current","previous","indexOf","isValidKey","prefix","record","failCount","has","add","field","delete","setAll","WeakSet","getPrototypeOf","separator","subKey","subContext","subContextValue","imageLoaders","unknownImageLoader","loadImageFromImageLoader","imageId","options","cachedImageLoadObject","getImageLoadObject","handleImageLoadPromise","promise","scheme","loader","imageLoadObject","imagePromise","Promise","resolve","then","voxelManager","numberOfComponents","createImageVoxelManager","scalarData","getPixelData","getScalarData","imageFrame","pixelData","ensureVoxelManager","IMAGE_LOADED","catch","error","errorDetails","IMAGE_LOAD_FAILED","loadImage","priority","requestType","loadAndCacheImage","putImageLoadObject","loadAndCacheImages","imageIds","map","createAndCacheDerivedImage","referencedImageId","skipCreateBuffer","onCacheAdd","voxelRepresentation","imagePlaneModule","TypedArrayConstructor","targetBuffer","type","imageScalarData","derivedImageId","referencedImagePlaneMetadata","metadata","referencedImageGeneralSeriesMetadata","instanceNumber","imagePixelModule","bitsAllocated","bitsStored","highBit","samplesPerPixel","pixelRepresentation","localImage","createAndCacheLocalImage","dimensions","spacing","origin","imagePositionPatient","direction","imageOrientationPatient","frameOfReferenceUID","putImageSync","createAndCacheDerivedImages","referencedImageIds","derivedImageIds","index","newOptions","getDerivedImageId","push","rowCosines","columnCosines","pixelSpacing","scalarDataToUse","Uint8Array","Float32Array","Uint16Array","Int16Array","photometricInterpretation","id","RLE","createRLEImageVoxelManager","minPixelValue","maxPixelValue","i","intercept","dataType","slope","getCanvas","rgba","FrameOfReferenceUID","sizeInBytes","byteLength","cancelLoadImage","filterRequests","additionalDetails","cancelFn","cancelLoadImages","cancelLoadAll","requestPool","getRequestPool","requests","requestDetails","pop","volumeId","loadObject","getVolumeLoadObject","cancel","clearRequestStack","registerImageLoader","imageLoader","registerUnknownImageLoader","oldImageLoader","unregisterAllImageLoaders","createAndCacheDerivedLabelmapImages","createAndCacheDerivedLabelmapImage","FrameRange","frameRangeExtractor","imageIdToFrames","match","range","it","Number","imageIdToFrameEnd","imageIdToFrameStart","framesToString","String","framesToImageId","newRangeString","replace","PointsManager","configuration","_dimensions","_length","_byteSize","growSize","initialSize","itemLength","array","ArrayBuffer","data","func","getPoint","dimensionLength","offset","subarray","getPointArray","grow","additionalSize","newSize","newArray","newData","reverse","midLength","floor","indexStart","indexEnd","dimension","valueStart","getTypedArray","point","f","mapData","points","p","toXYZ","xyz","z","fromXYZ","create3","subselect","count","selected","max","newPoints","create2","ProgressiveIterator","as","iterator","v","e","reject","reason","done","nextValue","waiting","rejectReason","getRecent","asyncIterator","errorCallback","console","warn","generate","processFunction","bind","nextPromise","donePromise","getNextPromise","getDonePromise","ADJACENT_ALL","ADJACENT_SINGLE_PLANE","ADJACENT_IN","ADJACENT_OUT","RLEVoxelMap","copyMap","destination","source","row","structuredClone","depth","Map","jMultiple","kMultiple","numComps","pixelDataConstructor","updateScalarData","fill","rle","end","j","getRLE","defaultValue","getRun","k","runIndex","rleIndex","findIndex","rle1","rle0","oldValue","rleInsert","isAfter","insertIndex","rlePrev","rleNext","splice","nextnext","ArrayType","Uint8ClampedArray","frameSize","toIJK","toIndex","newRle","iEnd","rowModified","baseIndex","rowToUse","forEachRow","clear","rowOffset","comp","floodFill","stack","replaceValue","flood","sourceValue","sum","planar","diagonals","singlePlane","childOptions","top","adjacents","findAdjacents","filter","adjacent","fillFrom","getter","boundsIJK","item","adjacentsDelta","leftRle","rightRle","delta","delta1","delta2","testJ","testK","testRle","newAdjacentDelta","isImageActor","actorEntry","actorIsA","actorType","actorToCheck","actor","isA","applyPreset","preset","colorTransferArray","colorTransfer","parseFloat","shiftRange","Infinity","center","getShiftRange","cfun","normColorTransferValuePoints","r","g","b","rescaled","removeAllPoints","addRGBPoint","applyPointsToRGBFunction","getProperty","setRGBTransferFunction","scalarOpacityArray","scalarOpacity","ofun","normPoints","opacity","pwf","addPoint","applyPointsToPiecewiseFunction","property","setScalarOpacity","gradientMinValue","gradientMinOpacity","gradientMaxValue","gradientMaxOpacity","gradientOpacity","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","interpolation","setInterpolationTypeToFastLinear","setShade","shade","ambient","diffuse","specular","specularPower","setAmbient","setDiffuse","setSpecular","setSpecularPower","renderingEngineAndViewportIds","renderingEnginesArray","renderingEngine","viewports","viewportIds","getRenderingEngineAndViewportsContainingVolume","hasBeenDestroyed","renderViewports","getImagePlaneModule","newImagePlaneModule","MetadataModules","IMAGE_PLANE","buildMetadata","voiLUTFunction","imageIdScalingFactor","calibration","CALIBRATION","voiLUTFunctionEnum","values","VOILUTFunctionType","includes","LINEAR","getValidVOILUTFunction","scalingFactor","calculateSpacingBetweenImageIds","referenceImagePositionPatient","rowCosineVec","colCosineVec","scanAxisNormal","refIppVec","getDistance","positionVector","ippVec","prefetchedImageIds","metadataForMiddleImage","middleIppVec","distanceBetweenFirstAndMiddleImages","abs","distanceImagePairs","distance","sort","a","numImages","sliceThickness","spacingBetweenSlices","strictZSpacingForVolumeViewport","rendering","isNaN","debug","clamp","_colormaps","registerColormap","Name","getColormap","getColormapNames","findMatchingColormap","rgbPoints","colormapsVTK","rgbPresetNames","presetName","getPresetByName","colormapsCS3D","colormapName","matchedColormap","concat","find","RGBPoints","presetRGBPoints","opacityPoints","getScalarOpacity","getDataPointer","setColorMapTransferFunctionForVolumeActor","volumeInfo","volumeActor","threshold","colorRange","getMapper","setSampleDistance","presetToUse","applyColorMap","setMappingRange","updateOpacityWithThreshold","updateOpacity","newOpacity","getThresholdValue","updateThreshold","newThreshold","getMaxOpacity","meta","getInputData","getRange","thresholdValue","opacityFunction","dataArray","y1","x2","y2","maxOpacity","createLinearRGBTransferFunction","voiRange","lower","upper","createSigmoidRGBTransferFunction","approximationNodes","table","_","flatMap","buildFunctionFromArray","decimate","list","interleave","interleaveIndices","deepClone","obj","clonedObj","fnv1aHash","str","hash","charCodeAt","toString","log","coreLog","getLogger","getClosestImageId","imageVolume","worldPos","viewPlaneNormal","ignoreSpacing","kVector","dotProduct","EPSILON","halfSpacingInNormalDirection","closestImageId","minDistance","dir","getImageDataMetadata","xSpacing","ySpacing","xVoxels","yVoxels","zSpacing","_getNumCompsFromPhotometricInterpretation","numVoxels","camera","getCamera","spacingInNormalDirection","focalPoint","getActors","referencedId","uid","sliceRange","numberOfSlices","round","imageIndex","getScalingParameters","modalityLutModule","generalSeriesModule","scalingParameters","rescaleSlope","rescaleIntercept","scalingModules","suvbw","suvbsa","suvlbm","doseGridScaling","DoseGridScaling","doseSummation","DoseSummation","doseType","DoseType","doseUnit","DoseUnit","SMALL_EPSILON","isOne","isUnit","off","isOrthonormal","getSliceRange","imageData","corners","getDirection","dx","dy","dz","getDimensions","indexToWorld","buildFromDegree","identity","rotateFromDirections","pt","apply","transformedFocalPoint","currentSlice","minX","maxX","getSpacingInNormalDirection","iVector","jVector","dotProducts","projectedSpacing","EPSILON_PART","isPrimaryVolume","volume","getVolumeLoaderSchemes","starts","substring","getTargetVolumeAndSpacingInNormalDir","targetId","useSlabThickness","volumeActors","actorUID","imageVolumes","va","getVolume","iv","targetVolumeId","imageVolumeIndex","getSpacingInNormal","smallest","hasPrimaryVolume","slabThickness","getProperties","renderingEngines","targetViewports","filteredViewports","getVolumeViewports","vp","hasVolumeId","getVoiFromSigmoidRGBTransferFunction","cfunRange","getTable","cfunDomain","logy1","x1","logy2","ww","wc","getVolumeActorCorners","bounds","extentToBounds","getExtent","getVolumeId","getActor","numScrollSteps","floatingStepNumber","currentStepIndex","sliceRangeInfo","hasFloatScalingParameters","some","isInteger","hasNaNValues","input","retrieveConfigurationState","IMAGE_RETRIEVE_CONFIGURATION","imageRetrieveMetadataProvider","payload","clone","restore","state","queries","query","addProvider","EventListenerPhases","TargetEventListeners","target","_eventListeners","_children","_target","isEmpty","size","addEventListener","dotIndex","namespaceToken","childElementEventListener","_addEventListener","removeEventListener","_removeEventListener","reset","entries","child","_unregisterAllEvents","listenersMap","listenerPhase","capture","Capture","Bubble","registeredPhases","None","callbackItem","newListenerPhase","_unregisterAllListeners","listener","eventPhases","currentPhase","useCapture","MultiTargetEventListenerManager","_targetsEventListeners","eventListeners","targetEventListeners","scaleRGBTransferFunction","rgbTransferFunction","getSize","nodeValue1","getNodeValue","setNodeValue","getMinMax","storedPixelData","storedPixel","numPixels","LAST_RUNTIME_ID","GLOBAL_CONTEXT","DEFAULT_MAX","DEFAULT_SEPARATOR","getRuntimeId","symbol","idComponents","carry","n","getNextRuntimeId","join","imageURI","imageIdToURI","isOpposite","v1","v2","tolerance","indexWithinDimensions","targetViewport","renderingEngineId","getRenderingEngine","sameVolumesViewports","targetActors","vpActors","every","vpActor","preScale","scaled","renderToCanvasGPU","imageOrVolume","viewportOptions","displayArea","imageArea","HTMLCanvasElement","isVolume","viewportId","element","document","createElement","devicePixelRatio","window","originalWidth","originalHeight","style","visibility","position","body","appendChild","uniqueId","setAttribute","temporaryCanvas","getOrCreateCanvas","TiledRenderingEngine","getViewport","viewportInput","ViewportType","ORTHOGRAPHIC","STACK","defaultOptions","suppressEvents","enableElement","elementRendered","viewReference","onImageRendered","eventDetail","useViewRef","setViewReference","getContext","drawImage","canvasToWorld","topRight","bottomLeft","rightVector","downVector","Events","IMAGE_RENDERED","setTimeout","disableElement","querySelectorAll","remove","thicknessMm","setVolumes","renderImageObject","resetCamera","setProperties","renderToCanvasCPU","_renderingEngineId","_viewportOptions","getDefaultViewport","renderingTools","calculateTransform","drawImageSync","loadImageToCanvas","RequestType","Thumbnail","useCPURendering","thumbnail","imageAspect","baseViewportOptions","renderFn","successCallback","metaData","useRGBA","cache","imageLoadPoolManager","addRequest","imageIdIndex","asArray","HistoryMemo","label","redoAvailable","undoAvailable","ring","isRecordingGrouped","_size","canUndo","canRedo","undo","items","subitem","restoreMemo","dispatchHistoryEvent","isUndo","undoIf","condition","eventTarget","dispatchEvent","CustomEvent","detail","operationType","memo","redo","newPosition","initializeGroupItem","startGroupRecording","rollbackUnusedGroupItem","endGroupRecording","lastItem","pushGrouped","lastMemo","createMemo","DefaultHistoryMemo","worldCoords","newOrigin","sub","imageToWorldCoords","imageCoords","imageCoordsInWorld","getViewportsWithImageURI","getViewports","hasImageURI","getClosestStackImageIndexForPoint","minimalDistance","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","planeMetadata","targetImagePlane","rowVec","colVec","planeNormal","getPlaneMetadata","plane","planeEquation","planeDistanceToPoint","closestStack","higherImageIds","lowerImageIds","calculateMinimalDistanceForStackViewport","getCurrentVolumeViewportSlice","canvasWidth","canvasHeight","sliceToIndexMatrix","indexToSliceMatrix","getSliceViewInfo","ijkOriginPoint","transformCanvasToIJK","ijkRowPoint","ijkColPoint","ijkRowVec","ijkColVec","ijkSliceVec","maxIJKRowVec","maxIJKColVec","getImageData","sliceViewInfo","getSliceData","spatialRegistrationMetadataProvider","viewportId1","viewportId2","entryId","entryIdReverse","viewport1","viewport2","imageId1","getSliceIndex","imageId2","imagePlaneModule1","imagePlaneModule2","iop2","imagePositionPatient1","imagePositionPatient2","mat","getViewportImageCornersInWorld","ratio","topRightCanvas","bottomRightCanvas","bottomLeftCanvas","topLeftWorld","topRightWorld","bottomRightWorld","bottomLeftWorld","topLeftImage","worldToIndex","topRightImage","bottomRightImage","bottomLeftImage","topLeftImageWorld","_isInBounds","topRightImageWorld","bottomRightImageWorld","bottomLeftImageWorld","_getStackViewportImageCorners","imageCoord","getEnabledElement","StackViewport","getCornerstoneImage","isValidVolume","imageId0","seriesInstanceUID","usingDefaultValues","baseMetadata","validVolume","isEqual","videoUIDs","Set","isVideoTransferSyntax","uidOrUids","async","convertStackToVolumeViewport","uuidv4","getUnknownVolumeLoaderSchema","prevViewPresentation","getViewPresentation","prevViewReference","getViewReference","background","orientation","createAndCacheVolume","load","volumeViewport","volumeViewportNewVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","setViewPresentation","convertVolumeToStackViewport","ImageVolume","prevView","stackViewport","setStack","roundToPrecision","roundNumber","precision","absValue","fixedPrecision","toFixed","convertToGrayscale","isRGBA","isRGB","newScalarData","destOffset","increment","getRandomSampleFromArray","clonedArray","shuffleArray","random","componentToHex","c","hex","rgbToHex","hexToRgb","result","exec","parseInt","deepEqual","obj1","obj2","JSON","stringify","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","frame_value_set","frames","frame_value","setEquals","getTagValue","tag","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","reduce","rv","frame_count","getIPPGroups","imageIdGroups","splittingTag","tags","fncList2","timePoints","isDynamicVolume","scaleArray","arrayLength","clip","val","low","high","scrollSlabs","getVolumeViewportScrollInfo","newFocalPoint","snapFocalPointToSlice","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","getCurrentImageId","triggerEvent","VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS","VOLUME_VIEWPORT_SCROLL","scrollVolume","eventData","STACK_SCROLL_OUT_OF_BOUNDS","scroll","debounceLoading","loop","jumpToSlice","currentImageIndex","getTargetImageIdIndex","getNumberOfSlices","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","createSubVolume","referencedVolumeId","referencedVolume","refVolumeDim","minY","maxY","minZ","maxZ","ijkTopLeft","boundingBoxOriginWorld","transformIndexToWorld","subVolumeOptions","subVolume","createLocalVolume","subVolumeData","getCompleteScalarDataArray","subVolumeSliceSize","refVolumeSliceSize","refVolumeData","rowStartWorld","refVolumeRowStartIJK","transformWorldToIndex","refVolumeRowStartOffset","rowData","subVolumeLineStartOffset","setCompleteScalarDataArray","getVolumeDirectionVectors","viewUp","ijkOrigin","worldVecColDir","worldVecSliceDir","worldVecRowDir","ijkVecColDir","ijkVecSliceDir","ijkVecRowDir","calculateNeighborhoodStats","centerIjk","radius","numSlices","numPixelsPerSlice","sumSq","cx","cy","cz","centerIndex","mean","stdDev","variance","sqrt","projectionRadiographSOPClassUIDs","getPixelSpacingInformation","instance","PixelSpacing","SOPClassUID","SequenceOfUltrasoundRegions","isArrayOfSequences","PhysicalDeltaX","PhysicalDeltaY","calculateUSPixelSpacing","ImagerPixelSpacing","EstimatedRadiographicMagnificationFactor","PixelSpacingCalibrationType","PixelSpacingCalibrationDescription","isProjection","CalibrationTypes","UNKNOWN","ERMF","PROJECTION","CALIBRATED","calculateRadiographicPixelSpacing","NOT_APPLICABLE","getViewportModality","Modality","_getViewportModality","invertRgbTransferFunction","areNumbersEqualWithTolerance","num1","num2","isNumberType","isNumberArrayLike","arr1","arr2","areArraysEqual","negative","isEqualNegative","isEqualAbs","isNumber","isFinite","loglevel","getRootLogger","logger","names","cs3dLog","toolsLog","loaderLog","aiLog","examplesLog","dicomConsistencyLog","imageConsistencyLog","makeVolumeMetadata","voiLut","voiLutModule","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","ImageOrientationPatient","Columns","Rows","VOILUTFunction","SeriesInstanceUID","linePlaneIntersection","p0","p1","x0","y0","z0","z1","A","B","C","D","t","normal","normalized","threePlaneIntersection","firstPlane","secondPlane","thirdPlane","A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","C3","D3","m0","m1","m2","m3","signed","numerator","sign","isPointOnPlane","pointInShapeCallback","pointInShapeFn","returnPoints","scalars","getPointData","getScalars","getData","defaultBoundsIJK","pointsInShape","iMin","iMax","jMin","jMax","kMin","kMax","pointIJK","xMultiple","yMultiple","zMultiple","indexK","indexJK","pointLPS","iterateOverPointsInShape","iterateOverPointsInShapeVoxelManager","getAtIndex","deltaFrames","posDiffFromFocalPoint","steps","frameIndex","newSlicePosFromMin","sortImageIdsAndGetSpacing","usingWadoUri","sortedImageIds","getTransferFunctionNodes","transferFunction","setTransferFunctionNodes","nodes","node","canvasPoint","vtkImageData","worldPoint","voxelPos","transformWorldToIndexContinuous","ORTHOGONAL_TEST_VALUE","updatePlaneRestriction","reference","planeRestriction","inPlaneVector1","inPlaneVector2","testVector","updateVTKImageDataWithCornerstoneImage","sourceImageData","newPixelData","modified","toWindowLevel","toLowHighRange","LINEAR_EXACT","SAMPLED_SIGMOID","Active","Passive","Enabled","ToolModes","CAMERA_MODIFIED","Enums","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","calibratedPixelSpacingMetadataProvider","utilities","ViewportStatus","sumOverDimensionGroups","dimensionGroups","getScalarDataLength","resultArray","dimensionGroupNumber","getDimensionGroupScalarData","SUM","AVERAGE","SUBTRACT","idx","idx3","getPolyDataPointIndexes","polyData","linesData","getLines","lineSegments","segmentSize","segment","contours","findStartingPoint","startPoint","contour","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","getPoints","contourIndexes","ColorbarRangeTextPosition","Right","Widget","extractWindowLevelRegionToolData","VolumeViewport","extractImageDataVolume","extractImageDataStack","setAnnotationLabel","annotation","updatedLabel","triggerAnnotationModified","ChangeTypes","LabelChange","calculateFanShapeCorners","imageBuffer","hull","roughContour","rough","slack","next","walk","to","i2","i3","P2","P3","pathA","pathB","globalYmin","upperPath","topY","arcPts","P1","best","P4","pickPoints","refined","edgeBuf","opts","maxDist","directions","snapQuadrant","xmin","xmax","ymin","ymax","xi","yi","xAlign","yAlign","refineCornersDirectional","step","angleRad","atan2","getImage","calculateFanGeometry","buffer","totalPixels","channelCount","mask","isForeground","labels","currentLabel","regionSizes","px","py","pixelCount","onFlood","largestLabel","isBorder","nx","ny","outer","dirs","prev","dx0","dy0","startDir","d","nextPt","bdx","bdy","segmentLargestUSOutlineFromBuffer","simplified","math","polyline","convexHull","generateConvexHullFromContour","fanGeometry","params","centerResult","intersectLine","startAngle","endAngle","tempAngle","d1","hypot","d4","d2","d3","innerRadius","outerRadius","deriveFanGeometry","props","_controlPoints","_invalidated","_resolution","resolution","_fixedResolution","fixedResolution","_closed","closed","controlPoints","numControlPoints","aabb","_update","_aabb","hasTangentPoints","addControlPoint","addControlPoints","addControlPointAtU","u","lineSegment","_getLineSegmentAt","endPoint","curveSegmentIndex","curveSegment","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","setControlPoints","updateControlPoint","newControlPoint","getControlPoints","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","len","squaredDist","getClosestControlPointWithinDistance","closestControlPoint","getClosestPoint","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","distanceToPointSquaredInfo","uValue","previousLineSegmentsLength","distanceToPoint","getClosestPointOnControlPointLines","linePoints","getPolylinePoints","_convertCurveSegmentsToPolyline","getPreviewPolylinePoints","controlPointPreview","closeDistance","closeSpline","previewCurveSegments","getPreviewCurveSegments","isPointNearCurve","curveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","distanceToPointSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","p2","isVerticalLine","xIntersection","getSplineCurves","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","CubicSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","getTransformMatrix","_getCurveSegment","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","mirror","_getLineSegments","numLineSegments","inc","maxU","curveSegmentLength","lineSegAABB","lineSegLength","TRANSFORM_MATRIX","BSpline","CardinalSpline","super","_scale","_fixedScale","fixedScale","s","s2","CatmullRomSpline","LinearSpline","PanTool","toolProps","defaultToolProps","supportedInteractionTypes","touchDragCallback","evt","_dragCallback","mouseDragCallback","deltaPoints","deltaPointsWorld","world","updatedPosition","updatedFocalPoint","toolName","TrackballRotateTool","rotateIncrementDegrees","rotateSampleDistanceFactor","_resizeObservers","_hasResolutionChanged","preMouseDownCallback","mapper","getDefaultActor","originalSampleDistance","getSampleDistance","cleanUp","once","_getViewportsInfo","getToolGroup","toolGroupId","viewportsInfo","onSetToolActive","subscribeToElementResize","getEnabledElementByIds","resizeObserver","ResizeObserver","viewPresentation","observe","_viewportAddedListener","TOOLGROUP_VIEWPORT_ADDED","onSetToolDisabled","disconnect","rotateCamera","centerWorld","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPoints","lastPoints","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","dot","angleX","acos","upVec","atV","rightV","forwardV","angleY","PLANEINDEX","SPHEREINDEX","XMIN","XMAX","YMIN","YMAX","ZMIN","ZMAX","XMIN_YMIN_ZMIN","XMIN_YMIN_ZMAX","XMIN_YMAX_ZMIN","XMIN_YMAX_ZMAX","XMAX_YMIN_ZMIN","XMAX_YMIN_ZMAX","XMAX_YMAX_ZMIN","XMAX_YMAX_ZMAX","VolumeCroppingTool","showCornerSpheres","showHandles","showClippingPlanes","mobile","enabled","initialCropFactor","sphereColors","SAGITTAL","CORONAL","AXIAL","CORNERS","sphereRadius","grabSpherePixelDistance","originalClippingPlanes","draggingSphereIndex","toolCenter","cornerDragOffset","faceDragOffset","sphereStates","edgeLines","onSetToolConfiguration","onSetToolEnabled","onCameraModified","currentTarget","_updateClippingPlanes","mouseCanvas","sphereCanvas","worldToCanvas","pow","cursor","sphereState","mouseWorld","isCorner","axisIdx","viewport3D","_updateCornerSpheres","_updateFaceSpheresFromCorners","_updateClippingPlanesFromFaceSpheres","_onMouseMoveSphere","_getViewportAndWorldCoords","newCorner","_calculateNewCornerPosition","_updateSpherePosition","axisFlags","_parseCornerKey","_updateRelatedCorners","newValue","sphereSource","setCenter","_updateCornerSpheresFromFaces","_triggerToolChangedEvent","_onControlToolChange","_getViewport","isMin","handleType","toolCenterMin","toolCenterMax","normals","planeIndices","sphereIndices","axes","orientationAxes","getOrigin","newCenter","viewportOrientation","sphereActor","setColor","clippingPlanes","getClippingPlanes","setOrigin","VOLUMECROPPING_TOOL_CHANGED","_initialize3DViewports","worldBounds","getBounds","cropFactor","xRange","yRange","zRange","xMin","xMax","yMin","yMax","zMin","zMax","planes","planeXmin","planeXmax","planeYmin","planeYmax","planeZmin","planeZmax","originalPlanes","getNormal","sphereXminPoint","sphereXmaxPoint","sphereYminPoint","sphereYmaxPoint","sphereZminPoint","sphereZmaxPoint","adaptiveRadius","_calculateAdaptiveSphereRadius","_addSphere","cornerKeys","key1","key2","state1","state2","_addLine3DBetweenPoints","addClippingPlane","VOLUMECROPPINGCONTROL_TOOL_CHANGED","_handleCornerSphereMovement","_updateAfterCornerMovement","_handleFaceSphereMovement","_updateAfterFaceMovement","cornerKey","isXMin","isXMax","isYMin","isYMax","isZMin","isZMax","draggedSphere","_shouldUpdateCorner","_updateCornerCoordinates","_onNewVolume","_rotateCamera","setHandlesVisible","setClippingPlanesVisible","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","visible","_updateHandlesVisibility","getHandlesVisible","getClippingPlanesVisible","normalizedCenter","_missingActorWarned","matrix","getMatrix","removeAllClippingPlanes","rot","normalMatrix","transformedOrigins","transformedNormals","oVec","o","nVec","planeInstance","setVisibility","point1","point2","setNumberOfPoints","setPoint","lines","setPoints","setLines","setInputData","setMapper","setLineWidth","setOpacity","setInterpolationToFlat","addActor","setRadius","sphereMapper","setInputConnection","getOutputPort","diagonal","sphereRadiusScale","minRadius","minSphereRadius","maxRadius","maxSphereRadius","pos","corner","xs","ys","zs","RENDERING_DEFAULTS","CONSTANTS","defaultReferenceLineColor","defaultReferenceLineControllable","OPERATION","VolumeCroppingControlTool","viewportIndicators","viewportIndicatorsConfig","extendReferenceLines","lineColors","lineWidth","lineWidthActive","_virtualAnnotations","initializeViewport","_updateToolCentersFromViewport","annotations","_getAnnotations","filterInteractableAnnotationsForElement","removeAnnotation","annotationUID","_getOrientationFromNormal","highlighted","cameraPosition","cameraFocalPoint","getToolName","handles","activeOperation","activeViewportIds","referenceLines","addAnnotation","resetCroppingSpheres","viewportInfo","resetPan","resetZoom","resetToCenter","resetRotation","resetSlabThickness","_computeToolCenter","computeToolCenter","orientationIds","presentOrientations","Boolean","missingOrientation","presentNormals","presentCenters","presentViewportInfos","vpInfo","virtualNormal","virtualCenter","virtualAnnotation","isVirtual","presentOrientation","presentCenter","canonicalNormals","virtualAnnotations","triggerAnnotationRenderForViewportIds","isPointNearTool","canvasCoords","proximity","_pointNearTool","toolSelectedCallback","interactionType","_activateModify","hideElementCursor","preventDefault","onResetCamera","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","isAnnotationLocked","near","filtered","renderAnnotation","svgDrawingHelper","lineIntersection2D","q1","q2","s1_x","s1_y","s2_x","s2_y","denom","renderStatus","viewportAnnotation","canvasDiagonalLength","otherViewportAnnotations","volumeCroppingCenterCanvasMin","volumeCroppingCenterCanvasMax","canvasBox","otherViewport","otherCamera","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","realViewports","vp1","vp2","normal1","normal2","otherViewportControllable","_getReferenceLineControllable","pointWorld0","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","refLinesCenterMin","refLinePointMinOne","refLinePointMinTwo","liangBarksyClip","refLinesCenterMax","refLinePointMaxOne","refLinePointMaxTwo","viewportColor","_getReferenceLineColor","line","lineIndex","intersections","otherLine","intersection","with","annotationForViewport","toUpperCase","idUpper","colorArr","unknown","viewportControllable","selectedViewportId","activeLineWidth","lineUID","drawLine","sortedIntersections","lineDash","referenceColorCoordinates","xOffset","yOffset","circleRadius","circleUID","drawCircle","getAnnotations","toolGroupAnnotations","_onSphereMoved","_syncWithVolumeCroppingTool","newMin","newMax","setToolCenter","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewportsAnnotationsWithSameCameraDirection","otherViewPlaneNormal","isInteractingWithTool","MOUSE_UP","_endCallback","MOUSE_DRAG","MOUSE_CLICK","TOUCH_END","TOUCH_DRAG","TOUCH_TAP","_deactivateModify","editData","resetElementCursor","viewportIdsToRender","getViewportIdsWithToolToRender","VOLUME_3D","activeType","getReferenceLineColor","getReferenceLineControllable","getSpacing","maxCropFactor","cropStart","cropEnd","onSetToolInactive","anyAnnotationExists","canonical","tol","addNewAnnotation","filteredAnnotations","viewportIdArray","handleSelectedCallback","handle","_applyDeltaShiftToSelectedViewportCameras","viewportsAnnotationsToUpdate","_applyDeltaShiftToViewportCamera","dotProd","projectedDelta","start1","end1","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","frame","_getMinMax","newRange","viewportsContainingVolumeUID","properties","scaling","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","voiLutFunction","imageDynamicRange","calculatedDynamicRange","getMiddleSliceData","acc","pixel","metadataDynamicRange","_getImageDynamicRangeFromViewport","imageDataRange","voxel","WindowLevelRegionTool","minWindowWidth","isDrawing","getReferencedImageId","getFrameOfReferenceUID","cachedStats","_activateDraw","_deactivateDraw","triggerAnnotationCompleted","applyWindowLevelRegion","topLeftCanvas","MOUSE_MOVE","styleSpecifier","canvasCoordinates","getAnnotationStyle","dataId","rectangleUID","drawRect","startCanvas","endCanvas","left","pixelLuminanceData","luminance","spIndex","column","red","green","blue","minMaxMean","pixelLuminance","globalMin","globalMax","spv","StackScrollTool","debounceIfNotLoaded","deltaY","mouseWheelCallback","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","wheel","BaseVolumeViewport","offsetHeight","PlanarRotateTool","setAngle","startPoints","currentPointWorld","startPointWorld","centerCanvas","angleBetweenLines","cross","rotAngle","rotMat","rotatedViewUp","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","deltaDistance","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","imageWidth","imageHeight","canvasAspect","scaledImageWidth","scaledImageHeight","minParallelScaleRequired","minScaleInWorld","maxScaleInWorld","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","_zoom","currentPointsList","parallelProjection","_panCallback","eventDetails","eventName","MOUSE_WHEEL","page","client","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","getToolGroupForViewport","jumpToWorld","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","CrosshairsTool","shadow","autoPan","panSize","handleRadius","enableHDPIHandles","referenceLinesCenterGapRadius","referenceLinesCenterGapRatio","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","rotationPoints","slabThicknessPoints","resetCrosshairs","firstViewport","secondViewport","thirdViewport","normal3","point3","jumpWorld","_jump","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","getViewportIds","_autoPanViewportIfNecessary","previousActiveOperation","previousActiveViewportIds","getHandleNearImagePoint","_areViewportIdArraysEqual","viewportUIDSpecificCrosshairs","canvasMinDimensionLength","crosshairCenterCanvas","_filterAnnotationsByUniqueViewportOrientations","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","pointWorld1","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","mobileConfig","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportSlabThicknessControlsOn","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandles","viewportIdArrayOne","viewportIdArrayTwo","itemFound","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","sameScene","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","otherViewportsIds","referenceAnnotations","viewportsIds","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","getToolInstance","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","onSetToolPassive","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","viewportProperties","originalViewportRotation","canvasPos","magnifyToolElement","querySelector","magnifyElement","classList","display","magnifyViewport","_dragEndCallback","viewportElement","removeChild","getTargetId","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","AdvancedMagnifyTool","Actions","magnifyingGlass","zoomFactor","zoomFactorList","padding","actions","showZoomFactorsList","method","bindings","mouseButton","MouseBindings","Secondary","modifierKey","KeyboardBindings","Shift","config","canvasHandlePoints","_getCanvasHandlePoints","magnifyViewportId","sourceViewportId","isCanvasAnnotation","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","dispose","getAllAnnotations","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","handleIndex","newAnnotation","_dragDrawCallback","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","getStyle","activeHandleCanvasCoords","isAnnotationVisible","handleGroupUID","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","assign","focus","onChangeCallback","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","sourceViewport","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","getEnabledElementByViewportId","stackActorReInitialized","_reset","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","ANNOTATION_REMOVED","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","debounce","_resizeViewport","_syncViewports","parentNode","magnifyToolGroup","mode","toolBindingsOptions","setToolActive","setToolPassive","setToolEnabled","Disabled","setToolDisabled","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","toolInstance","addViewport","addSegmentationRepresentations","segmentationId","SegmentationRepresentations","Labelmap","_cloneStack","_cloneVolumes","volumeInputArray","_cloneViewport","sourceViewportOptions","toolGroups","_cancelMouseEventCallback","closest","canvasCurrent","magnifyRadius","dist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","TOOL_MODE_CHANGED","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","ReferenceLines","AnnotationDisplayTool","enforceSameFrameOfReference","showFullDimension","_init","getRenderingEngines","filterViewportsWithToolEnabled","sourceViewportCanvasCornersInWorld","topLeft","bottomRight","sourceViewPlaneNormal","isParallel","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","vec2","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","OverlayGridTool","sourceImageIds","pointSets","calculateImageIdPointSets","viewportData","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","actorEntries","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","canvasPoints","fillColor","fillOpacity","closePath","polyLineUID","drawPath","actorWorldPointsMap","getOutputData","colorArray","colorComponentToString","component","componentString","colorToString","getColor","decimals","pointToString","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","right","centerSpace","lineLength","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","renderViewport","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","enabledElements","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","bottom","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","fontFamily","fontSize","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","updateCursorSize","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","HandlesUpdated","dragCallback","sculpt","registerShapes","CircleSculptCursor","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mousePoint","mouseCanvasPoint","deltaWorld","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertHandleRadially","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","toolIndex","isLocked","isVisible","distanceFromTool","distancePointToContour","AnnotationStyleStates","Default","Highlighted","renderShape","DIRECTIONS","VolumeRotateTool","ax","ay","az","LabelTool","getTextCallback","changeTextCallback","svgLayer","textGroup","textGroupElement","bbox","getBBox","getAttribute","translateX","translateY","matches","text","initialWorldPos","anchorWorldPos","doneEditMemo","getLinkedTextBoxStyle","textBoxUID","hydrate","autoGenerated","_doneChangingTextCallback","updatedText","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","LengthTool","getTextLines","defaultGetTextLines","movingTextBox","canvasPoint1","canvasPoint2","worldPosDelta","unit","_throttledCalculateCachedStats","_calculateCachedStats","textLines","canvasTextBoxCoords","getTextBoxCoordsCanvas","textBoxPosition","boundingBox","drawLinkedTextBox","throttle","trailing","hydrateBase","serializableOptions","_calculateLength","pos1","pos2","worldPos1","worldPos2","targetIds","StatsUpdated","cachedVolumeStats","HeightTool","heightUID","drawHeight","_calculateHeight","outside","ProbeTool","probeDefaults","textCanvasOffset","mergeDefaultProps","createAnnotationForViewport","eventDispatchDetail","getStackViewports","referencedImageURI","currentImageURI","textUID","changeType","pixelUnitsOptions","isViewportPreScaled","isSuvScaled","ijk","modalityUnit","getAtIJKPoint","calibratedResults","hasEnhancedRegionValues","units","getPixelValueUnits","DragProbeTool","postMouseDownCallback","postTouchStartCallback","EllipticalROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","initialRotation","getRotation","w","h","minorEllipse","xRadius","yRadius","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","dYCanvas","newHalfCanvasWidth","canvasRight","dXCanvas","newHalfCanvasHeight","canvasCorners","getCanvasEllipseCorners","areaUnit","area","ellipseUID","centerPoint","_getCanvasEllipseCenter","pos1Index","post2Index","ellipseObj","zRadius","worldWidth","worldHeight","getWorldWidthAndHeightFromTwoPoints","isEmptyArea","statsCallback","isInObject","pointInEllipse","fast","getStatistics","statsArray","ellipse","rotLocation","ellipseCanvasPoints","areaLine","CircleROITool","canvasHandles","radiusCanvas","newRadiusCanvas","getCanvasCircleCorners","radiusUnit","perimeter","wasInvalidated","pos2Index","aspect","radiusLine","ETDRSGridTool","degrees","diameters","canvasEnd","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","cos","sin","measurement","p1Canvas","p2Canvas","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","splineToolNames","SplineROITool","ContourSegmentationBaseTool","SplineTypes","simplifiedSpline","contourHoleAdditionModifierKey","epsilon","spline","Cardinal","Class","CatmullRom","Linear","drawPreviewEnabled","enableTwoPointPreview","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","fireChangeOnUpdate","contourHoleProcessingEnabled","Completed","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","_mouseMoveCallback","lastCanvasPoint","_mouseDownCallback","doubleClick","MOUSE_DOUBLE_CLICK","closeContour","addNewPoint","moveAnnotation","eventType","ANNOTATION_COMPLETED","ANNOTATION_MODIFIED","triggerChangeEvent","KEY_DOWN","MOUSE_DOWN","_renderStats","textboxStyle","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","canvasMaxX","canvasMaxY","canvasMinX","canvasMinY","getAABB","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","getArea","annotationCompletedBinded","annotationCompleted","sourceAnnotation","isContourSegmentationTool","convertContourSegmentationAnnotation","initializeListeners","removeListeners","getMouseModifier","event","createAnnotation","cancelAnnotation","renderAnnotationInstance","renderContext","annotationStyle","locked","annotationLocked","childAnnotations","getChildAnnotations","childAnnotationUIDs","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","updateContourPolyline","targetWindingDirection","Clockwise","updateWindingDirection","previewPolylinePoints","drawPolyline","controlPointsConnectors","textbox","createInterpolatedSplineControl","isSplineAnnotation","createSplineObjectFromType","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","splineInstance","SplineClass","SplineContourSegmentationTool","annotationCutMergeCompletedBinded","annotationCutMergeCompleted","ANNOTATION_CUT_MERGE_PROCESS_COMPLETED","LivewireContourTool","snapHandleNearby","nearestEdge","showInterpolationPolyline","cancelInProgress","proximitySquared","clearAnnotation","clearEditData","triggerContourAnnotationCompleted","worldToSlice","sliceToWorld","worldPosOriginal","currentPath","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","scissors","findMinNearby","pathPoints","findPathToPoint","addPoints","prependPath","confirmedPath","lastPoint","getLastPoint","startSearch","updateAnnotation","imgWidth","imgHeight","slicePoint","editHandle","setupBaseEditData","nextPos","viewportImageData","sliceImageData","ijkPoint","startPos","LivewireScissors","createInstanceFromRawPixelData","scissorsNext","currentPathNext","confirmedPathNext","handlePoints","numHandles","previousHandle","nextHandle","findHandlePolylineIndex","slicePos","pathPointsLeft","pathPointsRight","appendPath","contourSegmentationAnnotation","livewirePath","pointArray","imagePoints","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","repeatInterpolation","originalPoints","handleSmoothing","hIndex","testPoint","minPoint","acceptedPath","path","InterpolationUpdated","rendered","polylineCanvasPoints","ArrowAnnotateTool","arrowFirst","arrowHeadStyle","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","stopImmediatePropagation","markerSize","arrowUID","drawArrow","viaMarker","AngleTool","showAngleArc","arcOffset","angleStartedNotYetCompleted","line1","canvasPoint3","line2","angleArcLineDash","anglePoints","temp","segments","worldPos3","fromCharCode","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","TOUCH_START","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","firstLine","secondLine","mid1","midPoint","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","units1","values2","units2","dist1","dist2","UltrasoundPleuraBLineTool","USPleuraBLineAnnotationType","BLINE","PLEURA","bLineColor","pleuraColor","drawDepthGuide","depth_ratio","depthGuideColor","depthGuideThickness","depthGuideDashLength","depthGuideDashGap","depthGuideOpacity","fanOpacity","showFanAnnotations","updatePercentageCallback","pleuraAnnotations","bLineAnnotations","annotationType","getActiveAnnotationType","allPointsInsideShape","newPoint","isInsideFanShape","getFanShapeGeometryParameters","fanCenter","indexToCanvasRatio","getIndexToCanvasRatio","unMergedPleuraIntervals","mergedPleuraIntervals","pleuraIntervalsDisplayed","bLineIntervalsDisplayed","drawAnnotation","getColorForLineType","lineInterval","fanNumber","interval","clippedInterval","fanDataId","fanUID","drawFan","pleuraAnnotationsToDraw","bLineAnnotationsToDraw","calculateBLinePleuraPercentage","activeAnnotationType","filterAnnotations","filterFunction","countAnnotations","getImageIdIndex","annotationMapping","counts","bLine","pleura","deleteAnnotations","setActiveAnnotationType","deleteLastAnnotationType","annotationList","updateFanGeometryConfiguration","isFanShapeGeometryParametersValid","deriveFanGeometryFromViewport","pleuraIntervals","bLineIntervals","diffVector","radToDegree","rad","degreeToRad","indexToCanvas","depth_radius","theta_start","theta_range","arc_length","num_dashes","theta_step","theta1","theta2","start_point","end_point","strokeOpacity","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","AnnotationEraserTool","_deleteNearbyAnnotations","toolGroup","tools","_toolInstances","annotationsToRemove","interactableAnnotations","setAnnotationSelected","getAnnotation","createAnnotationMemo","deleting","RegionSegmentTool","GrowCutBaseTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","currentWorldPoint","growCutData","circleBorderPoint","runGrowCut","circleCenterPoint","getGrowCutLabelmap","segmentation","sphereInfo","growCut","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","segmentIndex","RegionSegmentPlusTool","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","seeds","positiveSeedIndices","negativeSeedIndices","requestAnimationFrame","worldIslandPoints","getRemoveIslandData","mergedOptions","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","labelmapData","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","RectangleScissorsTool","LabelmapBaseTool","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","activeLabelmapSegmentation","activeSegmentation","segmentsLocked","segmentLocking","segmentColor","representationData","getSegmentation","segmentationImageId","getCurrentLabelmapImageIdForViewport","operationData","applyActiveStrategy","toolMetadata","CircleScissorsTool","SphereScissorsTool","activeSegmentationRepresentation","getEditData","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","throttleTimeout","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","handlesToStart","startWorld","endWorld","indexOfNormal","handlePoint","newProjectionPoints","pointsInsideVolume","baseTopLeftCanvas","baseBottomRightCanvas","basePos1","basePos2","measureInfo","modalityUnitOptions","currentCanvasCoordinates","worldPos1Index","worldProjectionPointIndex","indexOfProjection","worldPos2Index","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","_context","PaintFillTool","currentSegmentationImageId","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","setAtIndex","framesModified","getFramesModified","triggerSegmentationDataModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","AXES","CUSTOM","polyDataURL","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","setEnabled","getOffscreenMultiRenderWindow","getRenderWindow","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","url","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setColorModeToDirectScalars","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","annotatedCube","methodName","charAt","SegmentSelectTool","SelectMode","Inside","Border","hoverTimeout","searchRadius","hoverTimer","_setActiveSegment","getActiveSegmentation","_setActiveSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","getSegmentIndexAtLabelmapBorder","Contour","getHoveredContourSegmentationAnnotation","Surface","setActiveSegmentIndex","triggerSegmentationModified","SegmentBidirectionalTool","BidirectionalTool","getSegmentIndexColor","dataId1","dataId2","secondLineUID","toolAnnotations","existingAnnotation","majorAxis","minorAxis","major0","major1","minor0","minor1","SegmentLabelTool","_setHoveredSegment","_setHoveredSegmentForType","_editData","hoveredSegmentLabel","LabelMapEditWithContourTool","PlanarFreehandContourSegmentationTool","annotationsToViewportMap","viewportIdsChecked","allowOpenContours","onViewportAddedToToolGroupBinded","onViewportAddedToToolGroup","onSegmentationModifiedBinded","onSegmentationModified","annotationModified","SEGMENTATION_MODIFIED","cleanUpListeners","checkContourSegmentation","activeSeg","representations","getSegmentationRepresentation","BrushTool","viewportContoursToLabelmap","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","rectangle","active","drawRedactionRect","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldToIndexVec3","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","_getTargetStackUID","Dir","visited","DEFAULT_VALUES","publicAPI","model","initialValues","arguments","m","algo","requestData","inData","outData","output","extractContours","traverseLoop","pd","startLineId","startPtId","loopPoints","lineId","lastPtId","terminated","numInserted","cellPointIds","getCellPoints","ptId","lineCell","getPointCells","loops","inLines","setData","li","getNumberOfCells","outLines","insertNextCell","vtkContourLoopExtraction","newInstance","projectTo2D","geometricSurfaceUtils","checkStandardBasis","rotatePoints","getBoundingBoxAroundShapeWorld","isPlaneIntersectingAABB","polySegConverters","polySeg","polySegInitializing","polySegInitializingPromise","initializePolySeg","progressCallback","ICRPolySeg","moduleId","peerImport","default","initialize","updateProgress","convertContourToSurface","args","callbacks","polylines","numPointsArray","convertContourRoiToSurface","convertLabelmapToSurface","results","rotationInfo","isStandard","rotatedPoints","rotationMatrix","convertContourToVolumeLabelmap","segmentIndices","annotationUIDsInSegmentMap","segmentationVoxelManager","createScalarVolumeVoxelManager","setDimensions","setDirection","setSpacing","scalarArray","setScalars","holesPolyline","projectedPolyline","sharedDimensionIndex","holes","hole","projectedHole","firstDim","secondDim","setAtIJKPoint","point2D","convertContourToStackLabelmap","segmentationsInfo","segmentationVoxelManagers","segmentationInfo","manager","convertSurfaceToVolumeLabelmap","convertSurfaceToLabelmap","polys","convertSurfacesToVolumeLabelmap","segmentsInfo","promises","all","targetImageData","totalSize","outputVolumesInfo","extent","roundedIndex","getSurfacesAABBs","surfacesInfo","aabbs","numDimensions","cutSurfacesIntoPlanes","planesInfo","surfacesAABB","updateCacheCallback","numberOfPlanes","cutter","plane1","setCutFunction","surfacePolyData","planeInfo","sliceIndex","polyDataResults","polyDataInfo","aabb3","getPolys","setNormal","getNumberOfPoints","cutterOutput","buildLinks","loopExtraction","loopOutput","numberOfCells","loopError","progress","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","svgNodeCache","domRef","appendNode","svgLayerElement","svgNode","touched","setNodeTouched","clearUntouched","cacheEntry","internalDivElement","_getSvgLayer","svgNodeCacheForCanvas","fn","strokeWidth","svgNodeHash","existingCircleElement","attributes","stroke","newCircleElement","createElementNS","existingEllipse","rx","ry","svgEllipseElement","linkUID","annotationAnchorPoints","refPoint","findClosestPoint","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","centering","canvasBoundingBox","midX","endfirstLine","endsecondLine","threeLine","zIndex","_getHash","existingFanElement","startRad","endRad","centerX","centerY","outerStartX","outerStartY","outerEndX","outerEndY","innerStartX","innerStartY","largeArcFlag","pathData","setAttributesIfNecessary","newFanElement","setNewAttributesIfValid","svgns","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","markerEndId","_width","existingRect","svgRectElement","Swipe","renderers","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","_needsRender","_pendingRenderQueue","_animationFrameSet","_animationFrameHandle","_getAllViewports","_renderFlaggedSegmentations","_throwIfDestroyed","_triggerRender","nextViewportIds","shift","_setViewportsToBeRenderedNextFrame","_getViewportIdsForSegmentation","renderSegmentation","segmentationRepresentations","_render","viewportRenderList","segmentationRenderList","representation","_addPlanarFreeHandToolIfAbsent","allSettled","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","hasTool","addTool","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","defaultSegmentationStateManager","getDefaultRenderingConfig","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","freeze","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","updateSegmentation","draftState","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","isBaseVolumeSegmentation","updateLabelmapSegmentationImageReferences","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","isReferenceViewable","asOverlay","_updateLabelmapImageIdReferenceMap","_updateAllLabelmapSegmentationImageReferences","withNavigation","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","addColorLUT","removeColorLUT","_getStackIdForImageIds","getAllViewportSegmentationRepresentations","getSegmentationRepresentationsBySegmentationId","viewportReps","filteredReps","segmentationStyle","global","viewportsStyle","setStyle","styles","currentStyles","updatedStyles","copyActiveToInactiveIfNotProvided","renderInactiveSegmentations","repConfig","perSegment","allSegments","ALL_SEGMENTATIONS_KEY","segConfig","processedStyles","labelmapStyles","renderOutlineInactive","renderOutline","outlineWidthInactive","outlineWidth","renderFillInactive","renderFill","fillAlphaInactive","fillAlpha","outlineOpacityInactive","outlineOpacity","contourStyles","outlineDashInactive","outlineDash","combinedStyle","getDefaultStyle","allSegmentationsKey","getRenderInactiveSegmentations","clearSegmentationStyle","clearAllSegmentationStyles","clearViewportStyle","clearAllViewportStyles","resetToGlobalStyle","hasCustomStyle","segmentationStateManager","indexToUse","colorLUTToUse","missingColorLUTs","segmentationInputArray","segmentationInput","addContourRepresentationToViewport","contourInputArray","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","rest","normalizedSegment","geometryId","geometry","getGeometry","normalizeContourSegments","surfaceData","normalizeSurfaceSegments","normalizeSegments","addSegmentations","setColorLUT","colorLUTsIndex","segmentationRepresentation","colorValue","setSegmentIndexColor","colorReference","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","getSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","convertVolumeToStackLabelmap","segmentationVolume","computeVolumeLabelmapFromStack","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","getActiveSegmentIndex","segmentKeys","firstSegmentIndex","colorLUTOrIndex","parse","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegmentIndices","destroy","re","toolGroupFilteredByIds","tg","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","index3","index4","handles1","handles2","scale1","scale2","widthUnit","vector1","vector2","renderResult","pointCanProjectOnLine","PlanarFreehandROITool","alwaysRenderOpenContourHandles","closeContourProximity","checkCanvasEditFallbackProximity","makeClockWise","subPixelResolution","smoothing","smoothOnAdd","smoothOnEdit","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","displayOnePointAsCrosshairs","isEditingClosed","isEditingOpen","activateDraw","activateOpenContourEndEdit","activateClosedContourEdit","activateOpenContourEdit","previousPoint","pStart","pEnd","cancelDrawing","cancelOpenContourEdit","cancelClosedContourEdit","calibratedScale","numPoints","updateClosedCachedStats","updateOpenCachedStats","annotationsToDisplay","filterAnnotationsWithinSlice","filterAnnotationsForDisplay","annotationsWithParallelNormals","td","annotationViewPlaneNormal","vector","annotationsWithinSlice","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","renderPointContourWithMarker","renderContour","_calculateStatsIfActive","worldPosIndex","worldPosIndex2","iDelta","jDelta","kDelta","ceil","worldPosEnd","canvasPosEnd","curRow","intersectionCounter","_pointIJK","getLineSegmentIntersectionsCoordinates","RectangleROITool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","applyActiveStrategyCallback","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","Preview","OnInteractionEnd","acceptPreview","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","circleUID1","previewData","NaN","memoMap","acceptedMemoIds","hasSegmentIndex","hasPreviewIndex","changedIndices","_historyRedoHandler","memoData","hasPreviewData","shouldResolvePreviewRequests","voxelManagerId","redoVoxelManager","ERROR_EVENT","message","cancelable","actors","volumes","referencedVolumeIdToThreshold","activeRepresentation","configColor","previewColor","previewSegmentIndex","factor","lightenColor","previewOnHover","addPreview","acceptReject","AddPreview","removeContours","viewAnnotations","contourAnnotations","fillInsideCircle","previewVoxels","segmentationVoxels","sourceVoxelManager","bound","activeIndex","startIndex","startValue","hasZeroIndex","hasPositiveIndex","polyPoint","polyIndex","polyValue","isPointInsidePolyline3D","setAtIJK","slices","getArrayOfModifiedSlices","getEllipseCornersFromCanvasCoordinates","initializeCircle","Initialize","segmentationImageData","centerIJK","cornersInWorld","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","majorAxisVec","minorAxisVec","sphereObj","radius2","pointVec","distToPlane","proj","fromTopLeft","centerToTopLeft","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","strategyFunction","thresholdInsideCircle","initializeRectangle","rectangleCornersIJK","coord","axisU","axisV","uLen","vLen","EPS","vproj","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","getClosestImageIdForStackViewport","ImagePositionPatient","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","calculateBoundingBox","isWorld","is3D","clipBounds","DEFAULT_CONTOUR_SEG_TOOL_NAME","removeContourSegmentationAnnotation","endPointWorld","originalToolName","interpolationUID","interpolationCompleted","addContourSegmentationAnnotation","closestDistance","testIndex","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","useRAF","TypeError","invokeFunc","thisArg","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","cancelAnimationFrame","cancelTimer","flush","pending","annotationCanvasPoints","handlesLeftToRight","_compareX","handlesTopToBottom","_compareY","_determineCorners","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","getCalibratedLengthUnitsAndScale","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","USER","ERROR","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","rowCosine","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getViewportForAnnotation","pointInSphere","sphere","interpolateSegmentPoints","iniIndex","endIndex","knotsRatioPercentage","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","knotsIndexes","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","continuosDistributionValue","getContinuousUniformDistributionValues","SegmentStatsCalculator","calculators","indices","statsInit","statsData","calculator","lpad","string","character","seed","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","visits","currentArgs","job","getArgs","prevArgs","previousArgs","iKey","markAsVisited","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","toolInstances","annotationUIDs","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","getSegmentIndexAtWorldForContour","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","labelmap","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","binding","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nz","neighborVoxelIndex","neighborPixelValue","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","vec","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","tool","getViewportsInfo","getDeltaPoints","curr","getMeanPoints","_subtractPoints2D","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","DesiredOutputPrecision","DEFAULT","SINGLE","DOUBLE","Constants","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","vtkErrorMacro","dataDescription","EMPTY","Float64Array","setGetArray","getArray","classHierarchy","setExtent","deleted","_len","inExtent","_key","extentArray","changeDetected","dims","nCells","SINGLE_POINT","X_LINE","Y_LINE","Z_LINE","XY_PLANE","YZ_PLANE","XZ_PLANE","XYZ_GRID","coords","getSpatialExtent","ex","computeTransforms","ain","aout","indexToWorldVec3","indexToWorldBounds","bin","bout","worldToIndexBounds","onModified","getCenter","computeHistogram","voxelFunction","yStride","zStride","pixels","maximum","minimum","sumOfSquares","isum","inum","average","sigma","computeIncrements","increments","incr","computeOffsetIndex","_ref","getNumberOfComponents","getOffsetIndexFromWorld","offsetIndex","getComponent","vtkImageData$1","ColorSpace","Scale","ScalarMappingTarget","vtkDebugMacro","vtkWarningMacro","vtkColorTransferFunctionLabToMsh","lab","msh","L","M","vtkColorTransferFunctionAdjustHue","unsatM","hueSpin","vtkColorTransferFunctionInterpolateDiverging","rgb1","rgb2","lab1","lab2","msh1","msh2","localS","adiff","vtkColorTransferFunctionAngleDiff","Mmid","mshTmp","labTmp","vtkColorTransferFunctionMshToLab","clamping","colorSpace","RGB","hSVWrap","nanColor","belowRangeColor","aboveRangeColor","useAboveRangeColor","useBelowRangeColor","allowDuplicateScalars","tableSize","buildTime","discretize","numberOfValues","setGet","enum","setArray","addRGBPointLong","sharpness","removePoint","sortAndUpdateRange","addHSVPoint","addHSVPointLong","rgb","hsv","setNodes","before","after","modifiedInvoked","updateRange","oldRange","mappingRange","retVal","movePoint","oldX","newX","addRGBSegment","r1","g1","r2","g2","addHSVSegment","h1","s1","h2","hsv1","hsv2","mapValue","indexedLookup","numNodes","getAnnotatedValueIndexInternal","getNanColorByReference","nodeVal","getRedValue","getGreenValue","getBlueValue","xStart_","xEnd_","xStart","xEnd","lastR","lastG","lastB","tmpVec","usingLogScale","LOG10","logStart","logEnd","logX","log10","tidx","deltaRange","xn","discretizeIndex","getUseAboveRangeColor","getUseBelowRangeColor","HSV","hsvTmp","LAB","DIVERGING","ss","sss","h3","h4","getUint8Table","withAlpha","getMTime","tableWithAlpha","nbChannels","tmpTable","numComponents","getNumberOfTuples","buildFunctionFromTable","getNumberOfAvailableColors","nNodes","getIndexedColor","nodeValue","fillFromDataPointer","nb","ptr","originalRange","adjustRange","functionRange","estimateMinNumberOfSamples","findMinimumXDistance","currentDist","mapScalarsThroughTable","outFormat","inputOffset","mapDataIndexed","alpha","getAlpha","inIncr","outputV","inputV","RGBA","LUMINANCE","LUMINANCE_ALPHA","colorMap","oldColorSpace","isModified","oldNanColor","NanColor","oldNodes","callModified","vtkColorTransferFunction","vtkColorTransferFunction$1","out","fromValues","copy","subtract","multiply","divide","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","normalize","bx","by","bz","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rotateY","mag","cosine","zero","exactEquals","a0","b0","mul","div","sqrDist","sqrLen","stride","arg","l","zip","interpolator","samples"],"sourceRoot":""}