{"version":3,"file":"7656.bundle.b147ae9582d8ea7d1b02.js","mappings":"mNAUO,SAASA,EAAiBC,GAC/B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,IAAgBC,EAAAA,EAAAA,QACjB,iBAAEC,GAAqBF,EAEvBG,EAAWD,IAAqBN,EAEhCQ,GAAiBC,EAAAA,EAAAA,aAAY,KACjC,MAAMC,EAAkBC,SAASC,cAAc,qBAAqBZ,OAC9Da,EAAUH,GAAiBI,QAAQ,sBAAwBJ,EAEjE,IAAKG,EACH,OAAO,KAGT,IAAIE,EAAeF,EAAwBG,wBACvCC,GAAe,EAGnB,MAAMC,EAAaA,KACjBH,EAAeF,EAAwBG,yBAYnCG,EAAkBC,IACtB,MAAMC,GAVmBC,EAUUF,EAAMG,QAVbC,EAUsBJ,EAAMK,QARtDH,GAAKP,EAAYW,MACjBJ,GAAKP,EAAYY,OACjBH,GAAKT,EAAYa,KACjBJ,GAAKT,EAAYc,QALKC,IAACR,EAAGE,EAYxBH,IAAaJ,IACfA,EAAeI,EACfnB,EAAamB,KAIjB,IAAIU,EACJ,MAAMC,EAAeA,KACnBC,aAAaF,GACbA,EAAgBG,WAAWhB,EAAY,KAQzC,OALAiB,OAAOC,iBAAiB,SAAUJ,GAClCrB,SAASyB,iBAAiB,YAAajB,GAEvCD,IAEO,KACLiB,OAAOE,oBAAoB,SAAUL,GACrCrB,SAAS0B,oBAAoB,YAAalB,GAC1Cc,aAAaF,KAEd,CAAC/B,IAQJ,OANAsC,EAAAA,EAAAA,WAAU,IACQ9B,IAEf,CAACA,KAGG+B,EAAAA,EAAAA,SAAQ,KAAM,CAAGtC,YAAWM,aAAa,CAACN,EAAWM,GAC9D,C,gGCzEA,SAASiC,IACP,MAAOpC,IAAgBC,EAAAA,EAAAA,OAEjBL,EAAaI,GAAcE,iBAIjC,OAFsBmC,EAAAA,EAAAA,GAAyB,CAAEzC,cAGnD,C,mFCCO,SAAS0C,GAAuB,WAAE1C,IACvC,MAAM,gBAAE2C,IAAoBC,EAAAA,EAAAA,OACtB,2BAAEC,EAA0B,2BAAEC,EAA0B,mBAAEC,GAC9DJ,EAAgBK,UAEZ,qBAAEC,IAAyBC,EAAAA,EAAAA,GAAuBlD,IAGjDmD,EAAWC,IAAgBjD,EAAAA,EAAAA,WAAS,IACpCkD,EAAUC,IAAenD,EAAAA,EAAAA,WAAS,IAClCoD,EAAwBC,IAA6BrD,EAAAA,EAAAA,UAAmB,IAEzEsD,GAA4BhD,EAAAA,EAAAA,aAAY,KAC5C,IAAKsC,IAAuBE,GAAsBS,oBAAsBP,EAEtE,YADAK,EAA0B,IAI5B,MAAMG,EAAoBV,EAAqBS,kBAMzCE,EAJqBb,EAAmBc,gBAC5CC,GAAeA,EAAYC,qBAAuBJ,GAGpBK,IAAIF,GAAeA,EAAYG,KAC/DT,EAA0BI,IACzB,CAACb,EAAoBE,EAAsBE,IAExCe,GAAkBzD,EAAAA,EAAAA,aAAY,KAClC,IAAKqC,IAA+BG,GAAsBS,kBAExD,YADAN,GAAa,GAIf,MAAMe,EAAgBrB,EAA2BsB,mBAEjD,IAAKD,GAAeE,OAElB,YADAjB,GAAa,GAIf,MAAMkB,EAAWzB,GAA4B0B,uBAAuBvE,GAC9D0D,EAAoBT,EAAqBS,kBAE/C,GAAIY,aAAoBE,EAAAA,mBAAoB,CAC1C,MAAMC,EAAiBH,GAAUI,oBAEjC,IAAKD,EAEH,YADArB,GAAa,EAGjB,CAEA,MAAMuB,EAAkBR,EAAcS,SAASlB,GAC/CN,EAAauB,IACZ,CAAC3E,EAAYiD,EAAsBJ,EAA4BC,IAwDlE,OArDAR,EAAAA,EAAAA,WAAU,KACRmB,KACC,CAACN,EAAWM,KAEfnB,EAAAA,EAAAA,WAAU,KACR,IAAKQ,EACH,OAGFQ,EAAYR,EAA2B+B,qBACvCX,IAEA,MAAMY,EAAgB,CACpBhC,EAA2BiC,UAAUjC,EAA2BkC,OAAOC,iBAAkB,IACvF3B,GAAY,IAEdR,EAA2BiC,UACzBjC,EAA2BkC,OAAOE,kBAClC,IAAM5B,GAAY,IAGpBR,EAA2BiC,UACzBjC,EAA2BkC,OAAOG,uBAClC,IAAMjB,KAERpB,EAA2BiC,UAAUjC,EAA2BkC,OAAOI,aAAc,IACnFlB,KAEFpB,EAA2BiC,UAAUjC,EAA2BkC,OAAOK,eAAgB,IACrFnB,MAmBJ,OAdInB,GACF,CACEA,EAAmBiC,OAAOM,kBAC1BvC,EAAmBiC,OAAOO,sBAC1BxC,EAAmBiC,OAAOQ,oBAC1BzC,EAAmBiC,OAAOS,oBAC1B1C,EAAmBiC,OAAOU,sBAC1BC,QAAQC,IACRd,EAAce,KACZ9C,EAAmBgC,UAAUa,EAAW,IAAMnC,QAK7C,KACLqB,EAAca,QAAQG,GAAOA,EAAIC,iBAElC,CAACjD,EAA4BC,EAAoBmB,EAAiBT,IAE9D,CACLN,YACAE,WACAM,kBAAmBV,GAAsBS,kBACzCH,yBAEJ,C,iFCvEO,SAASyC,GAAgB,kBAAEC,GAAsB,CAAEA,kBAAmBA,KAAM,IACjF,MAAM,gBAAEtD,IAAoBC,EAAAA,EAAAA,OACtB,mBAAEG,EAAkB,kBAAEmD,GAAsBvD,EAAgBK,UAC3DmD,EAAqBC,IAA0BjG,EAAAA,EAAAA,UAAS,IAsC/D,OApCAmC,EAAAA,EAAAA,WAAU,KACR,MAAM+D,EAA4BA,KAChC,MACMC,EADevD,EAAmBc,gBAAgBoC,GAChBjC,IAAIuC,GA/DlD,SAAiCzC,EAAaoC,GAC5C,MAAM,mBAAEnC,GAAuBD,EAEzB0C,EAAcN,EAAkBO,wBAAwB1C,GAE9D,IAAKyC,EAAY,IAAIE,UACnB,MAAM,IAAIC,MAAM,+EAGlB,MAAM,aAAEC,EAAY,QAAEC,EAASC,MAAOC,EAAWC,YAAaC,GAAoBnD,EAE5EoD,EAAYN,IAAe,GAC3BE,EAAQC,GAAaF,GAASM,MAAQD,GAAWC,MAAQ,UAGzDH,EAAc,CAClBI,QAAS,GACTC,UAAWJ,GAAiBI,WAAa,IAsB3C,OAlBIJ,GACFD,EAAYI,QAAQvB,QAAQoB,EAAgBG,SAI1CR,GACFA,EAAajB,QAAQ2B,IACfA,GAAMH,MAAQG,EAAKH,OAASL,GAC9BE,EAAYI,QAAQvB,KAAKyB,EAAKH,QAMhCN,GAAWA,EAAQM,MAAQN,EAAQM,OAASL,GAC9CE,EAAYI,QAAQvB,KAAKgB,EAAQM,MAG5B,IACFrD,EACHkD,cACAF,QAEJ,CAoBQS,CAAwBhB,EAAGL,IAE7BE,EAAuBoB,GACjBC,KAAKC,UAAUF,KAAsBC,KAAKC,UAAUpB,GAC/CA,EAEFkB,IAILG,EAAkBC,IAASvB,EAA2B,KAE5DA,IAEA,MAQMvB,EARS,CACb/B,EAAmBiC,OAAOM,kBAC1BvC,EAAmBiC,OAAOO,sBAC1BxC,EAAmBiC,OAAOQ,oBAC1BzC,EAAmBiC,OAAOS,oBAC1B1C,EAAmBiC,OAAOU,sBAGC1B,IAC3B6D,GAAO9E,EAAmBgC,UAAU8C,EAAKF,GAAiB5B,aAG5D,MAAO,KACLjB,EAAca,QAAQmC,GAASA,KAC/BH,EAAgBI,WAEjB,CAAChF,EAAoBkD,EAAmBC,IAEpCC,CACT,C,4FC9FA,SAAS6B,EAAyBC,EAAcC,GAC9C,MAAM,MAAEpB,EAAK,SAAEqB,GAAaF,EAGtBG,EAAkBF,EAAqBG,iBAAiB,kCAG9D,SAASC,EAAkBC,EAAOC,EAAS,GACzC,MAAMpB,EAAU,GACVqB,EAAc,KAAKC,OAAOF,GAEhC,IAAK,MAAMG,KAAOJ,EAChB,GAAIK,OAAOC,UAAUC,eAAeC,KAAKR,EAAOI,GAAM,CACpD,MAAMK,EAAQT,EAAMI,GACdM,EAAeb,IAAkBO,GAEvC,IAAKM,EACH,SAGmB,iBAAVD,GAAgC,OAAVA,GAAmBE,MAAMC,QAAQH,GAWhE5B,EAAQvB,KAAK,GAAG4C,IAAcQ,OAAiBG,EAAAA,EAAAA,IAAYJ,EAAO,OAT9D5B,EAAQ/C,OAAS,GACnB+C,EAAQvB,KAAK,IAGfuB,EAAQvB,KAAK,GAAG4C,IAAcQ,KAE9B7B,EAAQvB,QAAQyC,EAAkBU,EAAOR,EAAS,IAKtD,CAGF,OAAOpB,CACT,CAGA,MAAMiC,EAAoBC,IACxB,MAAMC,EAAiB,CACrBnC,QAAS,GACTC,UAAW,IAIb,GAAIiC,EAAQE,YAAa,CACvB,MAAMpC,EAAUkB,EAAkBgB,EAAQE,aAC1CD,EAAenC,QAAUA,CAC3B,CAEA,OAAOmC,GAGHE,EAAkB,CAAC,EAUzB,OARAb,OAAOc,QAAQvB,GAAUxC,QAAQ,EAAEgE,EAAcL,MAC/CG,EAAgBE,GAAgB,IAC3BL,EACHtC,YAAaqC,EAAkBC,MAK5B,IACFrB,EACHnB,QACAqB,SAAUsB,EAEd,CAUO,SAASG,EAAiBC,GAI/B,MAAM,wBAAEC,GAA0B,EAAK,aAAEC,EAAe,GAAMF,GAAW,CAAC,GACpE,gBAAElH,IAAoBC,EAAAA,EAAAA,OACtB,oBAAEoH,EAAmB,qBAAE9B,GAAyBvF,EAAgBK,UAE/DiH,EAAeC,IAAoB/J,EAAAA,EAAAA,UAA6B,IAmDvE,OAjDAmC,EAAAA,EAAAA,WAAU,KACR,MAAM6H,EAASA,KACb,MAAMF,EAAgBD,EAAoBI,mBAE1C,IAAKH,GAAe5F,OAElB,YADA6F,EAAiB,IAInB,MAAMG,EAAsBJ,EAAcjG,IAAIiE,GAC5CD,EAAyBC,EAAcC,IAGzCgC,EAAiBG,IAGb1C,EACJoC,EAAe,EAAInC,IAASuC,EAAQJ,EAAc,CAAEO,SAAS,EAAMC,UAAU,IAAUJ,EAEzFA,IAEA,MAAMrF,EAAgB,CACpBkF,EAAoBjF,UAClBiF,EAAoBhF,OAAOwF,sBAC3B7C,GAEFqC,EAAoBjF,UAClBiF,EAAoBhF,OAAOyF,qBAC3B9C,IAaJ,OATImC,GACFhF,EAAce,KACZmE,EAAoBjF,UAClBiF,EAAoBhF,OAAO0F,2BAC3B/C,IAKC,KACL7C,EAAca,QAAQgF,GAAgBA,EAAa5E,eAC/CgE,EAAe,GACjBpC,EAAgBI,WAGnB,CAACiC,EAAqB9B,EAAsB6B,EAAcD,IAEtDG,CACT,C,mFChJO,MAGMW,EAA6B,CAAC,MAAO,YAyH3C,MAAMC,EAAoBA,CAACC,EAAGC,IAC/BD,EAAEE,gBAAkBD,EAAEC,cACjB,EAEFF,EAAEE,eAAiB,EAAI,ECzHhC,MAAMC,EAAiBA,CAACH,EAAGC,IACrBG,EAAAA,GAAMC,sBAAsBL,EAAEM,UACzB,GAED,EA8EH,SAASlI,EACdlD,EACA6J,GAEA,MAAM,gBAAElH,IAAoBC,EAAAA,EAAAA,OACtB,kBAAEsD,EAAiB,oBAAE8D,GAAwBrH,EAAgBK,UAK5DqI,EAAmBC,IAAuBjL,EAAAA,EAAAA,OAE3CkL,EAAkBvL,GAAcqL,EAAkB/K,kBAGlD,kBACJkL,GAAoB,EAAI,kBACxBC,GAAoB,EAAI,eACxBC,GAAiB,EAAI,wBACrBC,GAA0B,EAAI,2BAC9BC,GAA6B,EAAI,2BACjCC,GAA6B,GAC3BhC,GAAW,CAAC,EAGViC,EAAsBD,EACtBE,GAAiBxJ,EAAAA,EAAAA,SACrB,IAAOuJ,EAAsB5F,EAAkB8F,uBAAyB,GACxE,CAAC9F,EAAmB4F,IAIhBG,EAAqBP,GAEpBQ,EAA6BC,IAAkChM,EAAAA,EAAAA,UACpE8L,EAAqBjC,EAAoBoC,+BAA+Bb,GAAmB,KAG7FjJ,EAAAA,EAAAA,WAAU,KACR6J,EACEF,EAAqBjC,EAAoBoC,+BAA+Bb,GAAmB,IAG7F,MAAMc,EAAiBJ,EACnB,CACEjC,EAAoBhF,OAAOsH,qCAC3BtC,EAAoBhF,OAAOuH,qCAC3BvI,IAAI5C,GACJ4I,EAAoBjF,UAAU3D,EAAO,KACnC+K,EACEnC,EAAoBoC,+BAA+Bb,OAIzD,GAEJ,MAAO,KACLc,EAAe1G,QAAQ6G,GAAQA,EAAKzG,iBAErC,CAACiE,EAAqBuB,EAAiBU,IAE1C,MAAMQ,GAAqBlK,EAAAA,EAAAA,SAAQ,IAC5BmJ,EAGEQ,EAA4BlI,IAAI0I,GAClBxG,EAAkByG,mBAAmBD,EAAKE,iBAHtD,GAMR,CAAClB,EAAgBQ,EAA6BhG,IAE3C2G,GAAwBtK,EAAAA,EAAAA,SAAQ,IAC7BkK,EAAmBzI,IAAI8I,GAAMA,EAAGC,uBACtC,CAACN,IAGEO,EACJxB,GAAqBC,GAAqBE,GAA2BC,GAEjE,oBAAEqB,EAAsB,GAAE,oBAAEC,EAAsB,KAAO3K,EAAAA,EAAAA,SAAQ,IAChEyK,GDlIF,UAAgC,WAAEhN,EAAU,SAAEgD,IACnD,MAAM,kBAAEkD,EAAiB,oBAAEoF,GAAwBtI,EAC7CmK,EAAkB7B,EAAoB8B,8BAA8BpN,GAE1E,IAAKmN,GAAiB9I,OACpB,MAAO,CACL4I,oBAAqB,GACrBC,oBAAqB,IAIzB,MAEMG,EAFiBnH,EAAkB8F,uBAEDsB,OACtCC,IAAeJ,EAAgBvI,SAAS2I,EAAWR,wBAG/CE,EAAsBE,EAAgBnJ,IAAIwJ,GAC9CtH,EAAkByG,mBAAmBa,IAGjCC,EAAwBC,EAAAA,UAAAA,cAAsBT,EAAoB,GAAGU,UAAY,IACjF1K,EAAuBgK,EAAoB,GAsDjD,MAAO,CACLA,sBACAC,oBAtD0BG,EAAiBrJ,IAAIuJ,IAC/C,IAAKtK,EAAqB2K,kBACxB,MAAO,IACFL,EACHvC,eAAe,GAInB,GAAIuC,EAAWM,YACb,MAAO,IACFN,EACHvC,eAAe,GAKnB,GACEuC,EAAWO,qBACXP,EAAWO,sBAAwB7K,EAAqB6K,oBAExD,MAAO,IACFP,EACHvC,eAAe,GAKnB,IAAKJ,EAA2BhG,SAAS2I,EAAWnC,UAAW,CAC7D,IAAKqC,EACH,MAAO,IACFF,EACHvC,eAAe,GAInB,MAAM2C,EAAWJ,EAAWI,UAAYJ,EAAWQ,QAAQ/J,IAAIgK,GAASA,EAAMC,SAG9E,IAFqBV,EAAWW,cAEXP,GAAUtJ,OAAS,IAAMqJ,EAAAA,UAAAA,cAAsBC,GAClE,MAAO,IACFJ,EACHvC,eAAe,EAGrB,CAEA,MAAO,IACFuC,EACHvC,eAAe,KAQrB,CCsDMmD,CAAuB,CACrBnO,WAAYuL,EACZvI,SAAU,CAAEkD,oBAAmBoF,0BAL1B,CAAE2B,oBAAqB,GAAIC,oBAAqB,IAQxD,CAAC3B,EAAiBrF,EAAmBoF,EAAqB0B,IAEvD/J,GAAuBV,EAAAA,EAAAA,SAC3B,IACEiJ,GAAqByB,EAAoB5I,OAAS,EAAI4I,EAAoB,QAAKmB,EACjF,CAAC5C,EAAmByB,IAGhBoB,GAAwB9L,EAAAA,EAAAA,SAAQ,IAC/BkJ,GAAsBxI,EAGpBgK,EAAoBK,OACzBR,IACGlC,EAA2BhG,SAASkI,EAAG1B,WACxC0B,EAAGC,wBAA0B9J,EAAqB8J,uBAL7C,GAOR,CAACtB,EAAmBwB,EAAqBhK,IAEtCqL,GAA2B/L,EAAAA,EAAAA,SAC/B,IAAM8L,EAAsBrK,IAAI8I,GAAMA,EAAGC,uBACzC,CAACsB,IAGGE,GAA8BhM,EAAAA,EAAAA,SAAQ,IACrCoJ,EAGEuB,EACJI,OACCR,GACElC,EAA2BhG,SAASkI,EAAG1B,YACtCyB,EAAsBjI,SAASkI,EAAGC,wBACnCD,EAAG9B,eAENwD,KAAK3D,GATC,GAUR,CAACc,EAAyBuB,EAAqBL,IAE5C4B,GAAiClM,EAAAA,EAAAA,SAAQ,IACxCqJ,EAGEsB,EACJI,OACCR,IACGlC,EAA2BhG,SAASkI,EAAG1B,YACvCkD,EAAyB1J,SAASkI,EAAGC,wBACtCD,EAAG9B,eAENwD,KAAKvD,GATC,GAUR,CAACW,EAA4BsB,EAAqBoB,IAE/CI,GAAiCnM,EAAAA,EAAAA,SAAQ,IACxCsJ,GAA+B5I,EAG7B8I,EACJuB,OACCR,IACGlC,EAA2BhG,SAASkI,EAAG1B,WACxC0B,EAAGC,wBAA0B9J,EAAqB8J,wBACjDF,EAAsBjI,SAASkI,EAAGC,yBAClCuB,EAAyB1J,SAASkI,EAAGC,wBAEzCyB,KAAKvD,GAVC,GAWR,CACDY,EACAE,EACA9I,EACA4J,EACAyB,IAGIK,EAA8B,CAClC5C,eAAgBA,GAAkB,GAClCkB,oBAAqBA,GAAuB,IA2B9C,OAxBIzB,IACFmD,EAAO1L,qBAAuBA,GAG5BwI,IACFkD,EAAON,sBAAwBA,GAG7B3C,IACFiD,EAAOlC,mBAAqBA,GAG1Bd,IACFgD,EAAOJ,4BAA8BA,GAGnC3C,IACF+C,EAAOF,+BAAiCA,GAGtC5C,IACF8C,EAAOD,+BAAiCA,GAGnCC,CACT,C,sGC1MA,MAAMC,EAAeC,IACnB,OAAQA,GACN,KAAKC,EAAAA,GAAeC,WAClB,MAAO,OACT,KAAKD,EAAAA,GAAeE,YAClB,MAAO,QACT,KAAKF,EAAAA,GAAeG,aAClB,MAAO,SACT,KAAKH,EAAAA,GAAeI,UAClB,MAAO,MACT,QACE,MAAO,WAMPC,EAAmBC,GAChBC,KAAKC,IAAIF,EAHJ,IAMRG,EAAmBC,GAChBH,KAAKC,IAAIE,EAAc,GAG1BC,EAAeA,EAAGzP,aAAY6C,gCACjBA,EAA2B0B,uBAAuBvE,aACxC0P,EAAAA,iBAUtB,SAASC,EACd3P,EACA6J,GAEA,MAAM,gBAAElH,EAAe,gBAAEiN,IAAoBhN,EAAAA,EAAAA,OACvC,2BAAEC,EAA0B,gBAAEgN,EAAe,qBAAE3H,GACnDvF,EAAgBK,UAEX8M,EAAYC,IAAiB5P,EAAAA,EAAAA,UAClCsP,EAAa,CAAEzP,aAAY6C,iCAEtBmN,EAAaC,IAAkB9P,EAAAA,EAAAA,UAAS0P,EAAgBG,YAAYhQ,KACpEkQ,EAAkBC,IAAuBhQ,EAAAA,EAAAA,UAC9C0J,GAASgF,SAAWD,EAAY/E,EAAQgF,UAAY,WAE/CuB,EAAUC,IAAelQ,EAAAA,EAAAA,YAC1BmQ,EAAcC,EAAAA,UACbC,EAASC,IAAmBtQ,EAAAA,EAAAA,aAC5BuQ,EAAeC,IAAyBxQ,EAAAA,EAAAA,aACxCyQ,EAAWC,IAAqB1Q,EAAAA,EAAAA,aAChC2Q,EAAiBC,IAAsB5Q,EAAAA,EAAAA,UAA0B,CAAE6Q,IAAK,EAAGC,IAAK,OAEjF,oBAAEhE,IAAwB/J,EAAAA,EAAAA,GAAuBlD,IACjD,kBAAEkG,GAAsBvD,EAAgBK,SAGxCkO,GAA8B3O,EAAAA,EAAAA,SAAQ,IACtCsH,GAASkD,sBACJlD,EAAQkD,sBAGbE,GAAuBA,EAAoB5I,OAAS,EAC/C4I,EAAoB,GAAGF,2BADhC,EAKC,CAAClD,GAASkD,sBAAuBE,IAE9BkE,EAAenR,EAAa6C,EAA2BuO,gBAAgBpR,GAAc,MAErF,QAAEqR,EAAO,mBAAEC,EAAkB,uBAAEC,EAAsB,4BAAEC,GAusB/D,SAA8BtJ,GAC5B,MAAMmJ,EAAUnJ,EAAqBG,iBAAiB,kCAChDiJ,EAAqBpJ,EAAqBG,iBAC9C,yBAGI,uBACJkJ,EAAyB,GAAE,4BAC3BC,EAA8B,CAAER,IAAK,EAAGC,IAAK,EAAGQ,KAAM,KAErDvJ,EAAqBG,iBACpB,kCAC6B,CAAC,EAElC,MAAO,CACLgJ,UACAC,qBACAC,yBACAC,8BAEJ,CA1tBIE,CAAqBxJ,GAEjByJ,EAAkBR,GAAcS,qBAAqBC,WACrDC,IAA4BH,GAC9BI,EAAAA,UAAAA,QAAkBJ,EAAiB,CAAC,EAAG,EAAG,IAGxCK,GAAwBzP,EAAAA,EAAAA,SAAQ,IAElC0K,GACIK,OAAOC,GAAc8D,IAAU9D,EAAWnC,WAC3CpH,IAAIuJ,IACI,CACLR,sBAAuBQ,EAAWR,sBAClCkF,SAAU1E,EAAWnC,SACrBiG,QAASA,EAAQ9D,EAAWnC,cAE1B,GAET,CAAC6B,EAAqBoE,KAGzB/O,EAAAA,EAAAA,WAAU,KACR,IAAK4O,EACH,OAGF,MAAMgB,EAAqBhM,EAAkByG,mBAAmBuE,GAChE,IAAKgB,GAAoBvE,UAAUtJ,OACjC,OAGF,MAAM8N,EAAatP,EAA2B0B,uBAAuBvE,GAErE,IAAKmS,EACH,OAGF,KAAMA,aAAsB3N,EAAAA,oBAC1B,OAGF,MACM4N,EADYD,EAAWE,kBACFC,KAAKC,GAAMA,EAAG3N,SAASsM,IAElD,IAAKkB,EACH,OAIF,MAAMI,EAAYL,EAAWM,aAAaL,GAE1C,IAAKI,EACH,OAGF,MAAME,EAAeF,EAAUA,WAEzB,aAAEG,GAAiBD,EAAaE,IAAI,gBAEpCC,EAAQF,EAAaG,WAE3B/B,EAAmB,CAAEC,IAAK6B,EAAM,GAAI5B,IAAK4B,EAAM,MAC9C,CAAC3B,EAA6BhL,EAAmBrD,EAA4B7C,IAGhF,MAAM+S,GAA0BxQ,EAAAA,EAAAA,SAAQ,KACtC,IAAK2O,GAAgE,IAAjCc,EAAsB3N,OACxD,MAAO,GAGT,MAAM2O,EAAmBhB,EAAsBM,KAC7CW,GAAUA,EAAOlG,wBAA0BmE,GAG7C,OAAK8B,EAIEA,EAAiB3B,QAHf,IAIR,CAACW,EAAuBd,KAE3B5O,EAAAA,EAAAA,WAAU,KACRyN,EAAcN,EAAa,CAAEzP,aAAY6C,gCAEzC,MAAMyB,EAAWzB,EAA2B0B,uBAAuBvE,GAGnE,GAAIsE,GAAY4M,EACd,IACE,IAAIgC,EAEJ,GAAI5O,aAAoB6O,EAAAA,cACtBD,EAAa5O,EAAS8O,gBAClBF,EAAW9C,WACbC,EAAY6C,EAAW9C,UACvBE,EAAY+C,QAAUH,EAAW9C,eAE9B,GAAI9L,aAAoBE,EAAAA,mBAAoB,CAEjD,MACM4N,EADY9N,EAAS+N,kBACAC,KAAKC,GAAMA,EAAG3N,SAASsM,IAElD,GAAIkB,EAAU,CAQZ,GAPAc,EAAa5O,EAAS8O,cAAchB,GAChCc,GAAY9C,WACdC,EAAY6C,EAAW9C,UACvBE,EAAY+C,QAAUH,EAAW9C,eAIGhC,IAAlC8E,GAAYI,UAAU9C,QAAuB,CAC/C,MACMA,EADUtH,MAAMC,QAAQ+J,EAAWI,SAAS9C,SAE9C0C,EAAWI,SAAS9C,QAAQ+C,OAAO,CAACtC,EAAKoC,IAAYhE,KAAK4B,IAAIA,EAAKoC,GAAU,GAC7EH,EAAWI,SAAS9C,QAExBC,EAAgBD,GAChBG,EAAsBpB,EAAgBiB,GACxC,CAGI0C,GAAYI,eAA8ClF,IAAlC8E,EAAWI,SAAS1C,WAC9CC,EAAkBqC,EAAWI,SAAS1C,UAE1C,CACF,CACF,CAAE,MAAO4C,GACPC,QAAQD,MAAM,gCAAiCA,EACjD,GAED,CAAC3Q,EAA4B7C,EAAYkR,KAE5C5O,EAAAA,EAAAA,WAAU,KACR,IAAKtC,EACH,OAGF,MAAM0T,EAAsBA,KAC1B,MAAMC,EAAmB9D,EAAgBG,YAAYhQ,GACrDiQ,EAAe0D,IAGjBD,IAEA,MAAM,YAAE3N,GAAgB8J,EAAgB9K,UACtC8K,EAAgB7K,OAAO4O,cACvBF,GAGF,MAAO,KACL3N,MAED,CAAC8J,EAAiB7P,KAErBsC,EAAAA,EAAAA,WAAU,KACR,IAAKtC,IAAekR,EAClB,OAGF,MAAM5M,EAAWzB,EAA2B0B,uBAAuBvE,GACnE,IAAKsE,EACH,OAGF,MAAMzD,EAAUyD,EAASzD,QACzB,IAAKA,EACH,OAGF,MAAMgT,EAAYC,IAChB,MAAM,MAAEjB,GAAUiB,EAAYC,OAE9B,IAAKlB,EACH,OAKuBvC,EAAY+C,SAAWW,EAAkB1D,EAAY+C,QAASR,KAGrFvC,EAAY+C,QAAUR,EACtBxC,EAAYwC,KAIVoB,EAAiBH,IACrB,MAAM,SAAER,GAAaQ,EAAYC,OAE5BT,SAKsBlF,IAAvBkF,EAAS1C,WACXC,EAAkByC,EAAS1C,gBAGJxC,IAArBkF,EAAS9C,UACXC,EAAgB6C,EAAS9C,SACzBG,EAAsBpB,EAAgB+D,EAAS9C,aAOnD,OAHA3P,EAAQuB,iBAAiB8R,EAAAA,MAAAA,OAAaC,aAAcN,GACpDhT,EAAQuB,iBAAiB8R,EAAAA,MAAAA,OAAaE,kBAAmBH,GAElD,KACLpT,EAAQwB,oBAAoB6R,EAAAA,MAAAA,OAAaC,aAAcN,GACvDhT,EAAQwB,oBAAoB6R,EAAAA,MAAAA,OAAaE,kBAAmBH,KAE7D,CAACjU,EAAYkR,EAA6BrO,EAA4B0M,IAEzE,MAAM8E,GAA2B5T,EAAAA,EAAAA,aAAY,KAC3C,IAAKyQ,EACH,MAAM,IAAIvK,MAAM,mDAGlB,GAAoC,IAAhCsG,GAAqB5I,OACvB,MAAM,IAAIsC,MAAM,mDAIlB,MAAM2N,EAAyBrH,GAAqBsH,KAClDzH,GAAMA,EAAGC,wBAA0BmE,GAGrC,IAAKoD,EACH,MAAM,IAAI3N,MACR,wBAAwBuK,oCAI5B,OAAOA,GACN,CAACA,EAA6BjE,IAE3BuH,GAAiB/T,EAAAA,EAAAA,aACpBwS,IACC,IAAKjT,EACH,OAGF,MAAM+M,EAAwBsH,KAGxB,MAAEI,EAAK,MAAEC,GAAU3C,EAAAA,UAAAA,YAAAA,eACvBkB,EAAO0B,YACP1B,EAAO2B,cAGHC,EAAc,CAAEJ,QAAOC,SAExBpE,EAAY+C,SAAYW,EAAkB1D,EAAY+C,QAASwB,KAClEvE,EAAY+C,QAAUwB,EACtBxE,EAAYwE,GAEZjF,EAAgBkF,IAAI,CAClBC,YAAa,yBACbC,eAAgB,IACX/B,EACHjT,aACA+M,yBAEFkI,QAAS,kBAIf,CAACrF,EAAiB5P,EAAYqU,IAG1Ba,GAAczU,EAAAA,EAAAA,aACjB0U,IACC,GAAKnV,KAKAsQ,EAAY+C,UAAYW,EAAkB1D,EAAY+C,QAAS8B,IAAS,CAE3E7E,EAAY+C,QAAU8B,EACtB9E,EAAY8E,GAEZ,MAAMC,EAAcrD,EAAAA,UAAAA,YAAAA,cAAoCoD,EAAOV,MAAOU,EAAOT,OAGvE3H,EAAwBsH,IAC9BzE,EAAgBkF,IAAI,CAClBC,YAAa,yBACbC,eAAgB,IACXI,EACHpV,aACA+M,yBAEFkI,QAAS,eAEb,GAEF,CAACjV,EAAY4P,EAAiByE,IAG1BgB,GAAiB5U,EAAAA,EAAAA,aACpBoJ,IACC,IAAK7J,EACH,OAGF,GAAoC,IAAhCiN,GAAqB5I,OACvB,OAGF,IAAKiN,EACH,OAGF,MACEgE,MAAOC,EAAa,qBACpBC,EAAoB,wBACpBC,GACEnE,EAEJ,IAAIoE,EAA0BF,GAAwB,MAGpDE,EADuB,SAArBxF,GAAoD,UAArBA,EACc,SAArBA,EAA8B,QAAU,OAEnB,QAArBA,EAA6B,SAAW,MAGpE,MAAMyF,EAAkB,CACtB3V,aACA4V,UAAWtE,EAAmBsE,WAAa,CAAC,EAC5CC,MAAO,CACLC,SAAUJ,GAEZJ,MAAOC,EACPO,SAAU5F,EACV6F,mBAAoBN,GAA2B,eAC5C5L,GAIDiI,IACF6D,EAAgBE,MAAQ,CACtBC,SAAUJ,EACVM,MAAO,CACLC,KAAM,aACNC,MAAO,UACPC,YAAa,EACbC,SAAU,EACVC,UAAW,EACXC,YAAa,KAKnB,MAAMC,EAAyBtJ,EAAoBjJ,IAAI8I,GAAMA,EAAGC,uBAEhE,IACE6C,EAAgBkF,IAAI,yBAA0B,CAC5C9U,aACA6J,QAAS8L,EACTY,0BAEJ,CAAE,MAAO/C,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,GAEF,CACE5D,EACA5P,EACAsR,EACAQ,EACA7E,EACAiD,IAIEsG,GAAc/V,EAAAA,EAAAA,aAClB,EAAG6S,WAAU9C,UAAU,EAAGiG,aAAY,MACpC,IAAKzW,EACH,OAGF,MAAM+M,EAAwBsH,SAGdjG,IAAZoC,GACFC,EAAgBD,GAGlBZ,EAAgBkF,IAAI,CAClBC,YAAa,sBACbC,eAAgB,CACdhV,aACAsT,WACAvG,wBACAyD,UACAiG,aAEFxB,QAAS,iBAGb,CAACrF,EAAiB5P,EAAYqU,IAG1BqC,GAAajW,EAAAA,EAAAA,aAChB+O,IACC,IAAKxP,EACH,OAGF,MAAMsE,EAAWzB,EAA2B0B,uBAAuBvE,GACnE,KAAKsE,GAAcA,aAAoBE,EAAAA,oBACrC,OAIFiM,EAAgBjB,GAEhBmB,EAAsBpB,EAAgBC,IAEtC,MAAMzC,EAAwBsH,IAExBjC,EADY9N,EAAS+N,kBACAC,KAAKC,GAAMA,EAAG3N,SAASmI,IAElD,IAAKqF,EACH,OAIF,MAIMuE,EAAkB,IAJLrS,EAAS8O,cAAchB,GACPkB,UAAY,CAAC,EAK9C9C,QAAShB,GAIXlL,EAASsS,cACP,CACEtD,SAAUqD,GAEZvE,GAGF9N,EAASuS,UAEX,CAAChU,EAA4B7C,EAAYqU,EAA0B9E,IAG/DuH,GAAmBrW,EAAAA,EAAAA,aACtB2O,IAEC,MAAM2H,EAAgB5H,EAAgBC,GACtCsH,EAAWK,IAEb,CAAC5H,EAAiBuH,IAGdM,GAAevW,EAAAA,EAAAA,aAClBwW,IACC,IAAKjX,EACH,OAGF,MAAMsE,EAAWzB,EAA2B0B,uBAAuBvE,GACnE,KAAKsE,GAAcA,aAAoBE,EAAAA,oBACrC,OAGFqM,EAAkBoG,GAElB,MAAMlK,EAAwBsH,IAExBjC,EADY9N,EAAS+N,kBACAC,KAAKC,GAAMA,EAAG3N,SAASmI,IAE7CqF,IAILqB,QAAQyD,MAAM,uBAAwBD,GAEtC3S,EAASsS,cACP,CACEtD,SAAU,CACR1C,UAAWqG,IAGf7E,GAGF9N,EAASuS,WAEX,CAAChU,EAA4B7C,EAAYqU,IAIrCf,GAAW/Q,EAAAA,EAAAA,SAAQ,KACvB,IAAKvC,IAAekR,IAAgCjE,GAAqB5I,OACvE,OAAO,KAGT,IACE,MAAMC,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,IAAKsE,EACH,OAAO,KAGT,GAAIA,aAAoB6O,EAAAA,cAAe,CACrC,MAAM,SAAEG,GAAahP,EAAS8O,gBAC9B,OAAKE,IAEDhC,GAAoBsE,WAAWtD,KAAK6E,GAAgB,cAAXA,EAAEC,OAC3C9F,GAAoBsE,YAAY,GAItC,CAEA,MAAMyB,EAAe/S,EAASgT,YACxBC,EAAaF,GAAc/E,KAAKkF,GACpCA,EAAMC,aAAa7S,SAASsM,IAG9B,IAAKqG,EACH,OACEjG,GAAoBsE,WAAWtD,KAAK6E,GAAgB,cAAXA,EAAEC,OAC3C9F,GAAoBsE,YAAY,GAIpC,MAAM,SAAEtC,GAAchP,EAAmC8O,cACvDmE,EAAWE,cAGb,OAAKnE,IAEDhC,GAAoBsE,WAAWtD,KAAK6E,GAAgB,cAAXA,EAAEC,OAC3C9F,GAAoBsE,YAAY,GAKtC,CAAE,MAAOpC,GAEP,OADAC,QAAQD,MAAM,mCAAoCA,GAEhDlC,GAAoBsE,WAAWtD,KAAK6E,GAAgB,cAAXA,EAAEC,OAC3C9F,GAAoBsE,YAAY,EAEpC,GACC,CACD/S,EACA7C,EACAkR,EACAjE,EACAqE,GAAoBsE,YAIhB8B,IAA2BjX,EAAAA,EAAAA,aAC9BwS,IACC,IAAKjT,EACH,OAGF,MAAM+M,EAAwBsH,IAE9BzE,EAAgBkF,IAAI,CAClBC,YAAa,mBACbC,eAAgB,CACd/B,SACAjT,aACA+M,4BAIN,CAAC6C,EAAiB5P,EAAYqU,IAG1BsD,IAA4BlX,EAAAA,EAAAA,aAC/BmX,IACM5X,GAIL4P,EAAgBkF,IAAI,CAClBC,YAAa,4BACbC,eAAgB,CACd4C,UACA5X,iBAIN,CAAC4P,EAAiB5P,IAGd6X,IAAoBpX,EAAAA,EAAAA,aACxB,EAAGqX,UAASC,UAASC,eACdhY,GAIL4P,EAAgBkF,IAAI,CAClBC,YAAa,oBACbC,eAAgB,CACd8C,UACAC,UACAC,WACAhY,iBAIN,CAAC4P,EAAiB5P,IAGdiY,IAAmBxX,EAAAA,EAAAA,aACtByX,IACMlY,GAIL4P,EAAgBkF,IAAI,CAClBC,YAAa,mBACbC,eAAgB,CACdkD,UACAlY,iBAIN,CAAC4P,EAAiB5P,IAGpB,MAAO,CACL8P,aACAgC,4BAGA0C,iBACAU,cACA9E,WACAgF,YAAarD,EAAAA,UAAAA,YAAAA,cAAoC3B,GAAUqE,MAAOrE,GAAUsE,OAG5E1E,cACAqF,iBAGAmB,cACAlD,WAGA9C,UACAkG,aACAhG,gBACAoG,mBAGAlG,YACAoG,eACAlG,kBAGA4G,4BACAC,6BACAE,qBACAI,oBAGAhL,sBAGAqE,qBACApB,mBACAC,sBAGAgI,mBAAoBpF,EACpBf,wBACAT,yBACAC,8BAEJ,CAEA,UASA,SAASwC,EACPoE,EACAC,EACAC,EAAU,MAEV,SAAKF,IAAWC,KAIdhJ,KAAKkJ,IAAIH,EAAO3D,MAAQ4D,EAAO5D,OAAS6D,GACxCjJ,KAAKkJ,IAAIH,EAAO1D,MAAQ2D,EAAO3D,OAAS4D,EAE5C,C,4FC31BA,MAAME,EAAqB,CAAC,KAAM,KAAM,MAAO,OAE/C,SAASxQ,EAAyBC,EAAcC,GAC9C,MAAM,MAAEpB,EAAK,SAAEqB,GAAaF,EAGtBG,EAAkBF,EAAqBG,iBAAiB,kCAG9D,SAASC,EAAkBC,EAAOC,EAAS,GACzC,MAAMpB,EAAU,GACVqB,EAAc,KAAKC,OAAOF,GAEhC,IAAK,MAAMG,KAAOJ,EAChB,GAAIK,OAAOC,UAAUC,eAAeC,KAAKR,EAAOI,GAAM,CACpD,MAAMK,EAAQT,EAAMI,GACdM,EAAeb,IAAkBO,GAEvC,IAAKM,EACH,SAGmB,iBAAVD,GAAgC,OAAVA,GAAmBE,MAAMC,QAAQH,GAWhE5B,EAAQvB,KAAK,GAAG4C,IAAcQ,OAAiBG,EAAAA,EAAAA,IAAYJ,EAAO,OAT9D5B,EAAQ/C,OAAS,GACnB+C,EAAQvB,KAAK,IAGfuB,EAAQvB,KAAK,GAAG4C,IAAcQ,KAE9B7B,EAAQvB,QAAQyC,EAAkBU,EAAOR,EAAS,IAKtD,CAGF,OAAOpB,CACT,CAGA,MAAMiC,EAAoBC,IACxB,MAAMC,EAAiB,CACrBnC,QAAS,GACTC,UAAW,IAIb,GAAIiC,EAAQE,YAAa,CACvB,MAAMpC,EAAUkB,EAAkBgB,EAAQE,aAC1CD,EAAenC,QAAUA,CAC3B,CAEA,OAAOmC,GAGHE,EAAkB,CAAC,EAUzB,OARAb,OAAOc,QAAQvB,GAAUxC,QAAQ,EAAEgE,EAAcL,MAC/CG,EAAgBE,GAAgB,IAC3BL,EACHtC,YAAaqC,EAAkBC,MAK5B,IACFrB,EACHnB,QACAqB,SAAUsB,EAEd,CAqBO,SAAShH,GAAyB,WACvCzC,EAAU,wBACV8J,GAA0B,EAAK,aAC/BC,EAAe,IAMf,MAAM,gBAAEpH,IAAoBC,EAAAA,EAAAA,OACtB,oBAAEoH,EAAmB,oBAAEsB,EAAmB,qBAAEpD,EAAoB,kBAAEhC,GACtEvD,EAAgBK,UAEXyV,EAAkCC,IACvCvY,EAAAA,EAAAA,UAA6C,CAC3CsY,iCAAkC,GAClCE,UAAU,IAsGd,OAnGArW,EAAAA,EAAAA,WAAU,KACR,MAAM6H,EAASA,KACb,MAAMyO,EAAiBtN,EAAoB8B,8BAA8BpN,GAEzE,IAAK4Y,GAAgBvU,OACnB,OAGF,MAAMkJ,EAAarH,EAAkByG,mBAAmBiM,EAAe,IAEvE,IAAKrL,EACH,OAGF,GAAIiL,EAAmB5T,SAAS2I,EAAWnC,UAKzC,YAJAsN,EAAoCG,IAAQ,CAC1CJ,iCAAkC,GAClCE,UAAU,KAKd,MAAM1O,EAAgBD,EAAoBI,mBAE1C,IAAKH,GAAe5F,OAKlB,YAJAqU,EAAoCG,IAAQ,CAC1CJ,iCAAkC,GAClCE,UAAU,KAKd,MAEMG,EAFkB9O,EAAoBoC,+BAA+BpM,GAEfgE,IAAI+U,IAGvD,CACLA,iBACA9Q,aAHyBD,EADNgC,EAAoBgP,gBAAgBD,EAAenM,gBACN1E,MAOpEwQ,EAAoC,CAClCD,iCAAkCK,EAClCH,UAAU,KAIRhR,EACJoC,EAAe,EAAInC,IAASuC,EAAQJ,EAAc,CAAEO,SAAS,EAAMC,UAAU,IAAUJ,EAEzFA,IAEA,MAAMrF,EAAgB,CACpBkF,EAAoBjF,UAClBiF,EAAoBhF,OAAOwF,sBAC3B7C,GAEFqC,EAAoBjF,UAClBiF,EAAoBhF,OAAOyF,qBAC3B9C,GAEFqC,EAAoBjF,UAClBiF,EAAoBhF,OAAOsH,qCAC3B3E,GAEF2D,EAAoBvG,UAClBuG,EAAoBtG,OAAOiU,2BAC3BtR,GAEF2D,EAAoBvG,UAAUuG,EAAoBtG,OAAOkU,mBAAoBvR,IAY/E,OATImC,GACFhF,EAAce,KACZmE,EAAoBjF,UAClBiF,EAAoBhF,OAAO0F,2BAC3B/C,IAKC,KACL7C,EAAca,QAAQgF,GAAgBA,EAAa5E,eAC/CgE,EAAe,GACjBpC,EAAgBI,WAGnB,CACDiC,EACAsB,EACApD,EACAhC,EACA6D,EACAD,EACA9J,IAGKyY,CACT,C,gyDC5NO,MAAMU,EAAmC,qBACnCC,EAAsC,MAOnD,EALc,CACZD,mCACAC,uC,gDCGF,MAAM,qBAAEC,GAAyBC,EAAAA,a,gDCL1B,SAASC,EAA0BvZ,GACxC,MAAM,QAAEa,IAAY2Y,EAAAA,EAAAA,IAAsBxZ,IAAe,CAAC,EAE1D,OADuByZ,EAAAA,EAAAA,mBAAkB5Y,EAE3C,CCHe,SAAS6Y,EAAgCpO,GACtD,MAAM,iBAAEhL,GAAqBgL,EAAoBqO,WACjD,OAAOJ,EAA0BjZ,EACnC,CCHA,MAAM,sBAAEsZ,GAA0B7H,EAAAA,UAKlC,MAAM8H,UAA4BC,EAAAA,WAAWC,WAAAA,IAAAC,GAAA,SAAAA,GAAA,KAG3CC,wBAAkB,OAClBC,4BAA8BC,KAAKC,iBAAgB,KAEnDA,iBAAmB,CAACC,EAAgBC,KAClC,MAAM,SAAEhW,GAAa+V,EAErB,OADAF,KAAKF,mBAAqB3V,EACnB6V,KAAKD,4BAA4BG,EAAgBC,GACzD,CAEDC,aAAAA,CAAcC,EAAMC,GAClB,MAAOC,EAAcC,GAAgBH,EAAKI,QAAQC,OAAO7W,IAAI8W,GAC3DX,KAAKF,mBAAmBc,cAAcD,IAOxC,MAFkB,CAAC,GAFFzL,KAAK2L,MAAqD,IAQ/E,SAA0BC,EAAQC,GAChC,MAAMC,EAAKF,EAAO,GAAKC,EAAO,GACxBE,EAAKH,EAAO,GAAKC,EAAO,GAC9B,OAAO7L,KAAKgM,KAAKF,EAAKA,EAAKC,EAAKA,EAClC,CAZgCE,CAAiBZ,EAAcC,IAAuB,QAKpF,EAtBId,EACG0B,SAAW,kBAsCpB,UAEO,SAASC,EACd7Y,EACA8Y,GAEA,MAAM,gBAAEC,EAAe,oBAAEpQ,GAAwB3I,EAAgBK,SAG3D2Y,EAA6BF,EAAa1H,QAE9C6H,YAAY,SAAEC,EAAUrB,KAAMsB,IAC5BH,GACII,kBAAmB9N,GAAY4N,EACjCxB,EAAiBX,EAAgCpO,IACjD,SAAEhH,GAAa+V,EAEfhW,EACJgL,KAAK2L,MACoF,IA3B7F,SAA0BgB,EAAMC,GAC9B,MAAMd,EAAKa,EAAK,GAAKC,EAAK,GACpBb,EAAKY,EAAK,GAAKC,EAAK,GACpBC,EAAKF,EAAK,GAAKC,EAAK,GAE1B,OAAO5M,KAAKgM,KAAKF,EAAKA,EAAKC,EAAKA,EAAKc,EAAKA,EAC5C,CAqBMC,CAAiBL,EAAelB,QAAQC,OAAO,GAAIiB,EAAelB,QAAQC,OAAO,KAC/E,IAYN,OAAO,IAAIuB,QAAQ,CAACC,EAASC,KACtBZ,GAKLa,EAAAA,EAAAA,iBAAgB,CACdb,kBACAc,MAAO,cACPC,YAAa,gCACbC,aAAc,GAAGrY,MAChBsY,KAAKC,IArBgBC,KACxB,MAAMC,EAAeD,EAAYxY,EAGjCuV,EAAsB3L,EAAS3J,EAASyY,qBAAsB,CAC5DC,KAAM,OACNC,MAAO,EAAIH,KAgBXI,CAAkBC,OAAOC,WAAWR,IACpCP,GAAQ,KAXRC,EAAO,qCAcb,C,eC9FA,MAAMe,EAA6C,IAAIC,IAYjDC,EAA6B,CAEjCC,IAAKA,CAACvP,EAAS4N,KACTwB,EAAuBzK,IAAI3E,KAAa4N,GAI5CwB,EAAuBI,IAAIxP,EAAS4N,IAItCjJ,IAAKA,CAACoK,EAAcU,KAClB,IAAIxU,MAAMC,QAAQuU,IAGL,uBAATV,EAGJ,OAAOK,EAAuBzK,IAAI8K,KAKtCC,EAAAA,SAAAA,YAAqBJ,EAA2B3K,IAAK,KAErD,UCZA,MAAMgL,UAA+BC,EAAAA,sBASnC9D,WAAAA,CACE+D,EAAY,CAAC,EACbC,EAAmB,CACjBC,0BAA2B,GAC3BC,cAAe,CACbC,UAAW,CAAC,IAAK,IAAK,IAAK,QAI/BC,MAAML,EAAWC,GAAkB,KAGrCK,kBAAoB,OAAc,KAWlChE,iBAAmB,CAACC,EAAgBC,KAClC,MAAM,SAAEhW,GAAa+V,EAEfpM,EAAUkM,KAAKkE,qBAAqB/Z,GAC1C,IAAK2J,EACH,OAGF,MAAMqQ,EAAkBX,EAAAA,SAAAA,IAAa,qBAAsB1P,GACrDsQ,EAAWD,GAAiBC,SAGlC,OAAKA,GAAUla,QAKfka,EAAS5Y,QAAQ6Y,IACfA,EAAQld,IAAM,EACdkd,EAAQhd,IAAM,IAIhBoc,EAAuBa,sBAAsBxQ,EAASqQ,GAEtDnE,KAAKuE,eAAezQ,EAASqQ,EAAiBnE,KAAK8D,cAAcC,WAAWvB,KAAKgC,IAC/EA,EAAWJ,SAAS5Y,QAAQ6Y,IAC1BrE,KAAKyE,eAAevE,EAAgBC,EAAkBkE,QAInD,QAnBP,EAzBF,CAIUH,oBAAAA,CAAqB/Z,GAC7B,GAAIA,aAAoBua,EAAAA,eACtB,OAIF,OADiB1E,KAAK2E,YAAYxa,GAClBya,MAAM,YAAY,EACpC,CA4CQH,cAAAA,CAAevE,EAAgBC,EAAkB0E,GACvD,MAAM,SAAE1a,GAAa+V,EACfpM,EAAUkM,KAAKkE,qBAAqB/Z,GAC1C,IAAK2J,EACH,OAIF,MAAM,IAAEgR,EAAKC,QAAS5J,EAAO6J,KAAMC,EAAM,EAAE9d,EAAC,EAAEE,GAAMwd,EAC9CK,EAAyBtN,EAAAA,UAAAA,mBAA6B9D,EAAS,CACnE3M,EAAI,EACJE,EAAI,IAEA8d,EAAyBhb,EAASyW,cAAcsE,GAChDE,EAA6BxN,EAAAA,UAAAA,mBAA6B9D,EAAS,CAACqH,EAAO8J,IAC3EI,EAA6Blb,EAASyW,cAAcwE,GAIpDE,EAAc,iBAAiBR,IAC/BS,EAAuBpF,EAAiBqF,WAAWF,GAEnDG,EAAa,CACjB,UAAWH,EACXnK,MAAOkK,EAA2B,GAAKF,EAAuB,GAC9DF,OAAQI,EAA2B,GAAKF,EAAuB,GAC/Dhe,EAAGge,EAAuB,GAC1B9d,EAAG8d,EAAuB,GAC1BO,KAAMb,EAAYc,SAGpB,GACEC,MAAMH,EAAWte,IACjBye,MAAMH,EAAWpe,IACjBue,MAAMH,EAAWtK,QACjByK,MAAMH,EAAWR,QAGjB,OADA3L,QAAQuM,KAAK,gDAAiDJ,EAAW,aAClE,EAGT,GAAIF,EACFO,EAAAA,QAAAA,yBAAiCL,EAAYF,GAC7CpF,EAAiB4F,eAAeT,OAC3B,CACL,MAAMU,EAAkBxf,SAASyf,gBA3BrB,6BA2B4C,SACxDH,EAAAA,QAAAA,wBAAgCL,EAAYO,GAC5C7F,EAAiB+F,WAAWF,EAAiBV,EAC/C,CACA,OAAO,CACT,CAEA,oBAAcf,CACZzQ,EACAqQ,EACApI,GAKA,GAA8B,IAHPoI,EAAgBC,SAASjR,OAC9CkR,GAAWA,EAAQ8B,YAAc9B,EAAQsB,SAExBzb,OACjB,OAAOia,EAGT,MAAMC,QAAiBnC,QAAQmE,IAC7BjC,EAAgBC,SACbjR,OAAOkR,GAAWA,EAAQ8B,WAC1Btc,IAAIwc,MAAOhC,EAASiC,KACnB,IAAIH,EAAY,KAChB,GAAI9B,EAAQ8B,UAAUI,MACpBJ,EAAY9B,EAAQ8B,UAAUI,WACzB,GAAIlC,EAAQ8B,qBAAqBpX,MACtCoX,EAAY9B,EAAQ8B,UAAU,QACzB,GAAI9B,EAAQ8B,UAAUK,iBAC3BL,QAAkB9B,EAAQ8B,UAAUK,wBAC/B,GAAInC,EAAQ8B,UAAUM,aAAc,CACzC,MAAMC,GAAOC,EAAAA,EAAAA,IAAUtC,EAAQ8B,UAAUM,cAEzCN,QAD0BO,EAAKE,aAEjC,CAEA,IAAKT,EACH,OAGF,MAAMR,EAAU3F,KAAK6G,wBACnB,CAAE1L,MAAOkJ,EAAQU,QAASE,OAAQZ,EAAQW,MAC1CX,EAAQtI,OAASA,EACjBoK,GAGF,MAAO,IACF9B,EACHS,KAAKgC,EAAAA,EAAAA,MACLnB,UACA5J,YAMR,OAFAoI,EAAgBC,SAAWA,EAEpBD,CACT,CASQ4C,YAAAA,CAAaC,EAAkBC,GACrC,OACED,GACAC,GACAD,EAAO,KAAOC,EAAO,IACrBD,EAAO,KAAOC,EAAO,IACrBD,EAAO,KAAOC,EAAO,IACrBD,EAAO,KAAOC,EAAO,EAEzB,CAWQJ,uBAAAA,EAAwB,MAAE1L,EAAK,OAAE8J,GAAUlJ,EAAOmL,GACxD,MAAMC,EAAgB,IAAIC,SAASF,GAC7BG,EAAYlM,EAAQ8J,EAEpBqC,EAAS9gB,SAAS+gB,cAAc,UACtCD,EAAOnM,MAAQA,EACfmM,EAAOrC,OAASA,EAEhB,MAAMuC,EAAMF,EAAOG,WAAW,MAC9BD,EAAIE,UAAU,EAAG,EAAGvM,EAAO8J,GAC3BuC,EAAIG,yBAA2B,OAE/B,MAAMtP,EAAYmP,EAAIlP,aAAa,EAAG,EAAG6C,EAAO8J,GAC1C5E,EAAOhI,EAAUgI,KACvB,IAAK,IAAIuH,EAAI,EAAGC,EAAS,EAAGC,EAAU,EAAGF,EAAIP,EAAWO,IAClDT,EAAcY,SAASD,GAAY,GAAKD,IAC1CxH,EAAS,EAAJuH,GAAS7L,EAAM,GACpBsE,EAAS,EAAJuH,EAAQ,GAAK7L,EAAM,GACxBsE,EAAS,EAAJuH,EAAQ,GAAK7L,EAAM,GACxBsE,EAAS,EAAJuH,EAAQ,GAAK7L,EAAM,IAItB8L,GAAU,GACZA,EAAS,EACTC,KAEAD,IAKJ,OAFAL,EAAIQ,aAAa3P,EAAW,EAAG,GAExBiP,EAAOW,WAChB,EA9OIxE,EACGrC,SAAW,qBADdqC,EAOUa,sBAAwBlB,EAA2BC,IA0OnE,UC9IA,MAAM6E,EAAY,CAChBC,IAAKC,EAAAA,QAAQhH,SACbiH,cAAeC,EAAAA,kBAAkBlH,SACjCmH,YAAaC,EAAAA,gBAAgBpH,SAC7BqH,YAAaC,EAAAA,gBAAgBtH,SAC7BuH,KAAMC,EAAAA,SAASxH,SACfyH,aAAcC,EAAAA,iBAAiB1H,SAC/B2H,eAAgBC,EAAAA,mBAAmB5H,SACnC6H,OAAQtJ,EAAAA,WAAWyB,SACnB8H,UAAWC,EAAAA,cAAc/H,SACzBgI,MAAOC,EAAAA,UAAUjI,SACjBkI,aAAcC,EAAAA,iBAAiBnI,SAC/BoI,sBAAuBC,EAAAA,0BAA0BrI,SACjDsI,cAAeC,EAAAA,kBAAkBvI,SACjCwI,UAAWC,EAAAA,cAAczI,SACzB0I,cAAeC,EAAAA,kBAAkB3I,SACjC4I,MAAOC,EAAAA,UAAU7I,SACjB8I,UAAWC,EAAAA,cAAc/I,SACzBgJ,QAASC,EAAAA,YAAYjJ,SACrBkJ,WAAYC,EAAAA,eAAenJ,SAC3BoJ,MAAOC,EAAAA,UAAUrJ,SACjBsJ,UAAWC,EAAAA,cAAcvJ,SACzBwJ,eAAgBC,EAAAA,mBAAmBzJ,SACnC0J,gBAAiBpL,EAAoB0B,SACrC2J,oBAAqBA,EAAAA,oBAAoB3J,SACzC4J,eAAgBC,EAAAA,mBAAmB7J,SACnC8J,kBAAmBC,EAAAA,sBAAsB/J,SACzCgK,eAAgBC,EAAAA,mBAAmBjK,SACnCkK,mBAAoB7H,EAAuBrC,SAC3CmK,gBAAiBC,EAAAA,oBAAoBpK,SACrCqK,sBAAuBC,EAAAA,0BAA0BtK,SACjDuK,qBAAsBC,EAAAA,0BAA0BxK,SAChDyK,UAAWC,EAAAA,cAAc1K,SACzB2K,gBAAiBC,EAAAA,oBAAoB5K,SACrC6K,kBAAmBC,EAAAA,sBAAsB9K,SACzC+K,kBAAmBC,EAAAA,sBAAsBhL,SACzCiL,kBAAmBC,EAAAA,sBAAsBlL,SACzCmL,kCAAmCC,EAAAA,sCAAsCpL,SACzEqL,qBAAsBC,EAAAA,yBAAyBtL,SAC/CuL,cAAeC,EAAAA,kBAAkBxL,SACjCyL,aAAcC,EAAAA,iBAAiB1L,SAC/B2L,yBAA0BC,EAAAA,GAA6B5L,SACvD6L,eAAgBC,EAAAA,GAAmB9L,SACnC+L,kBAAmBC,EAAAA,sBAAsBhM,UCtJ3C,EAnBuB,CACrB,SACA,gBACA,YACA,gBACA,gBACA,QACA,YACA,QACA,eACA,oBACA,YACA,kBACA,4BACA,4BACA,gBACA,wB,eCdK,MAAMiM,EAAcC,GAClBC,EAAAA,QAAAA,mBAA2BD,GCDvBE,EAAeF,GACRG,EAAAA,WAAAA,oBAA+BH,GCqCpC,SAASI,EAAyB5Z,EAAS/H,EAAmB0V,GAC3E,GAAI3N,EACF,OAcJ,SAA4BA,GAC1B,MAAM6Z,EAAWC,EAAAA,SAAAA,IAAyB,WAAY9Z,GAEtD,MAAO,CACL+Z,eAAgBF,EAASE,eACzBtkB,kBAAmBokB,EAASpkB,kBAC5BukB,iBAAkBH,EAASG,iBAC3BC,YAAaJ,EAASI,aAAe,EAEzC,CAvBWC,CAAmBla,GAG5B,MAAM,SAAE4N,GAAaD,EACfrO,EA5CR,UAAuB,SAAEsO,EAAQ,kBAAE3V,IACjC,MAAM,SAAEkM,GAAayJ,EAErB,GAAIzJ,EAAW,CACb,MAAM7E,EAAarH,EAAkBkiB,iBAAiB7a,GACpD6E,EAASxN,SAAS2I,EAAWtJ,MAC7B,GACF,GAAIsJ,EACF,OAAOA,EAETkG,QAAQuM,KAAK,0BAA2B5N,GACxCyJ,EAASzJ,SAAW,IACtB,CAEA,IAAKyJ,EAAS/N,oBACV,MAAM,IAAInH,MACR,wFAGJ,MAAM4G,EAAarE,MAAMmf,KAAKniB,EAAkBoiB,qBAAqBC,UAAUjW,KAC7ExF,GAAMA,EAAGgb,UAAUha,sBAAwB+N,EAAS/N,qBAGtD,IAAKP,EACH,MAAM,IAAI5G,MAAM,4EAGlB,OAAO4G,CAEX,CAeqBib,CAAc,CAAE3M,WAAU3V,uBACvC,iBAAE+hB,EAAgB,kBAAEvkB,GAAsB6J,EAEhD,MAAO,CACLya,oBAAgB5Z,EAChB1K,oBACAukB,mBAEJ,CChDA,MAAM7E,EAAS,CACbqF,aAAc3kB,MAQd4kB,cAAeA,CACbC,EACAziB,EACArD,EACA+lB,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAO/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,yCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GAyBpB,OAxBAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,OAAElJ,EAAM,KAAEilB,EAAO,MAASF,EAEhCD,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACAoB,OACAjlB,aAIG8kB,CACT,CAlE8BI,CAAqB3N,EAAY1V,GAErDc,EA0GV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,OAAE3C,EAAM,aAAEglB,EAAY,eAAErB,EAAc,YAAEE,EAAW,KAAEoB,GAASL,EAAkB,GAEhFnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAEnE,GAAI7jB,QACF,OAAO2C,EAET,MAAM2iB,EAAgBze,EAAAA,GAAM9B,YAAY/E,EAAQ,GAIhD,OAHA2C,EAAYI,QAAQvB,KAAK,GAAG8jB,KAAiBL,KAC7CtiB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,KAExD1iB,CACT,CAzIwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACA3lB,WACAwlB,YACAhN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,EAAkB,IAAIf,aAAe,EAClD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAtBgBA,IAsEtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,sBAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,OAAEvX,EAAM,KAAEilB,GAAS1N,EACzBsD,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAKxB,GACZ6a,EAAQrZ,KAAK,QACb0iB,EAAO1iB,KAAKyjB,KAGVxb,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UAIb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CAtGMyB,CAAWf,EAAmBpO,EAAQ/M,MAyI5C,UC7Me,SAASmc,EAAqBpP,GAC3C,GAAIA,EAAOqP,UAAYrP,EAAOsP,UAAW,CACvC,MAAMvP,EAAU,CAAC,EAKjB,OAJAA,EAAQwP,MAAQvP,EAAOqP,SAAS,GAChCtP,EAAQyP,IAAMxP,EAAOqP,SAAS,GAC9BtP,EAAQ0P,mBAAqBzP,EAAOqP,SAAS,GAC7CtP,EAAQ2P,iBAAmB1P,EAAOqP,SAAS,GACpCtP,CACT,CAEA,OAAOC,EACJ7W,IAAI,CAAC8W,EAAGiH,IAAOA,EAAI,IAAO,EAAI,CAAEqI,MAAOtP,GAAM,CAAEuP,IAAKvP,IACpDvH,OAAO,CAACiX,EAAKhe,IAAS5D,OAAO6hB,OAAOD,EAAK,IAAKhe,IAAS,CAAC,EAC7D,CCNA,SAASke,EAAqBjD,GAC5B,OAAOkD,EAAAA,WAAAA,UAAAA,qBAAuDlD,EAChE,CAOA,SAASmD,EAAsBnD,EAAuBoD,GAC1BH,EAAqBjD,KAErBoD,GACxBF,EAAAA,WAAAA,UAAAA,sBAAwDlD,EAAeoD,EAE3E,CAEA,SAASC,EAA2BjqB,GAClC,MAAOkqB,GAAyBJ,EAAAA,WAAAA,UAAAA,0BAA8D,GAE9F,GAAII,EACF,OAAOJ,EAAAA,WAAAA,MAA8BK,cAAcD,EAEvD,CC9BA,MAEA,EAFuBzB,GAAiB,MAARA,EAAe,GAAKA,ECO9CrF,EAAgB,CACpBwE,aAAc3kB,MACd4kB,cAAeA,CACbC,EACAziB,EACArD,EACA+lB,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAE/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,yCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,EAAc,CAAC,GAAMgR,GACvB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GA0BpB,OAzBAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,OAAElJ,EAAM,MAAEiR,EAAK,KAAEgU,GAASF,EAEhCD,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACAoB,OACAjlB,SACAiR,YAIG6T,CACT,CAnE8BI,CAAqB3N,EAAY1V,GAErDc,EAyGV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,OAAE3C,EAAM,MAAEiR,EAAK,KAAEgU,EAAI,aAAED,EAAY,eAAErB,EAAc,YAAEE,GAAgBe,EAAkB,GACvFU,EAAgBze,EAAAA,GAAM9B,YAAY/E,EAAQ,GAC1C4mB,EAAe/f,EAAAA,GAAM9B,YAAYkM,EAAO,GAExCwS,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAMnE,OAJAlhB,EAAYI,QAAQvB,KAAK,MAAM8jB,KAAiBuB,EAAe5B,MAC/DtiB,EAAYI,QAAQvB,KAAK,MAAMolB,KAAgBC,EAAe5B,MAC9DtiB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,KAExD1iB,CACT,CAvIwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACA3lB,WACAwlB,YACAhN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,EAAkB,IAAIf,aAAe,EAClD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAtBgBA,IAuEtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,6BAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,OAAEvX,EAAM,MAAEiR,EAAK,KAAEgU,GAAS1N,EAChCsD,EAAQrZ,KAAK,SAAU,QAAS,QAChC0iB,EAAO1iB,KAAKxB,EAAQiR,EAAOgU,KAGzBxb,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UAIb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CArGMyB,CAAWf,EAAmBpO,EAAQ/M,MAuI5C,UC7Laqd,EAA4BA,CAACC,EAAS9B,EAAM3gB,KACvD,GAAIO,MAAMC,QAAQiiB,IAAYA,EAAQ/mB,OAAS,EAAG,CAChD,MAAMgnB,EAAUD,EAAQpnB,IAAIsnB,GAAUpgB,EAAAA,GAAM9B,YAAYkiB,EAAQ,IAChE,MAAO,GAAG3iB,EAAI4iB,OAAO,GAAGC,cAAgB7iB,EAAI8iB,MAAM,OAAOJ,EAAQtB,KAAK,SAASmB,EAAe5B,IAChG,CAEA,MAAM3a,EAASzD,EAAAA,GAAM9B,YAAYgiB,EAAS,GAC1C,MAAO,GAAGziB,EAAI4iB,OAAO,GAAGC,cAAgB7iB,EAAI8iB,MAAM,OAAO9c,KAAUuc,EAAe5B,MCF9EzF,EAAgB,CACpB4E,aAAc3kB,MACd4kB,cAAeA,CACbC,EACAziB,EACArD,EACA+lB,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAE/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,yCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GACduC,EAAkB,IAAIC,IAyC5B,OAvCA/iB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,KAAEqe,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,SAAE1gB,EAAQ,SAAE2gB,EAAQ,aAAEC,GAAiB5C,EAGlEhe,GAAYsgB,EAAgBO,IAAI7gB,KAKhCA,GACFsgB,EAAgBlO,IAAIpS,GAGtB+d,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACA9c,WACAke,KAAM0C,EACND,WACAH,OACAC,SACA5a,MACA6a,YAIG3C,CACT,CAnF8BI,CAAqB3N,EAAY1V,GAErDc,EA8HV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,KAAE8kB,EAAI,eAAE9D,EAAc,YAAEE,EAAW,SAAE6D,GAAa9C,EAAkB,GAEpEnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAE7DgE,EAAchhB,EAAAA,GAAM9B,YAAY0iB,EAAM,GAY5C,OAXA9kB,EAAYI,QAAQvB,KAAK,GAAGqmB,KAAehB,EAAea,MAG1D9C,EAAkBtjB,QAAQwmB,IACxB,MAAM,KAAE7C,EAAI,IAAErY,EAAG,aAAEoY,GAAiB8C,EAE9BC,EAASjB,EAA0Bla,EAAKqY,EAAM,OACpDtiB,EAAYI,QAAQvB,KAAKumB,GACzBplB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,OAG1D1iB,CACT,CAlKwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACAnN,WACAxY,WACAwlB,YACA9kB,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,EAAkB,IAAIf,aAAe,EAClD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAtBgBA,IAuFtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,6BAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,KAAEgQ,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,KAAExC,EAAI,SAAEyC,GAAanQ,EAE/CgQ,GAAStC,GAASrY,GAAQ6a,IAI/B5M,EAAQrZ,KAAK,QAAQyjB,KAAS,SAASA,KAAS,QAAQA,KAAS,OAAQ,QACzEf,EAAO1iB,KAAKoL,EAAK2a,EAAMC,EAAQC,EAAMC,MAGnCje,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UAIb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CA1HMyB,CAAWf,EAAmBpO,EAAQ/M,MAkK5C,UCpNMiW,EAAY,CAChB0E,aAAc3kB,MACd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAE/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,yCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,EAAY,CAAC,GAAMgR,GACrB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GACduC,EAAkB,IAAIC,IAuC5B,OAtCA/iB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,KAAEqe,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,SAAE1gB,EAAQ,SAAE2gB,EAAQ,aAAEC,EAAY,UAAEM,EAAS,WAAEC,GAC5EnD,EAEEhe,GAAYsgB,EAAgBO,IAAI7gB,KAIpCsgB,EAAgBlO,IAAIpS,GAEpB+d,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACA9c,WACAke,KAAM0C,EACNJ,OACAC,SACA5a,MACA6a,OACAC,WACAO,YACAC,kBAIGpD,CACT,CAjF8BI,CAAqB3N,EAAY1V,GAErDc,EA4HV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,KAAE8kB,EAAI,eAAE9D,EAAc,YAAEE,EAAW,SAAE6D,GAAa9C,EAAkB,GAEpEnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAGnE,IAAKnI,MAAM+L,GAAO,CAChB,MAAMI,EAAchhB,EAAAA,GAAM9B,YAAY0iB,GAAQ,EAAG,GACjD9kB,EAAYI,QAAQvB,KAAK,GAAGqmB,KAAehB,EAAea,KAC5D,CAgBA,OAbA9C,EAAkBtjB,QAAQwmB,IACxB,MAAM,KAAE7C,EAAI,UAAEgD,EAAS,WAAEC,EAAU,IAAEtb,EAAG,aAAEoY,GAAiB8C,EAE3D,GAAKpM,MAAM9O,IAGJ,GAAIqb,IAAcvM,MAAMuM,GAAY,CACzC,MAAME,EAAerB,EAA0BmB,EAAWC,EAAY,aACtEvlB,EAAYI,QAAQvB,KAAK2mB,EAC3B,MANiB,CACf,MAAMJ,EAASjB,EAA0Bla,EAAKqY,EAAM,OACpDtiB,EAAYI,QAAQvB,KAAKumB,EAC3B,CAIAplB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,OAG1D1iB,CACT,CAxKwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACA3lB,WACAwlB,YACAhN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,EAAkB,IAAIf,aAAe,EAClD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAtBgBA,IAqFtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,yBAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,KAAEgQ,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,KAAExC,EAAI,SAAEyC,GAAanQ,EAE/CgQ,GAAStC,GAASrY,GAAQ6a,IAI/B5M,EAAQrZ,KAAK,QAAQyjB,KAAS,SAASA,KAAS,QAAQA,KAAS,OAAQ,QACzEf,EAAO1iB,KAAKoL,EAAK2a,EAAMC,EAAQC,EAAMC,MAGnCje,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UAIb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CAxHMyB,CAAWf,EAAmBpO,EAAQ/M,MAwK5C,UC7NM0U,EAAgB,CACpBiG,aAAc3kB,MAQd4kB,cAAeA,CACbC,EACAziB,EACArD,EACA+lB,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,yCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA6BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,KAAEzU,GAASqT,GACX,kBAAEuB,GAAsBF,EAExBsN,EAAc,IAEd,eAAEnB,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,EAUzB,OARA4b,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACA/gB,SAGKgiB,CACT,CAvD8BI,CAAqB3N,EAAY1V,GAErDc,EAuDV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAGT,MAAM,aAAEqiB,EAAY,eAAErB,EAAc,YAAEE,EAAW,KAAE/gB,GAAS8hB,EAAkB,GAExEnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAG/D/gB,GACFH,EAAYI,QAAQvB,KAAKsB,GAM3B,OAFAH,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,KAExD1iB,CACT,CAtFwB4iB,CAAeX,EAAmB1b,GAGtD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACA3lB,WACAwlB,YACAhN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,EAAkB,IAAIf,aAAe,EAClD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UArBgBA,IAuFtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAEfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,2BAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,KAAEzU,GAASyU,EACjBsD,EAAQrZ,KAAK,QACb0iB,EAAO1iB,KAAKsB,KAGV2G,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CAlH4ByB,CAAWf,EAAmBpO,EAAQ/M,MAmHlE,WCxKMuW,GAAY,CAChBoE,aAAc3kB,MAQd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAE/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,6CACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAE9B,IAAKrS,EACH,OAKF,IAFgBZ,OAAOsgB,KAAK1f,GAEfnF,OACX,OAGF,MAAM8kB,EAAc,GA0BpB,OAzBAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,MAAEkf,GAAUrD,EACZE,EAAO,IAEbH,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACAoB,OACAmD,YAIGtD,CACT,CAxE8BI,CAAqB3N,EAAY1V,GAErDc,EA8GV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,MAAEylB,EAAK,KAAEnD,EAAI,aAAED,EAAY,eAAErB,EAAc,YAAEE,GAAgBe,EAAkB,GAE/EnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GACnE,QAAc9Z,IAAVqe,EACF,OAAOzlB,EAET,MAAM0lB,EAAexhB,EAAAA,GAAM9B,YAAYqjB,EAAO,GAK9C,OAHAzlB,EAAYI,QAAQvB,KAAK,GAAG6mB,KAAgBxB,EAAe5B,MAC3DtiB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,KAExD1iB,CACT,CA7IwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACA3lB,WACAwlB,YACAhN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,IAAoB,IAAIf,aAAe,EACpD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAtBgBA,IA4EtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,yBAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,MAAE6Q,EAAK,KAAEnD,GAAS1N,EACxBsD,EAAQrZ,KAAK,UAAUyjB,MACvBf,EAAO1iB,KAAK4mB,KAGV3e,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UAIb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CA1GMyB,CAAWf,EAAmBpO,EAAQ/M,MA6I5C,YCtMMqW,GAAQ,CACZsE,aAAc3kB,MAQd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,yCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,OAGF,MAAM8kB,EAAc,GA0BpB,OAzBAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,MAAEkf,GAAUrD,EACZE,EAAO,IAEbH,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACAoB,OACAmD,YAIGtD,CACT,CAnE8BI,CAAqB3N,EAAY1V,GAErDc,EAyGV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,MAAEylB,EAAK,KAAEnD,EAAI,aAAED,EAAY,eAAErB,EAAc,YAAEE,GAAgBe,EAAkB,GAE/EnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GACnE,QAAc9Z,IAAVqe,EACF,OAAOzlB,EAET,MAAM0lB,EAAexhB,EAAAA,GAAM9B,YAAYqjB,EAAO,GAK9C,OAHAzlB,EAAYI,QAAQvB,KAAK,GAAG6mB,KAAgBxB,EAAe5B,MAC3DtiB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,KAExD1iB,CACT,CAxIwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACA3lB,WACAwlB,YACAhN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBC,YAAae,IAAoB,IAAIf,aAAe,EACpD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UArBgBA,IAuEtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,qBAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,MAAE6Q,EAAK,KAAEnD,GAAS1N,EACxBsD,EAAQrZ,KAAK,UAAUyjB,MACvBf,EAAO1iB,KAAK4mB,KAGV3e,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UAIb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CArGMyB,CAAWf,EAAmBpO,EAAQ/M,GAqBtCiO,uBAmHN,YC7LMqK,GAAoB,CACxBqC,aAAc3kB,MAYd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQyD,MAAM,oDACP,KAGT,MAAM,SAAEqE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAE7D,IADsBiN,EAAgBlkB,SAAS2W,GAE7C,MAAM,IAAI5U,MAAM,QAAQ4U,mBAG1B,MAAM,eAAEyM,EAAc,kBAAEtkB,EAAiB,YAAEwkB,EAAW,iBAAED,GACtDJ,EAAyB9L,EAAmB7V,EAAmB0V,GAEjE,IAAIrO,EAEFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAMulB,EAkCV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAE9B,IAAKrS,EACH,OAKF,IAFgBZ,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GA8BpB,OA7BAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,KAAEqe,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,SAAE1gB,EAAQ,SAAE2gB,EAAQ,aAAEC,GAAiB5C,EAEtED,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACA9c,WACAke,KAAM0C,EACNJ,OACAC,SACA5a,MACA6a,OACAC,eAIG5C,CACT,CAhF8BI,CAAqB3N,EAAY1V,GACrDc,EAiIV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,KAAE8kB,EAAI,eAAE9D,EAAc,YAAEE,EAAW,SAAE6D,GAAa9C,EAAkB,GAEpEnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAE7DgE,EAAchhB,EAAAA,GAAM9B,YAAY0iB,GAAQ,EAAG,GAYjD,OAXA9kB,EAAYI,QAAQvB,KAAK,GAAGqmB,KAAehB,EAAea,MAE1D9C,EAAkBtjB,QAAQwmB,IACxB,MAAM,KAAE7C,EAAI,IAAErY,EAAG,aAAEoY,GAAiB8C,EAE9BC,EAASjB,EAA0Bla,EAAKqY,EAAM,OAEpDtiB,EAAYI,QAAQvB,KAAKumB,GACzBplB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,OAG1D1iB,CACT,CArKwB4iB,CAAeX,EAAmB1b,GAEtD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,OAAQL,EAAKmS,QAAQC,SACrB5D,QAASxO,EAAKI,QAAQoO,QACtBnN,WACAqM,cACAnkB,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAR,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAAWA,IAqEjB,SAA8BlO,EAAY1T,GACxC,MAAM,kBAAEke,GAAsBle,EAAqBG,iBAAiB,6BAC9D,OAAEwkB,GAAWzG,EACblH,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,iCAGZ,MAAM,SAAEgW,EAAQ,KAAErB,GAASoB,EACrBrT,EAAQiS,EAAKhR,YAAY,WAAWqS,EAASE,qBAEnD8Q,EAAOlnB,QAAQ,EAAGmnB,OAAM9jB,YACtBkW,EAAQrZ,KAAKinB,GACbvkB,EAAMS,GAASuf,EAAO1iB,KAAK0C,EAAMS,IAAUuf,EAAO1iB,KAAK,mBAIrDgW,EAAS/N,sBACXoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKgW,EAAS/N,sBAInB0M,EAAKmS,QAAQC,WACf1N,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAK2U,EAAKmS,QAAQC,SAAS5oB,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAG/D,MAAO,CAAE7K,UAASqJ,SACpB,CArGuBwE,CAAqBnR,EAAY1T,GAClD7E,WACAwlB,eAkJN,YC3NMpF,GAAe,CACnBgF,aAAc3kB,MACd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EACpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAE/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,gDACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GAEduC,EAAkB,IAAIC,IAyC5B,OAxCA/iB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,KAAEqe,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,SAAE1gB,EAAQ,aAAE4gB,EAAY,SAAED,GAAa3C,EAGlEhe,GAAYsgB,EAAgBO,IAAI7gB,KAKhCA,GACFsgB,EAAgBlO,IAAIpS,GAGtB+d,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACA9c,WACAke,KAAM0C,EACNJ,OACAC,SACAhQ,WACA5K,MACA6a,OACAC,gBAIG5C,CACT,CApF8BI,CAAqB3N,EAAY1V,GAErDc,EA+HV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,KAAE8kB,EAAI,eAAE9D,EAAc,YAAEE,EAAW,SAAE6D,GAAa9C,EAAkB,GAEpEnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAG7DgE,EAAchhB,EAAAA,GAAM9B,YAAY0iB,GAAQ,EAAG,GAejD,OAdA9kB,EAAYI,QAAQvB,KAAK,GAAGqmB,KAAehB,EAAea,MAG1D9C,EAAkBtjB,QAAQwmB,IACxB,MAAM,KAAE7C,EAAI,IAAErY,EAAG,aAAEoY,GAAiB8C,EAEpC,GAAIhP,OAAO6P,SAAS/b,GAAM,CACxB,MAAMmb,EAASjB,EAA0Bla,EAAKqY,EAAM,OAEpDtiB,EAAYI,QAAQvB,KAAKumB,EAC3B,CACAplB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,OAG1D1iB,CACT,CAvKwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACAnN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,EAAkB,IAAIf,aAAe,EAClD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UApBgBA,IAwFtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,4BAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,KAAEgQ,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,KAAExC,EAAI,SAAEyC,GAAanQ,EAE/CgQ,GAAStC,GAASrY,GAAQ6a,IAI/B5M,EAAQrZ,KAAK,UAAW,OAAQ,UAAW,aAAc,OAAQ,QACjE0iB,EAAO1iB,KAAKoL,EAAK2a,EAAMC,EAAQvC,EAAMwC,EAAMC,MAGzCje,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UAIb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CA3HMyB,CAAWf,EAAmBpO,EAAQ/M,GAoBtCzK,WACAwlB,eAkJN,YCrNM7C,GAAY,CAChByC,aAAc3kB,MAcd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,4CACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAE7D,IADsBiN,EAAgBlkB,SAAS2W,GAE7C,MAAM,IAAI5U,MAAM,QAAQ4U,mBAG1B,MAAM,eAAEyM,EAAc,kBAAEtkB,EAAiB,YAAEwkB,EAAW,iBAAED,GACtDJ,EAAyB9L,EAAmB7V,EAAmB0V,GAEjE,IAAIrO,EAEFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAMulB,EAkCV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GA8BpB,OA7BAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,KAAEqe,EAAI,OAAEC,EAAM,IAAE5a,EAAG,KAAE6a,EAAI,SAAE1gB,EAAQ,SAAE2gB,EAAQ,aAAEC,GAAiB5C,EAEtED,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACA9c,WACAke,KAAM0C,EACNJ,OACAC,SACA5a,MACA6a,OACAC,eAIG5C,CACT,CA3E8BI,CAAqB3N,EAAY1V,GACrDc,EA4HV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,KAAE8kB,EAAI,eAAE9D,EAAc,YAAEE,EAAW,SAAE6D,GAAa9C,EAAkB,GAEpEnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAIVjc,EAAWW,aAD7B,MAGMge,EAAchhB,EAAAA,GAAM9B,YAAY0iB,GAAQ,EAAG,GAajD,OAZA9kB,EAAYI,QAAQvB,KAAK,GAAGqmB,KAAehB,EAAea,MAYnD/kB,CACT,CAjKwB4iB,CAAeX,EAAmB1b,GAEtD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,OAAQL,EAAKmS,QAAQC,SACrB5D,QAASxO,EAAKI,QAAQoO,QACtBnN,WACAqM,cACAnkB,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAR,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAAWA,IAgEjB,SAA8BlO,EAAY1T,GACxC,MAAM,UAAE8d,GAAc9d,EAAqBG,iBAAiB,6BACtD,OAAEwkB,GAAW7G,EACb9G,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,yBAGZ,MAAM,SAAEgW,EAAQ,KAAErB,GAASoB,EACrBrT,EAAQiS,EAAKhR,YAAY,WAAWqS,EAASE,qBAEnD8Q,EAAOlnB,QAAQ,EAAGmnB,OAAM9jB,YACtBkW,EAAQrZ,KAAKinB,GACbvkB,EAAMS,GAASuf,EAAO1iB,KAAK0C,EAAMS,IAAUuf,EAAO1iB,KAAK,mBAIrDgW,EAAS/N,sBACXoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKgW,EAAS/N,sBAInB0M,EAAKmS,QAAQC,WACf1N,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAK2U,EAAKmS,QAAQC,SAAS5oB,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAG/D,MAAO,CAAE7K,UAASqJ,SACpB,CAhGuBwE,CAAqBnR,EAAY1T,GAClD7E,WACAwlB,eA8IN,YCzNM3C,GAAkB,CACtBuC,aAAc3kB,MAWd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EAEpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,2CACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAE7D,IADsBiN,EAAgBlkB,SAAS2W,GAE7C,MAAM,IAAI5U,MAAM,QAAQ4U,mBAG1B,MAAM,eAAEyM,EAAc,kBAAEtkB,EAAiB,YAAEwkB,EAAW,iBAAED,GACtDJ,EAAyB9L,EAAmB7V,EAAmB0V,GAEjE,IAAIrO,EAUJ,OAREA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAGlD,CACLO,IAAKwjB,EACLO,iBACAla,sBACA+M,OAAQL,EAAKmS,QAAQC,SACrB5D,QAASxO,EAAKI,QAAQoO,QACtBnN,WACAqM,cACAnkB,mBAAoBL,EACpBqY,oBACA8N,kBAAmB5B,EACnB1M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZzD,WACAwlB,YACA7hB,YAAa4iB,GAAehO,EAAYrO,EAAYrH,GACpDsU,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAAWA,IAajB,SAA8BlO,GAC5B,MAAMsD,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,wBAGZ,MAAM,SAAEgW,EAAQ,KAAErB,GAASoB,EAGvBC,EAAS/N,sBACXoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKgW,EAAS/N,sBAInB0M,EAAKmS,QAAQC,WAMf1N,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAK2U,EAAKmS,QAAQC,SAAS5oB,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAG/D,MAAO,CAAE7K,UAASqJ,SACpB,CA1CuBwE,CAAqBnR,MAmD5C,SAASgO,GAAehO,EAAYrO,EAAYrH,GAC9C,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,EAErB5U,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAKmT,EAAKhR,cAAgBgR,EAAKhR,YAAY,WAAWqS,EAASE,qBAC7D,OAAO/U,EAGT,MAAM,KAAE8kB,EAAI,SAAEC,GAAavR,EAAKhR,YAAY,WAAWqS,EAASE,sBAE1D,eAAEiM,EAAc,YAAEE,GAAgBL,EACtChM,EAASE,kBACT7V,EACA0V,GAGIkM,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAC7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,IAE7D,aAAEmB,GAAiB9b,EACzB,IAAI0f,EAAa,KAKjB,QAJqB7e,IAAjBib,IACF4D,EAAa,MAAM5D,IAAeI,IAAeC,KAG/CoC,EAAM,CACR,MAAMI,EAAchhB,EAAAA,GAAM9B,YAAY0iB,GAAQ,EAAG,GACjD9kB,EAAYI,QAAQvB,KAAK,GAAGqmB,KAAehB,EAAea,KAC5D,CAMA,OAJIkB,GACFjmB,EAAYK,UAAUxB,KAAKonB,GAGtBjmB,CACT,CAEA,YCxKMuc,GAAQ,CACZkF,aAAc3kB,MAQd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EACpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,wCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,GAAWL,EAAKI,QAElBqO,EA6BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,OAGF,MAAM8kB,EAAc,GA0BpB,OAzBAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,MAAEvE,GAAUogB,EACZE,EAAO,KAEbH,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACAoB,OACAtgB,YAIGmgB,CACT,CAlE8BI,CAAqB3N,EAAY1V,GAErDc,EAqGV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAGT,MAAM,MAAEgC,EAAK,KAAEsgB,EAAI,aAAED,EAAY,eAAErB,EAAc,YAAEE,GAAgBe,EAAkB,GAE/EnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAEnE,QAAc9Z,IAAVpF,EAAqB,CACvB,MAAMkkB,EAAehiB,EAAAA,GAAM9B,YAAYJ,EAAO,GAC9ChC,EAAYI,QAAQvB,KAAK,GAAGqnB,KAAgBhC,EAAe5B,MAC3DtiB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,IACjE,CAEA,OAAO1iB,CACT,CAlIwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAgB,WACAxY,WACAwlB,YACA9kB,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,IAAoB,IAAIf,aAAe,EACpD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UArBgBA,IAsEtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,qBAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,MAAE5S,EAAK,KAAEsgB,GAAS1N,EACxBsD,EAAQrZ,KAAK,UAAUyjB,MACvBf,EAAO1iB,KAAKmD,KAGV8E,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CAjGMyB,CAAWf,EAAmBpO,EAAQ/M,MAkI5C,YC1LM8X,GAAwB,CAC5B6C,aAAc3kB,MAQd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EACpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,yCACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GACzCJ,EAAyB9L,GAE3B,IAAIxO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAGzD,MAAM,OAAEmX,GAAWL,EAAKI,QAElBqO,EA4BV,SAA8BrN,EAAYuR,GACxC,MAAM,SAAEtR,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,OAGF,MAAM8kB,EAAc,GAiCpB,OAhCAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,GAEhC,IAAKsB,EACH,MAAM,IAAIpV,MAAM,2DAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GACzCL,EAAyB9L,GAErBxO,EAAa4f,EAAkBpE,+BACnCf,EACAtkB,EACAwkB,IAGI,aAAEmB,GAAiB9b,GACnB,QAAE6f,EAAO,QAAEC,EAAO,MAAEC,EAAK,WAAEC,EAAU,aAAEC,GAAiBpE,EAE9DD,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACAkF,UACAC,UACAC,QACAC,aACAC,mBAIGrE,CACT,CAxE8BI,CAAqB3N,EAAY1V,GAErDc,EAoHV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAGT,MAAM,QAAEomB,EAAO,QAAEC,EAAO,MAAEC,EAAK,WAAEC,EAAU,aAAElE,EAAY,eAAErB,EAAc,YAAEE,GACzEe,EAAkB,GAEdnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAC7D+E,EAAa,MAAM5D,IAAeI,IAAeC,IAEvD,QAAgBtb,IAAZgf,QAAqChf,IAAZif,EAC3B,OAAOrmB,EAGT,GAAIumB,EACFvmB,EAAYI,QAAQvB,KAAK,GAAGqF,EAAAA,GAAM9B,YAAYgkB,EAAQ,GAAI,MAAME,EAAM,UACjE,CACL,MAAMG,EAAQpe,KAAKkJ,IAAI6U,EAAQ,GAAKA,EAAQ,IACtCM,EAAQre,KAAKkJ,IAAI8U,EAAQ,GAAKA,EAAQ,IAC5CrmB,EAAYI,QAAQvB,KAAK,GAAGqF,EAAAA,GAAM9B,YAAYqkB,MAAUH,EAAM,MAC9DtmB,EAAYI,QAAQvB,KAAK,GAAGqF,EAAAA,GAAM9B,YAAYskB,MAAUJ,EAAM,KAChE,CAIA,OAFAtmB,EAAYK,UAAUxB,KAAKonB,GAEpBjmB,CACT,CA5JwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAgB,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBC,YAAae,IAAoB,IAAIf,aAAe,EACpD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAlBgBA,IA4EtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,qCAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,QAAEwR,EAAO,QAAEC,EAAO,MAAEC,EAAK,WAAEC,GAAe3R,EAChD,GAAI2R,EACFrO,EAAQrZ,KAAK,SAAWynB,EAAM,IAC9B/E,EAAO1iB,KAAKqF,EAAAA,GAAM9B,YAAYgkB,EAAQ,GAAI,QACrC,CACL,MAAMK,EAAQpe,KAAKkJ,IAAI6U,EAAQ,GAAKA,EAAQ,IACtCM,EAAQre,KAAKkJ,IAAI8U,EAAQ,GAAKA,EAAQ,IAC5CnO,EAAQrZ,KAAK,OAASynB,EAAM,IAC5B/E,EAAO1iB,KAAKqF,EAAAA,GAAM9B,YAAYqkB,EAAO,IACrCvO,EAAQrZ,KAAK,SAAWynB,EAAM,IAC9B/E,EAAO1iB,KAAKqF,EAAAA,GAAM9B,YAAYskB,EAAO,GACvC,IAGE5f,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CAhHMyB,CAAWf,EAAmBpO,EAAQ/M,GAkBtCzK,WACAwlB,eAyIN,YC9MMjC,GAAuB,CAC3B6B,aAAc3kB,MACd4kB,cAAeA,CACbC,EACAziB,EACArD,EACA+lB,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EACpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAE/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQyD,MAAM,uDACP,KAGT,MAAM,SAAEqE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GAAqBJ,EAC9D9L,EACA7V,EACA0V,GAGF,IAAIrO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAAmB,GAG5E,MAAM,OAAEmX,EAAM,QAAEmO,GAAYxO,EAAKI,QAE3BqO,EA8BV,SAA8BrN,EAAY1V,GACxC,MAAM,SAAE2V,EAAQ,KAAErB,GAASoB,GACrB,YAAEpS,GAAgBgR,GAClB,kBAAEuB,GAAsBF,EAG9B,IAFgBjT,OAAOsgB,KAAK1f,GAEfnF,OACX,MAAO,GAGT,MAAM8kB,EAAc,GA0BpB,OAzBAvgB,OAAOsgB,KAAK1f,GAAa7D,QAAQ8U,IAC/B,MAAM2O,EAAc5f,EAAYiR,IAE1B,eAAEuN,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GAAgBL,EACzD9L,EACA7V,EACA0V,GAGIrO,EAAarH,EAAkBO,wBAAwB/C,GAAmB,IAE1E,aAAE2lB,GAAiB9b,GACnB,OAAElJ,EAAM,MAAEiR,EAAK,KAAEgU,GAASF,EAEhCD,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACAoB,OACAjlB,SACAiR,YAIG6T,CACT,CAnE8BI,CAAqB3N,EAAY1V,GAErDc,EAiGV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAIT,MAAM,OAAE3C,EAAM,MAAEiR,EAAK,KAAEgU,EAAI,aAAED,EAAY,eAAErB,EAAc,YAAEE,GAAgBe,EAAkB,GACvFU,EAAgBze,EAAAA,GAAM9B,YAAY/E,EAAQ,GAC1C4mB,EAAe/f,EAAAA,GAAM9B,YAAYkM,EAAO,GAExCwS,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAMnE,OAJAlhB,EAAYI,QAAQvB,KAAK,MAAM8jB,KAAiBuB,EAAe5B,MAC/DtiB,EAAYI,QAAQvB,KAAK,MAAMolB,KAAgBC,EAAe5B,MAC9DtiB,EAAYK,UAAUxB,KAAK,MAAMwjB,IAAeI,IAAeC,KAExD1iB,CACT,CA/HwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAmO,UACA3lB,WACAwlB,YACAhN,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBlM,oBACAmM,YAAae,EAAkB,IAAIf,aAAe,EAClD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAtBgBA,IAkEtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,oCAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,OAAEvX,EAAM,MAAEiR,EAAK,KAAEgU,GAAS1N,EAChCsD,EAAQrZ,KAAK,SAAU,QAAS,QAChC0iB,EAAO1iB,KAAKxB,EAAQiR,EAAOgU,KAGzBxb,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CA7FMyB,CAAWf,EAAmBpO,EAAQ/M,MA+H5C,YCjLM6f,GAAwB,CAC5BlF,aAAc3kB,MAQd4kB,cAAeA,CACbC,EACAziB,EACAmmB,EACAzD,EACA1gB,KAEA,MAAM,WAAE0T,GAAe+M,GACjB,SAAE9M,EAAQ,KAAErB,EAAI,cAAEiN,GAAkB7L,EACpCvY,EAAWmkB,EAAYC,GACvBoB,EAAYlB,EAAaF,GAC/B,IAAK5L,IAAarB,EAEhB,OADA/G,QAAQuM,KAAK,wDACN,KAGT,MAAM,SAAEzE,EAAQ,kBAAEQ,EAAiB,oBAAEjO,GAAwB+N,EAG7D,IAFsBiN,EAAgBlkB,SAAS2W,GAG7C,MAAM,IAAI5U,MAAM,sBAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,iBAAEukB,GACzCJ,EAAyB9L,GAE3B,IAAIxO,EAGFA,EADEya,EACW9hB,EAAkB6iB,+BAC7Bf,EACAtkB,GAGWwC,EAAkBO,wBAAwB/C,GAGzD,MAAM,OAAEmX,GAAWL,EAAKI,QAElBqO,EA4BV,SAA8BrN,EAAYuR,GACxC,MAAM,SAAEtR,GAAaD,GACf,eAAEgS,GAAmBhS,EAAWpB,MAChC,kBAAEuB,GAAsBF,EAExBsN,EAAc,GACpB,IAAKpN,EACH,MAAM,IAAIpV,MAAM,2DAGlB,MAAM,eAAEqhB,EAAc,kBAAEtkB,EAAiB,YAAEwkB,GACzCL,EAAyB9L,GAErBxO,EAAa4f,EAAkBpE,+BACnCf,EACAtkB,EACAwkB,IAGI,aAAEmB,GAAiB9b,EAUzB,OARA4b,EAAYtjB,KAAK,CACfnC,oBACAskB,iBACAqB,eACAnB,cACA0F,mBAGKzE,CACT,CA1D8BI,CAAqB3N,EAAY1V,GAErDc,EA6FV,SAAwBiiB,EAAmB1b,GACzC,MAAMvG,EAAc,CAClBI,QAAS,GACTC,UAAW,IAGb,IAAK4hB,IAAsBA,EAAkB5kB,OAC3C,OAAO2C,EAGT,MAAM,eAAE4mB,EAAc,aAAEvE,EAAY,eAAErB,EAAc,YAAEE,GAAgBe,EAAkB,GAElFnB,EAAWva,EAAW7G,UAAU4L,KAAKtE,GAASA,EAAMga,iBAAmBA,GAE7E,IAAIwB,EACA1B,IACF0B,EAAiB1B,EAAS0B,gBAG5B,MAAMC,EAAeD,EAAiB,OAAOA,IAAmB,GAC1DE,EAAYnc,EAAWW,aAAe,OAAOga,IAAgB,GAC7D+E,EAAa,MAAM5D,IAAeI,IAAeC,IAKvD,OAHA1iB,EAAYI,QAAQvB,KAAK,gBAAgB+nB,KACzC5mB,EAAYK,UAAUxB,KAAKonB,GAEpBjmB,CACT,CAxHwB4iB,CAAeX,EAAmB1b,GAItD,MAAO,CACLtJ,IAAKwjB,EACLO,iBACAla,sBACA+M,SACAgB,WACA9X,mBAAoBL,EACpBmmB,kBAAmB5B,EACnBC,YAAae,IAAoB,IAAIf,aAAe,EACpD3M,SAAUM,EAASN,SACnBxO,sBAAuBQ,EAAWR,sBAClCjG,MAAO0T,EAAK1T,MACZE,YAAaA,EACbwT,KAAMA,EAAKhR,YACXwT,KAAM4L,EAAyBrN,GAC/BuO,UAlBgBA,IA8DtB,SAAoBb,EAAmBpO,EAAQ/M,GAC7C,MAAMoR,EAAU,GACVqJ,EAAS,GAGfrJ,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK,qCAEZojB,EAAkBtjB,QAAQiW,IACxB,MAAM,eAAEgS,GAAmBhS,EAC3BsD,EAAQrZ,KAAK,kBACb0iB,EAAO1iB,KAAK+nB,KAGV9f,IACFoR,EAAQrZ,KAAK,uBACb0iB,EAAO1iB,KAAKiI,IAGV+M,IACFqE,EAAQrZ,KAAK,UACb0iB,EAAO1iB,KAAKgV,EAAO7W,IAAI8W,GAAKA,EAAEiP,KAAK,MAAMA,KAAK,OAGhD,MAAO,CACL7K,UACAqJ,SAEJ,CAzFMyB,CAAWf,EAAmBpO,EAAQ/M,GAkBtCzK,WACAwlB,eAqGN,YC+IA,GAhT0CgF,CACxC9qB,EACAmD,EACArD,EACAqF,KAUA,MAAM4lB,EAA4BC,IAChC,MAAM,SAAEC,EAAQ,QAAEC,EAAO,OAAEC,EAAM,UAAEC,EAAS,cAAEC,EAAa,MAAEC,EAAK,MAAEC,GAClEC,EAAAA,GAAmBC,YAsBrB,MAjBgC,CAC9BpL,OAAQ4K,EACRnK,cAAeoK,EACflK,UAAWmK,EACXzK,aAAc0K,EACd/H,kBAAmB4H,EACnB/J,cAAemK,EACf5L,cAAe6L,EACfhK,UAAWiK,EACXnK,MAAOmK,EACPtI,UAAWgI,EACX9H,gBAAiB8H,EACjBzK,MAAO8K,EACPzI,sBAAuBoI,EACvBpH,qBAAsBwH,GAGOL,IAuQjC,MApQkB,CAChB3K,OAAQ,CACNqF,aAAcrF,EAAOqF,aACrBC,cAAe+F,GACbrL,EAAOsF,cACL+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,SAC1CnT,OAAQ,KAIdoJ,cAAe,CACbwE,aAAcxE,EAAcwE,aAC5BC,cAAe+F,GACbxK,EAAcyE,cACZ+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAGhB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,SAC1CnT,OAAQ,GAEV,CACE8T,UAAWJ,EAAAA,GAAmBC,YAAYR,SAC1CnT,OAAQ,KAId+L,qBAAsB,CACpB6B,aAAc7B,GAAqB6B,aACnCC,cAAe+F,GACb7H,GAAqB8B,cACnB+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,SAC1CnT,OAAQ,GAEV,CACE8T,UAAWJ,EAAAA,GAAmBC,YAAYR,SAC1CnT,OAAQ,KAIdgJ,cAAe,CACb4E,aAAc5E,EAAc4E,aAC5BC,cAAe+F,GACb5K,EAAc6E,cACZ+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYP,WAIhDlK,UAAW,CACT0E,aAAc1E,EAAU0E,aACxBC,cAAe+F,GACb1K,EAAU2E,cACR+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYN,UAIhDzK,aAAc,CACZgF,aAAchF,GAAagF,aAC3BC,cAAe+F,GACbhL,GAAaiF,cACX+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,YAIhD5H,kBAAmB,CACjBqC,aAAcrC,GAAkBqC,aAChCC,cAAe+F,GACbrI,GAAkBsC,cAChB+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,YAIhDhI,UAAW,CACTyC,aAAczC,GAAUyC,aACxBC,cAAe+F,GACbzI,GAAU0C,cACR+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,YAIhD9H,gBAAiB,CACfuC,aAAcvC,GAAgBuC,aAC9BC,cAAe+F,GACbvI,GAAgBwC,cACd+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,YAIhDxL,cAAe,CACbiG,aAAcjG,GAAciG,aAC5BC,cAAe+F,GACbjM,GAAckG,cACZ+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYH,MAC1CxT,OAAQ,KAId0I,MAAO,CACLkF,aAAclF,GAAMkF,aACpBC,cAAe+F,GACblL,GAAMmF,cACJ+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYH,MAC1CxT,OAAQ,KAIdwJ,UAAW,CACToE,aAAcpE,GAAUoE,aACxBC,cAAe+F,GACbpK,GAAUqE,cACR+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYF,SAIhDnK,MAAO,CACLsE,aAActE,GAAMsE,aACpBC,cAAe+F,GACbtK,GAAMuE,cACJ+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYF,SAIhD1I,sBAAuB,CACrB6C,aAAc7C,GAAsB6C,aACpCC,cAAe+F,GACb7I,GAAsB8C,cACpB+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,SAC1CnT,OAAQ,KAId8S,sBAAuB,CACrBlF,aAAckF,GAAsBlF,aACpCC,cAAe+F,GACbd,GAAsBjF,cACpB+F,EACAvoB,EACArD,EACAirB,EACA5lB,GAEJwmB,iBAAkB,CAChB,CACEC,UAAWJ,EAAAA,GAAmBC,YAAYR,SAC1CnT,OAAQ,O,gBCzSlB,MAAQ1B,GAAAA,GAAkCC,GAAAA,IAAwCwV,GAC5E,iBAAEC,IAAqBjT,EAAAA,WAAAA,MACvBkT,GAAgB5a,EAAAA,MAAAA,OAsLhB6a,GAAmCA,EACvCnf,kBACAjN,kBACAqsB,uBAMA,MAAM,mBACJjsB,EAAkB,kBAClBmD,EAAiB,2BACjBrD,EAA0B,qBAC1BqF,GACEvF,EAAgBK,SACdisB,EAnMuBC,EAC7BnsB,EACAmD,EACArD,EACAqF,KAGA,MAAM,OACJkb,EAAM,cACNa,EAAa,cACbJ,EAAa,UACbE,EAAS,cACTvB,EAAa,MACb2B,EAAK,UACLE,EAAS,aACTZ,EAAY,kBACZ2C,EAAiB,UACjBJ,EAAS,gBACTE,EAAe,MACf3C,EAAK,sBACLqC,EAAqB,sBACrB+H,EAAqB,qBACrB/G,GACEiH,GACF9qB,EACAmD,EACArD,EACAqF,GAEI+mB,EAAiClsB,EAAmBosB,aACxDhW,GACAC,IAkJF,OA9IArW,EAAmBqsB,WACjBH,EACA,SACA7L,EAAOsL,iBACPtL,EAAOqF,aACPrF,EAAOsF,eAGT3lB,EAAmBqsB,WACjBH,EACA,aACA7L,EAAOsL,iBACP,IACS,KAET,IACS,MAIX3rB,EAAmBqsB,WACjBH,EACA,gBACAhL,EAAcyK,iBACdzK,EAAcwE,aACdxE,EAAcyE,eAGhB3lB,EAAmBqsB,WACjBH,EACA,gBACApL,EAAc6K,iBACd7K,EAAc4E,aACd5E,EAAc6E,eAGhB3lB,EAAmBqsB,WACjBH,EACA,YACAlL,EAAU2K,iBACV3K,EAAU0E,aACV1E,EAAU2E,eAGZ3lB,EAAmBqsB,WACjBH,EACA,gBACAzM,EAAckM,iBACdlM,EAAciG,aACdjG,EAAckG,eAGhB3lB,EAAmBqsB,WACjBH,EACA,YACA5K,EAAUqK,iBACVrK,EAAUoE,aACVpE,EAAUqE,eAGZ3lB,EAAmBqsB,WACjBH,EACA,QACA9K,EAAMuK,iBACNvK,EAAMsE,aACNtE,EAAMuE,eAGR3lB,EAAmBqsB,WACjBH,EACA,eACAxL,EAAaiL,iBACbjL,EAAagF,aACbhF,EAAaiF,eAGf3lB,EAAmBqsB,WACjBH,EACA,oBACA7I,EAAkBsI,iBAClBtI,EAAkBqC,aAClBrC,EAAkBsC,eAGpB3lB,EAAmBqsB,WACjBH,EACA,YACAjJ,EAAU0I,iBACV1I,EAAUyC,aACVzC,EAAU0C,eAKZ3lB,EAAmBqsB,WACjBH,EACA,kBACA7L,EAAOsL,iBACPtL,EAAOqF,aACPrF,EAAOsF,eAGT3lB,EAAmBqsB,WACjBH,EACA,kBACA/I,EAAgBwI,iBAChBxI,EAAgBuC,aAChBvC,EAAgBwC,eAGlB3lB,EAAmBqsB,WACjBH,EACA,QACA1L,EAAMmL,iBACNnL,EAAMkF,aACNlF,EAAMmF,eAGR3lB,EAAmBqsB,WACjBH,EACA,4BACArJ,EAAsB8I,iBACtB9I,EAAsB6C,aACtB7C,EAAsB8C,eAGxB3lB,EAAmBqsB,WACjBH,EACA,4BACAtB,EAAsBe,iBACtBf,EAAsBlF,aACtBkF,EAAsBjF,eAGxB3lB,EAAmBqsB,WACjBH,EACA,uBACArI,EAAqB8H,iBACrB9H,EAAqB6B,aACrB7B,EAAqB8B,eAGhBuG,GAkBgCC,CACrCnsB,EACAmD,EACArD,EACAqF,GAEFmnB,GAAiC,CAAE1sB,kBAAiBiN,kBAAiBof,qBACrE,MAAM,wBAAEM,EAAuB,OAAEC,GAAWN,EAG5C,SAASO,EAAe/T,GACtB,IACE,MAAME,EAA6BF,EAAa1H,QAE9C6H,YAAY,SAAEC,EAAQ,cAAE4L,IACtB9L,GACE,SAAEJ,GAAaM,EAEjBJ,EAAauB,OAASyS,GAAgBlU,IAAa8G,EAAU4C,gBAE/DzJ,EAA2B7Y,EAAiB8Y,GACzCkB,KACC,KACElJ,QAAQic,IAAI,yBAEd,KAAM,GAEPC,QAAQ,KAGPd,GAAiBpH,GACjBmI,EAAkBnU,GAElB5Y,EAA2BgtB,YAM/BlU,EAA2B1X,IAAMwjB,EACjC6H,EAAwB/T,EAAUI,GAEtC,CAAE,MAAOnI,GACPC,QAAQuM,KAAK,6BAA8BxM,EAC7C,CACF,CAuDA,SAASoc,EAAkBnU,GACzB,IACE,MAAMqU,EAA+BrU,EAAa1H,QAEhD6H,YAAY,cAAE6L,IACZqI,EACgB/sB,EAAmBgtB,eAAetI,IAEpD8H,EAAO9H,EAAeqI,EAE1B,CAAE,MAAOtc,GACPC,QAAQuM,KAAK,gCAAiCxM,EAChD,CACF,CAIA,MAAMwc,EAAWlB,GAAcmB,iBACzBR,EAAeX,GAAcoB,qBAC7BC,EAAarB,GAAcsB,oBAC3BC,EAAavB,GAAcwB,mBAC3BC,EAAezB,GAAc0B,4BAQnC,OANAC,EAAAA,YAAYruB,iBAAiB4tB,EAAUR,GACvCiB,EAAAA,YAAYruB,iBAAiBqtB,EAAcD,GAC3CiB,EAAAA,YAAYruB,iBAAiB+tB,EA9E7B,SAA2B1U,GACzB,IACE,MAAMiV,EAAgCjV,EAAa1H,QAGjD6H,YAAY,SAAEC,EAAQ,cAAE4L,IACtBiJ,EAKJ,IAFoB3tB,EAAmBgtB,eAAetI,GAGpD,OAEF,MAAM,SAAElM,GAAaM,EAErB6U,EAA8BzsB,IAAMwjB,EAEpC6H,EAAwB/T,EAAUmV,GAA+B,EACnE,CAAE,MAAOld,GACPC,QAAQuM,KAAK,gCAAiCxM,EAChD,CACF,GAyDAid,EAAAA,YAAYruB,iBAAiBiuB,EAAYT,GACzCa,EAAAA,YAAYruB,iBAAiBmuB,EAxD7B,SAA2B9U,GACzB,IACE,MAAMkV,EAAiClV,EAAa1H,QAE5C6c,MAAOC,EAA6BC,QAASC,GACnDJ,EAEEI,GACFA,EAA8BprB,QAAQ8hB,GACpC1kB,EAAmBiuB,uBAAuBvJ,GAAe,IAIzDoJ,GACFA,EAA4BlrB,QAAQ8hB,GAClC1kB,EAAmBiuB,uBAAuBvJ,GAAe,GAG/D,CAAE,MAAOjU,GACPC,QAAQuM,KAAK,0CAA2CxM,EAC1D,CACF,GAqCOyb,GAGHI,GAAmCA,EACvC1sB,kBACAiN,kBACAof,uBAEA,MAAM,mBAAEjsB,EAAkB,2BAAEF,EAA0B,oBAAEyI,GACtD3I,EAAgBK,UACZ,oBAAEyC,EAAmB,qBAAEC,EAAoB,oBAAEF,EAAmB,sBAAED,GACtExC,EAAmBiC,OAErBjC,EAAmBgC,UAAUW,EAAsB,EAAGurB,mBACpD,GAAKroB,OAAOsgB,KAAK+H,GAAc5sB,OAA/B,CAIAuL,EAAgBkF,IAAI,oCACpB,IAAK,MAAMhR,KAAe8E,OAAO2f,OAAO0I,GAAe,CACrD,MAAM,IAAEhtB,EAAG,OAAEitB,GAAWptB,EACxB,GAAIotB,EAAOpE,OAAS3T,GAClB,SAEF,MAAMgY,EAAoBvV,EAAAA,WAAAA,MAAiBoP,cAAc/mB,GACzD4qB,GAAiB5qB,GACjB2L,EAAgBkF,IAAI,8BAA+B,CACjD8G,WAAYuV,EACZrjB,oBAAqBqjB,EAAkBtV,SAAS/N,oBAChDjE,QAAS,CAAEunB,UAAU,IAEzB,CACAxhB,EAAgBkF,IAAI,kCAGpBjS,EAA2Bka,qBAAqBlG,QAnBhD,IAsBF9T,EAAmBgC,UACjBS,EACA,EAAG0rB,SAAQptB,cAAautB,4BACtB,IAAKH,EACH,OAGF,GAAIA,EAAOpE,OAAS3T,GAClB,OAGF,IAA8B,IAA1BkY,EAGF,OAGF,MAAM,IAAEptB,EAAG,MAAE6C,EAAK,SAAEzD,EAAQ,UAAEwlB,GAAc/kB,EACtCwtB,EAAmB1V,EAAAA,WAAAA,MAAiBoP,cAAc/mB,IAClD,KAAEuW,EAAI,SAAEqB,GAAayV,EAE3B,IAAK9W,EACH,OAGF,GAAIA,EAAK1T,QAAUA,EAAO,CACxB,MAAMjG,EAAU6Y,EAAgCpO,IAAsBhH,SAASzD,SAC/E0wB,EAAAA,GAAAA,oBAAmBD,EAAkBzwB,EAASiG,EAChD,CAGA8U,EAAAA,WAAAA,QAAAA,oBAAuC3X,EAAKZ,GAG5CuY,EAAAA,WAAAA,WAAAA,wBAA8C3X,EAAK4kB,GAOnD,MAIM2I,EAHJ3uB,EAA2Bka,qBAGO0U,eAAeztB,IAAIM,GAAYA,EAASiO,KAC5Emf,EAAAA,GAAAA,uCAAsCF,KAI1CzuB,EAAmBgC,UACjBQ,EACA,EAAG2rB,SAAQptB,cAAa0W,OAAMmX,iBAC5B,GAAIT,EAAOpE,OAAS3T,GAClB,OAGF,MAAM,mBAAEpV,EAAkB,kBAAE8lB,EAAiB,eAAE7B,EAAc,SAAEnM,GAAa/X,EAEtEgkB,EAAW8J,EAAAA,GAAmBC,YAClChI,EACA9lB,EACAikB,GAGF,IAAI/Z,EACAia,EAAc,EAEdpkB,GAAa+X,UAAUE,mBACzB9N,EAAUnK,EAAY+X,SAASE,kBAC/BmM,EAAcL,EAAyB/jB,EAAY+X,SAASE,mBAAmBmM,aAE/Eja,EAAU0jB,EAAWG,uBAAuB,CAAEhK,aAOhD,MAAMiK,EAAoBnW,EAAAA,WAAAA,MAAiBoW,uBACrCC,EAAgB,CACpBxK,cAAe3jB,EAAYG,IAC3BiuB,aAAa,EACb7uB,UAAU,EAIV8uB,aAAa,EACbtW,SAAU,IACLA,EACHN,SAAUzX,EAAYyX,SACtBzN,oBAAqBhK,EAAYgK,oBACjCiO,kBAAmB9N,GAErBuM,KAAM,IAKAA,EAAKoB,WAAWpB,MAAQ,CAAC,EAC7BrT,KAAMqT,EAAKoB,WAAWpB,KAAKrT,KAC3ByT,QAAS,IAAKJ,EAAKoB,WAAWpB,KAAKI,SACnCpR,YAAa,IAAKgR,EAAKoB,WAAWpB,KAAKhR,aACvC1C,MAAO0T,EAAKoB,WAAWpB,KAAK1T,MAC5BohB,gBAGJ6J,EAAkBK,cAAcH,GAChCriB,EAAgBkF,IAAI,8BAA+B,CACjD8G,WAAYqW,EACZnkB,oBAAqBmkB,EAAcpW,SAAS/N,oBAC5CjE,QAAS,CAAEooB,eAAe,OAKhClvB,EAAmBgC,UACjBU,EACA,EAAGyrB,SAAQptB,YAAauuB,MACtB,GAAInB,GAAQpE,MAAQoE,EAAOpE,OAAS3T,GAClC,OAEF,MAAMgY,EAAoBvV,EAAAA,WAAAA,MAAiBoP,cAAcqH,GACzDxD,GAAiBwD,GACjBziB,EAAgBkF,IAAI,8BAA+B,CACjD8G,WAAYuV,EACZrjB,oBAAqBqjB,EAAkBtV,SAAS/N,oBAChDjE,QAAS,CAAEunB,UAAU,KAECvuB,EAA2Bka,qBAGnClG,YC/etB,SAASyb,GAAoB3vB,EAA2C4vB,GACtE,MAAM,oBAAEjnB,EAAmB,2BAAEzI,GAA+BF,EAAgBK,UAEpEwvB,UAAWC,GAAoBnnB,EAAoBqO,WACrD+Y,EAAmBD,EAAgB7f,IAAI2f,GAE7C,GAAwD,WAApDG,GAAkBC,iBAAiBC,aACrC,MAAO,GAGT,MAAMC,EAAchwB,EAA2B0B,uBAAuBguB,GAEhEO,EAAYD,EA3BpB,SAAgCvuB,GAC9B,MACMyuB,EADYzuB,EAAS+N,kBACDrO,IAAIuO,GAAMygB,EAAAA,MAAMC,UAAU1gB,IAGpD,OAFsBwgB,EAAQzgB,KAAK4gB,GAAUA,EAAOC,oBAE5BJ,EAAQ,EAClC,CAqBkCK,CAAuBP,GAAe,KAEtE,IAAKC,GAAWK,kBACd,MAAO,GAGT,MAAQ/gB,SAAUihB,GAAgBP,EAElC,OAAO5pB,MAAMmf,KAAKoK,EAAgBlK,UAC/Bjb,OAAO,EAAGtN,iBACT,MAAMsE,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,OAAOA,IAAeuyB,GAAiBjuB,GAAUgvB,cAAcD,KAEhErvB,IAAI,EAAGhE,iBAAiB,CAAGA,eAChC,CAwBA,SAtBA,SAAyB2C,GACvB,MAAM,YAAE4wB,GAAgB5wB,EAAgBK,SAcxCuwB,EAAYC,yBAAyB,CACnCC,mBAbyBzzB,GAClBsyB,GAAoB3vB,EAAiB3C,GAa5C0zB,SAVeA,CAAC7yB,EAAS8yB,IAClB5hB,EAAAA,UAAAA,KAAAA,SAAwBlR,EAAS8yB,GAUxCC,SAPeA,CAAC/yB,EAASgzB,IAClB9hB,EAAAA,UAAAA,KAAAA,SAAwBlR,EAASgzB,IAQ5C,ECnCA,SA9BA,SAAoClxB,GAClC,MAAM,uBAAEmxB,GAA2BnxB,EAAgBK,SAEnD8wB,EAAuBC,YAAc7f,EAAAA,MAAAA,YAAkB8f,SACvDF,EAAuBG,qBAAuBA,EAAAA,qBAC9CH,EAAuBI,YAAcA,EAAAA,YAErCJ,EAAuBd,MAAQ,CAC7BmB,cAAclmB,KACH+kB,EAAAA,MAAMoB,mBAAmBnmB,IAItC6lB,EAAuBO,uBAAyB,CAC9CC,kBAAiBA,CAACC,EAAeC,KAC/B/D,EAAAA,YAAYruB,iBAAiBqyB,EAAAA,OAASC,aAAcH,GACpD9D,EAAAA,YAAYruB,iBAAiBqyB,EAAAA,OAASE,kBAAmBH,GAElD,CACL,CACEzuB,YAAaA,IAAM0qB,EAAAA,YAAYpuB,oBAAoBoyB,EAAAA,OAASC,aAAcH,IAE5E,CACExuB,YAAaA,IAAM0qB,EAAAA,YAAYpuB,oBAAoBoyB,EAAAA,OAASE,kBAAmBH,MAKzF,E,wECvBA,MAAMI,GAAqB,IAAItX,IACzBuX,GAAgC,IAAIvX,IAU3B,SAASwX,IACtBta,MAAM,WAAExa,EAAU,iBAAE+0B,GAAkB,wBACtCC,EACAC,qBAAsBC,IAEtBL,GAA8BpX,IAAIzd,EAAY+0B,GAI9C,IAAK,MAAMI,KAAeJ,EAAkB,CAC1C,MAAM,SAAE3iB,GAAa+iB,EACfjC,EAASF,EAAAA,MAAMC,UAAU7gB,GAE/B,IAAK8gB,EACH,OAIF,IAAK0B,GAAmB3I,IAAI7Z,GAAW,CACrC,MAAM,SAAEyJ,GAAaqX,EACrB0B,GAAmBnX,IAAIrL,EAAUyJ,EAASnY,kBAC5C,CACF,CAeA,MAAM0xB,EAAqC,IAAIzJ,IAC/CkJ,GAA8BlvB,QAAQ,CAACovB,EAAkB/0B,KACvD+0B,EAAiBpvB,QAAQwvB,IACvB,MAAM,SAAE/iB,GAAa+iB,EACrBC,EAAmC5X,IAAIpL,OAI3C,MAAMijB,EAA8B,IAAI1J,IASxC,GAPAuJ,EAAavvB,QAAQ2vB,IACnB,MAAM,gBAAEC,GAAoBD,EAC5BC,EAAgB5vB,QAAQ,EAAGoH,4BACzBsoB,EAA4B7X,IAAIzQ,OAIhCqoB,EAAmCI,OAASH,EAA4BG,KAC1E,OAGF,MAEMzC,EAFY7pB,MAAMmf,KAAKuM,GAAmB1L,QAAQuC,QAE9BznB,IAAIoO,GACrB4gB,EAAAA,MAAMC,UAAU7gB,IAKnBqjB,EAAc,GACpB1C,EAAQptB,QAAQutB,IACd,MAAMwC,EAAWxC,EAAOyC,uBAExB,IAAKD,EAASrxB,SAAWqxB,EAAS,KAAOA,EAAS,GAAGznB,QACnD,OAGF,MAMM2nB,EClGK,SAA8BjoB,GAC3C,MACMkoB,EAAkBloB,EAAStJ,OAAS,EAEpCyxB,EAAqBzmB,KAAK0mB,MAAMpoB,EAAStJ,OAAS,GAExD,IAAI2xB,EAAoBF,EACpBG,EAAoBH,EAGxB,MAAMI,EAAqB,CACzB,CAAEjoB,QAASN,EAASmoB,GAAqBK,aAAcL,IAGnDM,EAAuB,CAC3BC,8BAA8B,EAC9BC,4BAA4B,GAW9B,IA1BwB,IAoBpBR,EACFM,EAAqBC,8BAA+B,EAC3CP,IAAuBD,IAChCO,EAAqBE,4BAA6B,IAIjDF,EAAqBC,+BACrBD,EAAqBE,4BAEjBF,EAAqBC,+BAExBL,IACAE,EAAmBrwB,KAAK,CACtBoI,QAASN,EAASqoB,GAClBG,aAAcH,IAnCI,IAsChBA,IACFI,EAAqBC,8BAA+B,IAInDD,EAAqBE,6BAExBL,IACAC,EAAmBrwB,KAAK,CACtBoI,QAASN,EAASsoB,GAClBE,aAAcF,IAGZA,IAAsBJ,IACxBO,EAAqBE,4BAA6B,IAKxD,OAAOJ,CACT,CDqCqBK,CAJOb,EAAS1xB,IAAIwyB,GAC5BA,EAAQvoB,UAKkBjK,IAAI,EAAGiK,aACxBynB,EAASpjB,KAAKmkB,GAAOA,EAAIxoB,UAAYA,IAIvDwnB,EAAY5vB,KAAK+vB,KAKnB,MAAMc,EAAsBC,KAAQC,KAAQC,QAAOpB,KAG7CqB,EAAgB,GACtBJ,EAAoB/wB,QAAQ6wB,IAC1B,MAAM,QAAEvoB,GAAYuoB,EAEpBf,EAAY9vB,QAAQoxB,IAClB,MAAMC,EAAuBD,EAAezkB,KAAKmkB,GAAOA,EAAIxoB,UAAYA,GACpE+oB,GACFF,EAAcjxB,KAAKmxB,OAKzB,MAAMjD,EAAc7f,EAAAA,MAAAA,YAAkB8f,SAGtC8C,EAAcnxB,QAAQ,EAAGsxB,gBAAeC,oBAAmBjpB,UAASkoB,eAActsB,cAChF,MAAMstB,EAAqBF,EAAcG,KAAK,KAAMnpB,EAASkoB,EAActsB,GAE3EoqB,EAAAA,qBAAqBoD,WAAWF,EAAoBpD,EAAamD,EALlD,KASjBtC,GAAmB0C,QAGnB,MAAMC,EAAoC,IAAIja,IAAIuX,IAKlD,OAFAA,GAA8ByC,QAEvBC,CACT,CEzIA,MAAM3C,GAAqB,IAAItX,IACzBuX,GAAgC,IAAIvX,IAW3B,SAASka,IACtBhd,MAAM,WAAExa,EAAU,iBAAE+0B,GAAkB,wBACtCC,IAEAH,GAA8BpX,IAAIzd,EAAY+0B,GAI9C,IAAK,MAAMI,KAAeJ,EAAkB,CAC1C,MAAM,SAAE3iB,GAAa+iB,EACfjC,EAASF,EAAAA,MAAMC,UAAU7gB,GAE/B,IAAK8gB,EAEH,YADAzf,QAAQic,IAAI,iDAKd,IAAKkF,GAAmB3I,IAAI7Z,GAAW,CACrC,MAAM,SAAEyJ,GAAaqX,EACrB0B,GAAmBnX,IAAIrL,EAAUyJ,EAASnY,kBAC5C,CACF,CAEA,MAeMozB,EChDO,SAAoBW,GACjC,IAAKA,IAAUA,EAAMpzB,OACnB,MAAO,GAET,GAAqB,IAAjBozB,EAAMpzB,OACR,OAAOozB,EAAM,GAEfhkB,QAAQikB,KAAK,cACb,MAAMC,EAAW,IAAIF,GACfG,EAAM,GACZ,IAAK,IAAI7V,EAAI,EAAG4V,EAAStzB,OAAS,EAAG0d,IACnC,IAAK,MAAM8V,KAAQF,EACb5V,GAAK8V,EAAKxzB,OACZszB,EAASG,OAAOH,EAASI,QAAQF,GAAO,GAG1CD,EAAI/xB,KAAKgyB,EAAK9V,IAIlB,OADAtO,QAAQukB,QAAQ,cACTJ,CACT,CD2BwBK,CAfJ/uB,MAAMmf,KAAKuM,GAAmB1L,QAAQuC,QAE9BznB,IAAIoO,GACrB4gB,EAAAA,MAAMC,UAAU7gB,IAMtBpO,IAAIkvB,GAAUA,EAAOyC,0BAA4B,IACjDroB,OAAOooB,GAAYA,IAAW,IAAIznB,SAEIjK,IAAIwyB,GEtChC,SAAsB7oB,GACnC,MAAMuqB,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,IAC1BC,EAAcxqB,EAAStJ,OAAS,EAAI,EACpC+zB,EAAYD,EAAc,EAEhC,IAAK,IAAIpW,EAAI,EAAGA,EAAIpU,EAAStJ,OAAQ0d,IAC/BA,EAAI,GAAKA,EAAIpU,EAAStJ,OAAS,GAAM0d,EAAIoW,GAAepW,EAAIqW,EAC9DF,EAAO,GAAGryB,KAAK8H,EAASoU,IACfA,EAAI,GAAM,EACnBmW,EAAO,GAAGryB,KAAK8H,EAASoU,IACfA,EAAI,GAAM,EACnBmW,EAAO,GAAGryB,KAAK8H,EAASoU,IAExBmW,EAAQnW,EAAI,EAAK,GAAGlc,KAAK8H,EAASoU,IAItC,MADY,IAAImW,EAAO,MAAOA,EAAO,MAAOA,EAAO,MAAOA,EAAO,MAAOA,EAAO,GAEjF,CFoB0DG,CAAa7B,KAK/DzC,EAAc7f,EAAAA,MAAAA,YAAkB8f,SAGtC8C,EAAcnxB,QAAQ,EAAGsxB,gBAAeC,oBAAmBjpB,UAASkoB,eAActsB,cAChF,MAAMstB,EAAqBF,EAAcG,KAAK,KAAMnpB,EAASkoB,EAActsB,GAE3EoqB,EAAAA,qBAAqBoD,WAAWF,EAAoBpD,EAAamD,EALlD,KASjBtC,GAAmB0C,QAGnB,MAAMC,EAAoC,IAAIja,IAAIuX,IAKlD,OAFAA,GAA8ByC,QAEvBC,CACT,CGvEA,MAAM3C,GAAqB,IAAItX,IACzBuX,GAAgC,IAAIvX,IAU3B,SAASgb,IACtB9d,MAAM,WAAExa,EAAU,iBAAE+0B,GAAkB,wBACtCC,EACAC,qBAAsBC,IAEtBL,GAA8BpX,IAAIzd,EAAY+0B,GAI9C,IAAK,MAAMI,KAAeJ,EAAkB,CAC1C,MAAM,SAAE3iB,GAAa+iB,EACfjC,EAASF,EAAAA,MAAMC,UAAU7gB,GAE/B,IAAK8gB,EACH,OAIF,IAAK0B,GAAmB3I,IAAI7Z,GAAW,CACrC,MAAM,SAAEyJ,GAAaqX,EACrB0B,GAAmBnX,IAAIrL,EAAUyJ,EAASnY,kBAC5C,CACF,CAEA,MAAM60B,EAAuB,GACvBC,EAAoB,IAAI7M,IAQ9BziB,MAAMmf,KAAK6M,EAAa3M,UAAU5iB,QAAQ8yB,IACxC,MAAM,gBAAElD,GAAoBkD,EAC5B,IAAIC,EAAuB,EAE3BnD,EAAgB5vB,QAAQ,EAAGoH,wBAAuB4rB,wBAC3CA,GAAmB9uB,SAAS+uB,cAC/BF,IACAF,EAAkBhb,IAAIzQ,MAItB2rB,GACFH,EAAqB1yB,KAAK4yB,KAiB9B,MAAMrD,EAAqC,IAAIzJ,IAC/CkJ,GAA8BlvB,QAAQ,CAACovB,EAAkB/0B,KACvD+0B,EAAiBpvB,QAAQwvB,IACvB,MAAM,SAAE/iB,GAAa+iB,EACrBC,EAAmC5X,IAAIpL,OAI3C,MAAMijB,EAA8B,IAAI1J,IASxC,GAPAuJ,EAAavvB,QAAQ2vB,IACnB,MAAM,gBAAEC,GAAoBD,EAC5BC,EAAgB5vB,QAAQ,EAAGoH,4BACzBsoB,EAA4B7X,IAAIzQ,OAIhCqoB,EAAmCI,OAASH,EAA4BG,KAC1E,OAGF,MAEMzC,EAFY7pB,MAAMmf,KAAKuM,GAAmB1L,QAAQuC,QAE9BznB,IAAIoO,GACrB4gB,EAAAA,MAAMC,UAAU7gB,IAKnBqjB,EAAc,GACpB1C,EAAQptB,QAAQutB,IACd,MAAMwC,EAAWxC,EAAOyC,uBAEnBD,IAAW,IAAIznB,SAKpBwnB,EAAY5vB,KAAK6vB,EAASmD,aAK5B,MAAMnC,EAAsBC,KAAQC,KAAQC,QAAOpB,KAG7CqB,EAAgB,GACtBJ,EAAoB/wB,QAAQ6wB,IAC1B,MAAM,QAAEvoB,GAAYuoB,EAEpBf,EAAY9vB,QAAQoxB,IAClB,MAAMC,EAAuBD,EAAezkB,KAAKmkB,GAAOA,EAAIxoB,UAAYA,GACpE+oB,GACFF,EAAcjxB,KAAKmxB,OAKzB,MAAMjD,EAAc7f,EAAAA,MAAAA,YAAkB8f,SAGtC8C,EAAcnxB,QAAQ,EAAGsxB,gBAAeC,oBAAmBjpB,UAASkoB,eAActsB,cAChF,MAAMstB,EAAqBF,EAAcG,KAAK,KAAMnpB,EAASkoB,EAActsB,GAE3EoqB,EAAAA,qBAAqBoD,WAAWF,EAAoBpD,EAAamD,EALlD,KASjBtC,GAAmB0C,QAGnB,MAAMC,EAAoC,IAAIja,IAAIuX,IAKlD,OAFAA,GAA8ByC,QAEvBC,CACT,CCrJO,MAAMuB,GAAqBA,CAAClpB,EAAiB/H,KAClD,IAAKA,GAAKkM,OACR,OAEF,MAAM,QAAElT,EAAO,cAAEk4B,GAAkBlxB,EAAIkM,OACvC,OAAOnE,EAAgBopB,WACrB,sBACA,CACEn4B,UACAo4B,kBAAmBF,GAAetX,QAEpC,gBCbEyX,GAAkBhlB,EAAAA,MAAAA,OAwFxB,SA9DA,UAAyB,2BACvBrR,EAA0B,qBAC1BqF,EAAoB,gBACpB0H,IAMA,MAyBMupB,EAAiCtxB,IACrC,MAAMilB,EApDV,SAAsBjlB,GACpB,MAAMuxB,EAASvxB,EAAIkM,OAAO3S,MAAMi4B,MAC1BC,EAAU,GAYhB,OAXIzxB,EAAIkM,OAAO3S,MAAMm4B,QACnBD,EAAQzzB,KAAK,OAEXgC,EAAIkM,OAAO3S,MAAMo4B,SACnBF,EAAQzzB,KAAK,QAEXgC,EAAIkM,OAAO3S,MAAMq4B,UACnBH,EAAQzzB,KAAK,SAEfyzB,EAAQzzB,KAAK,UACbyzB,EAAQzzB,KAAKuzB,GACNE,EAAQvP,KAAK,GACtB,CAqCiB2P,CAAa7xB,GA1BW8xB,EAAC7M,EAAMjlB,KAC5C,MAIM+xB,EAJiB1xB,EAAqBG,iBAC1C,oCAG2BykB,GAE7B,IAAK8M,EACH,OAKF,IAAIC,EAAiB,KACjBD,EAAMrlB,KAAKulB,GAAWA,EAAQ9kB,gBAAgB+kB,yBAChDF,EAAiBf,GAAmBlpB,EAAiB/H,IAGvD,MAAMgC,EAAU,CACdgwB,iBACAz4B,MAAOyG,GAET+H,EAAgBkF,IAAI8kB,EAAO/vB,IAK3B8vB,CAA+B7M,EAAMjlB,IAqBvC4oB,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAOg1B,gBAlBpC,SAA+BnyB,GAC7B,MAAM,WAAE7H,EAAU,QAAEa,GAAYgH,EAAIkM,OACflR,EAA2BuO,gBAAgBpR,MAKhEi6B,EAAAA,EAAAA,IAAkBj6B,EAAYa,GAE9BA,EAAQuB,iBAAiB82B,GAAgBgB,YAAaf,GACxD,EAQ2E/B,KAAK,OAEhF3G,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAOm1B,iBARpC,SAAgCtyB,GAC9B,MAAM,QAAEhH,GAAYgH,EAAIkM,OAExBlT,EAAQwB,oBAAoB62B,GAAgBgB,YAAaf,EAC3D,EAI6E/B,KAAK,MACpF,ECtFM8B,GAAkBhlB,EAAAA,MAAAA,OA4ExB,SA/CA,UAAyB,qBAAEhM,EAAoB,gBAAE0H,IAC/C,MAAMwqB,EAAwCvyB,IAG5C,GADuBixB,GAAmBlpB,EAAiB/H,GAEzD,OAGF,MAAMwyB,EA5BV,SAAiCxyB,GAC/B,MAAMyxB,EAAU,GAWhB,OAVIzxB,EAAIkM,OAAO3S,MAAMm4B,QACnBD,EAAQzzB,KAAK,OAEXgC,EAAIkM,OAAO3S,MAAMo4B,SACnBF,EAAQzzB,KAAK,QAEXgC,EAAIkM,OAAO3S,MAAMq4B,UACnBH,EAAQzzB,KAAK,SAEfyzB,EAAQzzB,KAAK,eACNyzB,EAAQvP,KAAK,GACtB,CAesBuQ,CAAwBzyB,GAOpC+xB,EAJiB1xB,EAAqBG,iBAC1C,oCAG2BgyB,GAExBT,GAILhqB,EAAgBkF,IAAI8kB,IAqBtBnJ,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAOg1B,gBAlBpC,SAA+BnyB,GAC7B,MAAM,QAAEhH,GAAYgH,EAAIkM,OAExBlT,EAAQuB,iBACN82B,GAAgBqB,mBAChBH,EAEJ,EAW2EhD,KAAK,OAEhF3G,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAOm1B,iBAXpC,SAAgCtyB,GAC9B,MAAM,QAAEhH,GAAYgH,EAAIkM,OAExBlT,EAAQwB,oBACN62B,GAAgBqB,mBAChBH,EAEJ,EAI6EhD,KAAK,MACpF,EC5EMoD,GAAoB,GAEpBC,GAAc,CAClBC,iBAAkB,GAgCpB,SAASC,GAAsB9yB,GAC7B,GAAkC,cAA9BA,EAAIkM,OAAO6mB,eACb,OAEF,MAAQC,EAAAA,GAAe3mB,EAAAA,GACvBwb,EAAAA,GAAIsI,QAAQ6C,EAAWC,6BACvBpL,EAAAA,GAAIsI,QAAQ6C,EAAWE,sBACvBrL,EAAAA,GAAIsI,QAAQ6C,EAAWG,gBACvBP,GAAYC,kBAAoB,EAChC7yB,EAAIkM,OAAOlT,QAAQwB,oBAAoB2C,EAAAA,OAAOi2B,eAAgBN,IACzDF,GAAYC,kBACfhL,EAAAA,GAAIsI,QAAQ6C,EAAWK,2BAE3B,CCnDA,MAAMtlB,GAAY,CAChB,CACEulB,WAAY,MACZ/jB,KAAM,YACNgkB,SAAU,CAAC,EAAG,EAAG,GACjBC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACjCC,YAAa,aAEf,CACEH,WAAY,MACZ/jB,KAAM,QACNgkB,SAAU,CAAC,EAAG,EAAG,GACjBC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACjCC,YAAa,SAEf,CACEH,WAAY,MACZ/jB,KAAM,UACNgkB,SAAU,CAAC,EAAG,EAAG,GACjBC,UAAW,CACT,EAAG,EAAG,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,GAAK,EAAG,IAAM,EAAG,GAAK,EAAG,IAAM,EAAG,GAAK,EAAG,EAAG,GAEzFC,YAAa,WAEf,CACEH,WAAY,MACZ/jB,KAAM,MACNikB,UAAW,EACR,EAAG,EAAG,EAAG,GAAI,QAAU,EAAG,EAAG,GAAI,QAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,OAAS,EAAG,EAAG,EAAG,OAAS,EAC5F,EAAG,EAAG,EAAG,EAAG,EAAG,GAEjBC,YAAa,OAEf,CACEH,WAAY,MACZ/jB,KAAM,WACNikB,UAAW,CACT,EAAK,YAAc,YAAc,YAAc,mBAAqB,YACpE,YAAc,YAAc,mBAAqB,YAAc,YAAc,WAC7E,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,WAAa,kBAAoB,YAAc,YAC3E,YAAc,oBAAsB,YAAc,YAAc,YAChE,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,oBAAsB,YAAc,YAAc,YAAc,oBAChE,YAAc,YAAc,YAAc,oBAAsB,YAAc,YAC9E,YAAc,oBAAsB,YAAc,YAAc,YAChE,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,WAAa,mBAAqB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAAc,GAC7E,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,WAAa,YAAc,YAAc,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,WAAa,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,WAAa,YAAc,YAAc,kBAAoB,YACjF,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,iBAAmB,YAAc,YAAc,YAAc,GAAK,YAAc,YAChF,YAAc,iBAAmB,YAAc,YAAc,YAC7D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,WAAa,mBAC7D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,WAAa,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,WAAa,YAC3E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,iBAAmB,YAAc,YAAc,YAAc,GAAK,YAChF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,iBAAmB,YACjF,YAAc,YAAc,iBAAmB,YAAc,YAAc,YAC3E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,iBAAmB,YAAc,YAAc,YAAc,iBAC3E,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,GAAK,YAAc,YAAc,YAAc,iBAAmB,YAChF,YAAc,YAAc,iBAAmB,YAAc,YAAc,YAC3E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,WAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,GAAK,kBAAoB,YAAc,YAAc,YACjF,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,iBAAmB,YAAc,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,iBAAmB,YAAc,YAAc,YAAc,EAAK,YAChF,YAAc,aAEhBC,YAAa,YAEf,CACEH,WAAY,MACZ/jB,KAAM,UACNikB,UAAW,CACT,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EACvF,oBAAsB,EAAK,EAAK,EAAK,mBAAqB,YAAc,YACxE,YAAc,kBAAoB,YAAc,YAAc,YAC9D,oBAAsB,YAAc,YAAc,YAAc,oBAChE,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,EAAK,EAAK,kBAAoB,YAC/E,EAAK,EAAK,oBAAsB,YAAc,EAAK,EAAK,oBAAsB,YAC9E,EAAK,EAAK,oBAAsB,WAAa,EAAK,EAAK,oBAAsB,YAC7E,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAC1F,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAC1F,mBAAqB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACpF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACpF,kBAAoB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACpF,mBAAqB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACpF,kBAAoB,YAAc,EAAK,EAAK,mBAAqB,WAAa,EAAK,EACnF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACrF,mBAAqB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACpF,kBAAoB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EACpF,mBAAqB,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,GAC1F,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBACrE,WAAa,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBACpE,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAAK,kBACpE,YAAc,EAAK,EAAK,mBAAqB,WAAa,EAAK,EAAK,mBACpE,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBACrE,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBACrE,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,kBACrE,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,kBACrE,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBACrE,WAAa,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,kBACpE,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAAK,mBACpE,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAAK,mBACpE,YAAc,EAAK,EAAK,kBAAoB,WAAa,EAAK,EAAK,mBACnE,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAAK,mBACpE,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAAK,kBACpE,YAAc,EAAK,EAAK,kBAAoB,WAAa,EAAK,EAAK,kBACnE,YAAc,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,kBACrE,WAAa,EAAK,EAAK,mBAAqB,YAAc,YAAc,EACxE,kBAAoB,YAAc,YAAc,EAAK,mBAAqB,EAAK,YAC/E,EAAK,mBAAqB,EAAK,YAAc,EAAK,mBAAqB,EAAK,YAAc,EAC1F,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAClF,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACpF,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACpF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAClF,mBAAqB,EAAK,YAAc,EAAK,mBAAqB,EAAK,YAAc,EACrF,iBAAmB,EAAK,YAAc,EAAK,GAAK,EAAK,YAAc,EAAK,iBACxE,EAAK,GAAK,EAAK,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAChF,YAAc,EAAK,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EACpF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EACpF,YAAc,EAAK,mBAAqB,EAAK,YAAc,EAAK,mBAAqB,EACrF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EACpF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EACpF,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAAK,kBAAoB,EAClF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EACpF,YAAc,EAAK,mBAAqB,EAAK,YAAc,EAAK,mBAAqB,EACrF,YAAc,EAAK,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EACpF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAAK,kBAAoB,EAClF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,WAAa,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAClF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,iBAAmB,EAClF,YAAc,EAAK,iBAAmB,EAAK,YAAc,EAAK,GAAK,EAAK,WAAa,EACrF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,iBAAmB,EAAK,YAAc,EAAK,iBAAmB,EAAK,YAAc,EACjF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAClF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YACrE,YAAc,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EACvF,YAAc,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBACxE,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EACxF,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACxF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,WAAa,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAClF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,GAAK,kBAAoB,EAAK,EAAK,YAC/E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,WAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,WAAa,iBAAmB,EAAK,EAAK,YACxE,iBAAmB,EAAK,EAAK,YAAc,iBAAmB,EAAK,EAAK,YAAc,GACtF,EAAK,EAAK,YAAc,iBAAmB,EAAK,EAAK,YAAc,iBAAmB,EACtF,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACxF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,WAAa,kBAAoB,EAAK,EAClF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,WAAa,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAClF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,WAAa,kBAAoB,EAAK,EAClF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,WAAa,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAClF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,EACxF,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,iBAAmB,EACzF,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAC3E,iBAAmB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAEnDC,YAAa,WAEf,CACEH,WAAY,MACZ/jB,KAAM,QACNikB,UAAW,CACT,EAAK,YAAc,YAAc,YAAc,mBAAqB,YACpE,YAAc,YAAc,mBAAqB,YAAc,YAAc,WAC7E,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,oBAAsB,WAAa,YAAc,YAC/D,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,oBAAsB,YAAc,YAAc,YAAc,oBAChE,YAAc,YAAc,GAAK,oBAAsB,YAAc,YACrE,YAAc,oBAAsB,YAAc,YAAc,WAChE,mBAAqB,WAAa,YAAc,YAAc,mBAC9D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,WAAa,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,WAAa,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,WAAa,mBAAqB,WAAa,YAC3E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,WAAa,YAAc,YAAc,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,WAAa,YAAc,YAAc,kBAAoB,YAAc,YAC3E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,WAAa,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,WAAa,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,GAAK,YACpE,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,WAAa,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,WAAa,YAC7D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,WAAa,YAAc,mBAAqB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,WAAa,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,WAAa,kBAC3E,YAAc,GAAK,YAAc,kBAAoB,YAAc,YAAc,YACjF,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,GAAK,YAAc,YAAc,YAAc,iBAAmB,YAChF,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,WAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,GAAK,mBACnE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,WAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAAqB,GACpF,YAAc,YAAc,mBAAqB,YAAc,WAAa,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,WAAa,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,iBAAmB,YAAc,YAAc,YAAc,iBAC3E,YAAc,YAAc,YAAc,GAAK,YAAc,YAAc,YAC3E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,iBAAmB,YAAc,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAAc,iBAC5E,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,iBAAmB,YAAc,YAAc,YAAc,GAAK,YAChF,YAAc,YAAc,iBAAmB,YAAc,YAAc,YAC3E,iBAAmB,YAAc,WAAa,YAAc,kBAAoB,YAChF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,YAAc,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,GAAK,YAAc,kBAAoB,YAAc,YAAc,YACjF,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,GAAK,YAAc,kBAAoB,YAAc,YAAc,YACjF,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,YAAc,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAAc,iBAC5E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAAc,iBAC5E,YAAc,YAAc,YAAc,EAAK,YAAc,YAAc,aAE7EC,YAAa,SAEf,CACEH,WAAY,MACZ/jB,KAAM,YACNikB,UAAW,CACT,EAAK,EAAK,EAAK,EAAK,mBAAqB,YAAc,YAAc,YACrE,mBAAqB,YAAc,WAAa,YAAc,oBAC9D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,oBAAsB,YAAc,YAAc,YAAc,oBAChE,YAAc,WAAa,YAAc,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,oBAC9D,YAAc,YAAc,YAAc,oBAAsB,YAAc,YAC9E,YAAc,oBAAsB,YAAc,YAAc,YAChE,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAAc,GAC1F,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,WAAa,mBAAqB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,WAAa,mBAC7D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,GAAK,kBACnE,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,WAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,GAAK,YAAc,YAAc,YAAc,mBAC7D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,WAAa,mBAAqB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,WAAa,kBAAoB,YAAc,YAC3E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,GAAK,mBAAqB,YAC1E,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,WAAa,kBAC3E,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,WAAa,iBAC5E,YAAc,YAAc,YAAc,GAAK,YAAc,WAAa,YAC1E,iBAAmB,YAAc,WAAa,YAAc,mBAAqB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,WAC5E,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,WAAa,mBAAqB,YAAc,WAAa,YAC7D,mBAAqB,YAAc,WAAa,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,WAAa,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,WACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,iBACxE,YAAc,YAAc,EAAK,iBAAmB,YAAc,YAAc,EAAK,GACrF,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,iBAAmB,YACxE,YAAc,EAAK,iBAAmB,YAAc,YAAc,EAAK,kBACvE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,YAC9E,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YAC9E,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,WAAa,YAAc,EAChF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,WAAa,YAAc,EAAK,kBACvE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,GAAK,YAAc,EAAK,kBAAoB,YAAc,YAC9E,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,WAC9E,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,WAAa,YAAc,EAChF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,WAAa,EAAK,kBAAoB,YAAc,YAAc,EAChF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,WAAa,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACvE,YAAc,YAAc,EAAK,kBAAoB,YAAc,GAAK,EACxE,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,iBAAmB,YAAc,WAAa,EAAK,iBACtE,YAAc,YAAc,EAAK,iBAAmB,YAAc,YAAc,EAAK,GACrF,YAAc,WAAa,EAAK,iBAAmB,WAAa,YAAc,EAC9E,iBAAmB,YAAc,YAAc,EAAK,kBAAoB,YACxE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,WAAa,YAAc,EAAK,kBACvE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACxE,YAAc,YAAc,EAAK,kBAAoB,YAAc,WAAa,EAChF,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YACzE,YAAc,EAAK,kBAAoB,YAAc,WAAa,EAAK,kBACvE,YAAc,YAAc,EAAK,kBAAoB,YAAc,YAAc,EACjF,kBAAoB,YAAc,GAAK,EAAK,kBAAoB,YAAc,YAC9E,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBAAoB,YAC9E,WAAa,EAAK,kBAAoB,YAAc,YAAc,EAAK,kBACvE,YAAc,YAAc,EAAK,kBAAoB,YAAc,WAAa,YAChF,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,WAAa,kBAAoB,YAAc,YAAc,YAAc,iBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAAc,iBAC5E,YAAc,YAAc,YAAc,EAAK,YAAc,YAAc,aAE7EC,YAAa,aAEf,CACEH,WAAY,MACZ/jB,KAAM,YACNikB,UAAW,CACT,EAAK,EAAK,EAAK,EAAK,mBAAqB,YAAc,EAAK,YAAc,mBAC1E,YAAc,EAAK,YAAc,oBAAsB,YAAc,EAAK,YAC1E,mBAAqB,YAAc,EAAK,YAAc,kBAAoB,YAAc,EACxF,YAAc,oBAAsB,YAAc,EAAK,YAAc,oBACrE,YAAc,EAAK,YAAc,mBAAqB,YAAc,EAAK,YACzE,mBAAqB,YAAc,EAAK,YAAc,kBAAoB,YAAc,EACxF,WAAa,oBAAsB,YAAc,EAAK,YAAc,oBACpE,YAAc,EAAK,YAAc,oBAAsB,YAAc,EAAK,WAC1E,oBAAsB,YAAc,EAAK,YAAc,mBAAqB,YAAc,EAC1F,YAAc,mBAAqB,YAAc,EAAK,YAAc,mBACpE,YAAc,EAAK,YAAc,mBAAqB,YAAc,EAAK,YACzE,mBAAqB,YAAc,EAAK,WAAa,kBAAoB,YAAc,EACvF,YAAc,mBAAqB,YAAc,EAAK,YAAc,mBACpE,YAAc,EAAK,YAAc,mBAAqB,YAAc,EAAK,YACzE,mBAAqB,YAAc,EAAK,YAAc,mBAAqB,YAAc,EACzF,YAAc,mBAAqB,YAAc,EAAK,WAAa,mBACnE,WAAa,EAAK,YAAc,mBAAqB,YAAc,EAAK,YACxE,mBAAqB,YAAc,EAAK,YAAc,mBAAqB,WAAa,EACxF,YAAc,mBAAqB,YAAc,EAAK,YAAc,mBACpE,YAAc,EAAK,WAAa,mBAAqB,YAAc,EAAK,YACxE,mBAAqB,YAAc,EAAK,YAAc,mBAAqB,YAAc,EACzF,YAAc,kBAAoB,YAAc,EAAK,YAAc,kBACnE,YAAc,EAAK,YAAc,mBAAqB,YAAc,EAAK,YACzE,mBAAqB,YAAc,EAAK,YAAc,kBAAoB,YAAc,EACxF,YAAc,kBAAoB,YAAc,EAAK,YAAc,mBACnE,YAAc,EAAK,YAAc,mBAAqB,YAAc,EAAK,YACzE,mBAAqB,YAAc,EAAK,YAAc,mBAAqB,YAAc,EACzF,GAAK,kBAAoB,YAAc,EAAK,YAAc,kBAAoB,YAC9E,EAAK,YAAc,mBAAqB,YAAc,EAAK,YAAc,mBACzE,YAAc,EAAK,YAAc,mBAAqB,YAAc,EAAK,YAAc,GACvF,YAAc,EAAK,YAAc,mBAAqB,WAAa,EAAK,YACxE,mBAAqB,YAAc,EAAK,YAAc,mBAAqB,YAAc,EACzF,YAAc,mBAAqB,YAAc,EAAK,YAAc,kBACpE,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAAK,mBACpE,WAAa,EAAK,EAAK,mBAAqB,YAAc,EAAK,EAAK,mBACpE,YAAc,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EACjF,YAAc,EAAK,mBAAqB,EAAK,WAAa,EAAK,mBAAqB,EACpF,WAAa,EAAK,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EACnF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EACpF,YAAc,EAAK,mBAAqB,EAAK,YAAc,EAAK,mBAAqB,EACrF,YAAc,EAAK,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,YAC/E,EAAK,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EACxF,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACpF,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACpF,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACpF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAClF,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EAAK,YAAc,EACpF,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EAAK,YAAc,EACpF,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EAAK,YAAc,EACpF,mBAAqB,EAAK,YAAc,EAAK,mBAAqB,EAAK,YAAc,EACrF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAClF,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACpF,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACpF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,mBAAqB,EAAK,YAAc,EAAK,mBAAqB,EAAK,YAAc,EACrF,iBAAmB,EAAK,YAAc,EAAK,GAAK,EAAK,YAAc,EAAK,iBACxE,EAAK,WAAa,EAAK,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EACxF,YAAc,EAAK,mBAAqB,EAAK,YAAc,EAAK,kBAAoB,EACpF,YAAc,EAAK,kBAAoB,EAAK,YAAc,EAAK,mBAAqB,EACpF,YAAc,EAAK,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EACjF,YAAc,kBAAoB,EAAK,EAAK,YAAc,mBAAqB,EAAK,EACpF,YAAc,kBAAoB,EAAK,EAAK,YAAc,mBAAqB,EAAK,EACpF,YAAc,kBAAoB,EAAK,EAAK,WAAa,kBAAoB,EAAK,EAClF,YAAc,kBAAoB,EAAK,EAAK,WAAa,kBAAoB,EAAK,EAClF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,mBAAqB,EAAK,EACpF,YAAc,mBAAqB,EAAK,EAAK,YAAc,mBAAqB,EAAK,EACrF,YAAc,mBAAqB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACpF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,YAAc,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EACnF,WAAa,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,GACvF,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,WAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,WAC1E,kBAAoB,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,YAC1E,kBAAoB,EAAK,EAAK,YAAc,iBAAmB,EAAK,EAAK,YACzE,iBAAmB,EAAK,EAAK,YAAc,GAAK,EAAK,EAAK,YAAc,kBACxE,EAAK,EAAK,YAAc,kBAAoB,EAAK,EAAK,WAAa,iBAAmB,EACtF,EAAK,YAAc,iBAAmB,EAAK,EAAK,WAAa,kBAAoB,EAAK,EACtF,EAAK,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,WAAa,EAAK,EACvF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,GAAK,EAAK,EAC1E,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,WAAa,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAClF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,WAAa,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAClF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,GAAK,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAC1E,kBAAoB,WAAa,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAClF,kBAAoB,WAAa,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAClF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,YAAc,EAAK,EAAK,kBAAoB,YAAc,EAAK,EACnF,kBAAoB,WAAa,EAAK,EAAK,kBAAoB,YAAc,EAAK,EAClF,iBAAmB,YAAc,EAAK,EAAK,iBAAmB,YAAc,EAAK,EACjF,iBAAmB,YAAc,EAAK,EAAK,GAAK,YAAc,EAAK,EAAK,iBACxE,YAAc,EAAK,EAAK,iBAAmB,YAAc,EAAK,EAAK,kBAAoB,EACvF,EAAK,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAC/E,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACxF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAClF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,WAAa,EAClF,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,YAAc,EAC1E,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,WAAa,EAAK,kBAAoB,EAAK,YAAc,EAClF,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,YAAc,EAC1E,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,WAAa,EAAK,kBAAoB,EAAK,YAAc,EAClF,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,YAAc,EAC1E,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,iBAAmB,EAAK,YAAc,EAClF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,iBAAmB,EAAK,WAAa,EAAK,EAAK,EAAK,EAAK,GAE3DC,YAAa,WAEf,CACEH,WAAY,MACZ/jB,KAAM,MACNikB,UAAW,CACT,EAAK,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EACvF,oBAAsB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,kBACzE,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EACpF,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,kBACxE,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EACpF,oBAAsB,EAAK,EAAK,EAAK,oBAAsB,EAAK,EAAK,EAAK,mBAC1E,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAClF,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,kBACxE,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAClF,mBAAqB,EAAK,EAAK,EAAK,mBAAqB,EAAK,EAAK,EAAK,mBACxE,EAAK,EAAK,EAAK,mBAAqB,WAAa,WAAa,WAC9D,mBAAqB,WAAa,WAAa,WAAa,mBAAqB,WACjF,WAAa,WAAa,mBAAqB,WAAa,WAAa,WACzE,mBAAqB,WAAa,WAAa,WAAa,mBAAqB,WACjF,WAAa,WAAa,mBAAqB,WAAa,WAAa,WACzE,mBAAqB,WAAa,WAAa,WAAa,mBAAqB,WACjF,WAAa,WAAa,mBAAqB,WAAa,WAAa,WACzE,kBAAoB,WAAa,WAAa,WAAa,kBAAoB,WAC/E,WAAa,WAAa,mBAAqB,WAAa,WAAa,WACzE,mBAAqB,WAAa,WAAa,WAAa,kBAAoB,WAChF,WAAa,WAAa,kBAAoB,WAAa,WAAa,WACxE,mBAAqB,WAAa,WAAa,WAAa,mBAAqB,WACjF,WAAa,WAAa,mBAAqB,WAAa,WAAa,WACzE,mBAAqB,WAAa,WAAa,WAAa,kBAAoB,WAChF,WAAa,WAAa,kBAAoB,WAAa,WAAa,WACxE,mBAAqB,WAAa,WAAa,WAAa,mBAAqB,WACjF,WAAa,WAAa,mBAAqB,WAAa,WAAa,WAAa,GACtF,WAAa,WAAa,WAAa,mBAAqB,WAAa,EAAK,WAC9E,mBAAqB,WAAa,EAAK,WAAa,mBAAqB,WAAa,EACtF,WAAa,mBAAqB,WAAa,EAAK,WAAa,kBACjE,WAAa,EAAK,WAAa,kBAAoB,WAAa,EAAK,WACrE,mBAAqB,WAAa,EAAK,WAAa,mBAAqB,WAAa,EACtF,WAAa,mBAAqB,WAAa,EAAK,WAAa,mBACjE,WAAa,EAAK,WAAa,mBAAqB,WAAa,EAAK,WACtE,mBAAqB,WAAa,EAAK,WAAa,mBAAqB,WAAa,EACtF,WAAa,kBAAoB,WAAa,EAAK,WAAa,mBAChE,WAAa,EAAK,WAAa,kBAAoB,WAAa,EAAK,WACrE,mBAAqB,WAAa,EAAK,WAAa,mBAAqB,WAAa,EACtF,WAAa,mBAAqB,WAAa,EAAK,WAAa,kBACjE,WAAa,EAAK,WAAa,kBAAoB,WAAa,EAAK,WACrE,mBAAqB,WAAa,EAAK,WAAa,kBAAoB,WAAa,EACrF,WAAa,mBAAqB,WAAa,EAAK,WAAa,kBACjE,WAAa,EAAK,WAAa,mBAAqB,WAAa,EAAK,WACtE,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,iBAAmB,YAAc,YAAc,YAAc,GAAK,YAChF,YAAc,YAAc,iBAAmB,YAAc,YAAc,YAC3E,mBAAqB,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAAK,mBACvE,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAChF,mBAAqB,EAAK,GAAK,EAAK,mBAAqB,EAAK,GAAK,EAAK,mBACxE,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAAK,mBAAqB,EAAK,GAAK,EACjF,kBAAoB,EAAK,GAAK,EAAK,mBAAqB,EAAK,GAAK,EAAK,kBACvE,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAChF,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAC1F,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAAK,mBAAqB,EAAK,GAAK,EAC5E,mBAAqB,EAAK,GAAK,EAAK,mBAAqB,EAAK,GAAK,EAAK,mBACxE,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAAK,kBAAoB,EAAK,GAAK,EAChF,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EAAK,YAC9E,YAAc,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EACvF,YAAc,YAAc,kBAAoB,EAAK,YAAc,YACnE,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EAAK,YAC9E,YAAc,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EACvF,YAAc,YAAc,kBAAoB,EAAK,YAAc,YACnE,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EAAK,YAC9E,YAAc,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EACvF,YAAc,YAAc,kBAAoB,EAAK,YAAc,YACnE,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EAAK,YAC9E,YAAc,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EACvF,YAAc,YAAc,kBAAoB,EAAK,YAAc,YACnE,kBAAoB,EAAK,YAAc,YAAc,kBAAoB,EAAK,YAC9E,YAAc,iBAAmB,EAAK,YAAc,YAAc,iBAAmB,EACrF,YAAc,YAAc,GAAK,EAAK,YAAc,YAAc,kBAAoB,EACtF,YAAc,YAAc,kBAAoB,GAAK,EAAK,GAAK,iBAAmB,GAAK,EACvF,GAAK,iBAAmB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAC1E,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAChF,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAC1F,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAC3E,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAC1F,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAC3E,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAC1F,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAC3E,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAAK,EAAK,GAAK,kBAAoB,GAC1F,EAAK,GAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAC/E,EAAK,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACxF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,kBAAoB,EAAK,YAAc,EACnF,kBAAoB,EAAK,YAAc,EAAK,iBAAmB,EAAK,YAAc,EAClF,iBAAmB,EAAK,YAAc,EAAK,iBAAmB,EAAK,YAAc,EAAK,GACtF,EAAK,YAAc,EAAK,iBAAmB,EAAK,YAAc,EAAK,iBACnE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAC/E,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAC1F,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAC3E,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAC1F,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAC3E,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAC1F,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAC3E,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,iBAAmB,EACzF,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAAK,kBAAoB,EAAK,EAAK,EAC3E,iBAAmB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAEnDC,YAAa,OAEf,CACEH,WAAY,MACZ/jB,KAAM,SACNikB,UAAW,CACT,EAAK,YAAc,YAAc,YAAc,mBAAqB,YACpE,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,oBAAsB,YAAc,YAAc,YAChE,oBAAsB,YAAc,YAAc,WAAa,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,oBAAsB,YAAc,YAAc,YAAc,oBAChE,YAAc,YAAc,YAAc,oBAAsB,YAAc,WAC9E,YAAc,oBAAsB,YAAc,WAAa,YAC/D,mBAAqB,YAAc,YAAc,WAAa,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,WAC7E,YAAc,mBAAqB,YAAc,WAAa,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,WAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,WAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,GAAK,GAAK,YACzE,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,WAAa,mBAAqB,WAAa,YAAc,YAC7D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,WAAa,YAAc,YAC7D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,WAAa,kBAAoB,YAAc,YAC3E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,WACjF,WAAa,YAAc,mBAAqB,YAAc,YAAc,YAC5E,mBAAqB,YAAc,YAAc,YAAc,iBAC/D,YAAc,YAAc,YAAc,GAAK,YAAc,YAAc,GAC3E,iBAAmB,YAAc,YAAc,YAAc,mBAC7D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,WAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,WAC7E,YAAc,kBAAoB,YAAc,WAAa,YAC7D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,WAAa,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,WAAa,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,WAAa,WAAa,YAAc,kBAAoB,YAChF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAAoB,GAClF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,WAAa,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,WAAa,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAAc,iBAC5E,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,GAAK,YAAc,YAAc,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,WAAa,YAC3E,iBAAmB,YAAc,YAAc,YAAc,iBAAmB,YAChF,YAAc,YAAc,kBAAoB,YAAc,YAAc,WAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,GAAK,YAAc,kBAAoB,YAAc,YAAc,YACjF,kBAAoB,YAAc,YAAc,YAAc,kBAAoB,WAClF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,GAAK,YAAc,YACjF,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,WAAa,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,WAAa,YAAc,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,WAAa,kBAAoB,YAAc,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,WAAa,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,WAAa,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,WAAa,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,YAAc,iBAAmB,YAAc,YAC1E,YAAc,iBAAmB,YAAc,YAAc,YAAc,iBAC3E,YAAc,YAAc,YAAc,GAAK,YAAc,YAAc,YAC3E,iBAAmB,YAAc,YAAc,YAAc,iBAAmB,YAChF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,GAAK,YAAc,kBAAoB,YACzE,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,WAAa,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,GAAK,YAAc,kBACnE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,WAAa,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,WAAa,YAAc,kBAC3E,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,WAAa,YAAc,kBAC3E,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,EAAK,YAAc,YAAc,aAEjDC,YAAa,UAEf,CACEH,WAAY,MACZ/jB,KAAM,KACNikB,UAAW,CACT,EAAK,YAAc,YAAc,YAAc,mBAAqB,YACpE,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,oBAAsB,YAAc,YAAc,YAChE,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,oBAAsB,YAAc,YAAc,YAAc,oBAChE,YAAc,YAAc,YAAc,oBAAsB,YAAc,YAC9E,YAAc,oBAAsB,YAAc,YAAc,YAChE,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,WAAa,WAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,WAAa,WAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,WAAa,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,WAAa,YAAc,mBAC7D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAAc,GAC7E,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,WAAa,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,WAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,WAAa,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,GAAK,kBAAoB,YAC1E,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,WAAa,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,WAAa,mBAAqB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,WAAa,mBAAqB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,GAAK,GACjF,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,WAAa,YAAc,YAAc,kBAAoB,YAAc,YAC3E,YAAc,mBAAqB,YAAc,WAAa,WAAa,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,WAAa,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,WAAa,WAAa,mBAC7D,YAAc,YAAc,YAAc,iBAAmB,GAAK,YAAc,YAChF,GAAK,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAChF,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,WAAa,YAAc,YAAc,mBAC7D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,WAAa,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,WAAa,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,GAAK,YAAc,YAAc,kBAAoB,YACzE,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAAoB,WAClF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,WAAa,kBAAoB,WAAa,YACzE,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,WAAa,kBAAoB,YAAc,YAC1E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,WAAa,YAAc,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,WAAa,YAC3E,kBAAoB,YAAc,YAAc,YAAc,kBAAoB,WAClF,YAAc,YAAc,iBAAmB,YAAc,YAAc,YAC3E,iBAAmB,YAAc,YAAc,YAAc,GAAK,YAAc,YAChF,YAAc,kBAAoB,GAAK,YAAc,YAAc,kBACnE,YAAc,YAAc,YAAc,iBAAmB,YAAc,WAC3E,YAAc,iBAAmB,YAAc,YAAc,YAAc,kBAC3E,WAAa,YAAc,YAAc,kBAAoB,YAAc,YAC3E,WAAa,kBAAoB,YAAc,YAAc,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,WAAa,YAC3E,YAAc,kBAAoB,YAAc,GAAK,YAAc,kBACnE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,WAAa,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,GAAK,YAAc,YACjF,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,WAAa,YAAc,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAAoB,WAClF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,YAAc,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,YAAc,iBAAmB,YAAc,YAC1E,YAAc,iBAAmB,YAAc,YAAc,YAAc,iBAC3E,YAAc,YAAc,YAAc,GAAK,YAAc,YAAc,YAC3E,iBAAmB,YAAc,YAAc,YAAc,iBAAmB,YAChF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,WAAa,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,GAAK,YAAc,kBAAoB,YAAc,YAAc,YACjF,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,iBAAmB,YACjF,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,kBAAoB,YAAc,YAAc,YAAc,iBAAmB,YACjF,YAAc,YAAc,EAAK,YAAc,YAAc,aAE/DC,YAAa,MAEf,CACEH,WAAY,MACZ/jB,KAAM,UACNikB,UAAW,CACT,EAAK,YAAc,YAAc,YAAc,mBAAqB,YACpE,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,oBAAsB,YAAc,YAAc,YAChE,oBAAsB,YAAc,YAAc,YAAc,mBAChE,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,oBAAsB,YAAc,YAAc,YAAc,oBAChE,YAAc,YAAc,YAAc,oBAAsB,YAAc,YAC9E,YAAc,oBAAsB,YAAc,YAAc,YAChE,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,WAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,GAAK,kBAAoB,YAC1E,YAAc,YAAc,kBAAoB,YAAc,YAAc,YAC5E,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,WAAa,YAAc,YAAc,kBAAoB,WACjF,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,GAAK,YAAc,YAAc,YAC3E,mBAAqB,YAAc,YAAc,WAAa,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,GAAK,kBAAoB,YAC1E,YAAc,YAAc,mBAAqB,YAAc,YAAc,YAC7E,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,kBAAoB,WAAa,YAAc,YAC7D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,WAAa,mBAAqB,YAAc,YAC5E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,mBAAqB,WAAa,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,WAAa,YAAc,mBAC9D,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,GAAK,YAAc,YAAc,YAAc,iBAAmB,YAChF,YAAc,YAAc,mBAAqB,YAAc,WAAa,YAC5E,kBAAoB,YAAc,YAAc,YAAc,mBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,mBAAqB,YAAc,YAAc,YAAc,kBAC/D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,mBAAqB,YAAc,YAC7E,YAAc,mBAAqB,YAAc,YAAc,YAC/D,mBAAqB,YAAc,YAAc,YAAc,mBAC/D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,WAAa,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,YAAc,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,WACjF,YAAc,YAAc,kBAAoB,WAAa,YAAc,YAC3E,kBAAoB,WAAa,YAAc,YAAc,kBAAoB,WACjF,WAAa,YAAc,kBAAoB,WAAa,YAAc,YAC1E,kBAAoB,WAAa,YAAc,YAAc,iBAAmB,WAChF,YAAc,YAAc,iBAAmB,WAAa,YAAc,YAAc,GACxF,WAAa,GAAK,YAAc,kBAAoB,WAAa,YAAc,YAC/E,kBAAoB,WAAa,YAAc,YAAc,iBAAmB,WAChF,YAAc,WAAa,iBAAmB,YAAc,WAAa,WACzE,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,YAAc,WAAa,kBAAoB,YAAc,YAAc,WAC3E,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,WAAa,WAAa,kBAAoB,YAAc,YAAc,WAC1E,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,YAAc,WAAa,kBAAoB,YAAc,YAAc,YAC3E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,WAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,WAAa,YAAc,kBAC3E,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,iBAAmB,YAAc,WAAa,YAAc,iBAC1E,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,GAAK,YAAc,YAAc,YAAc,iBAAmB,YAChF,YAAc,YAAc,iBAAmB,YAAc,WAAa,YAC1E,kBAAoB,YAAc,WAAa,YAAc,kBAAoB,YACjF,YAAc,YAAc,kBAAoB,YAAc,GAAK,YACnE,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,WAAa,YAAc,kBAAoB,YAAc,YAC3E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,kBAAoB,YAAc,YAC5E,YAAc,kBAAoB,YAAc,YAAc,YAC9D,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,WAAa,kBAAoB,YAAc,YAAc,GACzF,kBAAoB,YAAc,YAAc,WAAa,kBAAoB,YACjF,YAAc,YAAc,iBAAmB,YAAc,YAAc,YAC3E,kBAAoB,YAAc,YAAc,YAAc,kBAC9D,YAAc,YAAc,YAAc,iBAAmB,YAAc,YAC3E,YAAc,EAAK,YAAc,YAAc,aAEjDC,YAAa,Y,+DC7gDjB,MAAM,iBAAEC,IAAqBC,EAAAA,UAAAA,SAQdhb,eAAeib,IAAK,gBACjC94B,EAAe,gBACfiN,EAAe,iBACfof,EAAgB,UAChB0M,IAIAv5B,OAAOw5B,iBAAmB,wBAKpBC,EAAAA,EAAAA,MAAS,CACbC,WAAYH,EAAUG,aAIxB9T,EAAAA,mBAA+B+T,QAAQJ,EAAUK,kBAEjDhU,EAAAA,iBAA6B,IACxBA,EAAAA,mBACHiU,UAAW,IACNjU,EAAAA,mBAA+BiU,UAClCC,gCAAiCP,EAAUO,mCAK/C,MAAM,aAAEC,GAAiBR,EACrBQ,GACFnU,EAAAA,MAAkBoU,gBAAgBD,GvChCvB,WACbxX,EAAAA,eAAe0X,cAAe,EAC9BjV,EAAAA,GAA6BiV,cAAe,EAC5C/U,EAAAA,GAAmB+U,cAAe,EAClCpX,EAAAA,mBAAmBoX,cAAe,EAClCzW,EAAAA,oBAAoByW,cAAe,EACnCzV,EAAAA,sCAAsCyV,cAAe,GAErDX,EAAAA,EAAAA,MAAK,CACHY,OAAQ,CACNC,QAAOA,GAETC,cAAe,CACbC,oBAAqB,CACnBtkB,SAAS,OAIfukB,EAAAA,EAAAA,SAAQla,EAAAA,UACRka,EAAAA,EAAAA,SAAQ5V,EAAAA,2BACR4V,EAAAA,EAAAA,SAAQ9Z,EAAAA,kBACR8Z,EAAAA,EAAAA,SAAQ5Z,EAAAA,kBACR4Z,EAAAA,EAAAA,SAAQxZ,EAAAA,mBACRwZ,EAAAA,EAAAA,SAAQ1Z,EAAAA,WACR0Z,EAAAA,EAAAA,SAAQjZ,EAAAA,YACRiZ,EAAAA,EAAAA,SAAQtZ,EAAAA,qBACRsZ,EAAAA,EAAAA,SAAQ3iB,EAAAA,aACR2iB,EAAAA,EAAAA,SAAQ/Y,EAAAA,mBACR+Y,EAAAA,EAAAA,SAAQ7Y,EAAAA,4BACR6Y,EAAAA,EAAAA,SAAQ3Y,EAAAA,oBACR2Y,EAAAA,EAAAA,SAAQzY,EAAAA,gBACRyY,EAAAA,EAAAA,SAAQvY,EAAAA,oBACRuY,EAAAA,EAAAA,SAAQha,EAAAA,oBACRga,EAAAA,EAAAA,SAAQnZ,EAAAA,gBACRmZ,EAAAA,EAAAA,SAAQrY,EAAAA,YACRqY,EAAAA,EAAAA,SAAQnY,EAAAA,gBACRmY,EAAAA,EAAAA,SAAQjY,EAAAA,cACRiY,EAAAA,EAAAA,SAAQ/X,EAAAA,iBACR+X,EAAAA,EAAAA,SAAQnX,EAAAA,wBACRmX,EAAAA,EAAAA,SAAQjX,EAAAA,qBACRiX,EAAAA,EAAAA,SAAQrX,EAAAA,qBACRqX,EAAAA,EAAAA,SAAQ7X,EAAAA,YACR6X,EAAAA,EAAAA,SAAQ3X,EAAAA,gBACR2X,EAAAA,EAAAA,SAAQzX,EAAAA,qBACRyX,EAAAA,EAAAA,SAAQ5iB,IACR4iB,EAAAA,EAAAA,SAAQvX,EAAAA,sBACRuX,EAAAA,EAAAA,SAAQ7e,IACR6e,EAAAA,EAAAA,SAAQ9W,EAAAA,sBACR8W,EAAAA,EAAAA,SAAQ5W,EAAAA,4BACR4W,EAAAA,EAAAA,SAAQ1W,EAAAA,4BACR0W,EAAAA,EAAAA,SAAQpW,EAAAA,wBACRoW,EAAAA,EAAAA,SAAQxW,EAAAA,gBACRwW,EAAAA,EAAAA,SAAQtW,EAAAA,sBACRsW,EAAAA,EAAAA,SAAQlW,EAAAA,wBACRkW,EAAAA,EAAAA,SAAQhW,EAAAA,wBACRgW,EAAAA,EAAAA,SAAQ9V,EAAAA,wCACR8V,EAAAA,EAAAA,SAAQ1V,EAAAA,oBACR0V,EAAAA,EAAAA,SAAQxV,EAAAA,mBACRwV,EAAAA,EAAAA,SAAQtV,EAAAA,KACRsV,EAAAA,EAAAA,SAAQpV,EAAAA,KACRoV,EAAAA,EAAAA,SAAQlV,EAAAA,uBAER,MAKMmV,EAAgB9gB,EAAAA,WAAAA,OAAAA,MAAwB+gB,uBAC9C/gB,EAAAA,WAAAA,OAAAA,MAAwBghB,qBAAqB,CAC3CC,OAAQ,IACHH,EAAcG,OAPnBC,gBAAiB,OACjBC,UAAW,QAUf,CuCvCEC,GAEAC,EAAAA,SAASC,qBAAqBzf,IAAI,aAAcqe,QAAQJ,EAAUyB,aAElE,MAAM,0BACJC,EAAyB,qBACzBl1B,EAAoB,eACpBm1B,EAAc,sBACdC,EAAqB,2BACrBz6B,EAA0B,uBAC1B06B,EAAsB,oBACtBjyB,EAAmB,oBACnBtB,EAAmB,mBACnBjH,EAAkB,gBAClB8M,EAAe,kBACf3J,EAAiB,eACjBs3B,GACE76B,EAAgBK,SAEpBw6B,EAAeC,8BAA8B5tB,EAAiB,CAC5DA,EAAgB7K,OAAO4O,gBAGzBzR,OAAOa,SAAWL,EAAgBK,SAClCb,OAAO6sB,iBAAmBA,EAC1B7sB,OAAOyN,gBAAkBA,EAErB8rB,EAAUgC,wBAA0B3V,EAAAA,4BAuO1C,SAAgCsV,EAAgBE,GAC9C,MAAMI,EAAWC,IACf,GAAiB,MAAbA,EAMF,OALAP,EAAeQ,KAAK,CAClBC,QAASC,GACTvhB,MAAO,qCAGF,IAIL,YAAEzW,GAAgBw3B,EAAuBx4B,UAC7Cw4B,EAAuBv4B,OAAOg5B,iBAC9B,KACeL,EAAS,MAGpB53B,KAIR,CA5PIk4B,CAAuBZ,EAAgBE,GAEzC,MAAQW,kBAAmBC,GAAyBC,GAAAA,EAAwBzkB,YAEpEukB,kBAAmBG,GACzBC,GAAAA,EAAiC3kB,YAE3BukB,kBAAmBK,GAA8BC,GAAAA,EAA6B7kB,WAGtFrO,EAAoBmzB,0BAClB,yBACAF,GAEFjzB,EAAoBmzB,0BAA0B,oBAAqBN,GACnE7yB,EAAoBmzB,0BAClB,6BACAJ,GAGFK,EAAAA,aAAAA,OAAAA,MAAAA,SACE,CAAE1hB,KAAM2hB,GAAAA,4BAA4BC,SACpC,CACEC,YAAY,IAIhB,MAAMC,EAAmBC,EAAAA,GAAAA,QAAaC,iBAEtC1lB,EAAAA,aAAAA,qBACE,kCACA2lB,EAAAA,IAGF3lB,EAAAA,aAAAA,qBACE,yCACA4lB,EAAAA,IAIF,MAAMC,EAAsB,CAC1BC,iBAAkBtK,GAClBwD,sBAAuBA,GACvB+G,IAAKC,IAGP12B,OAAOc,QAAQy1B,GAAqBx5B,QAAQ,EAAEmnB,EAAMyS,MAClDhC,EAAuBiC,0BACrB1S,EACA2S,GAA8BF,MAKlC5hB,EAAAA,SAAAA,YACE6d,EAAAA,UAAAA,uCAAmD5oB,IAAIwkB,KACrDoE,EAAAA,UAAAA,yCAGJ7d,EAAAA,SAAAA,YAAqBmhB,EAAiBlsB,IAAIwkB,KAAK0H,GAAmB,MAIlE7K,EAAAA,qBAAqByL,eAAiB,CACpC,CAACC,EAAAA,EAAaC,aAAclE,GAAWgE,gBAAgBG,aAAe,GACtE,CAACF,EAAAA,EAAaG,WAAYpE,GAAWgE,gBAAgBK,WAAa,EAClE,CAACJ,EAAAA,EAAa3L,UAAW0H,GAAWgE,gBAAgBM,UAAY,EAChE,CAACL,EAAAA,EAAaM,SAAUvE,GAAWgE,gBAAgBQ,SAAW,I7C1KnD,SACb9C,EACA1B,EACA1M,GAEA3V,EAAqB,kCAAmC4lB,EAAAA,IAExD5lB,EACE,yCACA6lB,EAAAA,IAGFiB,EAAAA,GAAAA,KAAsB,CACpBC,cAAe/wB,KAAK2B,IAClB3B,KAAK4B,IAAIovB,UAAUC,oBAAsB,EAAG,GAC5C5E,EAAU6E,uBAEZC,WAAY,SAAUC,GAEpB,MAAMC,EAAe1R,EAAiB2R,wBAAwB,GAAGC,aAAe,CAAC,EAC3EC,EAAUzD,EAA0B0D,yBAOpCC,EAAoB,CACxBC,OAPmB91B,EAAAA,GAAM+1B,qBACzBP,EAAaQ,aACbR,EAAaS,yBACbT,EAAaU,mCAWf,OAJIP,GACFj4B,OAAO6hB,OAAOsW,EAAmBF,GAG5BE,CACT,EACAM,iBAAkB7tB,IAChB8tB,EAAAA,GAAaC,oBAAoB/tB,KAGvC,C6CoIEguB,CAAoBpE,EAA2B1B,EAAW1M,GAG1D7U,KAAKsnB,yBAA2B1S,GAAiC,CAC/DpsB,kBACAiN,kBACAof,qBAGF0S,GAAgB/+B,GAChBg/B,GAA2Bh/B,GAE3BI,EAAmBgC,UAAUhC,EAAmBiC,OAAO48B,oBAAqB/5B,IAC1E,MAAM,YAAE/D,GAAgB+D,GAChB5D,IAAKwjB,GAAkB3jB,EAC/B8L,EAAgBopB,WAAW,4BAA6B,CAAEl1B,cAAa2jB,gBAAe5f,UAIxF01B,EAAuBx4B,UACrBw4B,EAAuBv4B,OAAO68B,4BAC9BC,IACE,MAAM,qBAAEC,GAAyB3D,GAAAA,EAAwBzkB,YACnD,8BAAEqoB,GAAkC1D,GAAAA,EAAiC3kB,YACrE,0BAAEsoB,GAA8BzD,GAAAA,EAA6B7kB,WAEnE,IAAK,MAAMnC,KAASsqB,EAAoBp4B,UAAW,CACjD,MAAO1J,EAAY+0B,GAAoBvd,EACjClT,EAAWzB,EAA2B0B,uBAAuBvE,GAE7DkiC,EAAer/B,EAA2BuO,gBAAgBpR,IAE1D,gBAAEmiC,GAAoBD,EAAatwB,qBAEnCwwB,EAAgB,CACpBC,qBAAsBJ,EAA0BE,GAAiBG,wBACjEC,gBAAiBR,EAAqBI,GAAiBK,mBACvDC,yBACET,EAA8BG,GAAiBO,6BAGnD7/B,EAA2B8/B,sBAAsBr+B,EAAUywB,EAAkBqN,EAC/E,IAIJQ,GAAgB,CACd//B,6BACAqF,uBACA0H,oBAGFizB,GAAgB,CACd36B,uBACA0H,oBAOF,MAAMkzB,EAAyBA,EAAG/uB,aAChButB,EAAAA,GAAaC,qBAC7BwB,CAAQhvB,EAAOP,QAGjBid,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAO2vB,kBAAmBmO,GACvDrS,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAOg+B,iBAAkBF,GA8BtDrS,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAOg1B,gBArBpC,SAA+BnyB,GAC7B,MAAM,QAAEhH,GAAYgH,EAAIkM,QAClB,SAAEzP,IAAamV,EAAAA,EAAAA,mBAAkB5Y,IFnP5B,UAAwB,QAAEA,IACvC,IAAK25B,GAAkBn2B,OAAQ,CAG7B,MAAQw2B,EAAAA,GAAe3mB,EAAAA,GAEvBsmB,GAAkB30B,KAChBg1B,EAAWK,2BACXL,EAAWC,4BACXD,EAAWE,qBAEf,CAEKP,GAAkBloB,KAAK3J,GAAO+mB,EAAAA,GAAIuT,WAAWt6B,MAGlD8xB,GAAYC,kBAAoB,EAChC75B,EAAQuB,iBAAiB4C,EAAAA,OAAOi2B,eAAgBN,IAClD,CEkOIuI,CAAe,CAAEriC,YAEjBA,EAAQuB,iBAAiB4C,EAAAA,OAAOm+B,aAAct7B,IAC5C,MAAM,QAAEhH,GAAYgH,EAAIkM,OAClBsG,GAAiBZ,EAAAA,EAAAA,mBAAkB5Y,GACzC,IAAKwZ,EACH,OAEF,MAAM,WAAEra,GAAeqa,EACvBzK,EAAgBopB,WAAW,kBAAmB,CAAEh5B,iBAI9CsE,EAAS0Y,KAAS+K,EAAAA,MAAAA,aAA+Bqb,YAGvD,EAE2EhM,KAAK,OAEhFxhB,GAAUjQ,QAAQ41B,IAGlB9K,EAAAA,YAAY4S,0BACVr+B,EAAAA,OAAOs+B,YACP,EAAGvvB,aAED,MAAMwvB,EAAU,qBAAqBxvB,EAAOiJ,QAAQjJ,EAAOyvB,QAAQC,UAAU,EAAG,MAEhFnG,EAAsBO,KAAK,CACzBrhB,MAAOzI,EAAOiJ,KACdwmB,QAASzvB,EAAOyvB,QAChBxmB,KAAM,QACNzK,GAAIgxB,EACJG,iBAAiB,EACjBC,sBAAuB,OAG3B,KCnSG,SAA4CrG,GAEjD,MAAMsG,EAAoB,IAAItmB,IAQ9BmT,EAAAA,YAAYruB,iBAAiB4C,EAAAA,OAAO6+B,oBAAqB,EAAG9vB,aAC1D,IAAI+vB,EACAC,GAAgB,EAEpB,IACE,MAAM,SAAEnG,EAAQ,KAAE5gB,EAAI,GAAEzK,GAAOwB,EAG/B,GAAIiJ,IAAS0hB,EAAAA,MAAAA,YAAmCsF,mBAC9C,OAKF,GAFAF,EAhB0B9mB,IACrB,eAAeA,EAAKinB,cAAcC,QAAQ,OAAQ,OAevCC,CAAqBnnB,GAEpB,IAAb4gB,EAEF,GAAKgG,EAAkB3X,IAAI6X,GAsCzBrwB,QAAQyD,MAAM,uBAAuB8F,gDAtCI,CACzC,MAAMonB,EAAkB,IAAIhoB,QAAQ,CAACC,EAASC,KAC5C,IACEsnB,EAAkBnmB,IAAIqmB,EAAe,CACnCznB,UACAC,SACA+nB,WAAY9xB,EACZyK,QAEJ,CAAE,MAAOxJ,GAGP,MAFAC,QAAQD,MAAM,8CAA8CwJ,MAAUxJ,GACtE8I,EAAO9I,GACDA,CACR,IAGF,IACE8pB,EAAsBO,KAAK,CACzBtrB,GAAIuxB,EACJtnB,MAAO,GAAGQ,IACVwmB,QAAS,eACTc,WAAW,EACXZ,iBAAiB,EACjBC,sBAAuB,IACvBY,QAASH,EACTI,gBAAiB,CACfC,QAAS,eACTC,QAAS,yBACTlxB,MAAO,sBAGb,CAAE,MAAOA,GAGP,MAFAC,QAAQD,MAAM,mDAAmDwJ,MAAUxJ,GAC3EuwB,GAAgB,EACVvwB,CACR,CACF,MAMG,GAAiB,MAAboqB,EAAkB,CAEzB,MAAM+G,EAAWf,EAAkBhxB,IAAIkxB,GAEvC,GAAIa,EAAU,CAEZ,MAAM,QAAEtoB,GAAYsoB,EACpBtoB,EAAQ,CAAEuhB,WAAU5gB,SAGpB+mB,GAAgB,EAEhBtwB,QAAQyD,MAAM,gBAAgB8F,4BAChC,CACF,CACF,CAAE,MAAOxJ,GACPC,QAAQD,MAAM,kDAAkDO,GAAQiJ,SAAUxJ,GAClFuwB,GAAgB,CAClB,CAAE,QAEA,GAAIA,GAAiBD,EACnB,IACEF,EAAkBgB,OAAOd,EAC3B,CAAE,MAAOe,GACPpxB,QAAQD,MACN,kDAAkDO,GAAQiJ,SAC1D6nB,EAEJ,CAEJ,GAEJ,CDqMEC,CAAmCniC,EAAgBK,SAASs6B,sBAC9D,CArQCn7B,OAAe4lB,YAAcA,EAC7B5lB,OAAeu8B,iBAAmBA,EA2QnC,MAAMe,GAAiCF,GAC7BvlB,IACN,MAAM+qB,EAAeC,GAAAA,8BAA8BC,QACnDD,GAAAA,8BAA8B1N,QAE9B,IAEE,OADeiI,EAAWvlB,EAE5B,CAAE,QAEA9X,WAAW,KACT8iC,GAAAA,8BAA8BE,QAAQH,IACrC,GACL,GAIJ,SAAShH,KACP,OACExtB,EAAAA,cAAA,WACEA,EAAAA,cAAA,SAAG,kRAOT,CErVA,UACE,0BAA2B,CACzB,CACEgC,GAAI,YACJ4yB,aAAc,mBACdr+B,MAAO,GACP0V,MAAO,aACP4oB,UAAWA,EAAGC,uBAAwBA,GAAmBC,UACzDC,SAAUA,EAAGF,oBAAmBG,YAAcC,iBAC5CA,EAAWJ,EAAkBC,YAEjC,CACE/yB,GAAI,oBACJ4yB,aAAc,mBACdr+B,MAAO,GACP0V,MAAO,qBACP4oB,UAAWA,EAAGC,uBACLA,GAAqBA,EAAkBK,kBAEhDH,SAAUA,EAAGF,uBAAwBA,EAAkBK,oBAG3D,2BAA4B,GAC5B,6BAA8B,CAC5B,CACEnzB,GAAI,cACJ4yB,aAAc,gCAEhB,CACE5yB,GAAI,YACJ4yB,aAAc,6BACdC,UAAWO,GAEiB,SADHA,EAAMC,iBAAiBC,yBAAyBF,EAAM3lC,cAKnF,8BAA+B,CAC7B,CACEuS,GAAI,iBACJ4yB,aAAc,qC,4BCpBb,MAAMW,GAA4BA,KACvC,MAAM,gBAAEl2B,IAAoBhN,EAAAA,EAAAA,OACtB,IAAQmjC,EAAAA,GAAAA,IAAe,sBACvB,kBACJC,EAAiB,iCACjBC,EAAgC,mBAChCC,EAAkB,qBAClBC,EAAoB,cACpBC,EAAa,mBACbC,EAAkB,qBAClBC,IACEC,EAAAA,GAAAA,KAA4B,sBAGhC,IAAIt+B,EACA2E,EACA45B,GAAc,EAElB,IAGEv+B,GADgBw+B,EAAAA,GAAAA,OACOx+B,aACvB2E,EAAiB3E,EAAa2E,cAChC,CAAE,MAAO85B,GAEPz+B,EAAeo+B,EACfz5B,EAAiB05B,CACnB,CAGA,GAAIF,GAAiBx5B,EAAgB,CACnC,MAAM+5B,EAAeP,EAAc9zB,KAAKs0B,GAAOA,EAAIh6B,iBAAmBA,GACtE45B,EAAcG,GAAcE,eAAgB,CAC9C,CAEA,IAAK5+B,IAAiB2E,EACpB,OAAO,KAGT,MAAMk6B,EACetmB,UACjB5Q,EAAgBkF,IAAI,CAClBC,YAAa,oBACbC,eAAgB,CAAEpI,kBAClBqI,QAAS,iBALT6xB,EAQwBl6B,IAC1BgD,EAAgBkF,IAAI,eAAgB,CAAElI,oBATpCk6B,EAWoBl6B,IACtBgD,EAAgBkF,IAAI,uBAAwB,CAAElI,oBAZ5Ck6B,EAc2Bl6B,IAC7BgD,EAAgBkF,IAAI,gCAAiC,CAAElI,oBAI3D,OACE2D,EAAAA,cAACw2B,GAAAA,IAAmB,CAACC,MAAM,SACzBz2B,EAAAA,cAAC02B,GAAAA,IAAgB,CAACC,QAASA,IAAMlB,EAAkBp5B,IACjD2D,EAAAA,cAAC42B,GAAAA,IAAMC,IAAG,CAACC,UAAU,oBACrB92B,EAAAA,cAAA,QAAM82B,UAAU,QAAQC,EAAE,6BAE5B/2B,EAAAA,cAACg3B,GAAAA,IAAqB,MACtBh3B,EAAAA,cAACi3B,GAAAA,IAAiB,KAAEF,EAAE,gCACtB/2B,EAAAA,cAAC02B,GAAAA,IAAgB,CAACC,QAASA,IAAMjB,EAAiCr5B,IAChE2D,EAAAA,cAAC42B,GAAAA,IAAMM,OAAM,CAACJ,UAAU,oBACxB92B,EAAAA,cAAA,QAAM82B,UAAU,QAAQC,EAAE,0BAE5B/2B,EAAAA,cAAC02B,GAAAA,IAAgB,CAACC,QAASA,IAAMhB,EAAmBt5B,IAClD2D,EAAAA,cAAC42B,GAAAA,IAAMO,OAAM,CAACL,UAAU,oBACxB92B,EAAAA,cAAA,QAAM82B,UAAU,QAAQC,EAAE,YAE5B/2B,EAAAA,cAACo3B,GAAAA,IAAe,KACdp3B,EAAAA,cAACq3B,GAAAA,IAAsB,CAACP,UAAU,QAChC92B,EAAAA,cAAC42B,GAAAA,IAAMU,OAAM,CAACR,UAAU,oBACxB92B,EAAAA,cAAA,QAAM82B,UAAU,QAAQC,EAAE,uBAE5B/2B,EAAAA,cAACu3B,GAAAA,IAAkB,KACjBv3B,EAAAA,cAACw3B,GAAAA,IAAsB,KACrBx3B,EAAAA,cAACi3B,GAAAA,IAAiB,CAACH,UAAU,0BAC3B92B,EAAAA,cAAC42B,GAAAA,IAAMa,SAAQ,CAACX,UAAU,YAC1B92B,EAAAA,cAAA,QAAM82B,UAAU,QAAQC,EAAE,cAE5B/2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACfC,QAASR,IACPA,EAAEuB,iBACFnB,EAAsCl6B,IAExC+L,UAAW6tB,GAEVc,EAAE,eAEL/2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACfC,QAASR,IACPA,EAAEuB,iBACFnB,EAA+Bl6B,IAEjC+L,UAAW6tB,GAEVc,EAAE,cAEL/2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACfC,QAASR,IACPA,EAAEuB,iBACFnB,EAAmCl6B,IAErC+L,UAAW6tB,GAEVc,EAAE,eAEL/2B,EAAAA,cAACg3B,GAAAA,IAAqB,MACtBh3B,EAAAA,cAACi3B,GAAAA,IAAiB,CAACH,UAAU,0BAC3B92B,EAAAA,cAAC42B,GAAAA,IAAMU,OAAM,CAACR,UAAU,YACxB92B,EAAAA,cAAA,QAAM82B,UAAU,aAAaC,EAAE,YAEjC/2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACfC,QAASR,IACPA,EAAEuB,iBACFnB,EAA0Bl6B,IAE5B+L,UAAW6tB,GAEVc,EAAE,iBAKX/2B,EAAAA,cAACg3B,GAAAA,IAAqB,MACtBh3B,EAAAA,cAAC02B,GAAAA,IAAgB,CAACC,QAASA,IAAMf,EAAqBv5B,IACpD2D,EAAAA,cAAC42B,GAAAA,IAAMe,OAAM,CAACb,UAAU,iBACxB92B,EAAAA,cAAA,QAAM82B,UAAU,qBAAqBC,EAAE,cCzIlCa,GAAgCA,EAC3Cv7B,iBACAjD,mBAEA,MAAM,gBAAEhH,EAAe,gBAAEiN,IAAoBhN,EAAAA,EAAAA,OACvC,oBAAEoH,GAAwBrH,EAAgBK,UAC1C,EAAEskC,IAAMvB,EAAAA,GAAAA,IAAe,qBAKvBqC,EAHep+B,EAAoBgP,gBAAgBpM,GAC5BzE,SAASwB,GACVH,YACG4+B,WAE/B,IAAKA,EACH,OAAO,KAGT,MAAMC,EAAgBD,EAAWC,cAEjC,IAAKA,EACH,OACE93B,EAAAA,cAAA,OAAK82B,UAAU,mBACb92B,EAAAA,cAAA,OAAK82B,UAAU,QACb92B,EAAAA,cAAC+3B,GAAAA,IAAO,KACN/3B,EAAAA,cAACg4B,GAAAA,IAAc,CAACC,SAAO,GACrBj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,KACL6R,UAAU,uCACVH,QAASA,KACPt3B,EAAgBkF,IAAI,0BAA2B,CAC7ClI,iBACAjD,mBAIJ4G,EAAAA,cAAC42B,GAAAA,IAAMwB,yBAAwB,CAACtB,UAAU,YAC1C92B,EAAAA,cAAA,YAAO+2B,EAAE,oCAGb/2B,EAAAA,cAACq4B,GAAAA,IAAc,CAACC,KAAK,UAAUvB,EAAE,oCAGrC/2B,EAAAA,cAACu4B,GAAAA,IAAS,CAACzB,UAAU,cAK3B,MAAM,MAAEr+B,EAAK,KAAEsgB,GAAS+e,EAClBU,EAAW//B,EAAM+/B,SACjBC,EAAWhgC,EAAMggC,SAEjB/3B,EAAM5B,KAAK4B,IAAI83B,EAAUC,GACzBh4B,EAAM3B,KAAK2B,IAAI+3B,EAAUC,GAEzBngB,EAAY6V,EAAAA,WAAAA,WAAAA,oBAChB2J,EAAc5gB,eAGhB,OACElX,EAAAA,cAAA,OAAK82B,UAAU,mBACb92B,EAAAA,cAAA,OAAK82B,UAAU,qCACb92B,EAAAA,cAAA,OAAK82B,UAAU,mBACb92B,EAAAA,cAAA,WAAK,OACCnH,EAAAA,EAAAA,IAAY6H,GAAK,IAAEqY,GAEzB/Y,EAAAA,cAAA,WAAK,OACCnH,EAAAA,EAAAA,IAAY4H,GAAK,IAAEsY,IAG3B/Y,EAAAA,cAAA,OAAK82B,UAAU,cACb92B,EAAAA,cAAC+3B,GAAAA,IAAO,KACN/3B,EAAAA,cAACg4B,GAAAA,IAAc,CAACC,SAAO,GACrBj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLjT,KAAK,OACLkT,QAAQ,QACRrB,UAAW,6BACXH,QAASR,IACPA,EAAEuC,kBACFvK,EAAAA,WAAAA,WAAAA,wBACE2J,EAAc5gB,eACboB,GAGH7e,EAAoBk/B,wBAAwB,CAC1Ct8B,iBACAjD,mBAIHkf,EACCtY,EAAAA,cAAC42B,GAAAA,IAAMgC,KAAI,CAAC9B,UAAU,YAEtB92B,EAAAA,cAAC42B,GAAAA,IAAMiC,KAAI,CAAC/B,UAAU,cAI5B92B,EAAAA,cAACq4B,GAAAA,IAAc,CAACC,KAAK,UAAUvB,EAAE,uBAEnC/2B,EAAAA,cAAC+3B,GAAAA,IAAO,KACN/3B,EAAAA,cAACg4B,GAAAA,IAAc,CAACC,SAAO,GACrBj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL0R,QAASA,KACHmB,EAAc5gB,eAChB7X,EAAgBkF,IAAI,oBAAqB,CACvC7Q,IAAKokC,EAAc5gB,kBAKzBlX,EAAAA,cAAC42B,GAAAA,IAAMkC,YAAW,QAGtB94B,EAAAA,cAACq4B,GAAAA,IAAc,CAACC,KAAK,UAAUvB,EAAE,2BAIvC/2B,EAAAA,cAACu4B,GAAAA,IAAS,CAACzB,UAAU,eCjIZ,SAASiC,IAAkC,gBAAE15B,EAAe,gBAAEjN,IAC3E,MAAO,CACL,8CAA+CmjC,GAC/C,kDAAmDqC,GACnD,oCAAoC,EACpC,oCAAoC,EACpC,sCAAuCoB,KACrC,MAAM,oBAAEj+B,GAAwB3I,EAAgBK,SAC1ChD,EAAasL,EAAoBqO,WAAWrZ,iBAClDsP,EAAgBkF,IAAI,4BAA6B,CAAE9U,gBAErD,8BAA+B,YAC/B,iCAAkC,CAEhCgR,IAAK,YACLw4B,OAAQ,YACRv4B,IAAK,YACLw4B,OAAQ,YACR7d,KAAM,aACNC,OAAQ,qBACR6d,MAAO,cACPC,OAAQ,SACRC,SAAU,WACVC,SAAU,WACVC,UAAW,aACXC,QAAS,aACT7W,OAAQ,SACR8W,iBAAkB,oBAClBC,OAAQ,UAEV,6BAA8BC,KAE5B,MAAOC,EAAcC,IAAmBjqC,EAAAA,EAAAA,WAAS,IAC1CkqC,EAAsBC,IAA2BnqC,EAAAA,EAAAA,WAAS,IAC1DoqC,EAAyBC,IAA8BrqC,EAAAA,EAAAA,WAAS,GAgBvE,OACEoQ,EAAAA,cAAA,OAAK82B,UAAU,+EACb92B,EAAAA,cAAA,OAAK82B,UAAU,2BACb92B,EAAAA,cAACk6B,GAAAA,IAAM,CACLC,QAASP,EACTQ,gBApByBD,IAC/BN,EAAgBM,GAChB96B,EAAgBkF,IAAI,2BAA4B,CAAE81B,OAAQF,OAoBtDn6B,EAAAA,cAAA,QAAM82B,UAAU,wBAAuB,kCAGzC92B,EAAAA,cAAA,OAAK82B,UAAU,2BACb92B,EAAAA,cAACk6B,GAAAA,IAAM,CACLC,QAASH,EACTI,gBAlBoCD,IAC1CF,EAA2BE,GAC3B96B,EAAgBkF,IAAI,8BAA+B,CAAE81B,OAAQF,OAkBzDn6B,EAAAA,cAAA,QAAM82B,UAAU,wBAAuB,gCAGzC92B,EAAAA,cAAA,OAAK82B,UAAU,2BACb92B,EAAAA,cAACk6B,GAAAA,IAAM,CACLC,QAASL,EACTM,gBA/BiCD,IACvCJ,EAAwBI,GACxB96B,EAAgBkF,IAAI,sBAAuB,CAAE81B,OAAQF,OA+BjDn6B,EAAAA,cAAA,QAAM82B,UAAU,wBAAuB,0CAMnD,CCpFA,UACE,yCAA0CwD,EACxCloC,qBAmBgCmoC,GAC9BnoC,sBAIA,MAAM,uBAAE46B,EAAsB,oBAAEjyB,EAAmB,kBAAEpF,GACnDvD,EAAgBK,SAEZ+nC,EAAmB7hC,MAAMmf,KAAKkV,EAAuByN,UAAUziB,UAE/DvoB,EAAasL,EAAoB2/B,sBAEvC,IAAKjrC,EACH,MAAO,GAET,MAAMuW,EAAyBjL,EAAoB8B,8BAA8BpN,GAEjF,IAAKuW,EACH,MAAO,GAGT,MAAM/P,EAAc+P,EAAuBvS,IAAIC,IAC7C,MAAMsJ,EAAarH,EAAkByG,mBAAmB1I,GAClDinC,EAA0B39B,GAAY0jB,eAAe,IAAIlkB,sBAC/D,MAA4B,OAAxBQ,EAAWnC,UAAqB8/B,EAC3BhlC,EAAkByG,mBAAmBu+B,GAEvC39B,IAGT,OAAOw9B,EACJ/mC,IAAImnC,IACH,IAAKA,EAAGC,SACN,OAAO,KAGT,MAAMC,EAnDeC,EACzBH,EACA3kC,EACA+2B,KAEK4N,EAAGI,qBAAwE,IAAjD3iC,OAAO2f,OAAO4iB,EAAGI,qBAAqBlnC,QAI9Dk5B,EAAuBiO,0BAC5B5iC,OAAO2f,OAAO4iB,EAAGI,qBACjB/kC,EAAY,IAwCO8kC,CAAmBH,EAAI3kC,EAAa+2B,GAErD,MAAO,CACLkO,KAAMN,EAAGM,KACTjvB,MAAO2uB,EAAGre,KACV9X,eAAgB,CACd02B,WAAYP,EAAG54B,IAEjBoG,UAAW0yB,KAGd/9B,OAAO2F,GAAqB,OAAXA,IAGf63B,CAAwB,CAAEnoC,oBAEnC,+BAAgC,CAC9B,CACE8oC,KAAM,oBACNz2B,eAAgB,CACd22B,QAAS,EACTC,QAAS,IAGb,CACEH,KAAM,oBACNz2B,eAAgB,CACd22B,QAAS,EACTC,QAAS,IAGb,CACEH,KAAM,oBACNz2B,eAAgB,CACd22B,QAAS,EACTC,QAAS,IAGb,CACEH,KAAM,oBACNz2B,eAAgB,CACd22B,QAAS,EACTC,QAAS,MChGjB,IACE,mCAAoC,CAClCC,OAAQ,CACN,CACEtwB,SAAU8G,EAAUK,YACpBopB,SAAU,CAAC,CAAEC,YAAa73B,EAAAA,MAAAA,cAAoB83B,WAEhD,CACEzwB,SAAU8G,EAAUC,IACpBwpB,SAAU,CAAC,CAAEC,YAAa73B,EAAAA,MAAAA,cAAoB+3B,aAEhD,CACE1wB,SAAU8G,EAAUS,KACpBgpB,SAAU,CAAC,CAAEC,YAAa73B,EAAAA,MAAAA,cAAoBg4B,WAAa,CAAEC,eAAgB,KAE/E,CACE5wB,SAAU8G,EAAUO,YACpBkpB,SAAU,CAAC,CAAEC,YAAa73B,EAAAA,MAAAA,cAAoBk4B,OAAS,CAAED,eAAgB,MAG7Ej0B,QAAS,CACP,CACEqD,SAAU8G,EAAUqE,kCACpBzI,cAAe,CACbouB,6BAA6B,OC3BvC,IACEC,iCAAkC,CAChCC,YAAa,CAAC,eACdC,QAAS,CAAC,oBACVC,QAAS,CACP,CACE13B,YAAa,6BACbC,eAAgB,CACd+kB,uBAAuB,EACvB2S,OAAQ,+BCTlB,IACE,2BAA4B,CAC1BvoB,MAAO,CACLnd,YAAa,GACb6lB,OAAQ,IAEVxI,UAAW,CACTrd,YAAa,GACb6lB,OAAQ,IAEVrK,cAAe,CACbxb,YAAa,GACb6lB,OAAQ,IAEV8f,aAAc,CACZ3lC,YAAa,GACb6lB,OAAQ,IAEV9I,UAAW,CACT/c,YAAa,GACb6lB,OAAQ,IAEVhJ,cAAe,CACb7c,YAAa,GACb6lB,OAAQ,IAEV5I,cAAe,CACbjd,YAAa,GACb6lB,OAAQ,IAEVzJ,OAAQ,CACNpc,YAAa,GACb6lB,OAAQ,IAEV3G,gBAAiB,CACflf,YAAa,GACb6lB,OAAQ,IAEV7G,UAAW,CACThf,YAAa,CACX,CACE4lC,YAAa,QACb5jC,MAAO,OACPgU,KAAM,SAER,CACEhU,MAAO,YACP6jC,IAAK,CAAC,QACN7vB,KAAM,SAGV6P,OAAQ,CACN,CACE+f,YAAa,OACb5jC,MAAO,OACPgU,KAAM,SAER,CACE4vB,YAAa,OACb5jC,MAAO,YACPgU,KAAM,WAIZoJ,kBAAmB,CACjB0mB,gBAAiB,CACf,CACEF,YAAa,SACb5jC,MAAO,SACPgU,KAAM,UAGVhW,YAAa,CACX,CACE4lC,YAAa,OACb5jC,MAAO,OACPgU,KAAM,SAER,CACE4vB,YAAa,MACb5jC,MAAO,MACPgU,KAAM,SAER,CACE4vB,YAAa,OACb5jC,MAAO,OACPgU,KAAM,SAER,CACEhU,MAAO,kBACP6jC,IAAK,CAAC,OAAQ,OACd7vB,KAAM,QAER,CACEhU,MAAO,YACP6jC,IAAK,CAAC,QACN7vB,KAAM,SAGV6P,OAAQ,CACN,CACE+f,YAAa,OACb5jC,MAAO,OACPgU,KAAM,SAER,CACE4vB,YAAa,MACb5jC,MAAO,MACPgU,KAAM,SAER,CACE4vB,YAAa,OACb5jC,MAAO,OACPgU,KAAM,SAER,CACE4vB,YAAa,OACb5jC,MAAO,OACPgU,KAAM,cCpHV,iBAAE+vB,IAAqBC,EAAAA,UAE7B,IACE,gCAAiC,CAC/Bz7B,uBAAwBw7B,GACxBv7B,4BAA6B,CAC3BR,IAAK,EACLC,IAAK,EACLQ,KAAM,KCENw7B,GAAwC,SAUxCC,GAAgD,CACpDrrC,OAAQ,CACNiU,SAAU,MACVE,MAAO,CACLm3B,YAAa,EACb72B,YAAa,KAGjB3U,MAAO,CACLmU,SAAU,OACVE,MAAO,CACLM,YAAa,IAGjB5U,KAAM,CACJoU,SAAU,QACVE,MAAO,CACLM,YAAa,IAGjB1U,IAAK,CACHkU,SAAU,SACVE,MAAO,CACLM,YAAa,KAMiBR,OAuCpC,UACE,uBAZkD,CAClDN,sBA7BkCM,GA6Bem3B,GA5BhC,WAAbn3B,GACK,MACe,QAAbA,GACF,SACe,SAAbA,GACF,QACe,UAAbA,GACF,OAGFo3B,GAAmBp3B,KAAWA,UAAY,OAmBjDF,UAAWA,GACXw3B,0BAA2BH,GAC3Bx3B,wBAtEsB,YAuEtB43B,eArE4C,CAC5C3rC,KAAM,CAAE4T,MAAO,QACf3T,MAAO,CAAE2T,MAAO,QAChBzT,OAAQ,CAAEud,OAAQ,SAmElB8tB,sBACAI,gBApB0C,CAC1CC,OAAQ,WAoBRC,WAhBgC,CAChCv3B,KAAM,aACNC,MAAO,OACPC,YAAa,EACbC,SAAU,EACVC,UAAW,KC5Eb,IACE,8CAA+C,CAC7Co3B,gBAAiB,CACfC,GAAI,CACFp6B,SAAU,MAKV9C,QAAS,IAEXm9B,OAAQ,CACNr6B,SAAU,UAMV9C,QAAS,OChBjB,IACE,iCCDgC,CAChCo9B,GAAI,CACF,CAAEr7B,GAAI,iBAAkB+oB,YAAa,cAAen5B,OAAQ,MAAO0rC,MAAO,MAC1E,CAAEt7B,GAAI,UAAW+oB,YAAa,OAAQn5B,OAAQ,OAAQ0rC,MAAO,QAC7D,CAAEt7B,GAAI,WAAY+oB,YAAa,QAASn5B,OAAQ,MAAO0rC,MAAO,MAC9D,CAAEt7B,GAAI,UAAW+oB,YAAa,OAAQn5B,OAAQ,OAAQ0rC,MAAO,OAC7D,CAAEt7B,GAAI,WAAY+oB,YAAa,QAASn5B,OAAQ,KAAM0rC,MAAO,OAG/DH,GAAI,CACF,CAAEn7B,GAAI,aAAc+oB,YAAa,UAAWn5B,OAAQ,IAAK0rC,MAAO,OAChE,CAAEt7B,GAAI,WAAY+oB,YAAa,MAAOn5B,OAAQ,IAAK0rC,MAAO,KAC1D,CAAEt7B,GAAI,WAAY+oB,YAAa,MAAOn5B,OAAQ,IAAK0rC,MAAO,KAC1D,CAAEt7B,GAAI,WAAY+oB,YAAa,MAAOn5B,OAAQ,IAAK0rC,MAAO,KAC1D,CAAEt7B,GAAI,WAAY+oB,YAAa,MAAOn5B,OAAQ,IAAK0rC,MAAO,KAC1D,CAAEt7B,GAAI,YAAa+oB,YAAa,MAAOn5B,OAAQ,IAAK0rC,MAAO,MAC3D,CAAEt7B,GAAI,YAAa+oB,YAAa,MAAOn5B,OAAQ,IAAK0rC,MAAO,S,8DCdxD,MAAM7oC,GAAS,CACpB8oC,SAAU,oCAWL,IAAKC,GAAY,SAAZA,GAAY,OAAZA,EAAAA,EAAY,2BAAZA,EAAAA,EAAY,2BAAZA,EAAAA,EAAY,qBAAZA,EAAAA,EAAY,mBAAZA,EAAAA,EAAY,yBAAZA,CAAY,MAUjB,MAAMC,GAIXj0B,WAAAA,CAAYk0B,EAAwBzK,GAAiB,KAHrDA,aAAO,OACPyK,YAAM,EAGJ9zB,KAAKqpB,QAAUA,EACfrpB,KAAK8zB,OAASA,CAChB,EAGa,MAAMC,WAA0BC,EAAAA,GAS7Cp0B,WAAAA,CAAYq0B,EAAMzc,GAChBxT,MAAMnZ,IAAQ,KATRqpC,WAAK,OACLC,aAAO,OACPC,iBAAW,OACXC,kBAAY,OACZC,iBAAmB,IAAIC,gBAAiB,KACxCC,QAAwBZ,GAAaa,WAAU,KAC/CC,iBAAmB,EAIzB10B,KAAKk0B,MAAQD,EACbj0B,KAAKm0B,QAAUnO,EAAAA,GAAAA,QAAyB2O,YAAYtxB,IAAI4wB,GACxDj0B,KAAKo0B,YAAc5c,CACrB,CAEAod,SAAAA,GACE,OAAO50B,KAAKm0B,OACd,CAEAU,WAAAA,GACE,OAAO70B,KAAKk0B,MAAMvhB,IACpB,CAEAmiB,WAAAA,GACE,OAAO90B,KAAKk0B,MAAM7Y,IACpB,CAEAztB,MAAAA,GACEoS,KAAKs0B,iBAAiBS,OACxB,CAEAC,SAAAA,GACE,OAAOh1B,KAAKw0B,OACd,CAEAS,kBAAAA,GACE,OAAOj1B,KAAK00B,gBACd,CAEA,UAAMQ,GACJ,OAAIl1B,KAAKq0B,eAKTr0B,KAAKq0B,aAAe,IAAIpyB,QAAc,CAACC,EAASC,KAE9C,MAAMgzB,EAAkB,CACtB1R,SAAU/1B,IACHA,EAAI0nC,mBAKTp1B,KAAKw0B,QAAUZ,GAAayB,WAE5Br1B,KAAK00B,iBAAmBx/B,KAAK2L,MAAO,IAAMnT,EAAI4nC,OAAU5nC,EAAI6nC,OAC5Dv1B,KAAKw1B,gBAAgB3qC,GAAO8oC,SAAU,CACpC8B,OAAQz1B,KAAKm0B,QACbuB,gBAAiB11B,KAAK00B,qBAG1BiB,QAASA,KACP31B,KAAK41B,QAAQzzB,EAAQ,IAAI0xB,GAAgBD,GAAaiC,OAAQ,4BAEhEd,MAAOA,KACL/0B,KAAK41B,QAAQzzB,EAAQ,IAAI0xB,GAAgBD,GAAakC,UAAW,eAEnEz8B,MAAOA,KACL2G,KAAK41B,QAAQzzB,EAAQ,IAAI0xB,GAAgBD,GAAaiC,OAAQ,0BAKlE7P,EAAAA,GAAAA,QACG+P,gBAAgB/1B,KAAKm0B,SACrB3xB,KAAKwzB,IACJ,GAAIh2B,KAAKs0B,iBAAiB2B,OAAOC,QAE/B,YADAl2B,KAAK41B,QAAQzzB,EAAQ,IAAI0xB,GAAgBD,GAAakC,UAAW,cAInE,IAAK91B,KAAKm2B,gBAAgBH,GAMxB,YAJAh2B,KAAK41B,QACHzzB,EACA,IAAI0xB,GAAgBD,GAAaiC,OAAQ,4BAK7C,MAAMxZ,EAAU,IAAI+Z,eAIpB,OAHAp2B,KAAKq2B,qBAAqBha,EAAS8Y,GAG5Bn1B,KAAKo0B,YAAYkC,MACrBC,MAAMP,EAAW3Z,GACjB7Z,KAAK,KACJxC,KAAKw0B,QAAUZ,GAAa4C,QAC5Bt0B,MAEDu0B,MAAMC,IACL12B,KAAK41B,QAAQzzB,EAAQu0B,OAG1BD,MAAMC,IACL12B,KAAK41B,QAAQzzB,EAAQu0B,QAhElB12B,KAAKq0B,YAqEhB,CAEQsC,WAAAA,GACN,OAAO32B,KAAKw0B,UAAYZ,GAAaiC,QAAU71B,KAAKw0B,UAAYZ,GAAakC,SAC/E,CAEQF,OAAAA,CAAQzzB,EAAgCu0B,GAC9C,IAAI12B,KAAK22B,cAAT,CAIA,GAAID,aAAkB7C,GAGpB,OAFA7zB,KAAKw0B,QAAUkC,EAAO5C,YACtB3xB,EAAOu0B,GAIT12B,KAAKw0B,QAAUZ,GAAaiC,OAExBa,EAAOrN,QACTlnB,EAAO,IAAI0xB,GAAgBD,GAAaiC,OAAQa,EAAOrN,UAIzDlnB,EAAO,IAAI0xB,GAAgBD,GAAaiC,OAAQa,GAfhD,CAgBF,CAEQL,oBAAAA,CAAqBha,EAAyB8Y,GACpD,MAAMyB,EAAgBA,IAAMva,EAAQ0Y,QACpC/0B,KAAKs0B,iBAAiB2B,OAAOhuC,iBAAiB,QAAS2uC,GAEvD,IAAK,MAAO1W,EAAWsD,KAAa/0B,OAAOc,QAAQ4lC,GACjD9Y,EAAQwa,OAAO5uC,iBAAiBi4B,EAAWsD,GAG7C,MAAMsT,EAAkBA,KACtB92B,KAAKs0B,iBAAiB2B,OAAO/tC,oBAAoB,QAAS0uC,GAE1D,IAAK,MAAO1W,EAAWsD,KAAa/0B,OAAOc,QAAQ4lC,GACjD9Y,EAAQwa,OAAO3uC,oBAAoBg4B,EAAWsD,GAGhDnH,EAAQn0B,oBAAoB,UAAW4uC,IAEzCza,EAAQp0B,iBAAiB,UAAW6uC,EACtC,CAEQX,eAAAA,CAAgBvvB,GACtB,GAAIA,EAAY1c,QAAU,IACxB,OAAO,EAET,MAAM6sC,EAAM,IAAIC,WAAWpwB,EAAY0K,MAAM,IAAK,MAElD,OAAOviB,MAAMmf,KAAK,QAAQ+oB,MAAM,CAACC,EAAMtvB,IAAMsvB,EAAKC,WAAW,KAAOJ,EAAInvB,GAC1E,E,gBC3LF,MAAMwvB,IAA0BC,EAAAA,EAAAA,MAC9B,EAAGC,wBACD,MAAO5B,EAAiB6B,IAAsBvxC,EAAAA,EAAAA,UAASsxC,EAAkBrC,uBAClEuC,EAAcC,IAAmBzxC,EAAAA,EAAAA,UAAS,KAC1C8tC,EAAQ4D,IAAa1xC,EAAAA,EAAAA,UAASsxC,EAAkBtC,aAEjD2C,GAAarxC,EAAAA,EAAAA,aAAY,IAE3BwtC,IAAWF,GAAaiC,QACxB/B,IAAWF,GAAakC,WACxBhC,IAAWF,GAAa4C,QAEzB,CAAC1C,KAEJ3rC,EAAAA,EAAAA,WAAU,KACR,MAAMyvC,EAAuBN,EAAkB1sC,UAC7CC,GAAO8oC,SACNkE,IACCN,EAAmBM,EAA+BnC,mBAYtD,OARA4B,EACGpC,OACAuB,MAAOC,IACNgB,EAAUhB,EAAO5C,QACjB2D,EAAgBf,EAAOrN,SAAW,MAEnC7T,QAAQ,IAAMkiB,EAAUJ,EAAkBtC,cAEtC,IAAM4C,EAAqBhsC,eACjC,IAEH,MAAMksC,GAAexxC,EAAAA,EAAAA,aAAY,KAC/BgxC,EAAkB1pC,UACjB,IAsBH,OACEwI,EAAAA,cAAA,OAAK82B,UAAU,mGACb92B,EAAAA,cAAA,OAAK82B,UAAU,gDACb92B,EAAAA,cAAA,OAAK82B,UAAU,cACb92B,EAAAA,cAAA,OAAK82B,UAAU,iDAxBD6K,MACpB,OAAQT,EAAkBtC,aACxB,KAAKpB,GAAa4C,QAChB,OACEpgC,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CACXrlB,KAAK,iBACLua,UAAU,uBAGhB,KAAK0G,GAAayB,WAChB,OAAOj/B,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CAACrlB,KAAK,sBAC5B,KAAKihB,GAAaiC,OAChB,OAAOz/B,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CAACrlB,KAAK,qBAC5B,KAAKihB,GAAakC,UAChB,OAAO1/B,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CAACrlB,KAAK,uBAC5B,QACE,OAAOvc,EAAAA,cAAAA,EAAAA,SAAA,QAQ2D2hC,IAChE3hC,EAAAA,cAAA,OAAK82B,UAAU,8DACZoK,EAAkBzC,gBAGtB2C,GAAgBphC,EAAAA,cAAA,OAAK82B,UAAU,SAASsK,IAE3CphC,EAAAA,cAAA,OAAK82B,UAAU,2BACXyK,KACAvhC,EAAAA,cAAAA,EAAAA,SAAA,KACGkhC,EAAkBtC,cAAgBpB,GAAayB,YAC9Cj/B,EAAAA,cAAA,OAAK82B,UAAU,mBAAmBwI,EAAgB,KAEpDt/B,EAAAA,cAAA,OAAK82B,UAAU,+BACb92B,EAAAA,cAAC42B,GAAAA,IAAMiL,MAAK,CACV/K,UAAU,2BACVH,QAAS+K,UAW3BV,GAAwBc,UAAY,CAClCZ,kBAAmBa,KAAAA,WAAqBpE,IAAmBqE,YAG7D,YCxFMC,GAAa,IACbC,GAAaD,IACbE,GAAWD,KAUXE,GAAqB,KAMrBC,GAA+B,kDAErC,SAASC,IAAoB,qBAC3BC,EAAoB,WACpBC,IAEA,MAAM,gBAAEpwC,IAAoBC,EAAAA,EAAAA,MAEtBowC,EACJrwC,EAAgBK,SAASkF,qBAAqBG,iBAAiB,0BAE1D4qC,IAAmB9yC,EAAAA,EAAAA,UACxB2yC,EAAqBv/B,OAAO,CAAC2/B,EAAKC,IAAiBD,EAAMC,EAAalE,cAAe,IAGjFmE,GAAuBC,EAAAA,EAAAA,QAAe,GAEtCC,GAAgBD,EAAAA,EAAAA,QAAO,IAEtBE,EAAeC,IAAoBrzC,EAAAA,EAAAA,UAAiB,OAEpD0vC,EAAiB6B,IAAsBvxC,EAAAA,EAAAA,UAAS,IAEhDszC,EAAmBC,IAAwBvzC,EAAAA,EAAAA,UAAS,IAEpDwzC,EAAUC,IAAezzC,EAAAA,EAAAA,UAAS,IAElC0zC,EAAgBC,IAAqB3zC,EAAAA,EAAAA,WAAS,GAE/C4zC,GAA0BV,EAAAA,EAAAA,WAMhC/wC,EAAAA,EAAAA,WAAU,KACR,IAAI0xC,EAGAC,EAA0B,EAG1BC,EAAoBC,KAAKC,MAE7B,MAAMC,EAAmBA,KACvB,MAAMC,EAAgClB,EAAqB//B,QAAU4gC,EAE/DG,EAAMD,KAAKC,MACXG,EAA2BH,EAAMF,EAGvCZ,EAAcjgC,QAAUihC,EAAgCC,EAGxDN,EAA0Bb,EAAqB//B,QAC/C6gC,EAAoBE,EAGhBnB,EAAkBG,EAAqB//B,QAAU,IAEjD2gC,EADEV,EAAcjgC,SA7DI,GA8DRnR,WAAWmyC,EAAkB1B,IAI7BzwC,WAAWmyC,EAAkB1B,OAQ/C,OAFAqB,EAAY9xC,WAAWmyC,EAAkB1B,IAElC,KACL1wC,aAAa+xC,KAEd,KAOH1xC,EAAAA,EAAAA,WAAU,KACR,IAAIkyC,EAAuB,KAK3B,MAAM1vC,EAAgBguC,EAAqB9uC,IAAImvC,IAC7C,IAAIsB,EAAwB,EAE5B,MAAMC,EAAkB7E,IACtB,MAAM8E,EAAyBF,EAW/B,GATAA,EAAwBplC,KAAK2L,MAAO60B,EAAkB,IAAOsD,EAAalE,eAE1EmE,EAAqB//B,QAAUhE,KAAK2B,IAClCiiC,EACAG,EAAqB//B,QAAUshC,EAAyBF,GAG1D/C,EAAoB0B,EAAqB//B,QAAU4/B,EAAmB,KAExC,IAA1BK,EAAcjgC,QAAe,CAC/B,MAAMuhC,EAAsB3B,EAAkBG,EAAqB//B,QAE7DkgC,EAAgBlkC,KAAK2L,MAAM45B,EAAsBtB,EAAcjgC,SAErE,GAA6B,OAAzBmhC,EAGF,OAFAA,EAAuBjB,OACvBC,EAAiBgB,GAQnB,GAAIjB,EAAgBd,GAAY,CAC9B,MAAMoC,EAA0BxlC,KAAKylC,KAAKN,EAAuBhC,IAE3DuC,EADmB1lC,KAAKylC,KAAKvB,EAAgBf,IAClBqC,EAKjC,aAJIE,EAAQ,GAAKA,EAAQ,KACvBP,EAAuBjB,EACvBC,EAAiBgB,IAGrB,CAEA,GAAIjB,EAAgBb,GAAU,CAC5B,MAAMsC,EAA0B3lC,KAAKylC,KAAKN,EAAuB/B,IAE3DsC,EADmB1lC,KAAKylC,KAAKvB,EAAgBd,IAClBuC,EAKjC,aAJID,EAAQ,GAAKA,EAAQ,KACvBP,EAAuBjB,EACvBC,EAAiBgB,IAGrB,CAGAA,EAAuBjB,EACvBC,EAAiBgB,EACnB,GAuBF,OAdArB,EACG9D,OACAuB,MAAOqE,IACFA,EAAUhH,SAAWF,GAAaiC,QACpC4D,EAAYD,GAAYA,EAAW,KAGtChkB,QAAQ,KAGP+kB,EAAe,KACfhB,EAAqBwB,GAAgBA,EAAe,KAGjD/B,EAAapuC,UAAUC,GAAO8oC,SApBXqH,IACxBT,EAAeS,EAActF,qBAqBjC,MAAO,KACL/qC,EAAca,QAAQgF,GAAgBA,EAAa5E,iBAEpD,IAEH,MAAMqvC,GAAmB30C,EAAAA,EAAAA,aAAY+f,UACnC,IAAK,MAAMixB,KAAqBqB,EAAsB,CAIpC,IAAI12B,QAAc,CAACC,EAASC,KAC1Cpa,WAAW,KACTuvC,EAAkB1pC,SAClBsU,KACC,IAEP,GACC,IAEGg5B,GAA4B50C,EAAAA,EAAAA,aAAY,KAC5C,GAAqB,MAAjB8yC,EACF,MAAO,GAGT,GAAIA,EAAgBd,GAAY,CAC9B,MAAM6C,EAAmBjmC,KAAKylC,KAAKvB,EAAgBf,IACnD,MAAO,GAAG8C,KAAyC,IAArBA,EAAyB,SAAW,WACpE,CAEA,GAAI/B,EAAgBb,GAAU,CAC5B,MAAM6C,EAAmBlmC,KAAKylC,KAAKvB,EAAgBd,IACnD,MAAO,GAAG8C,KAAyC,IAArBA,EAAyB,SAAW,WACpE,CAEA,MAAMC,EAAiBnmC,KAAKylC,KAAKvB,EAAgBb,IACjD,MAAO,GAAG8C,KAAqC,IAAnBA,EAAuB,OAAS,WAC3D,CAACjC,IAEEkC,GAA4Bh1C,EAAAA,EAAAA,aAChC,IAAM4O,KAAK2B,IAAI,IAAK3B,KAAK2L,MAAM60B,IAC/B,CAACA,IAQG6F,GAA0Bj1C,EAAAA,EAAAA,aAAY,IAExCg1C,IAA8B,IAC7B1B,GAAyB1gC,SAASsiC,aAAe,IAAM9F,EAAkB,KAAO,EAElF,CAAC4F,EAA2B5F,IAOzB+F,GAAoBn1C,EAAAA,EAAAA,aAAY,KAQ7B,CAAE6U,MAAO,GALdm+B,EAAkBoC,WAAWxxC,OAASyuC,EAAqBzuC,OAAOwxC,WAAWxxC,OAIlD,QAE5B,CAACovC,IAgDEqC,EAAiCA,IAEnCvlC,EAAAA,cAAA,OAAK82B,UAAU,mCACZsM,EAAW,GACVpjC,EAAAA,cAAA,OAAK22B,QAASA,IAAM4M,EAAkBiC,IAA0BA,IAC9DxlC,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CACX9K,UAAU,iBACVva,KAAK,wBA0CjB,OACEvc,EAAAA,cAAA,OAAK82B,UAAU,sBA9Fb92B,EAAAA,cAAA,OAAK82B,UAAU,uEACZoM,IAAsBX,EAAqBzuC,OAC1CkM,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAM82B,UAAWuL,IAA+B,GAAGE,EAAqBzuC,UACtEyuC,EAAqBzuC,OAAS,EAAI,QAAU,qBAE9CkM,EAAAA,cAACk4B,GAAAA,GAAM,CACL9vB,UAAU,EACV0uB,UAAU,UACVH,QAAS6L,GAER,UAILxiC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK82B,UAAU,kBACb92B,EAAAA,cAAA,QACEyF,MAAO4/B,IACPvO,UAAW2O,KAAWpD,GAA8B,eAEnD,GAAGa,QAAwBX,EAAqBzuC,SAAS,KAE5DkM,EAAAA,cAAA,QAAM82B,UAAWuL,IAA+B,qBAChDriC,EAAAA,cAAA,WACAA,EAAAA,cAAA,YACGgjC,EAAgB,aAAa8B,kBAA4C,KAI9E9kC,EAAAA,cAAA,QACE82B,UACE,sGAEFH,QAASkO,GACV,wBA6DP7kC,EAAAA,cAAA,OAAK82B,UAAU,uDAnCf92B,EAAAA,cAAA,OAAK82B,UAAU,yEACb92B,EAAAA,cAAA,OAAK82B,UAAU,2CACZoM,IAAsBX,EAAqBzuC,OAC1CkM,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK82B,UAAU,8BACZsM,EAAW,EACR,kBAAkBA,KAAYA,EAAW,EAAI,SAAW,WACxD,cAELmC,KAGHvlC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OACE0lC,IAAKlC,EACL1M,UAAU,aAEV92B,EAAAA,cAACyiC,EAAkB,CACjBpV,SAAU8X,SAA4BtnC,EAAYiB,KAAK2B,IAAI,IAAK6+B,MAGpEt/B,EAAAA,cAAA,OAAK82B,UAAU,+BACb92B,EAAAA,cAAA,OAAK82B,UAAU,mCAAmC,GAAGoO,QACpDK,QAcTvlC,EAAAA,cAAA,OAAK82B,UAAU,kDACZyL,EACExlC,OACCmkC,IACGoC,GAAkBpC,EAAkBtC,cAAgBpB,GAAaiC,QAErEhsC,IAAIytC,GACHlhC,EAAAA,cAACghC,GAAuB,CACtB5oC,IAAK8oC,EAAkB1C,YACvB0C,kBAAmBA,OAOnC,CAEAoB,GAAoBR,UAAY,CAC9BS,qBAAsBR,KAAAA,QAAkBA,KAAAA,WAAqBpE,KAAoBqE,WACjFQ,WAAYT,KAAAA,KAAeC,YAG7B,Y,2NC/XA,SAAS2D,IAAY,WAAEvkB,EAAU,WAAEohB,EAAU,UAAEoD,IAC7C,MAAMC,EAAiB,oDAChBtD,EAAsBuD,IAA2Bl2C,EAAAA,EAAAA,UAAS,IAE3Dm2C,GAAS71C,EAAAA,EAAAA,aAAY+f,UACzB21B,IACAE,EAAwBE,EAAcvyC,IAAIoqC,GAAQ,IAAIF,GAAkBE,EAAMzc,MAC7E,IA8DH,OACEphB,EAAAA,cAAAA,EAAAA,SAAA,KACGuiC,EAAqBzuC,OACpBkM,EAAAA,cAAA,OAAK82B,UAAW2O,KAAW,wBAAyBI,IAClD7lC,EAAAA,cAACsiC,GAAmB,CAClBC,qBAAsB5pC,MAAMmf,KAAKyqB,GACjCC,WAAYA,KAIhBxiC,EAAAA,cAAA,OAAK82B,UAAW2O,KAAW,YAAaI,IApE1C7lC,EAAAA,cAACimC,GAAAA,EAAQ,CACPF,OAAQC,IACND,EAAOC,IAETE,SAAO,GAEN,EAAGC,kBACFnmC,EAAAA,cAAA,MAAAomC,GAAA,GACMD,IAAc,CAClBrP,UAAU,4FAEV92B,EAAAA,cAAA,OAAK82B,UAAU,cACb92B,EAAAA,cAACimC,GAAAA,EAAQ,CACPF,OAAQA,EACRM,QAAM,GAEL,EAAGF,eAAcG,mBAChBtmC,EAAAA,cAAA,MAASmmC,IACPnmC,EAAAA,cAACk4B,GAAAA,GAAM,CACL9vB,UAAU,EACVuuB,QAASA,QAER,YACD32B,EAAAA,cAAA,QAAWsmC,QAKnBtmC,EAAAA,cAACimC,GAAAA,EAAQ,CACPF,OAAQA,EACRM,QAAM,GAEL,EAAGF,eAAcG,mBAChBtmC,EAAAA,cAAA,MAASmmC,IACPnmC,EAAAA,cAACk4B,GAAAA,GAAM,CACLzrB,KAAM85B,GAAAA,GAAAA,GAAiBzvC,UACvBsR,UAAU,EACVuuB,QAASA,QAER,aACD32B,EAAAA,cAAA,QAAAomC,GAAA,GACME,IAAe,CACnBE,gBAAgB,OAChBC,aAAa,cAOzBzmC,EAAAA,cAAA,OAAK82B,UAAU,QAAO,kCACtB92B,EAAAA,cAAA,OAAK82B,UAAU,+BAA8B,8BAqBzD,CAEA6O,GAAY7D,UAAY,CACtB1gB,WAAY2gB,KAAAA,OAAiBC,WAC7BQ,WAAYT,KAAAA,KAAeC,WAC3B4D,UAAW7D,KAAAA,KAAeC,YAG5B,YCxGA,IACE0E,WAAYC,GAAAA,IACZC,mBAAoB,CAAC,KAAM,MAC3B,mCAAmC,EACnCC,yBAA0BA,EAAGtzC,cAAamkB,mBAAkBvkB,uBACnDI,EAETuzC,mBAAoBA,EAAGC,YAAWC,kBAAiBC,uBAC1CF,EAETG,qBAAsBvB,GACtBwB,aAAc,CAAC,GCVXC,GAAmB,QAiJzB,UACE,4BAjIF,UAAiC,QAC/BC,EAAO,YACPC,EAAW,gBACXC,EAAe,WACf93C,EAAU,gBACV+3C,EAAe,oBACfC,EAAmB,WACnBC,EAAU,aACVC,EAAY,mBACZC,EAAkB,iBAClBC,EAAgB,kBAChBC,EAAiB,WACjBC,IAEA,MAAO53C,EAAiB63C,IAAsBp4C,EAAAA,EAAAA,UAA6B,OACpEq4C,EAAoBC,IAAyBt4C,EAAAA,EAAAA,WAAS,IACtDu4C,EAAUC,IAAex4C,EAAAA,EAAAA,UAASw3C,KAClCiB,EAAUC,IAAe14C,EAAAA,EAAAA,UAAS,OAczC,OAZAmC,EAAAA,EAAAA,WAAU,KACR,GAAK5B,EAML,OAFA03C,EAAiB13C,GAEV,KACL23C,MAED,CAACA,EAAmBD,EAAkB13C,IAGvC6P,EAAAA,cAACuoC,GAAAA,IAAU,KACTvoC,EAAAA,cAACuoC,GAAAA,IAAWC,KAAI,KACdxoC,EAAAA,cAACuoC,GAAAA,IAAWE,YAAW,KACrBzoC,EAAAA,cAAA,OACEyF,MAAO,CACLoJ,OAAQ64B,EAAW74B,OACnB9J,MAAO2iC,EAAW3iC,MAClBQ,SAAU,YAEZ,oBAAmB9V,EACnBi2C,IAAKsC,GAEJL,EAAahgC,SAAWsgC,GACvBjoC,EAAAA,cAAA,OACE82B,UAAU,oIACVrxB,MAAO,CACLijC,SAAU,SAGXf,EAAalvC,SAMtBuH,EAAAA,cAACuoC,GAAAA,IAAWI,aAAY,KACtB3oC,EAAAA,cAAA,OAAK82B,UAAU,4BACb92B,EAAAA,cAACuoC,GAAAA,IAAWK,SAAQ,CAClBnwC,MAAO0vC,EACPU,SAAU1S,GAAKiS,EAAYjS,EAAE2S,OAAOrwC,QACrC,aAGDuH,EAAAA,cAACuoC,GAAAA,IAAWQ,SAAQ,CAClBzuB,SAAU+tB,EACVW,SAAUV,EACVhvC,QAASiuC,KAIbvnC,EAAAA,cAACuoC,GAAAA,IAAWU,UAAS,CACnBlkC,MAAO2iC,EAAW3iC,MAAMugC,WACxBz2B,OAAQ64B,EAAW74B,OAAOy2B,WAC1B4D,cAAe/S,IACbyR,EAAmB,IACdF,EACH3iC,MAAOokC,SAAShT,EAAE2S,OAAOrwC,QAAU6uC,KAGvC8B,eAAgBjT,IACdyR,EAAmB,IACdF,EACH74B,OAAQs6B,SAAShT,EAAE2S,OAAOrwC,QAAU6uC,KAGxC+B,SAzGa,IAyGc/D,WAC3BgE,UA1Ga,IA0GehE,YAC7B,cACYtlC,EAAAA,cAAA,QAAM82B,UAAU,yBAAwB,OAGrD92B,EAAAA,cAACuoC,GAAAA,IAAWgB,aAAY,CACtBC,eAAgBhC,EAChBrN,QAASqN,EACTpN,gBAAiBqN,GAClB,uBAGAE,EAAahgC,SACZ3H,EAAAA,cAACuoC,GAAAA,IAAWgB,aAAY,CACtBC,eAAgBvB,EAChB9N,QAAS8N,EACT7N,gBAAiB8N,GAClB,2BAIHloC,EAAAA,cAACypC,GAAAA,IAAY,CAAC3S,UAAU,QACtB92B,EAAAA,cAACypC,GAAAA,IAAaC,MAAK,KACjB1pC,EAAAA,cAACypC,GAAAA,IAAa9N,UAAS,CAAChF,QAAS0Q,GAAS,UAC1CrnC,EAAAA,cAACypC,GAAAA,IAAahO,QAAO,CACnB9E,QAASA,KACPoR,EAAWI,GAAYf,GAAkBiB,GACzChB,MAEH,YASf,GCnJA,IACE,kCAAmC,CACjC1/B,SAAS,EACTlP,MAAO,2BCsCX,SA3BA,UAAgC,gBAAE4G,EAAe,gBAAEjN,EAAe,iBAAEqsB,IAClE,MAAO,CACL,CACElC,KAAM,UACN9jB,MAAO,IACFkxC,MACA5Q,GAAkC,CACnC15B,kBACAjN,kBACAqsB,wBAECmrB,MACAC,MACAC,MACAC,MACAC,MACAC,MACAC,MACAC,MACAC,MACAC,MACAC,KAIX,E,sCCiCA,SAASC,GACPxvC,EACApF,GAEA,IAAI,UAAEssB,GAAclnB,EAAoBqO,WAuBxC,OArBA6Y,EAAY,IAAIA,EAAUjK,UAE1BiK,EAAYA,EAAUllB,OACpBhJ,GAAYA,EAASiS,wBAA0BjS,EAASiS,uBAAuBlS,QAIjFmuB,EAAYA,EAAUllB,OAAOhJ,IAC3B,MAAM,uBAAEiS,GAA2BjS,EAEnC,IAAK,MAAMyI,KAAyBwJ,EAAwB,CAC1D,MAAMhJ,EAAarH,EAAkByG,mBAAmBI,GAGxD,SAAIQ,IAAcA,EAAWK,kBAK/B,IAEK4kB,CACT,CClGA,MAEMuoB,GAAY9oC,GAAY,YAAoBA,IAoDlD,SAAS+oC,GAAYC,EAAmBC,EAAQv4C,GAC9C,MAAM,iBAAEw4C,EAAgB,2BAAEt4C,GAA+BF,EAAgBK,SAEvDi4C,EACRt1C,QAAQy1C,IAChB,MAAM,WAAEp7C,GAAeo7C,EAAazoB,gBAC9BruB,EAAWzB,EAA2B0B,uBAAuBvE,GAC9DsE,GAGL62C,EAAiBE,4BACf/2C,EAASiO,GACTjO,EAASyY,qBAAqBxK,GAC9B2oC,IAGN,C,4BCjEA,MAAMI,GAAe,IAEfC,GAAc,qCAEdC,GAAoB,CACxB,CACExyC,MAAO,MACPlC,MAAO,OAET,CACEkC,MAAO,MACPlC,MAAO,QAsOX,GA7NwC20C,EACtCC,OACAp7C,iBAAkBq7C,MAElB,MAAM,gBAAEh5C,IAAoBC,EAAAA,EAAAA,OACtB,qBAAEsF,EAAoB,2BAAErF,GAA+BF,EAAgBK,UACtE+0C,EAAiB6D,IAAsBz7C,EAAAA,EAAAA,WAAS,IAChD07C,EAAoBC,IAAyB37C,EAAAA,EAAAA,UAAS,CAC3DmV,MAAOgmC,GACPl8B,OAAQk8B,KAGJpD,EAAehwC,EAAqBG,iBAAiB,mCAKrD0zC,GAAgCviC,EAAAA,EAAAA,IAAsBmiC,GACtDK,EAAwBD,GAA+Bl7C,SACrDb,WAAYM,EAAgB,kBAAE27C,IACpCxiC,EAAAA,EAAAA,mBAAkBuiC,GAEdE,EAAkBr5C,EAA2Bka,qBAC7Co/B,EAAYC,EAAAA,iBAAAA,wBAAyC97C,EAAkB27C,IAE7E35C,EAAAA,EAAAA,WAAU,KACR,MAAM+5C,EAAsBzzC,OAAOsgB,KAAKizB,EAAUG,aAAa/oC,OAAO,CAAC2/B,EAAK33B,KAC1E,MAAMghC,EAAOJ,EAAUG,YAAY/gC,IAC7B,KAAEihC,EAAI,SAAE1Q,GAAayQ,EAE3B,MAAO,IACFrJ,EACH,CAAC33B,GAAW,CAAEihC,OAAM1Q,cAErB,CAAC,GAEJ,MAAO,KACLljC,OAAOsgB,KAAKmzB,GAAqB12C,QAAQ4V,IACvC,MAAM,KAAEihC,EAAI,SAAE1Q,GAAauQ,EAAoB9gC,GAC/C4gC,EAAUM,YAAYlhC,EAAUihC,EAAM,CAAE1Q,iBAG3C,KA+HHxpC,EAAAA,EAAAA,WAAU,KACJu5C,EAAmBvmC,OAASumC,EAAmBz8B,QACjDld,WAAW,KAvGSse,OAAOlL,EAAe8J,KAC5C,IAAK48B,EACH,OAGF,MAAMU,GAA+BjjC,EAAAA,EAAAA,mBAAkBuiC,GACvD,IAAKU,EACH,OAGF,MAAMxwC,EACJjE,EAAAA,aAAAA,MAAAA,uCAA0D3H,IAEtD,SAAEgE,GAAao4C,EACfC,EAAmBT,EAAgBU,YAAYrB,IAErD,IACE,GAAIoB,aAA4BxpC,EAAAA,cAAe,CAC7C,MAAMlF,EAAU3J,EAASI,oBACnBwO,EAAa5O,EAAS8O,sBAEtBupC,EAAiBE,SAAS,CAAC5uC,IACjC0uC,EAAiB/lC,cAAc1D,EACjC,MAAO,GAAIypC,aAA4Bn4C,EAAAA,mBAAoB,CACzD,MAAMs4C,EAAYx4C,EAAS+N,kBAC3BsqC,EAAiBI,WAAW,CAAC,CAAE3qC,SAAU0qC,EAAU,KACrD,CAmCA,OAjCI5wC,EAA4B7H,OAAS,GACvC6H,EAA4BvG,QAAQq3C,IAClC,MAAM,eAAEpwC,EAAc,cAAEqwC,EAAa,KAAEjgC,GAASggC,EAC5ChgC,IAAS9I,EAAAA,MAAAA,4BAAkCgpC,UAC7Cj1C,EAAAA,aAAAA,uCAAoD,CAClD,CAAC00C,EAAiBpqC,IAAK,CACrB,CACE3F,iBACAoQ,KAAM9I,EAAAA,MAAAA,4BAAkCgpC,SACxCC,OAAQ,CACNC,gBAAiBH,OAOvBjgC,IAAS9I,EAAAA,MAAAA,4BAAkC0qB,SAC7C32B,EAAAA,aAAAA,sCAAmD,CACjD,CAAC00C,EAAiBpqC,IAAK,CACrB,CACE3F,iBACAoQ,KAAM9I,EAAAA,MAAAA,4BAAkC0qB,QACxCue,OAAQ,CACNC,gBAAiBH,SASxB,CACL3nC,MAAOjG,KAAK2B,IAAIsE,GAASgmC,GArJR,KAsJjBl8B,OAAQ/P,KAAK2B,IAAIoO,GAAUk8B,GAtJV,KAwJrB,CAAE,MAAO9nC,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,GAqCI6pC,CAAgBxB,EAAmBvmC,MAAOumC,EAAmBz8B,QAlClCye,KAC/B,MAAM6e,GAA+BjjC,EAAAA,EAAAA,mBAAkBuiC,GACvD,IAAKU,EACH,OAGF,MAAMC,EAAmBT,EAAgBU,YAAYrB,IACrD,IAAKoB,EACH,OAGF,MAAQ38C,WAAYM,EAAgB,kBAAE27C,GAAsBS,GACpDnqC,GAAI+qC,GAAuBX,EAE7BR,EAAYC,EAAAA,iBAAAA,wBAAyC97C,EAAkB27C,GAC7EE,EAAUoB,YAAYD,EAAoBrB,GAE1C,MAAMuB,EAAgBrB,EAAUsB,mBACL70C,OAAO2f,OAAOi1B,GAEtB73C,QAAQ+3C,KACqB,IAA1CA,EAAa3jC,YAAYqiB,eACvByB,EACFse,EAAUwB,eAAeD,EAAaniC,UAEtC4gC,EAAUyB,gBAAgBF,EAAaniC,cAUzCsiC,CAAwB9F,GAGxBmE,EAAgBrsB,SAChBqsB,EAAgBrlC,UACf,MAEJ,CAACglC,EAAoB9D,IAExB,MAiBM+F,EAA0B51C,EAAqBG,iBACnD,6BAGF,OACEkI,EAAAA,cAACutC,EAAuB,CACtBlG,QAAS8D,EACT7D,YAAayD,GACbxD,gBAAiB0D,GACjBx7C,WAAYu7C,GACZxD,gBAAiBA,EACjBC,oBAAqB4D,EACrB3D,WAAY4D,EACZ1D,mBAAoB2D,EACpB1D,iBAzK0B13C,IAC5B,IAAKA,EACH,OAGF,MAAM,SAAE4D,IAAamV,EAAAA,EAAAA,mBAAkBuiC,GAEjC+B,EAAgB,CACpB/9C,WAAYu7C,GACZ16C,QAASH,EACTsc,KAAM1Y,EAAS0Y,KACfghC,eAAgB,CACdnsC,WAAYvN,EAAS05C,eAAensC,WACpCosC,YAAa35C,EAAS05C,eAAeC,cAIzC/B,EAAgBgC,cAAcH,IAyJ5B1F,kBAtJ0B73B,UAC5B07B,EAAgBiC,eAAe5C,KAsJ7BjD,WAjCmB93B,MAAOk4B,EAAkBE,KAC9C,MAAMwF,EAAyBz9C,SAASC,cACtC,0BAA0B26C,QAG5B,IAAK6C,EAEH,YADA3qC,QAAQyD,MAAM,kCAIhB,MAAMuK,QAAe48B,EAAAA,GAAAA,GAAYD,GAC3BE,EAAO39C,SAAS+gB,cAAc,KACpC48B,EAAKC,SAAW,GAAG7F,KAAYE,IAC/B0F,EAAKz+B,KAAO4B,EAAOW,UAAU,SAASw2B,IAAY,GAClD0F,EAAKE,SAoBHtG,aAAcA,KC9NpB,MAAMuG,GAAoBA,EAAGz+C,aAAYsL,0BACvC,MAAM,UAAEknB,EAAS,iBAAElyB,GAAqBgL,EAAoBqO,WACtD+kC,EAAmB1+C,GAAcM,EAIvC,OAFiBkyB,EAAU5f,IAAI8rC,ICjBpBC,GAAmB76C,IAC9B,MAAM,OAAE+W,GAAW/W,EAEnB,IAAK+W,IAAW3R,MAAMC,QAAQ0R,IAA6B,IAAlBA,EAAOxW,OAAc,CAO5D,MAAO,CAAE4lC,OALuC,CAAC,EAAG,EAAG,GAKvB2U,OAJV,CACpB5tC,IAAK,CAAC,EAAG,EAAG,GACZC,IAAK,CAAC,EAAG,EAAG,IAGhB,CAGA,MAAMD,EAAgC,IAAI6J,EAAO,IAC3C5J,EAAgC,IAAI4J,EAAO,IAGjD,IAAK,IAAIkH,EAAI,EAAGA,EAAIlH,EAAOxW,OAAQ0d,IAAK,CACtC,MAAM88B,EAAQhkC,EAAOkH,GACrB,IAAK,IAAI+8B,EAAI,EAAGA,EAAI,EAAGA,IACrB9tC,EAAI8tC,GAAKzvC,KAAK2B,IAAIA,EAAI8tC,GAAID,EAAMC,IAChC7tC,EAAI6tC,GAAKzvC,KAAK4B,IAAIA,EAAI6tC,GAAID,EAAMC,GAEpC,CASA,MAAO,CACL7U,OAPuC,EACtCj5B,EAAI,GAAKC,EAAI,IAAM,GACnBD,EAAI,GAAKC,EAAI,IAAM,GACnBD,EAAI,GAAKC,EAAI,IAAM,GAKpB2tC,OAAQ,CAAE5tC,MAAKC,UCEb,mBAAE8tC,IAAuBrxC,EAAAA,UAAAA,YACzBsxC,GAAsB,CAC1BC,WL3Ca,UAA8B,gBAC3Ct8C,EACA6vB,UAAW0sB,EAAiB,OAC5BhE,IAEA,MAAM,iBAAEC,EAAgB,oBAAE7vC,EAAmB,kBAAEpF,EAAiB,2BAAErD,GAChEF,EAAgBK,SAElBk4C,IAV4B,mBAY5B,MAAM1oB,EACJ0sB,GAAqBpE,GAAiCxvC,EAAqBpF,GAe7E,GAV4BssB,EAAUje,KAAKjQ,KACtB62C,EAAiBgE,4BAClC76C,EAASquB,gBAAgB3yB,YAGEsS,KAAK8sC,GAAaA,EAAU7sC,KAAO2oC,IAMhE,OAmBJ,SAAqBmE,EAAU18C,GAC7B,MAAM,iBAAEw4C,EAAgB,oBAAE7vC,EAAmB,kBAAEpF,EAAiB,2BAAErD,GAChEF,EAAgBK,SACZwvB,EAAYsoB,GAAiCxvC,EAAqBpF,GACxEssB,EAAU7sB,QAAQy1C,IAChB,MAAM,WAAEp7C,GAAeo7C,EAAazoB,gBAC9BruB,EAAWzB,EAA2B0B,uBAAuBvE,GAC9DsE,GAGL62C,EAAiBE,4BACf/2C,EAASiO,GACTjO,EAASyY,qBAAqBxK,GAC9B8sC,IAGN,CAnCWrE,CAAYE,EAAQv4C,GAI7B6vB,EAAU7sB,QAAQy1C,IAChB,MAAM,WAAEp7C,GAAeo7C,EAAazoB,gBAC9BruB,EAAWzB,EAA2B0B,uBAAuBvE,GAC9DsE,GAGL62C,EAAiBmE,uBAAuBt/C,EAAYsE,EAASyY,qBAAqBxK,GAAI,CACpFyK,KAAM,aACNzK,GAAI2oC,EACJhqB,QAAQ,EACRmoB,QAAQ,KAGd,EKAEkG,IJ1Ca,UAA4B,gBACzC58C,EACA6vB,UAAW0sB,EAAiB,OAC5BhE,IAEA,MAAM,iBAAEC,EAAgB,oBAAE7vC,EAAmB,kBAAEpF,EAAiB,2BAAErD,GAChEF,EAAgBK,SAEZwvB,EACJ0sB,GA2DJ,SACE5zC,EACApF,GAEA,IAAI,UAAEssB,GAAclnB,EAAoBqO,WAKxC,OAHA6Y,EAAY,IAAIA,EAAUjK,UAGnBiK,EAAUjf,OAAO,CAAC2/B,EAAK5uC,KAC5B,MAAM,uBAAEiS,GAA2BjS,EAE7ByI,EAAwBwJ,EAAuB,GAG/CtE,EAFa/L,EAAkByG,mBAAmBI,GAE5B3B,SAO5B,OANK8nC,EAAIjhC,KACPihC,EAAIjhC,GAAY,IAGlBihC,EAAIjhC,GAAUpM,KAAKvB,GAEZ4uC,GACN,CAAC,EACN,CAnFyBsM,CAAyBl0C,EAAqBpF,GAOrE,IAAK,MAAO+L,EAAUgpC,KAAsBryC,OAAOc,QAAQ8oB,GAAY,CACrE,MAAMitB,EAAcvE,GAAUH,GAAU9oC,GAYxC,GAV4BgpC,EAAkB1mC,KAAKjQ,KAC9B62C,EAAiBgE,4BAClC76C,EAASquB,gBAAgB3yB,YAGEsS,KAAK8sC,GAAaA,EAAU7sC,KAAOktC,IAMhE,OAAOzE,GAAYC,EAAmBwE,EAAa98C,GAIrDs4C,EAAkBt1C,QAAQy1C,IACxB,MAAM,WAAEp7C,GAAeo7C,EAAazoB,gBAC9BruB,EAAWzB,EAA2B0B,uBAAuBvE,GAC9DsE,GAGL62C,EAAiBmE,uBAAuBt/C,EAAYsE,EAASyY,qBAAqBxK,GAAI,CACpFyK,KAAM,MACNzK,GAAIktC,EACJvuB,QAAQ,EACRmoB,QAAQ,KAGd,CACF,IIHQpxC,aAAcy3C,IAAsBC,EAAAA,UAEtCC,GAAmBA,EAAGha,uBAC1B,MAAMia,EAAgB,GAgBtB,OAfqBja,EAAiBka,kBACzBn6C,QAAQo6C,IACnB,MACMC,EADYthB,EAAAA,iBAAAA,aAA+CqhB,GACzCtC,mBAExB70C,OAAOsgB,KAAK82B,GAAOr6C,QAAQ4V,IACzB,MAAMghC,EAAOyD,EAAMzkC,GAEjBghC,aAAgB7d,EAAAA,kBAChB6d,EAAK0D,gCAELJ,EAAch6C,KAAK02C,OAIlBsD,GAWHK,GAAY,IAAIC,EAAAA,GAA2B,CAC/CC,iBAAiB,EACjBC,OAAQ,CACNC,MAAO,CACL,CACExzB,KAAM,gBACNyzB,IAAK,6FACL/qB,KAAM,IACN7sB,IAAK,WAEP,CACEmkB,KAAM,gBACNyzB,IAAK,wFACL/qB,KAAM,GACN7sB,IAAK,aAIX63C,UAAW,UAEb,IAAIC,IAAmB,EA+2EvB,SA72EA,UAAwB,gBACtB99C,EAAe,gBACfiN,EAAe,iBACfof,IAEA,MAAM,oBACJ1jB,EAAmB,iBACnBs6B,EAAgB,YAChBrS,EAAW,gBACX7X,EAAe,2BACf7Y,EAA0B,sBAC1By6B,EAAqB,mBACrBv6B,EAAkB,qBAClBmF,EAAoB,gBACpB2H,EAAe,uBACf0tB,EAAsB,iBACtB4d,EAAgB,oBAChBnxC,EAAmB,kBACnB9D,GACEvD,EAAgBK,SAEpB,SAAS09C,IACP,OAAOhnC,EAAgCpO,EACzC,CAEA,SAASq1C,EAA2B3gD,GAClC,OAAOuZ,EAA0BvZ,EACnC,CAEA,SAAS4gD,IACP,MAAMt8C,EAAWo8C,IACjB,OAAO9a,EAAiBib,wBAAwBv8C,EAASiO,GAC3D,CAEA,SAASuuC,IACP,MAAM9gD,EAAasL,EAAoB2/B,sBACjC5E,EAAqBr8B,EAAoB+2C,sBAAsB/gD,GAC/D4M,EAAiBy5B,GAAoBz5B,eAG3C,MAAO,CACLA,iBACAjD,aAJyBK,EAAoBg3C,iBAAiBhhD,GAAY2J,aAM9E,CAEA,MAAMm9B,EAAU,CACdma,0BAA2BA,EAAGx5B,gBAAe3jB,kBAC3C46B,EAAAA,WAAAA,UAAAA,sBAA4DjX,GAAe,GAC3E,MAAM,SAAE5L,GAAa/X,EAEfxD,EAAmBgL,EAAoB2/B,sBAGvCjrC,EAAa6C,EAA2Bq+C,mCAC5C5gD,EACAub,GAEF,GAAI7b,EAAY,CACd,MAAMsE,EAAWzB,EAA2B0B,uBAAuBvE,GAQnE,GAPAsE,EAAS68C,iBAAiBtlC,GAC1BvX,EAASuS,UCzJ0BuqC,EAAC98C,EAAUR,KACpD,MAAMu9C,EAAS/8C,EAASg9C,aAClB,WAAEC,EAAU,cAAEC,GAAkBH,GAGhC,OAAEzC,GAAWD,GAAgB76C,IAC7B,IAAEkN,EAAG,IAAEC,GAAQ2tC,EAIrB,IAAK,IAAI78B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAM0/B,EAAcpyC,KAAKkJ,IAAIvH,EAAI+Q,GAAKw/B,EAAWx/B,IAC3C2/B,EAAcryC,KAAKkJ,IAAItH,EAAI8Q,GAAKw/B,EAAWx/B,IAGjD,GAAI0/B,EAAcD,GAAiBE,EAAcF,EAC/C,OAAO,CAEX,CAEA,OAAO,GD2IIJ,CAA4B98C,EAAUR,GAAc,CACvD,MAAMu9C,EAAS/8C,EAASg9C,aAChBC,WAAYI,EAAkB7rC,SAAU8rC,GAAmBP,GAC7D,OAAEpX,EAAM,OAAE2U,GAAWD,GAAgB76C,GACrCgS,EAAW+rC,GAAAA,GAAAA,IAASA,GAAAA,GAAAA,SAAeD,EAAgBD,GACzDE,GAAAA,GAAAA,IAAS/rC,EAAUA,EAAUm0B,GAC7B3lC,EAASw9C,UAAU,CAAEP,WAAYtX,EAAQn0B,SAAUA,IAEnD,MAAMisC,EAAkBF,GAAAA,GAAAA,KAAUjD,EAAO5tC,IAAK4tC,EAAO3tC,KACrD,GAAI8wC,EAAkBV,EAAOG,cAAe,CAC1C,MAAMQ,EAAcD,EAAkBV,EAAOG,cAC7Cl9C,EAAS29C,QAAQ39C,EAAS49C,UAAYF,EACxC,CACA19C,EAASuS,QACX,CAEA,MACF,CAEA,MAAQ9J,sBAAuBo1C,GAAoCr+C,EACnE,IAAKq+C,EAEH,YADA1uC,QAAQuM,KAAK,wCAAyClc,GAOxD,MAAMs+C,EAAmBv/C,EAA2Bw/C,oCAClD/hD,EACAwD,GAGF,IAAKs+C,EAEH,YADA3uC,QAAQuM,KAAK,6CAGf,MAAMsiC,EAAmB/kB,EAAuBglB,0BAC9CH,EAAiBpiD,WACjBmiD,GAGGG,IAAmB,IAQxBA,EAAiB,GAAG3vB,gBAAkByvB,EAAiBzvB,gBAGvD/iB,EAAgBkF,IAAI,mCAAoC,CACtD9U,WAAYoiD,EAAiBpiD,WAC7BuW,uBAAwB,CAAC4rC,GACzBpmC,kBAAmBjY,EAAYiY,kBAC/BlS,QAAS,IACJ/F,EAAY+X,YAInBjM,EAAgBkF,IAAI,6BAA8B,CAAE0tC,kBAAmBF,KAnBrE7uC,QAAQuM,KACN,0DACAmiC,IAoBNM,2BAA4BjiC,OAASjT,aAAYvN,iBAC/C,IAAKuN,EACH,OAGEA,EAAWm1C,qBAIb9yC,EAAgBopB,WAAW,uCAAwC,CACjEzrB,aACAyP,KAC0B,QAAxBzP,EAAWnC,SACPuzB,GAAAA,4BAA4Bue,SAC5Bve,GAAAA,4BAA4BC,UAItC,MAAMujB,EAAkC50C,EAAW40C,gCAE7CQ,EAA4BC,IAIhChzC,EAAgBopB,WAAW,mCAAoC,CAC7Dh5B,aACAuW,uBAAwB,CAACqsC,EAAc71C,0BAI3C,GAA4B,QAAxBQ,EAAWnC,UAA8C,aAAxBmC,EAAWnC,SAAyB,CACvE,MAAMy3C,EAAuB38C,EAAkByG,mBAC7Cw1C,GAGF,OADAQ,EAA0BE,GACnBjzC,EAAgBopB,WAAW,yCAA0C,CAC1Eh5B,aACAuW,uBAAwB,CAACssC,EAAqB91C,wBAElD,CAAO,GAA4B,OAAxBQ,EAAWnC,SAAmB,CACvC,MAAMigB,EAAUzb,EAAgBopB,WAAW,0BAA2B,CACpEjsB,sBAAuBQ,EAAWR,yBAE9B,mBAAE+1C,GAAuBz3B,EACzB03B,EAAwB78C,EAAkBO,wBAC9Cq8C,EAAmB,IAcrB,OAZAC,EAAsBp9C,QAAQg9C,GAE1BI,EAAsB1+C,QACxByiC,EAAQkc,2BAA2B,CACjCR,kBAAmB,CACjB,CACExiD,WAAYsL,EAAoB2/B,sBAChC10B,uBAAwB,CAACwsC,EAAsB,GAAGh2C,2BAKnDse,CACT,GAEF43B,wBAAyBziC,OAAS5T,iBAAgBjD,gBAAiB,CAAC,KAElE,MAAMu5C,EACJt2C,GAAkBjD,EACd,CAAEiD,iBAAgBjD,gBAClBm3C,KAEEl0C,eAAgB6N,EAAU9Q,aAAcw5C,GAAgBD,EAG1DE,QAA0BzD,EAAAA,UAAAA,aAAAA,+BAAqD,CACnF/yC,eAAgB6N,EAChB4oC,eAAgB,CAACF,KAGb7iD,EAAmBgL,EAAoB2/B,sBAG7CmY,EAAkBz9C,QAAQ7B,IACxB,MAAM,aAAE6F,EAAY,UAAE25C,EAAS,UAAEC,GAAcz/C,EAGzC8X,EAAa8iB,EAAAA,yBAA0C8kB,QAC3DljD,EACA,CAACgjD,EAAWC,GACZ,CACE55C,eACAiD,eAAgB6N,IAIpB3W,EAAY2jB,cAAgB7L,EAAW6L,cAGvC,MAAMg8B,EEtNP,UAAyC,eAC9C72C,EAAc,aACdjD,EAAY,kBACZy5C,EAAiB,oBACjBp5C,EAAmB,WACnB4R,IAQA,IAAKhP,QAAmCwB,IAAjBzE,IAA+By5C,EAEpD,OADA3vC,QAAQyD,MAAM,wDACP,KAGT,MAAMjP,EAAe+B,EAAoBgP,gBAAgBpM,GACzD,IAAK3E,IAAiBA,EAAaE,SAASwB,GAE1C,OADA8J,QAAQyD,MAAM,qBAAsBvN,EAAc,mBAAoBiD,GAC/D,KAGT,MAAM62C,EAAsB,IAAKx7C,GAC3BqB,EAAUm6C,EAAoBt7C,SAASwB,GAExCL,EAAQE,cACXF,EAAQE,YAAc,CAAE4+B,WAAY,CAAC,IAGlC9+B,EAAQE,YAAY4+B,aACvB9+B,EAAQE,YAAY4+B,WAAa,CAAC,GAGpC,MAAM,UAAEkb,EAAS,UAAEC,EAAS,SAAExa,EAAQ,SAAEC,GAAaoa,EACrD,IAAKE,IAAcC,EAEjB,OADA9vC,QAAQyD,MAAM,oCACP,KAGT,IAAIwsC,GAAa,EACjB,MAAMtb,EAAa9+B,EAAQE,YAAY4+B,WAoBvC,OAjBIW,EAAW,GAAKC,EAAW,IAC7BZ,EAAWC,cAAgB,CACzBvb,KAAM,gBACNhmB,MAAO,gBACP2gB,cAAe7L,EAAW6L,cAC1Bze,MAAO,CACL+/B,WACAC,WACAsa,YACAC,aAEFj6B,KAAM,MAGRo6B,GAAa,GAGXA,EACKD,EAGF,IACT,CFmJoCE,CAAgC,CAC1D/2C,eAAgB6N,EAChB9Q,aAAcw5C,EACdC,kBAAmBt/C,EACnBkG,sBACA4R,eAIE6nC,GACFz5C,EAAoBk/B,wBAAwB,CAC1Ct8B,eAAgB6N,EAChBtS,SAAUs7C,EAAoBt7C,aAMpC,MAAMy7C,EAAsBR,EAAkB9wC,KAC5CxO,GAAeA,EAAY6F,eAAiBw5C,GAE9CvzC,EAAgBkF,IAAI,oBAAqB,CACvC7Q,IAAK2/C,EAAoBn8B,iBAG7Bo8B,oBAAqBA,KACnB,MAAM,eAAEj3C,EAAc,aAAEjD,GAAiBm3C,IACzCgD,GAAAA,EAAkC,CAChCl3C,iBACAjD,kBAOJo6C,2BAA4Bl6C,IAC1B,MAAMhJ,EAAU6/C,KAAoCp8C,UAAUzD,QAExDmjD,EAAe,IAAKn6C,EAAShJ,YAC7B,sBAAEojD,EAAqB,eAAEpqB,EAAc,MAAEz4B,GAAU4iD,EAGzD,GAAIC,IAA0BpqB,EAAgB,CAC5C,MAAMqqB,EAA0Bp5B,IAKhC,MAFGk5B,EAAaG,sBACdH,EAAaG,qBAAqBv/C,SAASs/C,GAAyBroC,UAAUN,WAI9E,OAFAyoC,EAAanqB,eAAiBqqB,CAIlC,CAEAF,EAAaI,sBAAwB,GASrCJ,EAAaK,cAAgB,CAC3B9oC,SAAUyoC,EAAanqB,gBAAgBhe,UAAUN,SACjDvS,MAAOg7C,EAAanqB,eACpB51B,IAAK+/C,EAAanqB,gBAAgBpS,cAClCoS,eAAgBmqB,EAAanqB,eAC7Bz4B,WACG4iD,EAAaK,eAGlBz0C,EAAgBkF,IAAIjL,EAASm6C,IAE/BM,qCAAsCA,EAAG/2C,aAAYyP,WACnD,MAAM,gCAAEunC,GAAoCjmB,GAAAA,EAAiC3kB,WAG7E4qC,EADwCh3C,EAAW40C,gCACc,CAC/Dv1C,eAAgBW,EAAWR,sBAC3By3C,UAAU,EACVxnC,UAKJynC,iCAAkCA,EAChCzkD,aACAuW,yBACAwF,oBACAlS,cAEA,MAAMu4B,EAAgBv/B,EAA2B6hD,iBAAiB1kD,IAC5D,0BAAEiiC,EAAyB,wBAAE0iB,EAAuB,0BAAEpmB,GAC1DC,GAAAA,EAA6B7kB,WAI/B,IAAIirC,EAGFruC,GACArN,MAAMC,QAAQoN,IACdA,EAAuBlS,OAAS,IAEhCugD,EAAuCh8C,OAAOc,QAAQu4B,GAA2B3vB,KAC/E,EAAE3J,EAAKK,KAEHuN,EAAuB66B,MAAMntC,GAAO0E,EAAI/D,SAASX,KACjD+E,GAAOhJ,aAAeA,KAGxB,IAIN,MAAM6kD,EACJ9oC,GAAqBlS,GAASiE,oBAC1B,IACKs0B,EAAcC,qBACjByiB,cAAe,CACb/oC,uBACGlS,IAGPu4B,EAAcC,qBAEpB,GAAIuiB,EAEF,YADAD,EAAwBC,EAAsCC,GAYhEF,EAL+BpmB,EAA0B,CACvDhoB,yBACAvW,eAG8C6kD,IAElDE,kBAAiBA,EAAC,eAAElrB,EAAc,QAAEh5B,EAAO,kBAAEo4B,KACpCY,GAAkB8lB,EAAAA,UAAAA,uBAAgC9+C,EAASo4B,GAEpE+rB,mBAAAA,EAAoB,QAAEnkD,EAAO,kBAAEo4B,IAC7B,MAAMY,EAAiBiN,EAAQie,kBAAkB,CAC/ClrB,eAAgB,KAChBh5B,UACAo4B,sBAkBF,OAAOY,GAAgBhe,UAAUN,UAfZA,KACnB,MAAMlB,GAAiBZ,EAAAA,EAAAA,mBAAkB5Y,GAEzC,IAAKwZ,EACH,OAGF,MAAM,kBAAE4hC,EAAiB,WAAEj8C,GAAeqa,EAGpCqjC,EAFYtB,EAAAA,iBAAAA,wBAAyCp8C,EAAYi8C,GAExCgJ,gBAAgB1pC,GAE/C,OAAOmiC,GAAc3jC,aAAaqiB,eAAgB,GAGPA,CAAavC,EAAehe,SAASN,UAC9Ese,EACA,IACN,EAMAqrB,8BAA+B1kC,UAC7B,MAAM2kC,EAAcj9C,EAAqBG,iBAAiB,qBACpD+8C,EAAgBl9C,EAAqBG,iBAAiB,yBACtDvE,EAAcf,EAAmBgtB,eAAe9rB,GAEtD,IAAKH,EAEH,YADA2P,QAAQyD,MAAM,0CAIhB,IAAKiuC,EAAa,CAChB,MAAMr+C,QAAcyV,EAAAA,EAAAA,iBAAgB,CAClCb,kBACAc,MAAO,yBACPC,YAAa3Y,EAAYgD,OAAS,kBAClC4V,aAAc5Y,EAAYgD,QAM5B,YAHIA,SACF/D,EAAmBoH,OAAOlG,EAAK,IAAKH,EAAagD,UAAS,GAG9D,CAEA,MAAMu+C,QAAYC,EAAAA,EAAAA,6BAA4B,CAC5CxhD,cACA4X,kBACAypC,cACAC,kBAGEC,SACFtiD,EAAmBoH,OAAOlG,EAAK,IAAKH,EAAagD,MAAOu+C,IAAO,IAOnEE,oBAAqB/kC,OAASvc,gBACtB6iC,EAAQoe,8BAA8BjhD,IAE9CuhD,kBAAmBhlC,OAASvc,gBACpB6iC,EAAQoe,8BAA8BjhD,IA4B9CwhD,kBAAmB9f,IACjB,MAAM,KAAE+f,EAAI,IAAEzhD,EAAG,UAAE0hD,EAAS,MAAE7+C,GAAU6+B,EACxC,IAAI,MAAE3vB,GAAU2vB,EAChB,MAAM7hC,EAAcf,EAAmBgtB,eAAe9rB,GACtD,IAAKH,EAEH,YADA2P,QAAQuM,KAAK,iCAAkC/b,GAGjD,MAAM2hD,EAAqB,IACtB9hD,GAOL,QAHkBsK,IAAdu3C,IACFC,EAAmB9+C,MAAQ6+C,QAEhBv3C,IAATs3C,EAAoB,CACtB,MAAMG,EAAiBH,EAAK1oC,MAAQ,UAEpC,GAAI0oC,EAAKzP,MAAQyP,EAAKI,UAAW,CAC/B,MAAM/mC,EAAQ2mC,EAAKzP,IAAIle,QAAQ,KAC/B2tB,EAAKI,UAAYJ,EAAKzP,IAAIxS,UAAU1kB,EAAQ,GAC5C2mC,EAAKK,YAAcL,EAAKv+C,MAAQL,EAChC4+C,EAAKM,uBAAyBN,EAAKzP,IAAIxS,UAAU,EAAG1kB,EACtD,CACA6mC,EAAmBC,GAAkBH,EACd,YAAnBG,IACED,EAAmBh/C,cACrBg/C,EAAmBh/C,aAAeg/C,EAAmBh/C,aAAa0G,OAChE24C,GAAMA,EAAGjpC,OAAS6oC,GAEpBD,EAAmBh/C,aAAaf,KAAK6/C,IAErCE,EAAmBh/C,aAAe,CAAC8+C,GAGzC,CAKA,GAHA1vC,IAAU4vC,EAAmB/+C,SAASmP,MACtCA,IAAU4vC,EAAmBh/C,cAAc0L,KAAKhL,GAAQA,GAAM0O,QAAQA,MAElEA,EAMF,OAJAA,EAAMkwC,mBAAqBlwC,EAAMmwC,SACjCvqC,EAAAA,WAAAA,OAAAA,MAAwBwqC,oBAAoBtiD,EAAYG,IAAK+R,GAGrDlS,EAAYyX,UAClB,KAAK8G,EAAU+D,kBACYxK,EAAAA,WAAAA,MAAiBoP,cAAclnB,EAAYG,KACnDuW,KAAK6rC,sBAAwBrwC,EAAMqwC,oBACpD,MAMNtjD,EAAmBoH,OAAOy7C,EAAmB3hD,IAAK2hD,GAAoB,IAOxEU,kBAAmBA,EAAGriD,MAAKkC,sBAAsB,OAC/CpD,EAAmBujD,kBAAkBh7C,EAAoB2/B,sBAAuBhnC,GAChF,IAAK,MAAMH,KAAeqC,EACxBrC,EAAYvD,SAAWuD,EAAYG,MAAQA,GAI/C2rB,kBAAmBA,EAAG3rB,UAChBiF,MAAMC,QAAQlF,GAChBlB,EAAmBwjD,WAAWtiD,GAE9BlB,EAAmBwsB,OAAOtrB,IAI9BuiD,sBAAuBA,EAAGviD,UACxBlB,EAAmByjD,sBAAsBviD,IAG3CwiD,4BAA6BA,EAAGxiD,MAAKyiD,QAAO9+B,sBACvBxZ,IAAfwZ,GAA4B8+B,GAAOriD,SACrCujB,GAAc8+B,EAAM,GAAG79B,WAErB3f,MAAMC,QAAQlF,GAChBlB,EAAmB4jD,gCAAgC1iD,EAAK2jB,GAExD7kB,EAAmB0jD,4BAA4BxiD,EAAK2jB,IAOxDg/B,8BAA+BA,EAAG3gD,wBAChCiF,EAAAA,GAAM27C,kBAAkB9jD,EAAmBc,gBAAgBoC,KAG7D6gD,8BAA+BA,EAAGl6C,qBAChC,MAAM3E,EAAe+B,EAAoBgP,gBAAgBpM,IAEnD,mBAAEm6C,GAAuB9+C,GACzB,SAAEi1C,GAAa6J,GACf,mBAAEC,GAAuB9J,EAEzB+J,EAAeD,EAAmB,GAGlCz5C,EAAarH,EAChB8F,uBACAsG,KAAKxF,GAAMA,EAAGa,UAAU4G,KAAKwN,GAAKA,IAAMklC,KAErC,aACJ59B,EAAY,kBACZ3lB,EAAiB,iBACjBukB,EAAgB,WAChBi/B,EAAU,WACVC,EAAU,kBACVzhB,GACEn4B,GG9rBH,SACL65C,EACAC,GAYA,MAAMC,EAAU,GAGhBA,EAAQzhD,KAAK,CAAC,kBAAmBuhD,EAAiBx6C,gBAAkB,KACpE06C,EAAQzhD,KAAK,CAAC,qBAAsBuhD,EAAiBtgD,OAAS,KAE9DwgD,EAAQzhD,KAAK,IAEb,MAAM0hD,EAAiBF,EAAKG,UAuB5B,GArBsB,CACpB,CAAC,gBAAiBD,EAAel+B,cACjC,CAAC,sBAAuBk+B,EAAe7jD,mBACvC,CAAC,qBAAsB6jD,EAAet/B,kBACtC,CAAC,cAAes/B,EAAeL,YAC/B,CAAC,cAAeK,EAAeJ,YAC/B,CAAC,qBAAsBI,EAAe7hB,oBAG1B//B,QAAQ,EAAEgD,EAAKK,MACvBA,GACFs+C,EAAQzhD,KAAK,CAAC,aAAa8C,IAAOK,MAKtCs+C,EAAQzhD,KAAK,IAEbyhD,EAAQzhD,KAAK,CAAC,wBAGVuhD,EAAiBj/C,SAAU,CAE7B,MAAMs/C,EAAmB,CAAC,SAC1B,IAAK,MAAMC,KAAaN,EAAiBj/C,SAAU,CACjD,MAAMmB,EAAU89C,EAAiBj/C,SAASu/C,GAC1CD,EAAiB5hD,KAAK,GAAGyD,EAAQxC,OAAS,KAC5C,CACAwgD,EAAQzhD,KAAK4hD,GAGbH,EAAQzhD,KAAK,CACX,mBACG+C,OAAO2f,OAAO6+B,EAAiBj/C,UAAUnE,IAAI2jD,GAAKA,EAAEh+C,cAAgB,MAEzE29C,EAAQzhD,KAAK,CACX,YACG+C,OAAO2f,OAAO6+B,EAAiBj/C,UAAUnE,IAAI2jD,GAAMA,EAAEC,OAAS,MAAQ,QAE3EN,EAAQzhD,KAAK,CACX,YACG+C,OAAO2f,OAAO6+B,EAAiBj/C,UAAUnE,IAAI2jD,GAAMA,EAAE9b,OAAS,MAAQ,QAK3E,MAAMgc,EAAW,IAAIl8B,IACrB,IAAK,MAAMriB,KAAWV,OAAO2f,OAAO6+B,EAAiBj/C,UACnD,GAAImB,EAAQE,aAAeF,EAAQE,YAAY4+B,WAC7C,IAAK,MAAM0f,KAAWx+C,EAAQE,YAAY4+B,WAAY,CACpD,MAAM2f,EAAOz+C,EAAQE,YAAY4+B,WAAW0f,GACtCE,EAAYD,EAAKjhD,OAASihD,EAAKj7B,KAC/Bm7B,EAAWF,EAAKz+B,KAAO,KAAKy+B,EAAKz+B,QAAU,GACjDu+B,EAASrqC,IAAI,GAAGwqC,IAAYC,IAC9B,CAKJ,IAAK,MAAMC,KAAYL,EAAU,CAC/B,MAAMM,EAAU,CAACD,GAEjB,IAAK,MAAM5+C,KAAWV,OAAO2f,OAAO6+B,EAAiBj/C,UAAW,CAC9D,IAAIigD,EAAY,GAEhB,GAAI9+C,EAAQE,aAAeF,EAAQE,YAAY4+B,WAC7C,IAAK,MAAM0f,KAAWx+C,EAAQE,YAAY4+B,WAAY,CACpD,MAAM2f,EAAOz+C,EAAQE,YAAY4+B,WAAW0f,GAG5C,GAFwB,GAAGC,EAAKjhD,OAASihD,EAAKj7B,OAAOi7B,EAAKz+B,KAAO,KAAKy+B,EAAKz+B,QAAU,OAE7D4+B,EAAU,CAChCE,OAA2Bh6C,IAAf25C,EAAK/+C,MAAsB++C,EAAK/+C,MAAQ,GACpD,KACF,CACF,CAGFm/C,EAAQtiD,KAAKuiD,EACf,CAEAd,EAAQzhD,KAAKsiD,EACf,CACF,CAGA,IAAIE,EAAY,GAChB,IAAK,MAAMC,KAAOhB,EAUhBe,GATqBC,EAAItkD,IAAIukD,IAE3B,MAAMC,EAAYD,QAAsCA,EAAK1S,WAAa,GAC1E,OAAI2S,EAAU5jD,SAAS,MAAQ4jD,EAAU5jD,SAAS,MAAQ4jD,EAAU5jD,SAAS,MAEpE,IAAM4jD,EAAUtkB,QAAQ,KAAM,MAAQ,IAExCskB,IAEiBz+B,KAAK,KAAO,KAIxC,MAAMlJ,EAAO,IAAI4nC,KAAK,CAACJ,GAAY,CAAErrC,KAAM,4BACrCujC,EAAMmI,IAAIC,gBAAgB9nC,GAC1By9B,EAAO39C,SAAS+gB,cAAc,KAEpC48B,EAAKsK,aAAa,OAAQrI,GAC1BjC,EAAKsK,aACH,WACA,GAAGxB,EAAiBtgD,OAAS,0BAAyB,IAAIqtC,MAAO0U,cAAc9pC,MAAM,KAAK,UAE5Fu/B,EAAKtoC,MAAM4R,WAAa,SAExBjnB,SAASmoD,KAAKC,YAAYzK,GAC1BA,EAAKE,QACL79C,SAASmoD,KAAKE,YAAY1K,EAC5B,CHikBM2K,CAA8BhhD,EAXP,CACrBu/C,UAAW,CACTn+B,eACA3lB,oBACAukB,mBACAi/B,aACAC,aACAzhB,wBAQNhsB,gCAAiCgnC,EAEjCwI,kBAAmBA,EAAGlpD,iBACC6C,EAA2BuO,gBAAgBpR,GAMhEsL,EAAoB69C,oBAAoBnpD,GAJtCyT,QAAQuM,KAAK,oCAAqChgB,IAMtDopD,kBAAmB5oC,OAASmd,WAAUnjB,WACpC,MAAM2qC,EAAcj9C,EAAqBG,iBAAiB,qBACpD+8C,EAAgBl9C,EAAqBG,iBAAiB,yBAE5D,IAAK88C,EAAa,CAChB,MAAMr+C,QAAcyV,EAAAA,EAAAA,iBAAgB,CAClCb,kBACAc,MAAO,kBACPC,YAAajC,GAAMA,MAAM1T,OAAS,iBAClC4V,aAAclC,GAAMA,MAAM1T,OAAS,KAIrC,YADA62B,IAAW72B,EAEb,CAEA,MAAMkC,QAAcs8C,EAAAA,EAAAA,6BAA4B,CAC9C5pC,kBACAypC,cACAC,kBAEFznB,IAAW30B,IAGbqgD,WAAYA,KACV,MAAM,UAAE72B,GAAclnB,EAAoBqO,YACpC,cAAE2vC,GAAkB/1B,EAAY5Z,WACtC4Z,EAAYg2B,kBAAkBD,GAC9B92B,EAAU7sB,QAAQ,CAAC6jD,EAAGC,IAAUl2B,EAAYm2B,QAAQ,CAAEn3C,GAAIk3C,EAAOE,WAAW,MAG9EC,sBAAAA,EAAuB,WACrB5pD,EAAU,YACV2U,EAAW,aACXC,EAAY,sBACZ7H,IAQA,MAAM88C,EAAiB1sC,OAAOxI,GACxBm1C,EAAkB3sC,OAAOvI,GAIzBtQ,EADkBzB,EAA2Bka,qBAClB6/B,YAAY58C,IAEvC,MAAEyU,EAAK,MAAEC,GAAUhH,EAAAA,UAAAA,YAAAA,eAAmCm8C,EAAgBC,GAE5E,GAAIxlD,aAAoBE,EAAAA,mBAAoB,CAC1C,MAAM4N,EAAW00B,EAAQijB,yBAAyB,CAChD/pD,aACA+M,0BAEFzI,EAASsS,cACP,CACExG,SAAU,CACRsE,QACAD,UAGJrC,EAEJ,MACE9N,EAASsS,cAAc,CACrBxG,SAAU,CACRsE,QACAD,WAINnQ,EAASuS,QACX,EACAmzC,uBAAwBA,EAAGhqD,aAAYuW,yBAAwB1M,UAAU,CAAC,MACpDgG,EAAgBG,YAAYhQ,GAE9C6P,EAAgBo6C,eAAejqD,GAGjC6P,EAAgBq6C,YAAYlqD,EAAYuW,EAAwB1M,IAElE2K,cAAAA,CAAemxB,GACb,MAAM,YAAEoa,GAAgBpa,GAClB,WAAE3lC,GAAe0gD,IACjByJ,EAAsBvkB,EAAiBib,wBAAwB7gD,GAEjE+/C,GAAeA,IAAgBoK,GAInCrjB,EAAQ8iB,uBAAuB,IAAKjkB,EAAO3lC,cAC7C,EACAoqD,qBAAsBA,EAAGC,aAAYC,kBACnC,MAAMnyC,EAAqBjQ,EAAqBG,iBAC9C,kCAGIkiD,EAAiBj/C,EAAoB2/B,sBAIrCh5B,EAHWpP,EAA2B0B,uBAAuBgmD,GACzC93C,eAAeoJ,SAEfzQ,SAE1B,IAAK6G,EACH,OAGF,MAAMu4C,EAA+BryC,EAAmBlG,GAExD,IAAKu4C,EACH,OAGF,MAAMC,EACJD,EAA6BH,IAC7BzhD,OAAO2f,OAAOiiC,GAA8BF,GAE9CxjB,EAAQ8iB,uBAAuB,CAC7B5pD,WAAYuqD,EACZ51C,YAAa81C,EAAkBtoD,OAC/ByS,aAAc61C,EAAkB5c,SAGpCkc,yBAA0BA,EAAG/pD,aAAY+M,4BACvC,MAAMzI,EAAWzB,EAA2B0B,uBAAuBvE,GACnE,GAAIsE,aAAoBE,EAAAA,mBAAoB,CAC1C,MACM4N,EADY9N,EAAS+N,kBACAC,KAAKC,GAAMA,EAAG3N,SAASmI,IAClD,OAAOqF,CACT,CACA,OAAO,MAETurC,eAAgBA,EAAGpiC,WAAUqvB,SAAQmV,kBACnC,MAAM,UAAEvtB,GAAclnB,EAAoBqO,WAE1C,IAAK6Y,EAAUgD,KACb,OAGF,MAAM2mB,EAAYvW,EAAiB8kB,aAAa3K,GAAe,MAE/D,IAAK5D,IAAcA,EAAUwO,QAAQpvC,GACnC,OAGF,MAAMqvC,EAAgBzO,EAAU0O,eAAetvC,GAAUihC,OAAStoC,EAAAA,MAAAA,UAAgB42C,QAG9ElgB,GACFggB,EAAgBzO,EAAUyB,gBAAgBriC,GAE1C4gC,EAAUwB,eAAepiC,GAGH1Y,EAA2Bka,qBACnClG,UAElBk0C,4BAAAA,EAA6B,MAAE/hD,EAAK,OAAEgiD,EAAM,YAAEjL,IAC5C,MAAMxkC,EAAWyvC,GAAUhiD,EAC3B+2C,EAAcA,GAAea,IAE7B,MAAMzE,EAAYvW,EAAiB8kB,aAAa3K,GAChD,IAAK5D,IAAcA,EAAUwO,QAAQpvC,GACnC,OAGoB4gC,EAAU0O,eAAetvC,GAAUihC,OAAStoC,EAAAA,MAAAA,UAAgB42C,QAElE3O,EAAUyB,gBAAgBriC,GAAY4gC,EAAUwB,eAAepiC,EACjF,EACA0vC,2BAAAA,EAA4B,MAAEjiD,EAAK,OAAEgiD,EAAM,YAAEjL,IAC3C,MAAMxkC,EAAWyvC,GAAUhiD,EAC3B+2C,EAAcA,GAAea,IAC7B,MAAMzE,EAAYvW,EAAiB8kB,aAAa3K,GAChD,IAAK5D,IAAcA,EAAUwO,QAAQpvC,GACnC,OAGF,MAAM2vC,EAAe,CACnBh3C,EAAAA,MAAAA,UAAgBi3C,OAChBj3C,EAAAA,MAAAA,UAAgB42C,QAChB52C,EAAAA,MAAAA,UAAgBk3C,SAChBxmD,SAASu3C,EAAU0O,eAAetvC,GAAUihC,MAQ9C,GANA0O,EACI/O,EAAUyB,gBAAgBriC,GAC1BurB,EAAQukB,cAAc,CAAE9vC,WAAUwkC,gBAIlCmL,EAAc,CAChB,MAAMI,EAAenP,EAAUoP,+BAC3BD,IAAiB/vC,GACnBurB,EAAQukB,cAAc,CAAE9vC,SAAU+vC,EAAcvL,eAEpD,CACF,EACAyL,qBAAsBA,EAAGxiD,QAAOgiD,SAAQzvC,WAAUkwC,eAAe,OAE/DlwC,EAAWA,GAAYyvC,GAAUhiD,GAEjCyiD,EAAeA,EAAapnD,OAASonD,EAAe7lB,EAAiBka,mBAExDn6C,QAAQo6C,IACnBjZ,EAAQukB,cAAc,CAAE9vC,WAAUwkC,mBAGtCsL,cAAeA,EAAG9vC,WAAUwkC,cAAc,SACxC,MAAM,UAAEvtB,GAAclnB,EAAoBqO,WAE1C,IAAK6Y,EAAUgD,KACb,OAGF,MAAM2mB,EAAYvW,EAAiB8kB,aAAa3K,GAEhD,IAAK5D,EACH,OAGF,IAAKA,GAAWwO,QAAQpvC,GACtB,OAGF,MAAMmwC,EAAiBvP,EAAUwP,kCAEjC,GAAID,EAAgB,CAClB,MAAME,EAAoBzP,EAAU0P,qBAAqBH,GACzDE,GAAmBE,iBACf3P,EAAUyB,gBAAgB8N,GAC1BvP,EAAU4P,eAAeL,EAC/B,CAGAvP,EAAUkP,cAAc9vC,EAAU,CAChCuwB,SAAU,CACR,CACEC,YAAa73B,EAAAA,MAAAA,cAAoB83B,aAMzCggB,0BAA2BA,KACzB,MAAM,iBAAE1rD,GAAqBgL,EAAoBqO,WAEjD,IAAK9W,EAA2B0B,uBAAuBjE,GAOrD,YALAg9B,EAAsBO,KAAK,CACzBrhB,MAAO,iBACPgnB,QAAS,6BACTxmB,KAAM,UAKV,MAAM,eAAEqgB,GAAmB16B,EAAgBK,SAEvCq6B,GACFA,EAAeQ,KAAK,CAClBC,QAAS2d,GACTj/B,MAAO,8BACPyvC,aAAc,CACZ3rD,mBACAuC,8BAEFqpD,mBAAoB,mBAO1BC,iBAAkBA,EAAGC,WAAUpsD,iBAC7B8mC,EAAQulB,gBAAgB,CAAED,WAAUpsD,aAAYssD,aAAc,WAKhEC,oBAAqBA,EAAGH,WAAUpsD,iBAChC8mC,EAAQulB,gBAAgB,CAAED,WAAUpsD,aAAYssD,aAAc,SAEhEE,uBAAwBA,EACtBxsD,aACA4c,WAAW,aAKX,MAAMvC,EAAiBra,EACnB2gD,EAA2B3gD,GAC3B0gD,IAEJ,IAAKrmC,EACH,OAGF,MAAM,SAAE/V,GAAa+V,EAErB,IAAIoyC,EACJ,GAAiB,WAAb7vC,EAAuB,CACzB,MAAQ6vC,eAAgBC,GAA0BpoD,EAASg9C,YAC3DmL,GAAkBC,CACpB,MACED,EAAiB7vC,EAGnBtY,EAASw9C,UAAU,CAAE2K,mBACrBnoD,EAASuS,UAEX81C,qBAAsBA,EACpB3sD,aACA4c,WAAW,aAKX,MAAMvC,EAAiBra,EACnB2gD,EAA2B3gD,GAC3B0gD,IAEJ,IAAKrmC,EACH,OAGF,MAAM,SAAE/V,GAAa+V,EAErB,IAAIuyC,EACJ,GAAiB,WAAbhwC,EAAuB,CACzB,MAAQgwC,aAAcC,GAAwBvoD,EAASg9C,YACvDsL,GAAgBC,CAClB,MACED,EAAehwC,EAEjBtY,EAASw9C,UAAU,CAAE8K,iBACrBtoD,EAASuS,UAEXi2C,eAAgBA,EAAGjsD,cACjB,IAAIwZ,EAQJ,GALEA,OADcjM,IAAZvN,EACe6/C,IAEA7/C,GAGdwZ,EACH,OAGF,MAAM,SAAE/V,GAAa+V,GAEf,OAAE0yC,GAAWzoD,EAAS8O,gBAC5B9O,EAASsS,cAAc,CAAEm2C,QAASA,IAClCzoD,EAASuS,UAEXm2C,cAAeA,KACb,MAAM3yC,EAAiBqmC,IAEvB,IAAKrmC,EACH,OAGF,MAAM,SAAE/V,GAAa+V,EAErB/V,EAAS2oD,oBACT3oD,EAAS4oD,cAET5oD,EAASuS,UAEXs2C,cAAeA,EAAGC,gBAChB,MAAM/yC,EAAiBqmC,IACjBsB,EAAcoL,EAAY,EAAI,GAAM,IAE1C,IAAK/yC,EACH,OAEF,MAAM,SAAE/V,GAAa+V,EAErB,GAAI/V,aAAoB6O,EAAAA,cACtB,GAAIi6C,EAAW,CACb,MAAM,cAAE5L,GAAkBl9C,EAASg9C,YACnCh9C,EAASw9C,UAAU,CAAEN,cAAeA,EAAgBQ,IACpD19C,EAASuS,QACX,MACEvS,EAAS4oD,cACT5oD,EAASuS,UAMfw2C,YAAaA,EAAGC,aAAYhpD,SAAU82C,MAEpC,IAAI92C,EACJ,GAAK82C,EAOH92C,EAAWzB,EAA2B0B,uBAAuB62C,EAAa7oC,QAPzD,CACjB,MAAM8H,EAAiBqmC,IACvB,IAAKrmC,EACH,OAEF/V,EAAW+V,EAAe/V,QAC5B,CAMA,IAAIipD,EAAiB,EAErB,GAAIjpD,aAAoB6O,EAAAA,cACtBo6C,EAAiBjpD,EAASkpD,cAAcnpD,WACnC,MAAIC,aAAoBua,EAAAA,gBAG7B,MAAM,IAAIlY,MAAM,6BAFhB4mD,EAAiB7/C,EAAAA,UAAAA,mCAA2CpJ,GAAUipD,cAGxE,CAEA,MAAME,EAAYH,EAAa,EAAIC,EAAiBD,EAAaA,EACjE,GAAIG,GAAaF,GAAkBE,EAAY,EAC7C,MAAM,IAAI9mD,MAAM,iBAAiB2mD,KAInC,MAAMzjD,EAAU,CAAEyjD,WAAYG,GAC9B//C,EAAAA,UAAAA,YAAoBpJ,EAASzD,QAASgJ,IAExC6jD,OAAS7jD,IACP,MAAMwQ,EAAiBqmC,IAKvB,GAHA72C,EAAQkrC,QAAUlrC,EAAQujD,WAAa,EACvCvjD,EAAQujD,YAAcvjD,EAAQkrC,OAEzB16B,EACH,OAGF,MAAM,SAAE/V,GAAa+V,EAErB3M,EAAAA,UAAAA,OAAepJ,EAAUuF,IAE3B8jD,oBAAqBA,EACnB3tD,aACA+M,wBACAuG,WACA9C,UAAU,EACViG,aAAY,MAEZ,MAAMnS,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,IAAI4tD,EAEJ,MAAM,qBAAE34B,GAAyBsI,EAAuBswB,oBAElDt4B,EAAkBN,EAAqBriB,IAAI5S,IAAau1B,gBAE9D,GAAIA,EAAiB,CAEnB,MAAMu4B,EAAqBv4B,EAAgBjjB,KACzC/E,GAAcA,EAAWR,wBAA0BA,GAGrD6gD,EAAYE,GAAoBn1B,mBAAmB9uB,SAASyJ,UAAU9C,OACxE,CASA,GANA8C,EAAW,IAAKA,EAAU9C,QAASo9C,GAAap9C,GAE5ClM,aAAoB6O,EAAAA,eACtB7O,EAASsS,cAAc,CAAEtD,aAGvBhP,aAAoBua,EAAAA,eAAgB,CACtC,IAAK9R,EAAuB,CAC1B,MAAM,UAAEylB,GAAclnB,EAAoBqO,WAC1C5M,EAAwBylB,EAAU5f,IAAI5S,IAAauW,uBAAuB,EAC5E,CAGA,MAAMnE,EACJ9N,EACG+N,kBACAC,KAAMy7C,GAAsBA,EAAUnpD,SAASmI,KAClDzI,EAAS0pD,cACX1pD,EAASsS,cAAc,CAAEtD,YAAYlB,EACvC,CAEIqE,GACFnS,EAASuS,UAGbo3C,qBAAsBA,EAAGb,YAAY,MACnC,MAAM,iBAAE9sD,EAAgB,UAAEkyB,GAAclnB,EAAoBqO,WACtD6X,EAActoB,MAAMmf,KAAKmK,EAAUtJ,QAEnCglC,GADe18B,EAAYuG,QAAQz3B,GAEvB8sD,EAAY57B,EAAYntB,QAAUmtB,EAAYntB,OAChEiH,EAAoB69C,oBAAoB33B,EAAY08B,KAetDC,mBAAoBA,EAAGnxC,OAAMwV,YAAW0oB,aACtC,MAAMkT,EAAejT,EAAiBkT,gBAAgBnT,GAEtD,GAAIkT,EAEF,YADAA,EAAaE,aAAeF,EAAaG,YAAW,GAAQH,EAAaG,YAAW,IAItF,MAAMC,EAAKxP,GAAoBhiC,GAE3BwxC,GACFA,EAAG,CACD7rD,kBACA6vB,YACA0oB,YAINuT,gCAAiCA,EAAGzuD,aAAYub,eAC9C,IAAKvb,EAAY,CACf,MAAM,iBAAEM,GAAqBgL,EAAoBqO,WACjD3Z,EAAaM,GAAoB,SACnC,CAEA,MAAM67C,EAAYvW,EAAiBib,wBAAwB7gD,GAE3D,IAAKm8C,GAAWwO,QAAQpvC,GACtB,OAGF,MAAMmzC,EAAavS,GAAW0P,qBAAqBtwC,GACnD4gC,GAAWwS,qBACTpzC,EACA,IACKmzC,EACHE,iBAAkB5uD,IAEpB,GAGsB6C,EAA2Bka,qBACnClG,UAElBg4C,kBAAmBA,EAAG7uD,iBACpB6C,EAA2BgsD,kBAAkB,CAAE7uD,gBAEjD8uD,iBAAkBA,EAAG57B,aAEnB,MAAM,UAAE1gB,EAAS,iBAAEu8C,GAAqB77B,EAClC87B,EAAYx8C,EAAUy8C,gBAAgB,GACrB,IAAI/lD,MAAM8lD,GAAW9lC,QAC7BvjB,QAAQoc,IACrBgtC,EAAiBG,gBAAgBntC,KAEnCvP,EAAU28C,YAGZC,mCAAoCA,EAAGC,WAAUC,iBAC/C,MAAMC,EAAQ1sD,EAA2BmC,OAAOwqD,sBAC1C11B,EAAUu1B,EAASI,UAAUC,0BAC7BC,EAAWN,EAASO,SAASN,IAAa98B,UAAUnuB,QAAU,EACpE,IAAIwrD,EAAmB,EACvB,MAAM,YAAE9pD,GAAgBlD,EAA2BkC,UAAUwqD,EAAO1nD,IAClEgoD,IAEIA,IAAqBF,IACvB//C,EAAgBkF,OAAOglB,GAGvB/zB,EAAYwpD,OAKlBO,kBAAmBA,EAAG9vD,aAAYiT,aAChC,MAAM3O,EAAWzB,EAA2B0B,uBAAuBvE,GAC9DsE,IAGLA,EAASsS,cAAc,CACrB3D,WAEF3O,EAASuS,WASXk5C,0BAA2BA,EAAG/vD,aAAYgwD,oBACxC,MAAM1rD,EAAWzB,EAA2B0B,uBAAuBvE,IAC7D,MAAEiwD,GAAU3rD,EAASgT,YAAY,GACjC44C,EAASD,EAAME,YACfniD,EAAQkiD,EAAOE,eACfC,EAAOriD,EAAMihD,gBACbqB,EAAUtiD,EAAMuiD,aAChBC,EAAkB3O,GAAAA,GAAAA,OACtBA,GAAAA,GAAAA,WAAgBwO,EAAK,GAAKC,EAAQ,GAAID,EAAK,GAAKC,EAAQ,GAAID,EAAK,GAAKC,EAAQ,KAGhF,IAAIG,EAAiBH,EAAQ/8C,OAAO,CAACzI,EAAGC,IAAMD,EAAIC,GAAK,EACvD0lD,GAAkBT,EAAgB,EAAI,GAAMA,GAAiB,EAAI,EACjE,MAAMU,EAAgBF,EAAkBC,EAAiB,EACzDP,EAAOS,wBAAwBD,GAC/BR,EAAOU,kBAAkBH,GACzBnsD,EAASuS,UAQXg6C,yBAA0BA,EAAG7wD,aAAY8wD,YACvC,MAAMxsD,EAAWzB,EAA2B0B,uBAAuBvE,IAC7D,MAAEiwD,GAAU3rD,EAASgT,YAAY,GACjCy5C,EAAOd,EAAMe,cAAcC,iBAAiB,GAE5CC,EAAqB,GAErB17B,EAAOu7B,EAAKI,UAClB,IAAK,IAAIC,EAAW,EAAGA,EAAW57B,EAAM47B,IAAY,CAClD,MAAMC,EAAoB,CAAC,EAAG,EAAG,EAAG,GACpCN,EAAKO,aAAaF,EAAUC,GAE5BH,EAAmBrrD,KAAKwrD,EAC1B,CAEAH,EAAmBvrD,QAAQ0rD,IACzBA,EAAkB,IAAMP,IAG1BC,EAAKQ,kBACLL,EAAmBvrD,QAAQ0rD,IACzBN,EAAKS,YAAYH,KAEnB/sD,EAASuS,UAaXgB,kBAAmBA,EAAG7X,aAAY6J,cAChC,MAAMvF,EAAWzB,EAA2B0B,uBAAuBvE,IAC7D,MAAEiwD,GAAU3rD,EAASgT,YAAY,GACjCm6C,EAAWxB,EAAMe,mBAED5iD,IAAlBvE,EAAQ6nD,OACVD,EAASE,SAAS9nD,EAAQ6nD,YAGJtjD,IAApBvE,EAAQiO,SACV25C,EAASG,WAAW/nD,EAAQiO,cAGN1J,IAApBvE,EAAQkO,SACV05C,EAASI,WAAWhoD,EAAQkO,cAGL3J,IAArBvE,EAAQmO,UACVy5C,EAASK,YAAYjoD,EAAQmO,UAG/B1T,EAASuS,UAEXk7C,gBAAiBA,EAAG/xD,iBAClB,MAAMgyD,EAAqB,GAErBC,EAAwBlS,IAC5B,MAAM5D,EAAYvW,EAAiB8kB,aAAa3K,GAChDiS,EAAmBnsD,KAAKs2C,EAAU8I,gBAAgB,gBAGpD,GAAKjlD,EAGE,CAELiyD,EADkBrsB,EAAiBib,wBAAwB7gD,GAC3BuS,GAClC,KANiB,CACMqzB,EAAiBka,kBACzBn6C,QAAQssD,EACvB,CAKAD,EAAmBrsD,QAAQusD,IACzBA,GAAKC,uBASTC,0BAA2B5xC,OAASxgB,aAAY6J,UAAU,CAAC,MACzD,MAAM,oBAAEyB,EAAmB,kBAAEpF,EAAiB,oBAAE8D,GAC9CrH,EAAgBK,UACZ,UAAEwvB,GAAclnB,EAAoBqO,WACpC+kC,EAAmB1+C,EAEnBsE,EAAWkuB,EAAU5f,IAAI8rC,GAGzB3xC,EACJlD,EAAQkD,uBAAyBzI,EAASiS,uBAAuB,GAE7D87C,EAAOroD,EAAoBI,mBAE3BtD,EAAQ+C,EAAQ/C,OAAS,gBAAgBurD,EAAKhuD,OAAS,IACvDuI,EAAiB/C,EAAQ+C,gBAAkB,GAAGc,EAAAA,UAAAA,WAE9CH,EAAarH,EAAkByG,mBAAmBI,GAGlDulD,QAAgCtoD,EAAoBuoD,4BACxDhlD,EACA,CACEzG,QACA8F,iBACAzE,SAAU0B,EAAQ2oD,qBACd,CACE,EAAG,CACD1rD,MAAO,GAAG2rD,GAAAA,EAAKnrB,EAAE,eACjBuE,QAAQ,IAGZ,CAAC,IAUT,aALM7hC,EAAoB0oD,8BAA8B1yD,EAAY,CAClE4M,iBACAoQ,KAAM9I,EAAAA,MAAAA,4BAAkCgpC,WAGnCoV,GAOTK,sBAAuBA,EAAG/lD,qBACxB,MAAM,oBAAEtB,EAAmB,oBAAEtB,GAAwBrH,EAAgBK,SACrEgH,EAAoB2oD,sBAClBrnD,EAAoB2/B,sBACpBr+B,IAQJgmD,kBAAmBA,EAAGhmD,qBACpB,MAAM,oBAAE5C,GAAwBrH,EAAgBK,SAChDgH,EAAoB6oD,WAAWjmD,IAQjCkmD,iCAAkCA,EAAGlmD,iBAAgBjD,mBACnD,MAAM,oBAAEK,EAAmB,oBAAEsB,GAAwB3I,EAAgBK,SAErEgH,EAAoB2oD,sBAClBrnD,EAAoB2/B,sBACpBr+B,GAEF5C,EAAoB+oD,iBAAiBnmD,EAAgBjD,GACrDK,EAAoBgpD,oBAAoBpmD,EAAgBjD,IAS1DspD,+BAAgCA,EAAGrmD,iBAAgBjD,eAAcqT,WAC/D,MAAM,oBAAEhT,EAAmB,oBAAEsB,GAAwB3I,EAAgBK,SACrEgH,EAAoBkpD,wBAClB5nD,EAAoB2/B,sBACpBr+B,EACAjD,EACAqT,IASJm2C,yBAA0BA,EAAGvmD,iBAAgBjD,mBAC3C,MAAM,oBAAEK,GAAwBrH,EAAgBK,SAChDgH,EAAoBopD,oBAAoBxmD,EAAgBjD,IAQ1D0pD,oCAAqCA,EAAGzmD,iBAAgBoQ,WACtD,MAAM,oBAAEhT,EAAmB,oBAAEsB,GAAwB3I,EAAgBK,SACrEgH,EAAoBspD,2CAClBhoD,EAAoB2/B,sBACpB,CAAEr+B,iBAAgBoQ,UAQtBu2C,4BAA6BA,EAAG3mD,qBAC9B,MAAM,oBAAE5C,GAAwBrH,EAAgBK,SAChDgH,EAAoBwpD,qBAAqB5mD,IAO3C6mD,yBAA0BjzC,OAAS5T,qBACjC,MAAM,oBAAE5C,EAAmB,oBAAEsB,GAAwB3I,EAAgBK,SAE/DuT,QAA+Bm9C,EAAAA,EAAAA,mBAAkB,CACrD/wD,kBACAmnB,UAAWA,IACTla,EAAgBopB,WAAW,oBAAqB,CAC9CpsB,mBAEJ+mD,WAAY,iBAGVp9C,IACFvM,EAAoBulB,OAAO3iB,GAC3BtB,EAAoBsoD,0BAA0B,CAC5C5zD,WAAYsL,EAAoB2/B,sBAChC10B,6BASNs9C,oBAAqBA,EAAGjnD,qBACtB,MAAM,oBAAE5C,GAAwBrH,EAAgBK,SAChDgH,EAAoB8pD,aAAalnD,IAUnCmnD,4BAA6BA,EAAG/2C,OAAMrU,MAAKK,YACzC,MAAM,oBAAEgB,GAAwBrH,EAAgBK,SAChDgH,EAAoBgqD,SAAS,CAAEh3C,QAAQ,CAAE,CAACrU,GAAMK,KAQlDirD,qBAAsBA,EAAGrnD,iBAAgBjD,mBACvC,MAAM,oBAAEK,GAAwBrH,EAAgBK,SAChDgH,EAAoBkqD,cAActnD,EAAgBjD,IAOpDwqD,0BAA2BA,EAAGvnD,qBAC5B,MAAM,oBAAE5C,GAAwBrH,EAAgBK,SAChDgH,EAAoBulB,OAAO3iB,IAO7BwnD,sCAAuCA,EAAGxnD,qBACxC,MAAM,oBAAE5C,EAAmB,oBAAEsB,GAAwB3I,EAAgBK,SACrEgH,EAAoBqqD,kCAClB/oD,EAAoB2/B,sBACpB,CAAEr+B,oBAON0nD,yCAA0CA,KACxC,MAAM,oBAAEtqD,EAAmB,oBAAEsB,GAAwB3I,EAAgBK,SAC/DhD,EAAasL,EAAoB2/B,sBACjCspB,EAAiBvqD,EAAoBwqD,+BAA+Bx0D,GAC1EgK,EAAoByqD,+BAA+Bz0D,GAAau0D,IAQlEG,oBAAqBA,EAAG13C,OAAMhU,YAC5B,MAAM,oBAAEgB,GAAwBrH,EAAgBK,SAChDgH,EAAoBgqD,SAAS,CAAEh3C,QAAQ,CAAE23C,UAAW3rD,KAQtD4rD,uBAAwBA,EAAG53C,OAAMhU,YAC/B,MAAM,oBAAEgB,GAAwBrH,EAAgBK,SAChDgH,EAAoBgqD,SAAS,CAAEh3C,QAAQ,CAAE63C,aAAc7rD,KAQzD8rD,qBAAsBA,EAAG93C,OAAMhU,YAC7B,MAAM,oBAAEgB,GAAwBrH,EAAgBK,SAChDgH,EAAoBgqD,SAAS,CAAEh3C,QAAQ,CAAE6hB,WAAY71B,KAQvD+rD,wBAAyBA,EAAG/3C,OAAMhU,YAChC,MAAM,oBAAEgB,GAAwBrH,EAAgBK,SAChDgH,EAAoBgqD,SAAS,CAAEh3C,QAAQ,CAAEg4C,cAAehsD,KAQ1DisD,4BAA6BA,EAAGj4C,OAAMhU,YACpC,MAAM,oBAAEgB,GAAwBrH,EAAgBK,SAChDgH,EAAoBgqD,SAAS,CAAEh3C,QAAQ,CAAEk4C,kBAAmBlsD,KAG9DmsD,iBAAkB30C,OAAS5T,iBAAgBjD,mBACzC,MAAM,oBAAEK,EAAmB,gBAAE0R,GAAoB/Y,EAAgBK,SAC3DiF,EAAe+B,EAAoBgP,gBAAgBpM,GAEzD,IAAK3E,EACH,OAGF,MAAMqB,EAAUrB,EAAaE,SAASwB,IAEtC4S,EAAAA,EAAAA,iBAAgB,CACdb,kBACAc,MAAO,qBACPC,YAAa,kBACbC,aAAcpT,EAAQxC,QACrB6V,KAAK7V,IACNkD,EAAoBorD,gBAAgBxoD,EAAgBjD,EAAc7C,MAItEuuD,sBAAuBA,EAAGzoD,qBACxB,MAAM,oBAAE5C,EAAmB,gBAAE0R,GAAoB/Y,EAAgBK,SAC3DiF,EAAe+B,EAAoBgP,gBAAgBpM,GAEzD,IAAK3E,EACH,OAGF,MAAM,MAAEnB,GAAUmB,GAElBsU,EAAAA,EAAAA,iBAAgB,CACdb,kBACAc,MAAO,0BACPC,YAAa,kBACbC,aAAc5V,IACb6V,KAAK7V,IACNkD,EAAoBk/B,wBAAwB,CAAEt8B,iBAAgB9F,aAIlEwuD,iBAAkBA,EAAG1oD,iBAAgBjD,mBACnC,MAAM,oBAAEK,EAAmB,gBAAE0R,EAAe,oBAAEpQ,GAC5C3I,EAAgBK,SACZhD,EAAasL,EAAoB2/B,sBACjC/0B,EAAQlM,EAAoBurD,gBAAgBv1D,EAAY4M,EAAgBjD,GAExE6rD,EAAY,CAChBC,EAAGv/C,EAAM,GACTw/C,EAAGx/C,EAAM,GACTnL,EAAGmL,EAAM,GACTpL,EAAGoL,EAAM,GAAK,KAGhBwF,EAAgBmiB,KAAK,CACnBC,QAAS63B,EAAAA,kBACTn5C,MAAO,gBACPyvC,aAAc,CACZjjD,MAAOwsD,EACPI,OAAQC,IACN,MAAM3/C,EAAQ,CAAC2/C,EAAaJ,EAAGI,EAAaH,EAAGG,EAAa9qD,EAAoB,IAAjB8qD,EAAa/qD,GAC5Ed,EAAoB8rD,gBAAgB91D,EAAY4M,EAAgBjD,EAAcuM,QAMtFs+C,+BAAgCA,KAC9B,MAAM,oBAAExqD,EAAmB,oBAAEsB,GAAwB3I,EAAgBK,SACrE,OAAOgH,EAAoBwqD,+BACzBlpD,EAAoB2/B,wBAIxB8qB,uBAAwBA,KACOr3B,EAAAA,WAAAA,UAAAA,yBACR/4B,QAAQqwD,IAC3BjzD,EAAmBwsB,OAAOymC,MAG9BhT,2BAA4BA,EAAGR,wBAC7B,MAAM,YAAEjvB,EAAW,oBAAEjoB,GAAwB3I,EAAgBK,SAG7Dw/C,EAAkB78C,QAAQrB,IACxB,MAAM2xD,EAAQ1iC,EAAY5Z,WACpBu8C,EAAmBD,EAAME,QAAQ7xD,EAAStE,YAChDuzB,EAAYm2B,QAAQ,CAClBn3C,GAAIjO,EAAStE,WACbo2D,UAAWF,GAAkBE,WAAaH,EAAMI,SAASD,WAAa,GACtEzM,WAAW,MAIfr+C,EAAoB03C,2BAA2BR,IAEjD8T,KAAMA,KACJvX,GAAmBuX,QAErBC,KAAMA,KACJxX,GAAmBwX,QAErBC,yBAA0BA,EAAG5rB,aAC3B,IAAIiV,EAAgBD,GAAiB,CAAEha,qBACvCia,EAAgBA,EAAcvyC,OAAOivC,IAASA,EAAKhhC,SAAS3W,SAAS,WACrEi7C,EAAcl6C,QAAQ42C,IACpBA,EAAKt+B,cAAgB,IAChBs+B,EAAKt+B,cACRw4C,QAAS,IACJla,EAAKt+B,cAAcw4C,QACtBv+C,QAAS0yB,OAKjB8rB,oBAAqBA,EAAG9rB,aACDhF,EAAiBka,kBACzBn6C,QAAQo6C,IACnB,MAAM5D,EAAYzd,EAAAA,iBAAAA,aAA+CqhB,GAC7DnV,EACFuR,EAAUkP,cAAc3sB,EAAAA,kBAAmCnjB,UAE3D4gC,EAAUyB,gBAAgBlf,EAAAA,kBAAmCnjB,aAInEo7C,mBAAoBA,KAClB,MAAMp7C,EAAWmjB,EAAAA,iBAAkCnjB,SAC7CkwC,EAAe7lB,EAAiBka,kBAEhC8W,EAAOnL,EAAal3C,KAAKwrC,IAC7B,MAAM5D,EAAYzd,EAAAA,iBAAAA,aAA+CqhB,GAC3DvD,EAAOL,EAAU8I,gBAAgB1pC,IAAWihC,KAClD,MAAgB,WAATA,IAGTiP,EAAa9lD,QAAQo6C,IACnB,MAAM5D,EAAYzd,EAAAA,iBAAAA,aAA+CqhB,GAC7D6W,EACFza,EAAUyB,gBAAgBriC,GAE1B4gC,EAAUkP,cAAc9vC,MAW9Bs7C,2BAA4BA,EAAG7W,YAC7B,MAAMtkB,EAAY1M,EAAiB0M,UAC7Bo7B,EAAqBp7B,EAAUzzB,cAAc8uD,aAEnD,GAAID,GAAoBE,iBAAkB,CACxC,MAAMC,EAAcjX,GAAOnU,QAAU,GAWrC,OAVAorB,EAAYpxD,KAAK,CACf0V,SAAU8G,EAAU2E,aACpB/I,cAAe,CACbi5C,aAAcJ,GAAoBI,cAAgB,EAClDhhD,MAAO4gD,GAAoBK,WAC3BtlD,WAAYilD,GAAoBjlD,cAIpCmuC,EAAMnU,OAASorB,EACRjX,CACT,CAEA,MAAMoX,EAAgBpX,GAAOrnC,UAAY,GASzC,OARAy+C,EAAcvxD,KAAK,CACjB0V,SAAU8G,EAAU2E,aACpB/I,cAAe,CACbi5C,aAAcJ,GAAoBI,cAAgB,EAClDhhD,MAAO4gD,GAAoBK,cAG/BnX,EAAMrnC,SAAWy+C,EACVpX,GAETqX,4BAA6BA,EAAGzsB,aAC9B,IAAIiV,EAAgBD,GAAiB,CAAEha,qBACvCia,EAAgBA,EAAcvyC,OAAOivC,IAASA,EAAKhhC,SAAS3W,SAAS,WACrEi7C,EAAcl6C,QAAQ42C,IACpBA,EAAKt+B,cAAgB,IAChBs+B,EAAKt+B,cACRq5C,sBAAuB1sB,MAI7B2sB,qBAAsBC,IACpB,MAAM,SAAElzD,GAAao8C,IACf+W,EAvyDYC,GAAG9xB,sBACHga,GAAiB,CAAEha,qBAENt4B,OAAOivC,GAAQA,EAAKob,eAAiBpb,EAAKqb,eAoyDpDF,CAAgB,CAAE9xB,qBAEvC6xB,EAAa9xD,QAAQ42C,IACnB,IACEA,EAAK,GAAGib,aACV,CAAE,MAAOhkD,GACPC,QAAQyD,MAAM,mCAAoCqlC,EAAKhhC,SACzD,IAGE2kC,GAAUhoC,SACZgoC,GAAU,GAAGsX,YAAiBlzD,EAASzD,UAG3C82D,cAAeA,KACb7wB,EAAQywB,qBAAqB,WAE/BK,cAAeA,KACb9wB,EAAQywB,qBAAqB,WAE/BM,8BAA+BA,KAC7B,MAAM,SAAEvzD,GAAao8C,IAEfhD,EADYhf,EAAAA,iBAAAA,wBAA0Dp6B,EAASiO,IACtD0yC,gBAAgB,kBAE1CvH,GAILA,EAAaoa,aAAaxzD,IAE5ByzD,mCAAoCA,KAClC,MAAM,SAAEzzD,GAAao8C,IAEfhD,EADYhf,EAAAA,iBAAAA,wBAA0Dp6B,EAASiO,IACtD0yC,gBAAgB,kBAE1CvH,GAILA,EAAasa,kBAAkB1zD,EAAU,IAE3C2zD,qBAAsBz3C,UACpB,MAAM,SAAElc,GAAao8C,IACfwX,GAAYhY,GAAUhoC,QAC5BgoC,GAAUhoC,QAAUggD,EAEfzX,WACGP,GAAUiY,YAChB1X,IAAmB,GAIrB,MAAMgL,EAAe7lB,EAAiBka,kBAClCoY,EACFpxB,EAAQ0kB,qBAAqB,CAC3BjwC,SAAU,gCACVkwC,aAAcA,IAGhBA,EAAa9lD,QAAQo6C,IACDrhB,EAAAA,iBAAAA,aAA+CqhB,GACvDgM,eAAe,mCAIzB7L,GAAUhoC,SACZgoC,GAAUkY,aAAa9zD,IAG3B+zD,aAAcA,EAAGrvD,QAAOqZ,gBACtB,MAAMi2C,EAAYn7C,OAAOnU,GAEzB48B,EAAiBka,mBAAmBn6C,QAAQo6C,IAChB,IAAtB19B,GAAWhe,OACbq7C,GAAkB6Y,yBAAyBxY,EAAauY,GAExDj2C,GAAW1c,QAAQ4V,IACjBmkC,GAAkB6Y,yBAAyBxY,EAAauY,EAAW/8C,QAK3Ei9C,kBAAmBA,EACjBxvD,QACAqZ,YAAY,CACV,yBACA,uBACA,gCACA,mCAGF,MAAMopC,EAAe7lB,EAAiBka,kBACtC,GAAK2L,GAAcpnD,OAInB,IAAK,MAAM07C,KAAe0L,EAAc,CACtC,MAAMtP,EAAYvW,EAAiB8kB,aAAa3K,GAChD19B,GAAW1c,QAAQ4V,IACjB4gC,EAAUwS,qBAAqBpzC,EAAU,CACvC3K,UAAW,CACTiC,MAAO7J,MAIf,GAEFyvD,kBAAmBA,KACjB,MAAMhN,EAAe7lB,EAAiBka,kBACtC,GAAK2L,GAAcpnD,OAInB,IAAK,MAAM07C,KAAe0L,EAAc,CACtC,MAAM6M,EAAY5Y,GAAkBgZ,yBAAyB3Y,GAC7DL,GAAkB6Y,yBAAyBxY,EAAauY,EAAY,EACtE,GAEFK,kBAAmBA,KACjB,MAAMlN,EAAe7lB,EAAiBka,kBACtC,GAAK2L,GAAcpnD,OAInB,IAAK,MAAM07C,KAAe0L,EAAc,CACtC,MAAM6M,EAAY5Y,GAAkBgZ,yBAAyB3Y,GAC7DL,GAAkB6Y,yBAAyBxY,EAAauY,EAAY,EACtE,GAEFM,cAAeA,KACb,MAAM,oBAAE5uD,GAAwBrH,EAAgBK,UAC1C,iBAAE1C,GAAqBgL,EAAoBqO,WAC3C0sB,EAAqBr8B,EAAoB+2C,sBAAsBzgD,GAChE+lC,GAGLr8B,EAAoB6oD,WAAWxsB,EAAmBz5B,iBAEpDisD,uCAAwCA,EAAG74D,aAAYuW,6BACrD,MAAM+rC,EF5/DZ,UAA4C,WAC1CtiD,EAAU,gBACV2C,EAAe,uBACf4T,IAEA,MAAM,uBAAEgnB,EAAsB,oBAAEjyB,GAAwB3I,EAAgBK,UAElE,wBAAE81D,GAA4BxtD,EAAoBqO,WAGlD+kC,EADWD,GAAkB,CAAEz+C,aAAYsL,wBACfqnB,gBAAgB3yB,WAQlD,OANyBu9B,EAAuBglB,0BAC9C7D,EACAnoC,EAAuB,GACvBuiD,GAGsBxrD,OAAOyrD,GAAyC,aAApCA,EAAEpmC,iBAAiBC,aACzD,CEy+D+BomC,CAAmC,CAC1Dh5D,aACA2C,kBACA4T,2BAGFuwB,EAAQkc,2BAA2B,CACjCR,kBAAmBF,EAAiBt+C,IAAIM,IAAY,CAClDtE,WAAYsE,EAAStE,WACrBuW,uBAAwBjS,EAASiS,6BAIvC0iD,uBAAwBA,EAAGj5D,aAAYi+C,kBACrC,MAAM35C,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,IAAKsE,GAAYA,EAAS0Y,OAASk8C,EAAAA,MAAAA,aAAuB91B,aAExD,YADA3vB,QAAQuM,KAAK,mDAQf,IAHuB1U,EAAoB8B,8BAA8BpN,GACtCgE,IAAIC,GAAOiC,EAAkByG,mBAAmB1I,IAElEsQ,KAAKzH,GAAMA,EAAGc,mBAE7B,YADA6F,QAAQuM,KAAK,0EAIf1b,EAAS60D,eAAelb,GACxB35C,EAASuS,SAGYhU,EAA2BuO,gBAAgBpR,GACnDm5D,eAAelb,IAK9Bmb,6BAA8BA,EAAGp5D,cAAwC,CAAC,KACxE8mC,EAAQ0lB,uBAAuB,CAAExsD,aAAY4c,SAAU,YAMzDy8C,0BAA2BA,EACzBC,UACAt5D,iBAKA8mC,EAAQ0lB,uBAAuB,CAAExsD,aAAY4c,SAAU08C,KAMzDC,2BAA4BA,EAAGv5D,cAAwC,CAAC,KACtE8mC,EAAQ6lB,qBAAqB,CAAE3sD,aAAY4c,SAAU,YAMvD48C,wBAAyBA,EACvBF,UACAt5D,iBAKA8mC,EAAQ6lB,qBAAqB,CAAE3sD,aAAY4c,SAAU08C,KAKvDjN,gBAAiBA,EACfD,WACApsD,aACAssD,eAAe,YAMf,MAAMjyC,EAAiBra,EACnB2gD,EAA2B3gD,GAC3B0gD,IAEJ,IAAKrmC,EACH,OAGF,MAAM,SAAE/V,GAAa+V,EAErB,GAAI/V,aAAoBE,EAAAA,mBAAoB,CAC1C,MAAM68C,EAAS/8C,EAASg9C,YAClBmY,EAAYrN,EAAW/8C,KAAKqqD,GAAM,IAClCC,EAASC,GAAAA,GAAAA,SAAc,IAAIC,aAAa,KAC9CD,GAAAA,GAAAA,OAAYD,EAAQA,EAAQF,EAAUpY,EAAOyY,iBAC7C,MAAMC,EAAgBlY,GAAAA,GAAAA,cAAmBA,GAAAA,GAAAA,SAAeR,EAAO2Y,OAAQL,GAGvE,OAFAr1D,EAASw9C,UAAU,CAAEkY,OAAQD,SAC7Bz1D,EAASuS,QAEX,CAEA,QAA6BzI,IAAzB9J,EAAS21D,YAA2B,CACtC,MAAQ7N,SAAU8N,GAAoB51D,EAAS61D,sBACzCC,EACa,UAAjB9N,GACK4N,EAAkB9N,EAAW,KAAO,IACrC,MAOE,MAAM,eAAEK,GAAiB,EAAK,aAAEG,GAAe,GAC7CtoD,EAAS61D,sBAKX,UAHqB1N,EAAiB,EAAI,IAAMG,EAAe,EAAI,IAC3B,GAAM,GAAKR,EAAWA,GAElC,KAAO,GACpC,EAdD,GAeN9nD,EAAS+1D,oBAAoB,CAAEjO,SAAUgO,IACzC91D,EAASuS,QACX,GAEFyjD,iCAAkCA,KAChC57B,EAAAA,eAAgC67B,uBAElCC,+BAAgCA,KAC9B97B,EAAAA,eAAgC+7B,qBAElCC,4BAA6BA,EAC3B9+C,aACA9N,sBACAjE,cAMA,MAAM,cAAEooB,EAAa,SAAEb,GAAavnB,EAG9B8wD,GAFmBC,EAAAA,EAAAA,uBACUC,QAAQC,GAAMA,EAAGrpC,gBACpBnf,KAC9ByoD,GAAMA,EAAGC,2BAA6BltD,GAGnC6sD,GAILj8B,EAAAA,eAAgCu8B,qBAAqBN,EAAc95D,QAAS+a,EAAY,CACtFqW,gBACAb,eAKA8pC,EAAc,CAGlBnX,2BAA4B,CAC1BoX,UAAWr0B,EAAQid,2BACnBl6C,QAAS,CACPuxD,oBAAqB,0BACrBC,SAAU,CACR,CACEtmD,YAAa,sBAMrBgwC,kBAAmB,CACjBoW,UAAWr0B,EAAQie,mBAErBC,oBAAqB,CACnBmW,UAAWr0B,EAAQke,oBACnBsW,cAAe,GACfzxD,QAAS,CAAC,GAEZmgD,uBAAwB,CACtBmR,UAAWr0B,EAAQkjB,wBAErBzE,oBAAqB,CACnB4V,UAAWr0B,EAAQye,qBAErBC,kBAAmB,CACjB2V,UAAWr0B,EAAQ0e,mBAErBC,kBAAmB,CACjB0V,UAAWr0B,EAAQ2e,mBAErBa,kBAAmBxf,EAAQwf,kBAC3B12B,kBAAmB,CACjBurC,UAAWr0B,EAAQlX,mBAErB42B,sBAAuB,CACrB2U,UAAWr0B,EAAQ0f,uBAErBC,4BAA6B,CAC3B0U,UAAWr0B,EAAQ2f,6BAErBG,8BAA+B,CAC7BuU,UAAWr0B,EAAQ8f,+BAErBgD,uBAAwB,CACtBuR,UAAWr0B,EAAQ8iB,wBAErBp1C,eAAgB,CACd2mD,UAAWr0B,EAAQtyB,gBAErB41C,qBAAsB,CACpB+Q,UAAWr0B,EAAQsjB,sBAErBiB,cAAe,CACb8P,UAAWr0B,EAAQukB,eAErBG,qBAAsB,CACpB2P,UAAWr0B,EAAQ0kB,sBAErB7N,eAAgB,CACdwd,UAAWr0B,EAAQ6W,gBAErB4d,iBAAkB,CAChBJ,UAAWr0B,EAAQqlB,iBACnBtiD,QAAS,CAAEuiD,SAAU,KAEvBoP,kBAAmB,CACjBL,UAAWr0B,EAAQqlB,iBACnBtiD,QAAS,CAAEuiD,UAAW,KAExBqP,oBAAqB,CACnBN,UAAWr0B,EAAQylB,oBACnB1iD,QAAS,CAAEuiD,SAAU,KAEvBsP,wBAAyB,CACvBP,UAAWr0B,EAAQmnB,sBAErB0N,wBAAyB,CACvBR,UAAWr0B,EAAQmnB,qBACnBpkD,QAAS,CAAEujD,WAAY,IAEzBZ,uBAAwB,CACtB2O,UAAWr0B,EAAQsyB,8BAErBzM,qBAAsB,CACpBwO,UAAWr0B,EAAQyyB,4BAErBF,0BAA2B,CACzB8B,UAAWr0B,EAAQuyB,0BACnBxvD,QAAS,CAAEyvD,SAAS,IAEtBE,wBAAyB,CACvB2B,UAAWr0B,EAAQ0yB,wBACnB3vD,QAAS,CAAEyvD,SAAS,IAEtBxM,eAAgB,CACdqO,UAAWr0B,EAAQgmB,gBAErBE,cAAe,CACbmO,UAAWr0B,EAAQkmB,eAErB4O,gBAAiB,CACfT,UAAWr0B,EAAQqmB,cACnBtjD,QAAS,CAAEujD,UAAW,IAExByO,kBAAmB,CACjBV,UAAWr0B,EAAQqmB,cACnBtjD,QAAS,CAAEujD,WAAY,IAEzB0O,oBAAqB,CACnBX,UAAWr0B,EAAQqmB,cACnBtjD,QAAS,CAAEujD,UAAW,IAExB2O,UAAW,CACTZ,UAAWr0B,EAAQ4mB,OACnB7jD,QAAS,CAAEujD,UAAW,IAExB4O,cAAe,CACbb,UAAWr0B,EAAQ4mB,OACnB7jD,QAAS,CAAEujD,WAAY,IAEzB6O,WAAY,CACVd,UAAWr0B,EAAQumB,YACnBxjD,QAAS,CAAEyjD,WAAY,IAEzB4O,UAAW,CACTf,UAAWr0B,EAAQumB,YACnBxjD,QAAS,CAAEyjD,YAAa,IAE1BD,YAAa,CACX8N,UAAWr0B,EAAQumB,aAErBrB,0BAA2B,CACzBmP,UAAWr0B,EAAQklB,2BAErB3C,WAAY,CACV8R,UAAWr0B,EAAQuiB,YAErBD,kBAAmB,CACjB+R,UAAWr0B,EAAQsiB,mBAErBF,kBAAmB,CACjBiS,UAAWr0B,EAAQoiB,mBAErByE,oBAAqB,CACnBwN,UAAWr0B,EAAQ6mB,qBAErBc,gCAAiC,CAC/B0M,UAAWr0B,EAAQ2nB,iCAErBI,kBAAmB,CACjBsM,UAAWr0B,EAAQ+nB,mBAErBO,mCAAoC,CAClC+L,UAAWr0B,EAAQsoB,oCAErBU,kBAAmB,CACjBqL,UAAWr0B,EAAQgpB,mBAErBC,0BAA2B,CACzBoL,UAAWr0B,EAAQipB,2BAErBc,yBAA0B,CACxBsK,UAAWr0B,EAAQ+pB,0BAErBh5C,kBAAmB,CACjBsjD,UAAWr0B,EAAQjvB,mBAErBk6C,gBAAiB,CACfoJ,UAAWr0B,EAAQirB,iBAErB5D,mBAAoB,CAClBgN,UAAWr0B,EAAQqnB,oBAErBW,iBAAkB,CAChBqM,UAAWr0B,EAAQgoB,kBAErB/D,6BAA8B,CAC5BoQ,UAAWr0B,EAAQikB,8BAErBE,4BAA6B,CAC3BkQ,UAAWr0B,EAAQmkB,6BAErBxG,iCAAkC,CAChC0W,UAAWr0B,EAAQ2d,kCAErBH,qCAAsC,CACpC6W,UAAWr0B,EAAQwd,sCAErB8N,0BAA2B,CACzB+I,UAAWr0B,EAAQsrB,2BAErBO,sBAAuB,CACrBwI,UAAWr0B,EAAQ6rB,uBAErBE,WAAY,CACVsI,UAAWr0B,EAAQ8rB,mBAErBuJ,0BAA2B,CACzBhB,UAAWr0B,EAAQgsB,kCAErBI,wBAAyB,CACvBiI,UAAWr0B,EAAQmsB,gCAErBmJ,kBAAmB,CACjBjB,UAAWr0B,EAAQqsB,0BAErBkJ,6BAA8B,CAC5BlB,UAAWr0B,EAAQusB,qCAErBG,qBAAsB,CACpB2H,UAAWr0B,EAAQysB,6BAErB+I,kBAAmB,CACjBnB,UAAWr0B,EAAQ2sB,0BAErBK,aAAc,CACZqH,UAAWr0B,EAAQ+sB,qBAErB0I,qBAAsB,CACpBpB,UAAWr0B,EAAQitB,6BAErByI,cAAe,CACbrB,UAAWr0B,EAAQmtB,sBAErBwI,mBAAoB,CAClBtB,UAAWr0B,EAAQqtB,2BAErBuI,+BAAgC,CAC9BvB,UAAWr0B,EAAQstB,uCAErBuI,kCAAmC,CACjCxB,UAAWr0B,EAAQwtB,0CAErBsI,aAAc,CACZzB,UAAWr0B,EAAQ4tB,qBAErBmI,gBAAiB,CACf1B,UAAWr0B,EAAQ8tB,wBAErBkI,cAAe,CACb3B,UAAWr0B,EAAQguB,sBAErBiI,iBAAkB,CAChB5B,UAAWr0B,EAAQiuB,yBAErBiI,qBAAsB,CACpB7B,UAAWr0B,EAAQmuB,6BAErBE,iBAAkB,CAChBgG,UAAWr0B,EAAQquB,kBAErBE,sBAAuB,CACrB8F,UAAWr0B,EAAQuuB,uBAErBC,iBAAkB,CAChB6F,UAAWr0B,EAAQwuB,kBAErBd,+BAAgC,CAC9B2G,UAAWr0B,EAAQ0tB,gCAErBuB,uBAAwB,CACtBoF,UAAWr0B,EAAQivB,wBAErB/S,2BAA4Blc,EAAQkc,2BACpCsT,KAAMxvB,EAAQwvB,KACdC,KAAMzvB,EAAQyvB,KACd1S,oBAAqB/c,EAAQ+c,oBAC7BZ,wBAAyBnc,EAAQmc,wBACjC6D,8BAA+BhgB,EAAQggB,8BACvC0P,yBAA0B1vB,EAAQ0vB,yBAClCE,oBAAqB5vB,EAAQ4vB,oBAC7BiB,cAAe7wB,EAAQ6wB,cACvBC,cAAe9wB,EAAQ8wB,cACvBP,4BAA6BvwB,EAAQuwB,4BACrCY,qBAAsBnxB,EAAQmxB,qBAC9BF,mCAAoCjxB,EAAQixB,mCAC5CF,8BAA+B/wB,EAAQ+wB,8BACvCQ,aAAcvxB,EAAQuxB,aACtBG,kBAAmB1xB,EAAQ0xB,kBAC3BC,kBAAmB3xB,EAAQ2xB,kBAC3BE,kBAAmB7xB,EAAQ6xB,kBAC3BC,cAAe9xB,EAAQ8xB,cACvBC,uCAAwC/xB,EAAQ+xB,uCAChDI,uBAAwBnyB,EAAQmyB,uBAChCxW,2BAA4B3b,EAAQ2b,2BACpCsH,yBAA0BjjB,EAAQijB,yBAClC2Q,4BAA6B5zB,EAAQ4zB,4BACrCJ,iCAAkCxzB,EAAQwzB,iCAC1CE,+BAAgC1zB,EAAQ0zB,+BACxC7D,mBAAoB7vB,EAAQ6vB,mBAC5B1V,0BAA2Bna,EAAQma,0BACnC4V,2BAA4B/vB,EAAQ+vB,4BAGtC,MAAO,CACL/vB,UACAo0B,cACA+B,eAAgB,cAEpB,EIh9EaC,GAAiB,CAC5BlgD,KAAM,MACNzK,GAAI,MACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAILC,GAAyB,CACpCpgD,KAAM,aACNzK,GAAI,YACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPwzD,cAAe,CAAC,aAIPC,GAAsC,CACjD/qD,GAAI,MACJua,KAAM,MACN86B,QAAQ,EACRnc,KAAM,sBACNL,UAAU,EACVmyB,YAAa,aACbC,aAAc,aACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbC,yBAA0B,EAC1BC,sBAAuB,GACvBC,kBAAmB,MACnBpO,UAAW,CAAC,EACZlkB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,oBACXC,WAAY,CACVC,OAAQ,CACNn1D,OAAO,IAGXo1D,UAAU,MAKlBxO,OAAQ,CACN,CACE9iC,KAAM,UACNuxC,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,EACTq/C,cAAe,CACb,CACEj9D,EAAG,EACHE,EAAG,EACH8T,MAAO,EAAI,EACX8J,OAAQ,GAEV,CACE9d,EAAG,EAAI,EACPE,EAAG,EACH8T,MAAO,EAAI,EACX8J,OAAQ,GAEV,CACE9d,EAAG,EAAI,EACPE,EAAG,EACH8T,MAAO,EAAI,EACX8J,OAAQ,MAKhBoT,UAAW,CACT,CACEG,gBAAiB,CACf3yB,WAAY,YACZ+/C,YAAa,MACbntB,aAAc,SACdqrB,YAAa,QACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,MACbntB,aAAc,SACdqrB,YAAa,WACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,cACZ+/C,YAAa,MACbntB,aAAc,SACdqrB,YAAa,UACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,0BChILmsD,GAAS,CACpBnsD,GAAI,SACJq1C,QAAQ,EACR96B,KAAM,aACN2e,KAAM,6BACNL,UAAU,EACVmyB,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbE,sBAAuB,GACvBC,kBAAmB,mBACnBtyB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,oBACXC,WAAY,CACVC,OAAQ,CACNn1D,OAAO,IAGXo1D,UAAU,MAKlBxO,OAAQ,CACN,CACEr9C,GAAI,cACJua,KAAM,SACNuxC,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,QACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,WACbntB,aAAc,WACdqrB,YAAa,UACb0gB,oBAAqB,CACnBC,cAAc,GAEhBH,WAAY,CAACrB,KAEf52D,YAAa,CACX,CACE+L,GAAI,mBACJ1I,QAAS,CACPg1D,cAAe,CACbjxB,GAAI,UACJkxB,GAAI,aACJzI,QAAS,eAMnB,CACE1jC,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,UACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,WACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,0BC3GLwsD,GAAS,CACpBxsD,GAAI,SACJq1C,QAAQ,EACR96B,KAAM,UACN2e,KAAM,0BACNL,UAAU,EACVmyB,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbE,sBAAuB,GACvBC,kBAAmB,mBACnBtyB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,oBACXC,WAAY,CACVC,OAAQ,CACNn1D,OAAO,IAGXo1D,UAAU,MAKlBxO,OAAQ,CACN,CACEr9C,GAAI,cACJua,KAAM,SACNuxC,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,EACTq/C,cAAe,CACb,CACEj9D,EAAG,EACHE,EAAG,EACH8T,MAAO,EACP8J,OAAQ,IAEV,CACE9d,EAAG,EACHE,EAAG,GACH8T,MAAO,EAAI,EACX8J,OAAQ,IAEV,CACE9d,EAAG,EAAI,EACPE,EAAG,GACH8T,MAAO,EAAI,EACX8J,OAAQ,IAEV,CACE9d,EAAG,EAAI,EACPE,EAAG,GACH8T,MAAO,EAAI,EACX8J,OAAQ,OAKhBoT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,WACbntB,aAAc,WACdqrB,YAAa,UACb0gB,oBAAqB,CACnBC,cAAc,IAGlBp4D,YAAa,CACX,CACE+L,GAAI,mBACJ1I,QAAS,CACPg1D,cAAe,CACbjxB,GAAI,UACJkxB,GAAI,aACJzI,QAAS,eAMnB,CACE1jC,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,QACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,UACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,WACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,0BCpILysD,GAAyB,CACpCzsD,GAAI,yBACJq1C,QAAQ,EACR96B,KAAM,MACNywC,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbE,sBAAuB,GACvBC,kBAAmB,mBACnBtyB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,oBACXC,WAAY,CACVC,OAAQ,CACNn1D,OAAO,IAGXo1D,UAAU,GAEZ,CACEH,UAAW,WACXC,WAAY,CACVC,OAAQ,CACNn1D,MAAO,OAGXo1D,UAAU,MAKlBxO,OAAQ,CACN,CACEr9C,GAAI,YACJua,KAAM,MACNuxC,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,QACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,WACbntB,aAAc,WACdqrB,YAAa,UACb0gB,oBAAqB,CACnBC,cAAc,GAEhBH,WAAY,CAACrB,KAEf52D,YAAa,CACX,CACE+L,GAAI,mBACJ1I,QAAS,CACPg1D,cAAe,CACbjxB,GAAI,UACJkxB,GAAI,aACJzI,QAAS,eAMnB,CACE1jC,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,UACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,WACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,0BClHL0sD,GAAS,CACpB1sD,GAAI,SACJq1C,QAAQ,EACR96B,KAAM,UACN2e,KAAM,0BACNL,UAAU,EACVmyB,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbE,sBAAuB,GACvBC,kBAAmB,mBACnBtyB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,oBACXC,WAAY,CACVC,OAAQ,CACNn1D,OAAO,IAGXo1D,UAAU,MAKlBxO,OAAQ,CACN,CACEr9C,GAAI,cACJua,KAAM,SACNuxC,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,WACbntB,aAAc,WACdqrB,YAAa,UACb0gB,oBAAqB,CACnBC,cAAc,EACdH,WAAY,CAACrB,MAGjB52D,YAAa,CACX,CACE+L,GAAI,mBACJ1I,QAAS,CACPg1D,cAAe,CACbjxB,GAAI,UACJkxB,GAAI,aACJzI,QAAS,mBCzDd6I,GAAY,CACvB3sD,GAAI,YACJq1C,QAAQ,EACR96B,KAAM,aACN2e,KAAM,6BACNL,UAAU,EACVmyB,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbE,sBAAuB,GACvBC,kBAAmB,mBACnBtyB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,oBACXC,WAAY,CACVC,OAAQ,CACNn1D,OAAO,IAGXo1D,UAAU,MAKlBxO,OAAQ,CACN,CACEr9C,GAAI,iBACJua,KAAM,YACNuxC,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,EACTq/C,cAAe,CACb,CACEj9D,EAAG,EACHE,EAAG,EACH8T,MAAO,EAAI,EACX8J,OAAQ,GAEV,CACE9d,EAAG,EAAI,EACPE,EAAG,EACH8T,MAAO,EAAI,EACX8J,OAAQ,EAAI,GAEd,CACE9d,EAAG,EAAI,EACPE,EAAG,EAAI,EACP8T,MAAO,EAAI,EACX8J,OAAQ,EAAI,GAEd,CACE9d,EAAG,EAAI,EACPE,EAAG,EAAI,EACP8T,MAAO,EAAI,EACX8J,OAAQ,EAAI,MAKpBoT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,WACbntB,aAAc,WACdqrB,YAAa,UACb0gB,oBAAqB,CACnBC,cAAc,IAGlBp4D,YAAa,CACX,CACE+L,GAAI,mBACJ1I,QAAS,CACPg1D,cAAe,CACbjxB,GAAI,UACJkxB,GAAI,aACJzI,QAAS,eAMnB,CACE1jC,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,QACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,UACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,WACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,0BCpIL4sD,GAAe,CAC1B5sD,GAAI,eACJq1C,QAAQ,EACR96B,KAAM,gBACN2e,KAAM,gCACNL,UAAU,EACVmyB,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbE,sBAAuB,GACvBC,kBAAmB,mBACnBtyB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEC,OAAQ,EACRC,UAAW,oBACXC,WAAY,CACVC,OAAQ,CACNn1D,OAAO,IAGXo1D,UAAU,MAKlBxO,OAAQ,CACN,CACEr9C,GAAI,oBACJua,KAAM,eACNuxC,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,EACTq/C,cAAe,CACb,CACEj9D,EAAG,EACHE,EAAG,EACH8T,MAAO,EAAI,EACX8J,OAAQ,GAEV,CACE9d,EAAG,EAAI,EACPE,EAAG,EACH8T,MAAO,EAAI,EACX8J,OAAQ,IAEV,CACE9d,EAAG,EAAI,EACPE,EAAG,GACH8T,MAAO,EAAI,EACX8J,OAAQ,OAKhBoT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,QACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,WACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,MACbntB,aAAc,SACdqrB,YAAa,UACbugB,oBAAqB,CACnBvrD,OAAQ,UAEVwrD,WAAY,CAACvB,GAAgBE,KAE/B52D,YAAa,CACX,CACE+L,GAAI,0BCxGZ6sD,GAA4C,CAChD7sD,GAAI,kBACJ+oB,YAAa,mCACbxO,KAAM,aACN2e,KAAM,oBACNL,UAAU,EACVqgB,aAAc,CAAC,WACfmS,sBAAuB,GACvBryB,oBAAqB,CACnBuyB,iBAAkB,CAChBC,oBAAqB,CACnB,CACEE,UAAW,iBACXC,WAAY,CACVmB,YAAa,CAAEr2D,MAAO,KAExBo1D,UAAU,GAEZ,CACEH,UAAW,sBACXD,OAAQ,GACRE,WAAY,CACVC,QAAQ,OAMlBmB,gBAAiB,CACf3sC,gBAAiB,CACfC,aAAc,QACdmtB,YAAa,UACbwf,oBAAoB,GAEtB/4D,YAAa,CACX,CACE+L,GAAI,sBAIVq9C,OAAQ,CACN,CACE9iC,KAAM,YACNva,GAAI,MACJ8rD,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,OAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,OAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,OAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,OAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,OAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACf3yB,WAAY,eACZ+/C,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,OAKvBh5D,YAAa,CACX,CACE+L,GAAI,wBAMd,CACEua,KAAM,YACNva,GAAI,MACJ8rD,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,wBAMd,CACEua,KAAM,YACNva,GAAI,MACJ8rD,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,wBAMd,CACEua,KAAM,YACNva,GAAI,MACJ8rD,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,wBAMd,CACEua,KAAM,YACNva,GAAI,MACJ8rD,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,wBAMd,CACEua,KAAM,YACNva,GAAI,MACJ8rD,kBAAmB,CACjBC,WAAY,OACZprD,WAAY,CACViM,KAAM,EACND,QAAS,IAGbsT,UAAW,CACT,CACEG,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,sBAIV,CACEogB,gBAAiB,CACfotB,YAAa,UACb0e,WAAY,CACV,CACEzhD,KAAM,UACNzK,GAAI,cACJ2e,QAAQ,EACRmoB,QAAQ,GAEV,CACEr8B,KAAM,MACNzK,GAAI,SACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACPszD,cAAc,IAGlB,CACEngD,KAAM,YACNzK,GAAI,gBACJ2e,QAAQ,EACRmoB,QAAQ,EACRxvC,QAAS,CACP21D,cAAe,MAKvBh5D,YAAa,CACX,CACE+L,GAAI,0BCr/ClB,SArCA,WACE,MAAO,CACL,CACEua,KAAMwwC,GAAI/qD,GACV88C,SAAUiO,IAEZ,CACExwC,KAAMkyC,GAAuBzsD,GAC7B88C,SAAU2P,IAEZ,CACElyC,KAAM4xC,GAAOnsD,GACb88C,SAAUqP,IAEZ,CACE5xC,KAAMiyC,GAAOxsD,GACb88C,SAAU0P,IAEZ,CACEjyC,KAAMqyC,GAAa5sD,GACnB88C,SAAU8P,IAEZ,CACEryC,KAAMmyC,GAAO1sD,GACb88C,SAAU4P,IAEZ,CACEnyC,KAAMoyC,GAAU3sD,GAChB88C,SAAU6P,IAEZ,CACEpyC,KAAMsyC,GAAU7sD,GAChB88C,SAAU+P,IAGhB,E,gBCzCA,MAsBA,GAtB+BK,EAC7BlyD,aACAmyD,gBAAe,EACfC,SAAS,GAAGpyD,EAAWzG,SAASyG,EAAWnC,cAM3CmF,EAAAA,cAAA,OACE82B,UAAU,4CACV,UAASs4B,GAETpvD,EAAAA,cAAA,QAAM82B,UAAU,sCAAsC95B,EAAWzG,OAChE44D,GAAgBnyD,EAAWnC,UAC1BmF,EAAAA,cAAA,QAAM82B,UAAU,iEACb95B,EAAWnC,W,gBC6fpB,SA3fA,UAAiC,WAAEpL,IACjC,MAAM,gBAAE4P,EAAe,gBAAEjN,IAAoBC,EAAAA,EAAAA,OACtCg9D,EAAoBC,IAAyB1/D,EAAAA,EAAAA,UAAmB,KAChE2/D,EAAsBC,IAA2B5/D,EAAAA,EAAAA,UAAmB,KACrE,eAAEkV,IAAmB1F,EAAAA,GAAAA,IAAqB3P,IAE1C,uBAAEu9B,EAAsB,eAAEC,GAAmB76B,EAAgBK,UAE7D,qBACJC,EAAoB,4BACpBsL,EAA2B,+BAC3BE,EAA8B,+BAC9BC,EAA8B,mBAC9BjC,EAAkB,sBAClB4B,IACEnL,EAAAA,GAAAA,GAAuBlD,IAEpBggE,EAA8BC,IACnC9/D,EAAAA,EAAAA,UAASsM,IAEJyzD,EAAyBC,IAA8BhgE,EAAAA,EAAAA,WAAS,GAmBjEigE,EAA+BA,CACnCC,EACAC,KAGA1wD,EAAgBopB,WAAW,wBAAyB,CAClDh5B,aACA+M,sBAAuBszD,IAGzBn+D,WAAW,KACT0N,EAAgBopB,WAAW,uBAAwB,CACjDh5B,aACA+M,sBAAuBuzD,KAExB,IAMCC,EAA+BxzD,KAKQ,IAJDizD,EAA6BQ,UACrEjzD,GAAcA,EAAWR,wBAA0BA,IAInDkzD,EAAgCQ,GACvBA,EAAiCnzD,OACtCC,GAAcA,EAAWR,wBAA0BA,IAKzD6C,EAAgBopB,WAAW,wBAAyB,CAClDh5B,aACA+M,2BAOE2zD,EAA8B3zD,IAClC6C,EAAgBopB,WAAW,uBAAwB,CACjDh5B,aACA+M,2BAkGE4zD,IAAiCnjC,EAAeojC,UAAU,6BAC1DC,IAAmBrjC,EAAeojC,UAAU,eAUlD,OACErwD,EAAAA,cAAA,OACE82B,UAAU,qEACV,UAAS,8BAA8BrnC,KAGvCuQ,EAAAA,cAAA,OAAK82B,UAAW,QACd92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRrB,UAAU,qCACVH,QAASA,KAEP24B,EAAsB,IAAID,EAAoB,WAAWzrB,KAAKC,WAEhEz7B,SAAoD,IAA1ClK,EAA+BpK,QAEzCkM,EAAAA,cAAC42B,GAAAA,IAAM25B,KAAI,CAACz5B,UAAU,YAAY,cAGpC92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRrB,UAAU,sCACV1uB,SAAiD,IAAvCpK,EAA4BlK,OACtC6iC,QAASA,KACP64B,EAAwB,IAAID,EAAsB,OAAO3rB,KAAKC,WAEhEurB,OAAQ,8BAA8B3/D,KAEtCuQ,EAAAA,cAAC42B,GAAAA,IAAM25B,KAAI,CAACz5B,UAAU,YAAY,iBAKtC92B,EAAAA,cAAA,OAAK82B,UAAU,IAEb92B,EAAAA,cAAA,OAAK82B,UAAU,aACZ24B,EAA6Bh8D,IAAIuJ,GAChCgD,EAAAA,cAAA,OACE5H,IAAK4E,EAAWR,sBAChBs6B,UAAU,0BAEV92B,EAAAA,cAAC42B,GAAAA,IAAM45B,kBAAiB,CAAC15B,UAAU,qDACnC92B,EAAAA,cAACywD,GAAAA,IAAM,CACLh4D,MAAOuE,EAAWR,sBAClBk0D,cAAej4D,GAlJQk4D,EACnCC,EACAb,KAEA,GAAIA,IAA6Ba,EAAkBp0D,sBACjD,OAIF,MAAMmF,EAAqB3D,EAA4B+D,KACrDxF,GAAMA,EAAGC,wBAA0BuzD,GAGjCpuD,IACF+tD,EAAgCQ,IAC9B,MAAMW,EAAyBX,EAAiCD,UAC9DjzD,GAAcA,EAAWR,wBAA0Bo0D,EAAkBp0D,uBAEvE,MAAO,IACF0zD,EAAiCh1C,MAAM,EAAG21C,GAC7ClvD,KACGuuD,EAAiCh1C,MAAM21C,EAAyB,MAIvEhB,EACEe,EAAkBp0D,sBAClBmF,EAAmBnF,yBAuHam0D,CAA6B3zD,EAAYvE,IAEjEuH,EAAAA,cAAC8wD,GAAAA,IAAa,CAACh6B,UAAU,UACvB92B,EAAAA,cAAC+wD,GAAAA,IAAW,CACV,UAAS,2BAA2B/zD,EAAWzG,OAAO0kB,iBAErDje,EAAWzG,OAAO0kB,gBAGvBjb,EAAAA,cAACgxD,GAAAA,IAAa,KAEZhxD,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAK4E,EAAWR,sBAChB/D,MAAOuE,EAAWR,sBAClBs6B,UAAU,QAEV92B,EAAAA,cAACkvD,GAAsB,CAAClyD,WAAYA,KAErCgB,EAA4BvK,IAAIwI,GAC/B+D,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAK6D,EAAKO,sBACV/D,MAAOwD,EAAKO,sBACZs6B,UAAU,QAEV92B,EAAAA,cAACkvD,GAAsB,CAAClyD,WAAYf,QAK5C+D,EAAAA,cAACkxD,GAAAA,IAAY,KACXlxD,EAAAA,cAACmxD,GAAAA,IAAmB,CAACl5B,SAAO,GAC1Bj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL6R,UAAU,qBACVs4B,OAAQ,0BAA0BpyD,EAAWzG,OAAO0kB,iBAEpDjb,EAAAA,cAAC42B,GAAAA,IAAMw6B,KAAI,CAACt6B,UAAU,cAG1B92B,EAAAA,cAACw2B,GAAAA,IAAmB,CAACC,MAAM,SACzBz2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACf,UAAS,4BAA4B15B,EAAWzG,OAAO0kB,gBACvD0b,QAASA,IAAMq5B,EAA4BhzD,EAAWR,wBACvD,cAQR+yD,EAAqB97D,IAAI49D,GACxBrxD,EAAAA,cAAA,OACE5H,IAAKi5D,EACLv6B,UAAU,0BAEV92B,EAAAA,cAAC42B,GAAAA,IAAM45B,kBAAiB,CAAC15B,UAAU,qDACnC92B,EAAAA,cAACywD,GAAAA,IAAM,CACLh4D,MAAM,GACNi4D,cAAej4D,GAnJc64D,EAACD,EAAmB70D,KAC7D,MAAMmF,EAAqB3D,EAA4B+D,KACrDxF,GAAMA,EAAGC,wBAA0BA,GAGjCmF,IACF+tD,EAAgCQ,GAAoC,IAC/DA,EACHvuD,IAEFwuD,EAA2BxuD,EAAmBnF,uBAE9CgzD,EAAwBD,EAAqBxyD,OAAOiF,GAAMA,IAAOqvD,MAuI/BC,CAAmCD,EAAW54D,IAEtEuH,EAAAA,cAAC8wD,GAAAA,IAAa,CAACh6B,UAAU,UACvB92B,EAAAA,cAAC+wD,GAAAA,IAAW,CAAC7kD,YAAY,2BAE3BlM,EAAAA,cAACgxD,GAAAA,IAAa,KACXhzD,EAA4BvK,IAAIwI,GAC/B+D,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAK6D,EAAKO,sBACV/D,MAAOwD,EAAKO,sBACZs6B,UAAU,QAEV92B,EAAAA,cAACkvD,GAAsB,CACrBlyD,WAAYf,EACZmzD,OAAQ,GAAGnzD,EAAK1F,cAM1ByJ,EAAAA,cAACkxD,GAAAA,IAAY,KACXlxD,EAAAA,cAACmxD,GAAAA,IAAmB,CAACl5B,SAAO,GAC1Bj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL6R,UAAU,sBAEV92B,EAAAA,cAAC42B,GAAAA,IAAMw6B,KAAI,CAACt6B,UAAU,cAG1B92B,EAAAA,cAACw2B,GAAAA,IAAmB,CAACC,MAAM,SACzBz2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACfC,QAASA,KAEP64B,EAAwBD,EAAqBxyD,OAAOiF,GAAMA,IAAOqvD,MAEpE,eASXrxD,EAAAA,cAAA,OAAK82B,UAAU,aACZh5B,EAAsBrK,IAAI,CAACuJ,EAAYk8C,IACtCl5C,EAAAA,cAAA,OACE5H,IAAK4E,EAAWR,sBAChBs6B,UAAU,0BAEV92B,EAAAA,cAAC42B,GAAAA,IAAM26B,gBAAe,CAACz6B,UAAU,qDACjC92B,EAAAA,cAACywD,GAAAA,IAAM,CACLh4D,MAAOuE,EAAWR,sBAClBk0D,cAAej4D,GAjOW+4D,EACtCZ,EACAb,KAEA,GAAIA,IAA6Ba,EAAkBp0D,sBACjD,OAIF,MAAMmF,EAAqBzD,EAA+B6D,KACxDxF,GAAMA,EAAGC,wBAA0BuzD,GAGjCpuD,GACFkuD,EACEe,EAAkBp0D,sBAClBmF,EAAmBnF,wBAiNag1D,CAAgCx0D,EAAYvE,IAEpEuH,EAAAA,cAAC8wD,GAAAA,IAAa,CAACh6B,UAAU,UACvB92B,EAAAA,cAAC+wD,GAAAA,IAAW,KAAE/zD,EAAWzG,OAAO0kB,gBAElCjb,EAAAA,cAACgxD,GAAAA,IAAa,KAEZhxD,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAK4E,EAAWR,sBAChB/D,MAAOuE,EAAWR,sBAClBs6B,UAAU,QAEV92B,EAAAA,cAACkvD,GAAsB,CAAClyD,WAAYA,KAErCkB,EAA+BzK,IAAIwI,GAClC+D,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAK6D,EAAKO,sBACV/D,MAAOwD,EAAKO,sBACZs6B,UAAU,QAEV92B,EAAAA,cAACkvD,GAAsB,CAAClyD,WAAYf,QAK5C+D,EAAAA,cAACkxD,GAAAA,IAAY,KACXlxD,EAAAA,cAACmxD,GAAAA,IAAmB,CAACl5B,SAAO,GAC1Bj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL6R,UAAU,sBAEV92B,EAAAA,cAAC42B,GAAAA,IAAMw6B,KAAI,CAACt6B,UAAU,cAG1B92B,EAAAA,cAACw2B,GAAAA,IAAmB,CAACC,MAAM,SACzBz2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACfC,QAASA,IAAMq5B,EAA4BhzD,EAAWR,wBACvD,cAQR6yD,EAAmB57D,IAAI49D,GACtBrxD,EAAAA,cAAA,OACE5H,IAAKi5D,EACLv6B,UAAU,0BAEV92B,EAAAA,cAAC42B,GAAAA,IAAM26B,gBAAe,CAACz6B,UAAU,qDACjC92B,EAAAA,cAACywD,GAAAA,IAAM,CACLh4D,MAAM,GACNi4D,cAAej4D,GA5OYg5D,EAACJ,EAAmB70D,KAC3D,MAAMmF,EAAqBzD,EAA+B6D,KACxDxF,GAAMA,EAAGC,wBAA0BA,GAGjCmF,IACFwuD,EAA2BxuD,EAAmBnF,uBAE9C8yD,EAAsBD,EAAmBtyD,OAAOiF,GAAMA,IAAOqvD,MAoO3BI,CAAiCJ,EAAW54D,IAEpEuH,EAAAA,cAAC8wD,GAAAA,IAAa,CAACh6B,UAAU,UACvB92B,EAAAA,cAAC+wD,GAAAA,IAAW,CAAC7kD,YAAY,yBAE3BlM,EAAAA,cAACgxD,GAAAA,IAAa,KACX9yD,EAA+BzK,IAAIwI,GAClC+D,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAK6D,EAAKO,sBACV/D,MAAOwD,EAAKO,sBACZs6B,UAAU,QAEV92B,EAAAA,cAACkvD,GAAsB,CAAClyD,WAAYf,QAK5C+D,EAAAA,cAACkxD,GAAAA,IAAY,KACXlxD,EAAAA,cAACmxD,GAAAA,IAAmB,CAACl5B,SAAO,GAC1Bj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL6R,UAAU,sBAEV92B,EAAAA,cAAC42B,GAAAA,IAAMw6B,KAAI,CAACt6B,UAAU,cAG1B92B,EAAAA,cAACw2B,GAAAA,IAAmB,CAACC,MAAM,SACzBz2B,EAAAA,cAAC02B,GAAAA,IAAgB,CACfC,QAASA,KAEP24B,EAAsBD,EAAmBtyD,OAAOiF,GAAMA,IAAOqvD,MAEhE,eASXrxD,EAAAA,cAAA,OAAK82B,UAAU,oCACb92B,EAAAA,cAAC42B,GAAAA,IAAM86B,gBAAe,CAAC56B,UAAU,qDACjC92B,EAAAA,cAACywD,GAAAA,IAAM,CACLh4D,MAAO/F,GAAsB8J,sBAC7Bk0D,cAAej4D,IACb,MAAMkJ,EAAqBxD,EAA+B4D,KACxDxF,GAAMA,EAAGC,wBAA0B/D,GAEjCkJ,GA/amBgwD,KACjC,MAAM5f,EAAmB/kB,EAAuBglB,0BAC9CviD,EACAkiE,EAAwBn1D,uBAG1B6C,EAAgBkF,IAAI,6BAA8B,CAChD0tC,kBAAmBF,KAyaT6f,CAA0BjwD,KAI9B3B,EAAAA,cAAC8wD,GAAAA,IAAa,CAACh6B,UAAU,UACvB92B,EAAAA,cAAC+wD,GAAAA,IAAW,MAERr+D,GAAsByiC,mBACtBziC,GAAsB6D,OACtB,cACA0kB,gBAGNjb,EAAAA,cAACgxD,GAAAA,IAAa,KACX7yD,EAA+B1K,IAAIuJ,GAClCgD,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAK4E,EAAWR,sBAChB/D,MAAOuE,EAAWR,sBAClBs6B,UAAU,QAEV92B,EAAAA,cAACkvD,GAAsB,CAAClyD,WAAYA,UAO/Cc,EAAsBhK,OAAS,IAAMs8D,GAAgCE,IACpEtwD,EAAAA,cAAA,OAAK82B,UAAU,aACb92B,EAAAA,cAAA,OAAK82B,UAAU,qBACb92B,EAAAA,cAACk6B,GAAAA,IAAM,CACLl4B,GAAG,2BACH80B,UAAU,OACVqD,QAASw1B,EACTv1B,gBAjTyBy3B,KACnC,MAAMxlD,GAAYsjD,EACdS,GACFtrD,IAEF8qD,EAA2BvjD,MA8SnBrM,EAAAA,cAAA,SACE8xD,QAAQ,2BACRh7B,UAAU,+CACVH,QAASA,IAAMi5B,GAA4BD,IAC5C,iCAQb,E,2NCvfO,SAASoC,GAA+B38B,GAC7C,MAAM,WAAE3lC,EAAU,SAAE6O,EAAQ,OAAE0zD,GAAS,EAAK,OAAEC,EAAM,QAAE5qB,EAAO,SAAEj/B,KAAa8pD,GAAS98B,GAC7E14B,oBAAqBzG,IAAgBtD,EAAAA,GAAAA,GAAuBlD,IAC9D,cAAE0iE,EAAer7B,UAAWs7B,EAAa,eAAEC,IAAmBC,EAAAA,GAAAA,QAU9D,gBAAElgE,IAAoBC,EAAAA,EAAAA,OACtB,eAAE46B,GAAmB76B,EAAgBK,UAErC,MAAEgkC,EAAK,KAAE6B,GAASrL,EAAeslC,gBAAgBj0D,GAEjDk0D,EAAOxyD,EAAAA,cAAC42B,GAAAA,IAAM67B,cAAa,CAAC37B,UAAWs7B,IAEvCM,EAASR,EAAKlwD,GAAK,CAAEA,GAAI,GAAGkwD,EAAKlwD,MAAMvS,KAAiB,CAAC,EAC/D,OACEuQ,EAAAA,cAAC2yD,GAAAA,IAAO,CACNC,KAAMZ,EACNa,aAnBsBC,IACpBA,EACFb,MAEA5qB,QAiBArnC,EAAAA,cAAC+yD,GAAAA,IAAc,CACb96B,SAAO,EACPnB,UAAU,oCAEV92B,EAAAA,cAAA,WACGmyD,EACCnyD,EAAAA,cAACmyD,EAAa/rB,GAAA,CACZh+B,SAAUA,EACV8yB,KAAK,iBACDg3B,EACAG,EACAK,GAEHF,GAGHxyD,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL7c,SAAUA,GAEToqD,KAKTxyD,EAAAA,cAACgzD,GAAAA,IAAc,CACbl8B,UAAU,6CACVwB,KAAMA,EACN7B,MAAOA,EACPw8B,YAAa,EACbC,WAAY,GAEZlzD,EAAAA,cAACmzD,GAAuB,CACtBr8B,UAAU,SACVrnC,WAAYA,EACZwG,YAAaA,KAKvB,C,2NCqIA,MAAMm9D,GAAWC,IACf,OAAQA,EAAgB3/B,eACtB,IAAK,QACH,OAAOkD,GAAAA,IAAM08B,mBACf,IAAK,WACH,OAAO18B,GAAAA,IAAM28B,mBACf,IAAK,UACH,OAAO38B,GAAAA,IAAM48B,mBACf,IAAK,WACH,OAAO58B,GAAAA,IAAM68B,mBAGf,QACE,OAAO78B,GAAAA,IAAM88B,oBAInB,GA1OA,UAAiC,SAC/Bp1D,EAAQ,WACR7O,EAAU,YACVwG,EAAW,OACX+7D,GAAS,EAAK,OACdC,EAAM,QACN5qB,EAAO,SACPj/B,KACGgtB,IAUH,MAAM,gBAAEhjC,EAAe,gBAAEiN,IAAoBhN,EAAAA,EAAAA,OACvC,2BAAEC,EAA0B,eAAE26B,GAAmB76B,EAAgBK,SAEjEkhE,EADerhE,EAA2BuO,gBAAgBpR,GACvBmkE,kBAElCC,IAAa/jE,EAAAA,GAAAA,OACdkL,EAAkBvL,GAAcokE,EAAU9jE,kBAC1C,cAAEoiE,EAAer7B,UAAWs7B,EAAa,eAAEC,IAAmBC,EAAAA,GAAAA,QAC7DwB,EAAoBC,GAAyB/zD,EAAAA,SACnB,iBAAxB2zD,EAAmCA,EAAsB,SAG5DK,EAA2BtmB,IAC/BqmB,EAAsBrmB,GACtB,MAAM9sC,EAAetO,EAA2BuO,gBAAgB7F,GAC1Di5D,EAAsBrzD,GAAcszD,kBAE1C,IAAKj+D,EAAYnC,OACf,OAMF,IAFqCmC,EAAY+N,KAAKzH,GAAMA,EAAGc,mBAI7D,YADA6F,QAAQuM,KAAK,0EAKf,IAAI0kD,EACJ,OAAQzmB,EAAYha,eAClB,IAAK,QACHygC,EAAkBxwD,EAAAA,MAAAA,gBAAsBywD,MACxC,MACF,IAAK,WACHD,EAAkBxwD,EAAAA,MAAAA,gBAAsB0wD,SACxC,MACF,IAAK,UACHF,EAAkBxwD,EAAAA,MAAAA,gBAAsB2wD,QACxC,MACF,IAAK,WACHH,EAAkBxwD,EAAAA,MAAAA,gBAAsB4wD,SACxC,MACF,QACEJ,EAAkBxwD,EAAAA,MAAAA,gBAAsB6wD,YAG5C,MAAMnsD,EAAiBpS,EAAYxC,IAAI8I,GAAMA,EAAGC,uBAGhD,GAAIy3D,IAAwBtwD,EAAAA,MAAAA,aAAmBkvB,aAAc,CAE3D,MAAM4hC,EAAkB,CACtBhlE,WAAYuL,EACZgL,uBAAwBqC,EACxB+Z,gBAAiB,CACfC,aAAc1e,EAAAA,MAAAA,aAAmBkvB,aACjC6a,YAAaymB,GAEf/rC,kBAAmB/f,EAAe5U,IAAI,KAAM,CAAG,KAIjD4L,EAAgBkF,IAAI,6BAA8B,CAChD0tC,kBAAmB,CAACwiB,IAExB,MAEEp1D,EAAgBopB,WAAW,yBAA0B,CACnDh5B,WAAYuL,EACZ0yC,YAAaymB,IAKjB9sB,OAWF,IAAKpxC,EAAYnC,OACf,OAAO,KAIT,MAAM,MAAE2iC,EAAK,KAAE6B,GAASrL,EAAeslC,gBAAgB3lD,OAAOtO,IAExDk0D,EAAOxyD,EAAAA,cAAoBozD,GAAQU,GAAqB,CAAEh9B,UAAWs7B,IAC3E,OACEpyD,EAAAA,cAAC2yD,GAAAA,IAAO,CACNC,KAAMZ,EACNa,aAnBsBC,IACpBA,EACFb,MAEA5qB,QAiBArnC,EAAAA,cAAC+yD,GAAAA,IAAc,CACb96B,SAAO,EACPnB,WAAW49B,EAAAA,GAAAA,IAAG,qCAEd10D,EAAAA,cAAA,WACGmyD,EACCnyD,EAAAA,cAACmyD,EAAa/rB,GAAA,CACZh+B,SAAUA,EACV8yB,KAAK,qBACD9F,EACAi9B,GAEHG,GAGHxyD,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL7c,SAAUA,EACVuuB,QAASA,QAER67B,KAKTxyD,EAAAA,cAACgzD,GAAAA,IAAc,CACbl8B,UAAU,qEACVL,MAAOA,EACP6B,KAAMA,EACN7yB,MAAO,CAAEtU,KAAM,IAEf6O,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRrB,UAAU,kFACVH,QAASA,IAAMq9B,EAAwB,UAEvCh0D,EAAAA,cAAA,OAAK82B,UAAU,4CACW,UAAvBg9B,EACC9zD,EAAAA,cAAC42B,GAAAA,IAAM+9B,QAAO,CAAC79B,UAAU,yBACvB,MAEN92B,EAAAA,cAAA,OAAK82B,UAAU,oBAAmB,UAEpC92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRrB,UAAU,kFACVH,QAASA,IAAMq9B,EAAwB,aAEvCh0D,EAAAA,cAAA,OAAK82B,UAAU,4CACW,aAAvBg9B,EACC9zD,EAAAA,cAAC42B,GAAAA,IAAM+9B,QAAO,CAAC79B,UAAU,yBACvB,MAEN92B,EAAAA,cAAA,OAAK82B,UAAU,oBAAmB,aAEpC92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRrB,UAAU,kFACVH,QAASA,IAAMq9B,EAAwB,YAEvCh0D,EAAAA,cAAA,OAAK82B,UAAU,4CACW,YAAvBg9B,EACC9zD,EAAAA,cAAC42B,GAAAA,IAAM+9B,QAAO,CAAC79B,UAAU,yBACvB,MAEN92B,EAAAA,cAAA,OAAK82B,UAAU,oBAAmB,YAEpC92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRrB,UAAU,kFACVH,QAASA,IAAMq9B,EAAwB,gBAEvCh0D,EAAAA,cAAA,OAAK82B,UAAU,4CACW,gBAAvBg9B,EACC9zD,EAAAA,cAAC42B,GAAAA,IAAM+9B,QAAO,CAAC79B,UAAU,yBACvB,MAEN92B,EAAAA,cAAA,OAAK82B,UAAU,oBAAmB,gBAGpC92B,EAAAA,cAAA,OAAK82B,UAAU,uCACf92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRrB,UAAU,kFACVH,QAASA,IAAMq9B,EAAwB,aAEvCh0D,EAAAA,cAAA,OAAK82B,UAAU,4CACW,aAAvBg9B,EACC9zD,EAAAA,cAAC42B,GAAAA,IAAM+9B,QAAO,CAAC79B,UAAU,yBACvB,MAEN92B,EAAAA,cAAA,OAAK82B,UAAU,oBAAmB,cAK5C,E,2NCzNO,SAAS89B,GACdx/B,GAUA,MAAM,WAAE3lC,GAAe2lC,GACjB,oBAAE14B,IAAwB/J,EAAAA,GAAAA,GAAuBlD,GAEvD,OAAKiN,EAAoB5I,OAKvBkM,EAAAA,cAAC60D,GAAuBzuB,GAAA,GAClBhR,EAAK,CACTn/B,YAAayG,KANR,IASX,C,gBCxBO,SAASo4D,IAAS,WAAErlE,GAAwC,CAAC,GAClE,MAAM,oBAAEiN,IAAwB0C,EAAAA,GAAAA,GAAqB3P,IAE9CslE,EAAqBC,IAA0BplE,EAAAA,EAAAA,UACpD8M,IAAsB,IAAIF,wBAItB,mBAAEuE,EAAkB,YAAEkF,IAAgB7G,EAAAA,GAAAA,GAAqB3P,EAAY,CAC3E+M,sBAAuBu4D,KAGnB,UAAE1vD,GAActE,GAEfk0D,EAAaC,IAAkBtlE,EAAAA,EAAAA,WAAS,IACxCulE,EAAoBC,IAAyBxlE,EAAAA,EAAAA,UAAS,OACtDylE,EAAiBC,IAAsB1lE,EAAAA,EAAAA,UAAS,MAEjD2lE,GAAiBzyB,EAAAA,EAAAA,QAAOmyB,GAC9BM,EAAezyD,QAAUmyD,EACzB,MAAMO,GAAwB1yB,EAAAA,EAAAA,QAAOqyB,GACrCK,EAAsB1yD,QAAUqyD,EAChC,MAAMM,GAAqB3yB,EAAAA,EAAAA,QAAOuyB,GAClCI,EAAmB3yD,QAAUuyD,GAE7BtjE,EAAAA,EAAAA,WAAU,KACRujE,EAAmB,MACnBF,EAAsB,OACrB,CAACL,IAEJ,MAAMW,EAAoBA,CAAC3yD,EAAUmD,GAAY,KAE/C,MACMjG,EACJvD,EAAoB5I,OAAS,IAFH,CAAC,YAAa,SAEeO,SAAS0O,EAASwZ,MAAQ,GAAM,EAEzFtW,EAAY,CACVlD,WACA9C,UACAiG,eAIJ,OACElG,EAAAA,cAAAA,EAAAA,SAAA,KACGtD,GAAuBA,EAAoB5I,OAAS,GACnDkM,EAAAA,cAAA,OAAK82B,UAAU,4EACb92B,EAAAA,cAAC21D,GAAAA,IAAI,CACHl9D,MAAOs8D,EACPrE,cAAezzD,IACb+3D,EAAuB/3D,GACvBm4D,EAAsB,QAGxBp1D,EAAAA,cAAC41D,GAAAA,IAAQ,KACNl5D,EAAoBjJ,IAAI8I,GACvByD,EAAAA,cAAC61D,GAAAA,IAAW,CACVz9D,IAAKmE,EAAGC,sBACR/D,MAAO8D,EAAGC,uBAETD,EAAG1B,cAQhBmF,EAAAA,cAAA,OACE82B,UAAU,yGACVH,QAASA,IAAMu+B,GAAgBD,IAE/Bj1D,EAAAA,cAAA,QAAM82B,UAAU,iBAAgB,uBAChC92B,EAAAA,cAACk6B,GAAAA,IAAM,CACLpD,UAAU,wBACVqD,QAAS86B,EACT76B,gBAAiBD,IACf+6B,EAAe/6B,IAEVA,GAAWs7B,EAAmB3yD,SACjC4yD,EAAkBD,EAAmB3yD,aAM7C9C,EAAAA,cAAC81D,GAAAA,GAAaC,YAAW,MAEzB/1D,EAAAA,cAAA,OAAK82B,UAAU,uBACb92B,EAAAA,cAACg2D,GAAAA,IAAU,CAACl/B,UAAU,iBACpB92B,EAAAA,cAAA,OAAK82B,UAAU,OACZzxB,EAAU5R,IAAI,CAACsP,EAAUm2C,IACxBl5C,EAAAA,cAAC81D,GAAAA,GAAaG,KAAI,CAChB79D,IAAK8gD,EACL3iD,MAAOwM,EAASgoB,YAChBmrC,cAAc,EACdv/B,QAASA,KACP2+B,EAAmBvyD,GACnB2yD,EAAkB3yD,GAClBqyD,EAAsB,OAExBe,aAAcA,KACRZ,EAAezyD,UACZ0yD,EAAsB1yD,SACzBsyD,EAAsBryD,GAExB2yD,EAAkB3yD,KAGtBqzD,aAAcA,KACRb,EAAezyD,SAAW0yD,EAAsB1yD,SAClD4yD,EAAkBF,EAAsB1yD,gBAU5D,CCzHO,SAASuzD,IAAS,WAAE5mE,GAAwC,CAAC,GAClE,MAAM,YAAEgQ,EAAW,eAAEqF,IAAmB1F,EAAAA,GAAAA,GAAqB3P,GAEvD6mE,GAAepmE,EAAAA,EAAAA,aAAY,KAC/B4U,KACC,CAACA,IAEJ,OACE9E,EAAAA,cAAA,OAAK82B,UAAU,0GACb92B,EAAAA,cAAA,OAAK82B,UAAU,uDACf92B,EAAAA,cAAA,QACE82B,UAAU,YACVH,QAAS2/B,GACV,qBAGDt2D,EAAAA,cAACk6B,GAAAA,IAAM,CACLpD,UAAU,qBACVqD,UAAW16B,EACX26B,gBAAiBk8B,IAIzB,CCtBO,SAASnkD,IAAY,WAAE1iB,GAAwC,CAAC,GACrE,MAAM,oBAAEiN,IAAwB0C,EAAAA,GAAAA,GAAqB3P,IAC9CslE,EAAqBC,IAA0BplE,EAAAA,EAAAA,UACpD8M,IAAsB,IAAIF,wBAItB,mBAAEoL,EAAkB,eAAE3D,IAAmB7E,EAAAA,GAAAA,GAAqB3P,EAAY,CAC9E+M,sBAAuBu4D,KAGlBE,EAAaC,IAAkBtlE,EAAAA,EAAAA,WAAS,IACxC2mE,EAAkBC,IAAuB5mE,EAAAA,EAAAA,UAAmC,OAC5E6mE,EAAeC,IAAoB9mE,EAAAA,EAAAA,UAAmC,MAEvE2lE,GAAiBzyB,EAAAA,EAAAA,QAAOmyB,GAC9BM,EAAezyD,QAAUmyD,EACzB,MAAM0B,GAAsB7zB,EAAAA,EAAAA,QAAOyzB,GACnCI,EAAoB7zD,QAAUyzD,EAC9B,MAAMK,GAAmB9zB,EAAAA,EAAAA,QAAO2zB,GAChCG,EAAiB9zD,QAAU2zD,GAG3B1kE,EAAAA,EAAAA,WAAU,KACR2kE,EAAiB,MACjBF,EAAoB,OACnB,CAACzB,IAGJ,MAAM8B,EAAuBA,CAACn0D,EAA2BwD,GAAY,KACnEjC,EAAe,CACbG,YAAawI,OAAOlK,EAAO9Q,QAC3ByS,aAAcuI,OAAOlK,EAAO46B,OAC5Bp3B,eAIJ,OACElG,EAAAA,cAAAA,EAAAA,SAAA,KACGtD,GAAuBA,EAAoB5I,OAAS,GACnDkM,EAAAA,cAAA,OAAK82B,UAAU,4EACb92B,EAAAA,cAAC21D,GAAAA,IAAI,CACHl9D,MAAOs8D,EACPrE,cAAezzD,IACb+3D,EAAuB/3D,KAGzB+C,EAAAA,cAAC41D,GAAAA,IAAQ,KACNl5D,EAAoBjJ,IAAI8I,GACvByD,EAAAA,cAAC61D,GAAAA,IAAW,CACVz9D,IAAKmE,EAAGC,sBACR/D,MAAO8D,EAAGC,uBAETD,EAAG1B,cAQhBmF,EAAAA,cAAA,OACE82B,UAAU,yGACVH,QAASA,IAAMu+B,GAAgBD,IAE/Bj1D,EAAAA,cAAA,QAAM82B,UAAU,iBAAgB,uBAChC92B,EAAAA,cAACk6B,GAAAA,IAAM,CACLpD,UAAU,wBACVqD,QAAS86B,EACT76B,gBAAiBD,IACf+6B,EAAe/6B,IAGVA,GAAWy8B,EAAiB9zD,SAC/B+zD,EAAqBD,EAAiB9zD,SAAS,OAMvD9C,EAAAA,cAAC81D,GAAAA,GAAaC,YAAW,MAEzB/1D,EAAAA,cAAA,OAAK82B,UAAU,uBACb92B,EAAAA,cAACg2D,GAAAA,IAAU,CAACl/B,UAAU,iBACpB92B,EAAAA,cAAA,OAAK82B,UAAU,OACZlvB,EAAmBnU,IAAI,CAACiP,EAAQw2C,IAC/Bl5C,EAAAA,cAAC81D,GAAAA,GAAaG,KAAI,CAChB79D,IAAK8gD,EACL3iD,MAAOmM,EAAOqoB,YACd+rC,eAAgB,GAAGp0D,EAAO9Q,YAAY8Q,EAAO46B,QAC7C44B,cAAc,EACdv/B,QAASA,KACP+/B,EAAiBh0D,GACjBm0D,EAAqBn0D,GAAQ,GAC7B8zD,EAAoB,OAEtBL,aAAcA,KACRZ,EAAezyD,UACZ6zD,EAAoB7zD,SACvB0zD,EAAoBI,EAAiB9zD,SAAWJ,GAElDm0D,EAAqBn0D,GAAQ,KAGjC0zD,aAAcA,KACRb,EAAezyD,SAAW6zD,EAAoB7zD,SAChD+zD,EAAqBF,EAAoB7zD,SAAS,UAUtE,CC/GO,SAASi0D,IAA8B,QAAEj2D,EAAO,WAAErR,EAAU,KAAE07C,IACnE,MAAM,gBAAE9rC,IAAoBhN,EAAAA,EAAAA,OACrB2kE,EAAaC,IAAkBrnE,EAAAA,EAAAA,UAAS,KACxCsnE,EAAgBC,IAAqBvnE,EAAAA,EAAAA,UAAgC,MAEtEwnE,GAAqBlnE,EAAAA,EAAAA,aAAaW,IACtComE,EAAepmE,EAAMi4C,OAAOrwC,QAC3B,IAEG4+D,GAAcnnE,EAAAA,EAAAA,aAClBklC,IACE/1B,EAAgBopB,WAAW,oBAAqB,IAC3C2M,KAGP,CAAC/1B,IAGGi4D,EAAkBN,EACpBl2D,EAAQ/D,OAAO2F,GAAUA,EAAO6Z,KAAKmX,cAAcr/B,SAAS2iE,EAAYtjC,gBACxE5yB,EAMJ,OACEd,EAAAA,cAACu3D,GAAAA,IAAY,CAACzgC,UAAU,aACtB92B,EAAAA,cAACu3D,GAAAA,IAAaC,WAAU,KACtBx3D,EAAAA,cAACu3D,GAAAA,IAAaE,aAAY,KACxBz3D,EAAAA,cAACu3D,GAAAA,IAAaG,aAAY,CACxBj/D,MAAOu+D,EACPnuB,SAAUuuB,EACVlrD,YAAY,gBAGhBlM,EAAAA,cAACu3D,GAAAA,IAAaI,WAAU,KACrBL,EAAgB7jE,IAAI,CAACiP,EAAQw2C,KAC5Bl5C,SAAAA,cAAA,OACE5H,IAAK8gD,EACLpiB,UAAU,2CACVH,QAASA,KACPwgC,EAAkBz0D,GAClB20D,EAAY,CAAE30D,OAAQA,EAAO6Z,KAAM9sB,iBAGrCuQ,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CACXrlB,KAAM7Z,EAAO6Z,KACbua,UACEogC,GAAgB36C,OAAS7Z,EAAO6Z,KAC5B,iEACA,sFAGRvc,EAAAA,cAAA,SAAO82B,UAAU,iDAhCRvgC,EAiCMmM,EAAO6Z,KAjCEq7C,EAiCI,GAhC/BrhE,EAAMzC,OAAS8jE,EAAW,GAAGrhE,EAAM2kB,MAAM,EAAG08C,QAAiBrhE,KADlDshE,IAACthE,EAAeqhE,MAuChC53D,EAAAA,cAACypC,GAAAA,IAAY,CAAC3S,UAAU,sBACtB92B,EAAAA,cAACypC,GAAAA,IAAaC,MAAK,KACjB1pC,EAAAA,cAACypC,GAAAA,IAAa9N,UAAS,CAAChF,QAASwU,GAAM,YAKjD,CCvEO,SAAS2sB,IAAuB,WAAEroE,GAAwC,CAAC,GAChF,MAAM,uBAAEuR,IAA2B5B,EAAAA,GAAAA,GAAqB3P,IAClD,gBAAE2C,IAAoBC,EAAAA,EAAAA,OACtB,gBAAE8Y,GAAoB/Y,EAAgBK,SAe5C,OACEuN,EAAAA,cAAC81D,GAAAA,GAAaG,KAAI,CAChB1/D,MAAM,oBACN2kC,KAAMl7B,EAAAA,cAAC42B,GAAAA,IAAMmhC,gBAAe,MAC5BC,UAAWh4D,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CAACrlB,KAAK,sBAC9Boa,QAlBmBshC,KACrB9sD,EAAgBmiB,KAAK,CACnBtrB,GAAI,2BACJurB,QAASwpC,GACT9qD,MAAO,oBACPisD,aAAa,EACbxc,aAAc,CACZ56C,QAASE,EACTvR,kBAaR,CC5BO,SAAS0oE,IAAuB,4BACrCl3D,EAA2B,WAC3BxR,IAEA,MAAM,gBAAE2C,EAAe,gBAAEiN,IAAoBhN,EAAAA,EAAAA,OACvC,2BAAEC,GAA+BF,EAAgBK,UACjD,IAAEgO,EAAG,IAAEC,EAAG,KAAEQ,GAASD,GACpBoG,EAAS+wD,IAAcxoE,EAAAA,EAAAA,UAAS,MAEjCi5C,GAAW34C,EAAAA,EAAAA,aACduI,IACC4G,EAAgBopB,WAAW,4BAA6B,CACtDh5B,aACAgwD,cAAehnD,IAEjB2/D,EAAW3/D,IAEb,CAAC4G,EAAiB5P,IAkBpB,OAfAsC,EAAAA,EAAAA,WAAU,KACR,MAAMgC,EAAWzB,EAA2B0B,uBAAuBvE,IAC7D,MAAEiwD,GAAU3rD,EAASgT,YAAY,GACjC44C,EAASD,EAAME,YAEfG,EADQJ,EAAOE,eACCG,aAChBE,EAAiBP,EAAO0Y,oBACxBC,EAAiBvY,EAAQ/8C,OAAO,CAACzI,EAAGC,IAAMD,EAAIC,GAAK,EAEvD49D,EADElY,IAAmBoY,EACV,EAEAx5D,KAAKgM,KAAKwtD,GAAmC,GAAjBpY,MAExC,CAAC5tD,EAA4B7C,IAG9BuQ,EAAAA,cAAA,OAAK82B,UAAU,qCACA,OAAZzvB,GACCrH,EAAAA,cAAA,OAAK82B,UAAU,oBACb92B,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxrC,IAAKA,EACLC,IAAKA,EACLQ,KAAMA,EACNzI,MAAO4O,EACPwhC,SAAUA,GAEV7oC,EAAAA,cAAA,OAAK82B,UAAU,8BACb92B,EAAAA,cAACu4D,GAAAA,IAAQE,MAAK,CAAC3hC,UAAU,QAAO,WAChC92B,EAAAA,cAACu4D,GAAAA,IAAQG,YAAW,CAACC,gBAAgB,sBAOnD,CCxDO,SAASC,IAAY,WAAEnpE,IAC5B,MAAM,gBAAE2C,EAAe,gBAAEiN,IAAoBhN,EAAAA,EAAAA,OACvC,2BAAEC,GAA+BF,EAAgBK,UAChDomE,EAAUC,IAAelpE,EAAAA,EAAAA,UAAwB,OACjDmpE,EAAUC,IAAeppE,EAAAA,EAAAA,UAAwB,OACjD2wD,EAAO0Y,IAAYrpE,EAAAA,EAAAA,UACxB0C,EAA2B0B,uBAAuBvE,IAAaypE,WAAa,IAEvEh4D,EAAMi4D,IAAWvpE,EAAAA,EAAAA,UAAwB,OACzCwpE,EAAYC,IAAiBzpE,EAAAA,EAAAA,WAAS,GAEvC0pE,GAAex2B,EAAAA,EAAAA,QAAeyd,GAE9BxsD,EAAWzB,EAA2B0B,uBAAuBvE,IAC7D,MAAEiwD,GAAU3rD,EAASgT,YAAY,GACjCy5C,EAAOd,EAAMe,cAAcC,iBAAiB,IAElD3uD,EAAAA,EAAAA,WAAU,KACR,GAAIqnE,EACF,OAEF,MAAM92D,EAAQk+C,EAAKj+C,WAEbg3D,EAAwBj3D,EAAM,GAAKA,EAAM,GAGzCy2D,EAAWQ,EAEjBT,GAHkBS,GAIlBP,EAAYD,GACZI,EAAQr6D,KAAKC,IAAI,GAAID,KAAK0mB,MAAM1mB,KAAK06D,MAAMD,EAAwB,SAClE,CAACjnE,EAA4B7C,EAAYiwD,EAAOc,EAAM4Y,IAEzD,MAAMK,GAAgBvpE,EAAAA,EAAAA,aACpBwpE,IACE,MAAMC,EAAkBD,EAAWJ,EAAax2D,QAChDw2D,EAAax2D,QAAU42D,EACvB3lE,EAASmlE,UAAYQ,EACrBr6D,EAAgBopB,WAAW,2BAA4B,CACrDh5B,aACA8wD,MAAOoZ,IAETV,EAASS,IAEX,CAACr6D,EAAiB5P,EAAYsE,IAGhC,OACEiM,EAAAA,cAAA,OAAK82B,UAAU,qCACH,OAAT51B,GAA8B,OAAb23D,GAAkC,OAAbE,GACrC/4D,EAAAA,cAAA,OAAK82B,UAAU,oBACb92B,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxrC,IAAKo4D,EACLn4D,IAAKq4D,EACL73D,KAAMA,EACNzI,MAAO8nD,EACP1X,SAAU4wB,EACVG,YAAaA,IAAMP,GAAc,GACjCQ,UAAWA,IAAMR,GAAc,IAE/Br5D,EAAAA,cAAA,OAAK82B,UAAU,8BACb92B,EAAAA,cAACu4D,GAAAA,IAAQE,MAAK,CAAC3hC,UAAU,QAAO,SAChC92B,EAAAA,cAACu4D,GAAAA,IAAQG,YAAW,CAACC,gBAAgB,sBAOnD,CCtEO,SAASmB,IAAe,WAAErqE,EAAU,SAAEsqE,IAC3C,MAAM,gBAAE3nE,EAAe,gBAAEiN,IAAoBhN,EAAAA,EAAAA,OACvC,2BAAEC,GAA+BF,EAAgBK,UAChDunE,EAAgBC,IAAqBrqE,EAAAA,EAAAA,UAAS,CACnD2X,QAAS,KACTC,QAAS,KACTC,SAAU,OAINyyD,GAAmBhqE,EAAAA,EAAAA,aACvB,CAACgxD,EAAUzoD,KACT4G,EAAgBopB,WAAW,oBAAqB,CAC9Ch5B,aACA6J,QAAS,CAAE,CAAC4nD,GAAWzoD,KAEzBwhE,EAAkB3xD,IAAQ,IACrBA,EACH,CAAC44C,GAAWzoD,MAGhB,CAAC4G,EAAiB5P,KAGpBsC,EAAAA,EAAAA,WAAU,KACR,MAAMgC,EAAWzB,EAA2B0B,uBAAuBvE,IAC7D,MAAEiwD,GAAU3rD,EAASgT,YAAY,GACjCm6C,EAAWxB,EAAMe,cAEjBzoC,EAAS,CACbzQ,QAAS25C,EAASiZ,aAClB3yD,QAAS05C,EAASkZ,aAClB3yD,SAAUy5C,EAASmZ,eAGrBJ,EAAkBjiD,IACjB,CAACvoB,EAAY6C,IAEhB,MAAMgoE,EAAgBP,EAAW,GAAK,4BAStC,OACE/5D,EAAAA,cAAA,OAAK82B,UAAU,qCAPU,CACzB,CAAE1+B,IAAK,UAAW7B,MAAO,WACzB,CAAE6B,IAAK,UAAW7B,MAAO,WACzB,CAAE6B,IAAK,WAAY7B,MAAO,aAKJ9C,IAClB,EAAG2E,MAAK7B,WACkB,OAAxByjE,EAAe5hE,IACb4H,EAAAA,cAAA,OACE5H,IAAKA,EACL0+B,UAAW,oBAAoBwjC,KAE/Bt6D,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxrC,IAAK,EACLC,IAAK,EACLQ,KAAM,GACNzI,MAAOuhE,EAAe5hE,GACtBywC,SAAUpwC,GAASyhE,EAAiB9hE,EAAKK,IAEzCuH,EAAAA,cAAA,OAAK82B,UAAU,8BACb92B,EAAAA,cAACu4D,GAAAA,IAAQE,MAAK,CAAC3hC,UAAU,QAAQvgC,GACjCyJ,EAAAA,cAACu4D,GAAAA,IAAQG,YAAW,CAACC,gBAAgB,uBAQvD,CC1EO,SAAS4B,IAAY,WAC1B9qE,EAAU,aACV+qE,EAAeC,QAEf,MAAM,gBAAEroE,EAAe,gBAAEiN,IAAoBhN,EAAAA,EAAAA,OACvC,2BAAEC,GAA+BF,EAAgBK,UAChD0uD,EAAOC,IAAYxxD,EAAAA,EAAAA,WAAS,IAC5BwI,EAAKsiE,IAAU9qE,EAAAA,EAAAA,UAAS,GAEzB+qE,GAAgBzqE,EAAAA,EAAAA,aACnBiqC,IACC96B,EAAgBopB,WAAW,oBAAqB,CAAEh5B,aAAY6J,QAAS,CAAE6nD,MAAOhnB,MAElF,CAAC96B,EAAiB5P,IAWpB,OATAsC,EAAAA,EAAAA,WAAU,KACR,MAAMgC,EAAWzB,EAA2B0B,uBAAuBvE,IAC7D,MAAEiwD,GAAU3rD,EAASgT,YAAY,GACjCo6C,EAAQzB,EAAMe,cAAcma,WAClCxZ,EAASD,GACTqZ,EAAarZ,GACbuZ,EAAOtiE,EAAM,IACZ,CAAC3I,EAAY6C,IAGd0N,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAM82B,UAAU,aAAY,SAC5B92B,EAAAA,cAACk6B,GAAAA,IAAM,CACLpD,UAAU,qBACV1+B,IAAKA,EACL+hC,QAASgnB,EACT/mB,gBAAiBA,KACfgnB,GAAUD,GACVqZ,GAAcrZ,GACdwZ,GAAexZ,MAKzB,CCpCO,SAAS0Z,IAAuB,WAAEprE,GAAwC,CAAC,GAChF,MAAM,4BAAEwR,IAAgC7B,EAAAA,GAAAA,GAAqB3P,IACtDsqE,EAAU3Y,IAAYxxD,EAAAA,EAAAA,WAAS,GACtC,OACEoQ,EAAAA,cAAC81D,GAAAA,GAAagF,UAAS,KACrB96D,EAAAA,cAACm4D,GAAsB,CACrB1oE,WAAYA,EACZwR,4BAA6BA,IAE/BjB,EAAAA,cAAC44D,GAAW,CAACnpE,WAAYA,IACzBuQ,EAAAA,cAAA,OAAK82B,UAAU,0FACb92B,EAAAA,cAAA,OAAK82B,UAAU,iCAAgC,aAEjD92B,EAAAA,cAAA,OAAK82B,UAAU,wCACf92B,EAAAA,cAAA,OAAK82B,UAAU,2FACb92B,EAAAA,cAACu6D,GAAW,CACV9qE,WAAYA,EACZ+qE,aAAcpZ,KAGlBphD,EAAAA,cAAC85D,GAAc,CACbrqE,WAAYA,EACZsqE,SAAUA,IAIlB,CCjBO,SAASgB,IAAsB,WACpCtrE,EAAU,QACVa,EAAO,MACPmmC,EAAK,KACL6B,IAEA,OACEt4B,EAAAA,cAACg7D,GAA4B,CAC3BvrE,WAAYA,EACZgnC,MAAOA,EACP6B,KAAMA,GAGZ,CAEO,SAAS0iC,IAA6B,WAC3CvrE,EAAU,MACVgnC,EAAK,KACL6B,IAMA,MAAM,EAAEvB,IAAMvB,EAAAA,GAAAA,IAAe,yBAEvBylC,GAAUjpE,EAAAA,EAAAA,SAAQ,IAAM,GAAGvC,IAAc,CAACA,KAE1C,WACJ8P,EAAU,mBACVwB,EAAkB,mBAClB6G,EAAkB,uBAClB5G,EAAsB,4BACtBC,IACE7B,EAAAA,GAAAA,GAAqB3P,GAEzB,OACEuQ,EAAAA,cAAC81D,GAAAA,GAAaoF,KAAI,CAChB9iE,IAAK6iE,EAEL3iD,WAAW,EACXme,MAAOA,EACP6B,KAAMA,GAENt4B,EAAAA,cAAC81D,GAAAA,GAAagF,UAAS,MACnBv7D,GAAcS,EAAAA,cAACq2D,GAAQ,CAAC5mE,WAAYA,IAErCsR,GAAoBsE,YAAc9F,GACjCS,EAAAA,cAAC81D,GAAAA,GAAaqF,QAAO,CACnB/iE,IAAI,kBACJgjE,UAAU,YACVC,SAAS,iBACTvkC,UAAU,qCAEV92B,EAAAA,cAAC80D,GAAQ,CAACrlE,WAAYA,KAIzBmY,GAAoB9T,OAAS,IAAMyL,GAClCS,EAAAA,cAAC81D,GAAAA,GAAaqF,QAAO,CACnB/iE,IAAI,qBACJgjE,UAAWrkC,EAAE,2BACbskC,SAAS,yBAETr7D,EAAAA,cAACmS,GAAW,CAAC1iB,WAAYA,KAI5BuR,GAA0BzB,GAAcS,EAAAA,cAAC83D,GAAsB,CAACroE,WAAYA,IAE5EwR,GAA+B1B,GAC9BS,EAAAA,cAAC81D,GAAAA,GAAaqF,QAAO,CAACC,UAAU,qBAC9Bp7D,EAAAA,cAAC66D,GAAsB,CAACprE,WAAYA,MAMhD,C,2NChFO,SAAS6rE,GACdlmC,GAYA,MAAM,WACJ3lC,EAAU,QACVa,EAAO,SACPgO,EAAQ,OACR0zD,GAAS,EAAK,OACdC,EAAM,QACN5qB,EAAO,SACPj/B,EAAQ,WACRmzD,GAAa,EACbC,cAAeC,EAAkB,wBACjCC,KACGxJ,GACD98B,GAEGy+B,IAAa/jE,EAAAA,GAAAA,OACdkL,EAAkBvL,GAAcokE,EAAU9jE,kBAExC2M,oBAAqBzG,IAAgBtD,EAAAA,GAAAA,GAAuBqI,IAC9D,gBAAE5I,IAAoBC,EAAAA,EAAAA,OACtB,eAAE46B,GAAmB76B,EAAgBK,UACrC,cAAE0/D,EAAer7B,UAAWs7B,EAAa,eAAEC,IAAmBC,EAAAA,GAAAA,QAC9D,YAAE7yD,EAAW,eAAEqF,IAAmB1F,EAAAA,GAAAA,IAAqB3P,IAuBvD,MAAEgnC,EAAK,KAAE6B,GAASrL,EAAeslC,gBAAgBj0D,GAIvD,GAA0B,IAFPrI,EAAYxC,IAAIuJ,GAAcA,EAAW2+D,qBAE7C7nE,OACb,OAAO,KAGT,MAAM0+D,EACJ/yD,IAAgB87D,GAAcG,EAC5B17D,EAAAA,cAAC42B,GAAAA,IAAMiL,MAAK,CAAC/K,UAAWs7B,IAExBpyD,EAAAA,cAAC42B,GAAAA,IAAMglC,oBAAmB,CAAC9kC,UAAWs7B,IAG1C,OACEpyD,EAAAA,cAAC2yD,GAAAA,IAAO,CACNC,KAAMZ,EACNa,aAvCsBC,IACxB,MAAM+I,EAAuBp8D,IAAgB87D,EAE7C,GAAIvJ,GAAU6J,GAAwB/I,EAGpC,OAFAhuD,SACAuiC,OAIG2qB,GAAUc,GAAa+I,EAC1B/2D,IAIEguD,EACFb,MAEA5qB,QAwBArnC,EAAAA,cAAC+yD,GAAAA,IAAc,CACb96B,SAAO,EACPnB,UAAU,oCAEV92B,EAAAA,cAAA,WACGmyD,EACCnyD,EAAAA,cAACmyD,EAAa/rB,GAAA,CACZh+B,SAAUA,GACN8pD,EACAG,GAEHG,GAGHxyD,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL7c,SAAUA,GAEToqD,KAKTxyD,EAAAA,cAACgzD,GAAAA,IAAc,CACbl8B,UAAU,6CACVwB,KAAMA,EACN7B,MAAOA,EACPw8B,YAAa,EACbC,WAAY,GAEZlzD,EAAAA,cAAC+6D,GAAqB,CACpBtrE,WAAYuL,EACZ1K,QAASA,EACTmmC,MAAOA,EACP6B,KAAMA,KAKhB,CC7GA,MAAMwjC,GACI,SADJA,GAEI,SAoKV,SAjKA,UAA8B,WAAErsE,EAAU,UAAEqnC,IAC1C,MAAM,gBAAE1kC,IAAoBC,EAAAA,EAAAA,OACtB,kBAAEsD,GAAsBvD,EAAgBK,UACvCspE,EAAWC,IAAgBpsE,EAAAA,EAAAA,UAASksE,KACrC,oBAAEp/D,IAAwB/J,EAAAA,GAAAA,GAAuBlD,IAChDwsE,EAAuBC,IAA4BtsE,EAAAA,EAAAA,UACxD8M,EAAoB5I,OAAS,EAAI4I,EAAoB,GAAGF,2BAAwBqB,IAG5E,SAAEgC,EAAQ,YAAE8E,EAAW,YAAEE,EAAW,eAAEZ,IAAmB7E,EAAAA,GAAAA,GAAqB3P,EAAY,CAC9F+M,sBAAuBy/D,IASzB,IANAlqE,EAAAA,EAAAA,WAAU,KACJ2K,EAAoB5I,OAAS,IAAMmoE,GACrCC,EAAyBx/D,EAAoB,GAAGF,wBAEjD,CAACE,EAAqBu/D,KAEpBp8D,EACH,OAAO,KAGT,MAAM,MAAEsE,EAAK,MAAED,GAAUrE,GACnB,YAAEuE,EAAW,aAAEC,GAAiBQ,EAEhCs3D,EACJxmE,EAAkByG,mBAAmB6/D,IAAwB7+D,SAE/D,IAAIqD,EAAM27D,IACN17D,GAAO07D,IAEX,GAAID,EACF,IAAK,MAAMz+D,KAAWy+D,EAA0B,CAC9C,MAAM1+D,EAAQglB,EAAAA,MAAM45C,SAAS3+D,GACzBD,IACFgD,EAAM3B,KAAK2B,IAAIA,EAAKhD,EAAM6+D,eAC1B57D,EAAM5B,KAAK4B,IAAIA,EAAKjD,EAAM8+D,eAE9B,CAIE97D,IAAQ27D,KAAY17D,KAAS07D,MAC/B37D,EAAM,EACNC,EAAM,KAGR,MAAMiB,EAAqBjF,EAAoBqF,KAC7CxF,GAAMA,EAAGC,wBAA0By/D,GAGrC,OACEj8D,EAAAA,cAAA,OAAK82B,UAAWA,GACd92B,EAAAA,cAAA,OAAK82B,UAAU,4CACb92B,EAAAA,cAAC21D,GAAAA,IAAI,CACHxpD,aAAc4vD,EACdrL,cAAesL,GAEfh8D,EAAAA,cAAA,OAAK82B,UAAU,oCACZp6B,EAAoB5I,OAAS,GAC5BkM,EAAAA,cAACywD,GAAAA,IAAM,CACLh4D,MAAOwjE,EACPvL,cAAewL,GAEfl8D,EAAAA,cAAC8wD,GAAAA,IAAa,KACZ9wD,EAAAA,cAAC+wD,GAAAA,IAAW,KAAEpvD,GAAoBpL,OAAS,uBAE7CyJ,EAAAA,cAACgxD,GAAAA,IAAa,KACXt0D,EAAoBjJ,IAAI8I,GACvByD,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAKmE,EAAGC,sBACR/D,MAAO8D,EAAGC,uBAET,GAAGD,EAAG44B,mBAAqB,KAAKqnC,WAM3Cx8D,EAAAA,cAAC41D,GAAAA,IAAQ,CAAC9+B,UAAU,iBAClB92B,EAAAA,cAAC61D,GAAAA,IAAW,CACVp9D,MAAOqjE,GACPhlC,UAAU,UACX,WAGD92B,EAAAA,cAAC61D,GAAAA,IAAW,CACVp9D,MAAOqjE,GACPhlC,UAAU,UACX,YAML92B,EAAAA,cAACy8D,GAAAA,IAAW,CAAChkE,MAAOqjE,IAClB97D,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxrC,IAAKA,EACLC,IAAKA,EACLsX,OAAQ,CAAC9T,EAAOC,GAChBjD,KAAM,EACN41B,UAAU,YACV+R,SAAW6zB,IACT,MAAOC,EAAUC,GAAYF,EACzBC,IAAaz4D,GAAS04D,IAAaz4D,GACrCQ,EAAY,CAAET,MAAOy4D,EAAUx4D,MAAOy4D,MAI1C58D,EAAAA,cAACu4D,GAAAA,IAAQsE,YAAW,CAACC,kBAAgB,MAGzC98D,EAAAA,cAACy8D,GAAAA,IAAW,CAAChkE,MAAOqjE,IAClB97D,EAAAA,cAAA,OAAK82B,UAAU,aACb92B,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxrC,IAAK,EACLC,IAAKA,EACLQ,KAAM,EACNzI,MAAO2L,EACP0yB,UAAU,YACV+R,SAAWiM,IACLA,IAAQ1wC,GACVH,EAAe,CAAEG,YAAa0wC,EAAKzwC,mBAIvCrE,EAAAA,cAAA,OAAK82B,UAAU,+BACb92B,EAAAA,cAACu4D,GAAAA,IAAQE,MAAK,KAAC,MACfz4D,EAAAA,cAACu4D,GAAAA,IAAQG,YAAW,CAACqE,iBAAe,MAIxC/8D,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxrC,IAAKA,EACLC,IAAKA,EACLQ,KAAM,EACNzI,MAAO4L,EACPyyB,UAAU,YACV+R,SAAWiM,IACLA,IAAQzwC,GACVJ,EAAe,CAAEG,cAAaC,aAAcywC,MAIhD90C,EAAAA,cAAA,OAAK82B,UAAU,+BACb92B,EAAAA,cAACu4D,GAAAA,IAAQE,MAAK,KAAC,MACfz4D,EAAAA,cAACu4D,GAAAA,IAAQG,YAAW,CAACqE,iBAAe,UAStD,E,2NCtKO,SAASC,GAA4B5nC,GAC1C,MAAM,WAAE3lC,EAAU,SAAE6O,EAAQ,OAAE0zD,GAAS,EAAK,OAAEC,EAAM,QAAE5qB,EAAO,SAAEj/B,KAAa8pD,GAAS98B,GAC/E,cAAE+8B,EAAer7B,UAAWs7B,EAAa,eAAEC,IAAmBC,EAAAA,GAAAA,QAU9D,gBAAElgE,IAAoBC,EAAAA,EAAAA,OACtB,eAAE46B,GAAmB76B,EAAgBK,UAErC,MAAEgkC,EAAK,KAAE6B,GAASrL,EAAeslC,gBAAgBj0D,GAEjDk0D,EAAOxyD,EAAAA,cAAC42B,GAAAA,IAAMqmC,oBAAmB,CAACnmC,UAAWs7B,IAEnD,OACEpyD,EAAAA,cAAC2yD,GAAAA,IAAO,CACNC,KAAMZ,EACNa,aAlBsBC,IACpBA,EACFb,MAEA5qB,QAgBArnC,EAAAA,cAAC+yD,GAAAA,IAAc,CACb96B,SAAO,EACPnB,UAAU,oCAEV92B,EAAAA,cAAA,WACGmyD,EACCnyD,EAAAA,cAACmyD,EAAa/rB,GAAA,CACZh+B,SAAUA,EACV8yB,KAAK,uBACDg3B,EACAG,GAEHG,GAGHxyD,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL7c,SAAUA,GAEToqD,KAKTxyD,EAAAA,cAACgzD,GAAAA,IAAc,CACbl8B,UAAU,6CACVwB,KAAMA,EACN7B,MAAOA,EACPw8B,YAAa,EACbC,WAAY,GAEZlzD,EAAAA,cAACk9D,GAAoB,CACnBpmC,UAAU,SACVrnC,WAAYA,KAKtB,CCmBA,SApFA,UAAuB,WAAEA,EAAU,UAAEqnC,IACnC,MAAM,oBAAEp6B,EAAmB,sBAAEoB,IAA0BnL,EAAAA,GAAAA,GAAuBlD,IACvEwsE,EAAuBC,IAA4BtsE,EAAAA,EAAAA,UACxDkO,EAAsBhK,OAAS,EAAIgK,EAAsB,GAAGtB,2BAAwBqB,IAGhF,UAAEwC,EAAS,aAAEoG,EAAY,gBAAElG,IAAoBnB,EAAAA,GAAAA,IAAqB3P,EAAY,CACpF+M,sBAAuBy/D,KAGnB,IAAEx7D,EAAG,IAAEC,GAAQH,EACfmG,EAAiBrG,GAAaI,GAEpC1O,EAAAA,EAAAA,WAAU,KACJ+L,EAAsBhK,OAAS,IAAMmoE,GACvCC,EAAyBp+D,EAAsB,GAAGtB,wBAEnD,CAACsB,EAAuBm+D,IAE3B,MAAMt6D,EAAqBjF,EAAoBqF,KAC7CxF,GAAMA,EAAGC,wBAA0By/D,GAGrC,OACEj8D,EAAAA,cAAA,OAAK82B,UAAWA,GACd92B,EAAAA,cAAA,OAAK82B,UAAU,4CACb92B,EAAAA,cAAA,OAAK82B,UAAU,0CACb92B,EAAAA,cAAA,OAAK82B,UAAU,+BACb92B,EAAAA,cAAA,QAAM82B,UAAU,mCAAkC,aACjDp6B,EAAoB5I,OAAS,GAC5BkM,EAAAA,cAAA,OAAK82B,UAAU,QACb92B,EAAAA,cAACywD,GAAAA,IAAM,CACLh4D,MAAOwjE,EACPvL,cAAewL,GAEfl8D,EAAAA,cAAC8wD,GAAAA,IAAa,KACZ9wD,EAAAA,cAAC+wD,GAAAA,IAAW,KAAEpvD,GAAoBpL,OAAS,uBAE7CyJ,EAAAA,cAACgxD,GAAAA,IAAa,KACXt0D,EAAoBjJ,IAAI8I,GACvByD,EAAAA,cAACixD,GAAAA,IAAU,CACT74D,IAAKmE,EAAGC,sBACR/D,MAAO8D,EAAGC,uBAEVwD,EAAAA,cAACkvD,GAAsB,CAAClyD,WAAYT,UAQlDyD,EAAAA,cAACk4B,GAAAA,IAAM,CACLjT,KAAK,KACLkT,QAAQ,QACRxB,QAASA,IAAMlwB,EAAahG,GAC5Bq2B,UAAU,WACX,UAIH92B,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxzC,MAAOiO,EACPmiC,SAAWiM,IACU,iBAARA,GACTruC,EAAaquC,IAGjBr0C,IAAKA,EACLC,IAAKA,EACLQ,KAAM,KAENlB,EAAAA,cAACu4D,GAAAA,IAAQG,YAAW,MACpB14D,EAAAA,cAAA,OAAK82B,UAAU,6BACb92B,EAAAA,cAAA,QAAM82B,UAAU,iCAAiCr2B,EAAI08D,QAAQ,IAC7Dn9D,EAAAA,cAAA,QAAM82B,UAAU,iCAAiCp2B,EAAIy8D,QAAQ,OAMzE,E,2NChFO,SAASC,GAAqBhoC,GACnC,MAAM,WAAE3lC,EAAU,SAAE6O,EAAQ,OAAE0zD,GAAS,EAAK,OAAEC,EAAM,QAAE5qB,EAAO,SAAEj/B,KAAa8pD,GAAS98B,GAC/E,cAAE+8B,EAAer7B,UAAWs7B,EAAa,eAAEC,IAAmBC,EAAAA,GAAAA,QAU9D,gBAAElgE,IAAoBC,EAAAA,EAAAA,OACtB,eAAE46B,GAAmB76B,EAAgBK,UAErC,MAAEgkC,EAAK,KAAE6B,GAASrL,EAAeslC,gBAAgBj0D,GAEjDk0D,EAAOxyD,EAAAA,cAAC42B,GAAAA,IAAMymC,UAAS,CAACvmC,UAAWs7B,IAEzC,OACEpyD,EAAAA,cAAC2yD,GAAAA,IAAO,CACNC,KAAMZ,EACNa,aAlBsBC,IACpBA,EACFb,MAEA5qB,QAgBArnC,EAAAA,cAAC+yD,GAAAA,IAAc,CACb96B,SAAO,EACPnB,UAAU,oCAEV92B,EAAAA,cAAA,WACGmyD,EACCnyD,EAAAA,cAACmyD,EAAa/rB,GAAA,CACZh+B,SAAUA,EACV8yB,KAAK,aACDg3B,EACAG,GAEHG,GAGHxyD,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL7c,SAAUA,GAEToqD,KAKTxyD,EAAAA,cAACgzD,GAAAA,IAAc,CACbl8B,UAAU,6CACVwB,KAAMA,EACN7B,MAAOA,EACPw8B,YAAa,EACbC,WAAY,GAEZlzD,EAAAA,cAACs9D,GAAa,CACZxmC,UAAU,SACVrnC,WAAYA,KAKtB,CC/BA,SA5CA,UAAqB,WAAEA,EAAU,UAAEqnC,IACjC,MAAM,qBAAEpkC,EAAoB,sBAAEoL,IAA0BnL,EAAAA,GAAAA,IAAuBlD,EAAY,CACzFyL,mBAAmB,EACnBD,mBAAmB,KAEf,cAAEkF,EAAa,iBAAEoG,IAAqBnH,EAAAA,GAAAA,IAAqB3P,EAAY,CAC3E+M,sBAAuBsB,EAAsB,GAAGtB,wBAG5CyC,OAAiCpB,IAAlBsC,EAA8BA,EAAgB,EAC7Do9D,EAAqB7qE,GAAsBmI,UAAY,GACvD2iE,EAAqB1/D,EAAsB,IAAIjD,UAAY,GAEjE,OACEmF,EAAAA,cAAA,OAAK82B,UAAWA,GACd92B,EAAAA,cAAA,OAAK82B,UAAU,kCACb92B,EAAAA,cAAA,OAAK82B,UAAU,yCACb92B,EAAAA,cAAA,QAAM82B,UAAU,mCAAkC,YAEpD92B,EAAAA,cAAA,OAAK82B,UAAU,IACb92B,EAAAA,cAACu4D,GAAAA,IAAQC,UAAS,CAChBvsB,KAAK,cACLxzC,MAAOwG,EACP4pC,SAAWiM,IACU,iBAARA,GACTvuC,EAAiBuuC,IAGrBr0C,IAAK,EACLC,IAAK,EACLQ,KAAM,MAENlB,EAAAA,cAAA,OAAK82B,UAAU,qBACb92B,EAAAA,cAAA,QAAM82B,UAAU,gCAAgCymC,GAChDv9D,EAAAA,cAACu4D,GAAAA,IAAQG,YAAW,CAACqE,iBAAiB,IACtC/8D,EAAAA,cAAA,QAAM82B,UAAU,gCAAgC0mC,OAO9D,E,2NC9BO,SAASC,GAAmBroC,GACjC,MAAM,WAAE3lC,EAAU,SAAE6O,EAAQ,OAAE0zD,GAAS,EAAK,OAAEC,EAAM,QAAE5qB,EAAO,SAAEj/B,KAAa8pD,GAAS98B,GAC/E,cAAE+8B,EAAer7B,UAAWs7B,EAAa,eAAEC,IAAmBC,EAAAA,GAAAA,QAU9D,gBAAElgE,IAAoBC,EAAAA,EAAAA,OACtB,eAAE46B,GAAmB76B,EAAgBK,UAErC,MAAEgkC,EAAK,KAAE6B,GAASrL,EAAeslC,gBAAgBj0D,GAEjDk0D,EAAOxyD,EAAAA,cAAC42B,GAAAA,IAAM8mC,QAAO,CAAC5mC,UAAWs7B,IAEvC,OACEpyD,EAAAA,cAAC2yD,GAAAA,IAAO,CACNC,KAAMZ,EACNa,aAlBsBC,IACpBA,EACFb,MAEA5qB,QAgBArnC,EAAAA,cAAC+yD,GAAAA,IAAc,CACb96B,SAAO,EACPnB,UAAU,oCAEV92B,EAAAA,cAAA,WACGmyD,EACCnyD,EAAAA,cAACmyD,EAAa/rB,GAAA,CACZh+B,SAAUA,EACV8yB,KAAK,WACDg3B,EACAG,GAEHG,GAGHxyD,EAAAA,cAACk4B,GAAAA,IAAM,CACLC,QAAQ,QACRlT,KAAK,OACL7c,SAAUA,GAEToqD,KAKTxyD,EAAAA,cAACgzD,GAAAA,IAAc,CACbl8B,UAAU,6CACVwB,KAAMA,EACN7B,MAAOA,EACPw8B,YAAa,EACbC,WAAY,GAEZlzD,EAAAA,cAAC29D,GAAW,CACV7mC,UAAU,SACVrnC,WAAYA,KAKtB,C,gBCsFA,SA9JA,UAA2B,WAAEA,IAC3B,MAAM,gBAAE4P,IAAoBhN,EAAAA,EAAAA,OACtB,EAAE0kC,IAAMvB,EAAAA,GAAAA,IAAe,UACvBooC,EAAU7mC,EAAE,SAEZ,UAAEnkC,EAAS,SAAEE,IAAaX,EAAAA,GAAAA,GAAuB,CAAE1C,gBAEnD,qBAAEiD,IAAyBC,EAAAA,GAAAA,GAAuBlD,IAEjDouE,EAAmBC,IAAwBluE,EAAAA,EAAAA,UAAS,MAErD4L,GAAiBxJ,EAAAA,EAAAA,SAAQ,IACtB,CAACU,GAAsBqK,OAAOwuB,SACpC,CAAC74B,KAEJX,EAAAA,EAAAA,WAAU,KACR,MAAMiL,EAAaxB,EAAeuG,KAAKxF,GAAMA,EAAG41C,qBAAwC,OAAjB51C,GAAI1B,UAE3EijE,EAAqB9gE,GAAc,OAClC,CAACxB,IAEJ,MAAMuiE,GAAa/rE,EAAAA,EAAAA,SAAQ,KACzB,GAAIY,IAAcirE,EAChB,MAAO,CACLpxD,KAAM,KACNuxD,YAAY,EACZprE,YACAoK,WAAY,KACZihE,QAAS,oDAIb,IAAKJ,EACH,MAAO,CACLpxD,KAAM,MAIV,MAAMA,EAAOoxD,EAAkBhjE,SACzBmjE,EAAaH,EAAkBG,aAAc,EACnD,IAAIC,EAAU,KACd,MAAMC,EAAiBL,EAAkBK,iBAAkB,EAqB3D,MAnBa,QAATzxD,EACFwxD,EAAUD,EACN,wDACA,mCACc,aAATvxD,EACTwxD,EAAUD,EACN,oDACA,+BACc,OAATvxD,IAIPwxD,EAHGC,EAEMA,GAAkBprE,EAEzB,2GAEQ,SAAS8qE,6BALT,mEASP,CACLnxD,OACAuxD,aACAhhE,WAAY6gE,EACZK,iBACAD,YAED,CAACJ,EAAmBD,EAAS9qE,EAAUF,IAG1C,IAAKmrE,EAAWtxD,OAAS7Z,EACvB,OAAO,KAGT,MAAMurE,EAAaA,IACO,OAApBJ,EAAWtxD,KACTsxD,EAAWG,iBAAmBprE,EAE9BkN,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CACX9K,UAAU,gCACVva,KAAK,qBAKPwhD,EAAWG,gBAAkBprE,EAE7BkN,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CACXrlB,KAAK,gBACLua,UAAU,YAKZ92B,EAAAA,cAAC42B,GAAAA,IAAMgL,OAAM,CACXrlB,KAAK,eACLua,UAAU,YAKT92B,EAAAA,cAAC42B,GAAAA,IAAMwnC,gBAAe,CAACtnC,UAAU,YAItCunC,EAAaA,IACZN,EAAWC,WA4BT,KA1BHh+D,EAAAA,cAAA,OACE,UAAS,qBAAqBvQ,IAC9BqnC,UAAU,wDAEV92B,EAAAA,cAAA,OAAK82B,UAAU,+EACb92B,EAAAA,cAACm+D,EAAU,MACXn+D,EAAAA,cAAA,QAAM82B,UAAU,QAAQinC,EAAWtxD,OAIhB,OAApBsxD,EAAWtxD,MACVzM,EAAAA,cAACs+D,GAAAA,IAAoB,CACnB9C,cAAeA,KACbn8D,EAAgBopB,WAAW,6BAA8B,CACvDzrB,WAAY+gE,EAAW/gE,WACvBvN,iBAIHmuE,IAUb,OACE59D,EAAAA,cAAAA,EAAAA,SAAA,KACG+9D,EAAWE,SACVj+D,EAAAA,cAAC+3B,GAAAA,IAAO,KACN/3B,EAAAA,cAACg4B,GAAAA,IAAc,CAACC,SAAO,GACrBj4B,EAAAA,cAAA,YACEA,EAAAA,cAACq+D,EAAU,QAGfr+D,EAAAA,cAACq4B,GAAAA,IAAc,CAACC,KAAK,UACnBt4B,EAAAA,cAAA,WAAM+9D,EAAWE,YAIrBF,EAAWE,SAAWj+D,EAAAA,cAACq+D,EAAU,MAGzC,EClCA,SAASE,GAAaC,EAAsB3hB,EAAmB4hB,GAC7D,GAAIA,GAAc,EAChB,OAAO,EAIT,IAAIC,GAAaF,EAAe3hB,GAAa4hB,EAO7C,OAJIC,EAAY,IACdA,EAAYD,EAAa,GAGpBC,CACT,CAEA,SA1IA,UAA6B,WAAEjvE,IAC7B,MAAM,gBAAE2C,IAAoBC,EAAAA,EAAAA,OACtB,oBAAEoH,EAAmB,2BAAEnH,EAA0B,mBAAEE,GACvDJ,EAAgBK,UAGZ,UAAEG,EAAS,uBAAEI,IAA2Bb,EAAAA,GAAAA,GAAuB,CAAE1C,gBACjE,oBAAEiN,IAAwB/J,EAAAA,GAAAA,GAAuBlD,IAChDkvE,EAAqBl+C,IAA0B7wB,EAAAA,EAAAA,UAAS,GACzDgvE,EAAiBliE,EAAoBsH,KAAKhH,GAAuC,OAAzBA,GAAYnC,UACpEgkE,EAAsBvsE,EAA2B0B,uBAAuBvE,IAGxE,iCAAEyY,IAAqChW,EAAAA,GAAAA,IAAyB,CACpEzC,eAMIqvE,EAHmB52D,EAAiCpU,OAAS,EAI/D,UACA8qE,GAEEhsE,EADA,cAGE,KAEFmsE,GAA8B7uE,EAAAA,EAAAA,aACjC2sD,IACC,MAAMmiB,EAAwBtiE,EAAoBqF,KAChD/E,GAAuC,OAAzBA,GAAYnC,UAG5B,GAAImkE,EAAuB,CACzB,MAAMt+C,EAAes+C,EAAsBt+C,aAC3C,GAAIA,EAAa5sB,QAAU,EACzB,OAGF,MAAMmrE,EAAWV,GAAaI,EAAqB9hB,EAAWn8B,EAAa5sB,QAC3E2sB,EAAuBw+C,GAEvB,MAAM1rE,EAAcmtB,EAAau+C,GAIjC,YAHAJ,EAAoBjuB,iBAAiB,CACnCplC,kBAAmBjY,EAAYmK,SAGnC,CAEA,GAAI9K,GAAaI,EAAuBc,OAAS,EAAG,CAClD,MAAMmrE,EAAWV,GACfI,EACA9hB,EACA7pD,EAAuBc,QAEzB2sB,EAAuBw+C,GACvBzsE,EAAmBujD,kBAAkBtmD,EAAYuD,EAAuBisE,GAC1E,GAEF,CACExvE,EACAovE,EACAF,EACAnsE,EACAI,EACAI,EACA0J,IAIEwiE,GAA0BhvE,EAAAA,EAAAA,aAC7B2sD,IACC,IAAK30C,EAAiCpU,OACpC,OAGF,MAAMuI,EAAiB6L,EAAiC,GAAGxQ,aAAa2E,eAExE1B,GAAMwkE,oBAAoB,CACxBtiB,YACAxgD,iBACA5M,aACA2vE,2BAA4B,EAC5B3lE,yBAGJ,CAACyO,EAAkCzY,EAAYgK,IAI3C4lE,GAAiBnvE,EAAAA,EAAAA,aACpB2sD,IACwB,YAAnBiiB,EACFI,EAAwBriB,GACI,gBAAnBiiB,GACTC,EAA4BliB,IAGhC,CAACiiB,EAAgBI,EAAyBH,IAI5C,OAAKD,EAKH9+D,EAAAA,cAACs/D,GAAAA,IAAoB,CACnBC,cAAeF,EACfvoC,UAAU,QANL,IASX,EC9FA,SAvBA,UAAwB,WAAErnC,IACxB,MAAM,UAAEmD,IAAcT,EAAAA,GAAAA,GAAuB,CAAE1C,eAE/C,OAAKmD,EAKHoN,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC+3B,GAAAA,IAAO,KACN/3B,EAAAA,cAACg4B,GAAAA,IAAc,CAACC,SAAO,GACrBj4B,EAAAA,cAAA,YACEA,EAAAA,cAAC42B,GAAAA,IAAM4oC,eAAc,CAAC1oC,UAAU,cAGpC92B,EAAAA,cAACq4B,GAAAA,IAAc,CAACC,KAAK,UACnBt4B,EAAAA,cAAA,WAAK,eAZJ,IAiBX,GCjBQy/D,iBAAkBC,IAAgCl+D,EAAAA,UAAAA,IAAAA,SAiB7Cyb,GAAgB1X,GACd,QAAbA,GAAmC,WAAbA,EAOlBk6D,IAAmBx+B,EAAAA,EAAAA,MAAK,UAA0B,WACtDxxC,EAAU,sBACV+M,EAAqB,UACrB6I,EAAS,mBACTG,EAAkB,SAClB3D,EAAQ,SACR0D,EAAQ,aACRo6D,EAAY,WACZ1iC,EAAU,aACV2iC,IAEA,MAAMC,GAAe/8B,EAAAA,EAAAA,QAAuB,OACtC,gBAAE1wC,IAAoBC,EAAAA,EAAAA,OACtB,qBAAEsF,GAAyBvF,EAAgBK,SAC3CqtE,GAAqBC,EAAAA,EAAAA,IAAetwE,IACpC,OAAEof,EAAM,MAAE9J,IAAUi7D,EAAAA,EAAAA,IAAgBvwE,GAGpCw6C,GAAwBj4C,EAAAA,EAAAA,SAAQ,IAC7B2F,EAAqBG,iBAC1B,wBAED,CAACH,IAEEwN,GAA0BnT,EAAAA,EAAAA,SAAQ,KACtC,IAAIiuE,EAAUN,EAMd,OAJEM,EADe,SAAb16D,GAAoC,UAAbA,EACF,SAAbA,EAAsB,QAAU,OAEnB,QAAbA,EAAqB,SAAW,MAErC06D,GACN,CAAC16D,EAAUo6D,IAERhjC,GAAqB3qC,EAAAA,EAAAA,SAAQ,IAC1Bi4C,GAAuBtN,qBAAqBp3B,GAClD,CAAC0kC,EAAuB1kC,IAErB26D,GAA2BluE,EAAAA,EAAAA,SAAQ,IAChCi4C,GAAuBnN,iBAAiBv3B,IAAa,CAAC,EAC5D,CAAC0kC,EAAuB1kC,IAErB46D,GAAmBnuE,EAAAA,EAAAA,SAAQ,KACxB,IACDi4C,GAAuBhN,YAAc,CAAC,KACtCN,GAAoBl3B,OAAS,CAAC,KAC9Bw3B,GAAc,CAAC,IAEpB,CAACgN,EAAuBtN,EAAoBM,IAEzCmjC,GAAapuE,EAAAA,EAAAA,SAAQ,IAClB,YAAYvC,KAAc+M,IAChC,CAAC/M,EAAY+M,IA4ChB,OA1CAzK,EAAAA,EAAAA,WAAU,KACR,IAAK8tE,EAAa/8D,UAAYuC,IAAcG,EAC1C,OAGF,MAAMrV,EAAkB2vE,GAAoBh9D,QAE5C,IAAK3S,IAAoBkV,GAAWvR,OAClC,OAIF,MAAMusE,EAAa,IAAIX,GAA4B,CACjD19D,GAAIo+D,EACJ9vE,QAASH,EACTmwE,UAAWT,EAAa/8D,QACxBuC,UAAWA,EACXG,mBAAoBA,EACpB3D,WACAyD,MAAO,CACLC,SAAUJ,EACVM,MAAO06D,KAIX,MAAO,KACDE,GACFA,EAAWE,YAGd,CACD9wE,EACA+M,EACA6I,EACAG,EACA3D,EACAu+D,EACAj7D,EACAg7D,EACAL,IAGGjxD,GAAW9J,EAKd/E,EAAAA,cAAA,OACEgC,GAAI,sBAAsBvS,KAAc+M,IACxCkpC,IAAKm6B,EACLp6D,MAAO,CACLF,SAAU,WACVi7D,OAAQ,IACRC,UAAW,aACXC,QAAS,OACTC,WAAY,SACZC,cAAe,OACfC,SAAU5jD,GAAa1X,GAAYR,EAAQ,IAAM,OACjD+7D,UAAW7jD,GAAa1X,GAAY,OAA0B,IAAjBq6D,EAAqB/wD,EAAS,EAAIA,EAAS,EACxFA,OAAQ,SACLqxD,KAjBA,IAqBX,GAEA,MCpIMa,IAA6B9/B,EAAAA,EAAAA,MAAK,UAAoC,WAC1ExxC,EAAU,SACV6O,IAEA,MAAO0iE,EAAWC,IAAgBrxE,EAAAA,EAAAA,UAAyB,KACrD,gBAAEwC,IAAoBC,EAAAA,EAAAA,OACtB,gBAAEiN,EAAe,qBAAE3H,EAAoB,kBAAEhC,GAAsBvD,EAAgBK,UAC/E,oBAAEiK,EAAmB,qBAAEhK,EAAoB,sBAAEoL,IACjDnL,EAAAA,GAAAA,GAAuBlD,IACjBkQ,iBAAkB4F,EAAQ,QAAEtF,IAAYb,EAAAA,GAAAA,GAAqB3P,EAAY,CAC/E6O,aAII2rC,GAAwBj4C,EAAAA,EAAAA,SAAQ,IAC7B2F,EAAqBG,iBAC1B,wBAED,CAACH,IAGEgoE,GAAe3tE,EAAAA,EAAAA,SAAQ,KAC3B,MAAMkvE,EAAsBj3B,GAAuBhlC,qBACnD,OAAOglC,GAAuBhlC,sBAAwBi8D,GACrD,CAACj3B,IAuBJ,IApBAl4C,EAAAA,EAAAA,WAAU,KACRkvE,EAAa3hE,EAAgB6hE,oBAAoB1xE,IAAe,KAC/D,CAACA,EAAY6P,KAGhBvN,EAAAA,EAAAA,WAAU,KACR,MAAM,YAAEyD,GAAgB8J,EAAgB9K,UACtC8K,EAAgB7K,OAAO4O,cACtBxS,IACKA,EAAMpB,aAAeA,GACvBwxE,EAAa3hE,EAAgB6hE,oBAAoB1xE,IAAe,MAKtE,MAAO,KACL+F,MAED,CAAC/F,EAAY6P,KAEX0hE,EAAUltE,OACb,OAAO,KAGT,MAGMstE,EAHkD,IAA/B1kE,EAAoB5I,SACHmpB,GAAa1X,GAGnDy7D,EACAA,EAAUjkE,OAAO,EAAGP,4BAClB,MAAQA,sBAAuB6kE,GAC7B1rE,EAAkByG,mBAAmBI,IAA0B,CAAC,EAOlE,OAAO6kE,KAJO,IAAZphE,GAA4B,MAAXA,EACbvN,GAAsB8J,sBACtBsB,EAAsB,GAAGtB,yBAKrC,OACEwD,EAAAA,cAAA,OACEyF,MAAO,CACLm7D,cAAe,SAGjB5gE,EAAAA,cAAA,OACE82B,UAAU,mDACVrxB,MAAO,CAAEm7D,cAAe,SAEvBQ,EAAe3tE,IAAI6tE,IAClB,MAAM,SAAEC,EAAQ,sBAAE/kE,GAA0B8kE,EAC5C,OACEthE,EAAAA,cAACy/D,GAAgB,CACfrnE,IAAK,YAAY3I,KAAc+M,IAC/B/M,WAAYA,EACZ+M,sBAAuBA,EACvB6I,UAAWk8D,EAASl8D,UACpBG,mBAAoB+7D,EAAS/7D,mBAC7B3D,SAAU0/D,EAAS1/D,SACnB0D,SAAUA,EACVo6D,aAAcA,EACd1iC,WAAYgN,GAAuBhN,WACnC2iC,aAAcoB,EAAUltE,YAOtC,GCvHA,GDyHA,G,uPEvHA,MAAM0tE,GAA0B,CAC9B,CAACjjE,GAAAA,GAAeI,WAAY,CAAE8iE,KAAM,EAAGC,KAAM,EAAGC,KAAM,EAAGC,KAAM,IAC/D,CAACrjE,GAAAA,GAAeG,cAAe,CAAE+iE,KAAM,EAAGC,KAAM,GAAKC,KAAM,EAAGC,KAAM,GACpE,CAACrjE,GAAAA,GAAeC,YAAa,CAAEijE,KAAM,EAAGC,KAAM,EAAGC,KAAM,GAAKC,KAAM,GAClE,CAACrjE,GAAAA,GAAeE,aAAc,CAAEgjE,KAAM,GAAKC,KAAM,EAAGC,KAAM,EAAGC,KAAM,IAG/DC,GAA6BvjE,GACjCA,IAAaC,GAAAA,GAAeC,YAAcF,IAAaC,GAAAA,GAAeE,YAClE,WACA,WAoIN,SAlIA,UAAmC,WACjChP,EAAU,SACV6O,EAAQ,cACRwjE,IAMA,MAAM,cACJtG,EAAa,eACbuG,EAAc,WACdC,EAAU,aACVC,EAAY,SACZC,EAAQ,UACRC,EAAS,WACTC,IACEC,EAAAA,GAAAA,IAAW,CACbP,kBAGIQ,GAAgBC,EAAAA,GAAAA,IAAyB9yE,IACxC+yE,EAAqBC,IAA0B7yE,EAAAA,EAAAA,WAAS,IACxD8yE,EAAcC,IAAmB/yE,EAAAA,EAAAA,WAAS,GAC3CgzE,GAAgB9/B,EAAAA,EAAAA,SAAO,IACvB,YAAErjC,IAAgBL,EAAAA,GAAAA,IAAqB3P,IACtCozE,EAAcC,IAAmBlzE,EAAAA,EAAAA,WAAS,IAEjDmC,EAAAA,EAAAA,WAAU,KACR,GAAI6wE,EAAc9/D,QAAS,CACzB8/D,EAAc9/D,SAAU,EAExB,MAAMigE,EAAQpxE,WAAW,KACvBgxE,GAAgB,IACf,KAEH,MAAO,IAAMjxE,aAAaqxE,EAC5B,GACC,KAEHhxE,EAAAA,EAAAA,WAAU,KACR,IAAK2wE,GAAgBJ,EAAcU,aAAc,CAC/C,MAAMC,EAAqBzB,GAAwBljE,GAC/CgkE,EAAcY,sBAAsBD,GACtCR,GAAuB,GAEvBA,GAAuB,EAE3B,GACC,CAACnkE,EAAUgkE,EAAeI,IAE7B,MAAMS,GAAmBjzE,EAAAA,EAAAA,aACvB,CAAC8R,EAAIvS,KACHyyE,EAASlgE,EAAIvS,GACbqzE,GAAgB,IAElB,CAACZ,EAAUY,IAGPM,GAAoBlzE,EAAAA,EAAAA,aACxB,CAAC8R,EAAIvS,KACH0yE,EAAUngE,EAAIvS,GACdqzE,GAAgB,IAElB,CAACX,EAAWW,IAGd,OAAKf,GAAgBjuE,QAIhB2L,EAKHO,EAAAA,cAAA,OAAK82B,UAAW2O,KAAW,aAAco8B,GAA0BvjE,KAChEyjE,EAAetuE,IAAI4vE,IAClB,IAAKA,EACH,OAAO,KAGT,MAAM,GAAErhE,EAAE,UAAEshE,EAAS,eAAEC,GAAmBF,EAGpCG,EAAgB,IACjBD,EACHvR,OAAQgQ,EAAWhgE,EAAIvS,GACvBqD,SAAUmvE,EAAajgE,EAAIvS,GAC3BwiE,OAAQA,IAAMkR,EAAiBnhE,EAAIvS,GACnC43C,QAASA,IAAM+7B,EAAkBphE,EAAIvS,GACrCg0E,aAAcA,IAAMrB,EAAWpgE,EAAIvS,GACnCA,cAGIu8C,EACJhsC,EAAAA,cAACsjE,EAASl9B,GAAA,CACRhuC,IAAK4J,EACLA,GAAIA,EACJ1D,SAAUA,EACVk9D,cAAe/xD,IACb+xD,EAAc,IACT/xD,EACHgxC,OAAQz4C,EACRvS,iBAGA+zE,IAMFE,EACJb,GAAgBH,GAAuB,aAAP1gE,GAAqBwgE,EAEvD,OACExiE,EAAAA,cAAA,OACE5H,IAAK4J,EACL80B,UAAW4sC,EAAkB,cAAgB,gCAC7Cj+D,MAAO,CAAEk+D,WAAY,6BAEpB33B,MAtDF,IA4DX,ECpIM43B,GAAoBC,IAAqB,CAC7Cz7D,UAAU,EACVy7D,aAAcA,GAAgB,0CA2hBhC,SAASC,IAAgB,WACvBr0E,EAAU,eACVw9B,EAAc,OACdpE,EAAM,aACNg7C,EAAY,SACZE,EAAQ,iBACR1uC,IAEA,MAAMuW,EAAYvW,EAAiBib,wBAAwB7gD,GAE3D,IAAKm8C,EACH,OAEF,MAAM5gC,EAAWiiB,EAAe+2C,qBAAqBn7C,GAErD,IAAK+iB,GAAWwO,QAAQpvC,GACtB,OAAO44D,GAAiBC,GAG1B,MAAMI,EAAQF,EAAS1vE,SAASu3C,EAAU0O,eAAetvC,GAAUihC,MAEnE,MAAO,CACLnV,UAAWn8B,GAAAA,IAAAA,qBAA2BspE,GAE1C,C,OC7jBA,MAAMxvE,GAAS,CACbyvE,eAAgB,qDAChBC,kBAAmB,wDACnBC,eAAgB,qDAChBC,uBAAwB,6DAeX,MAAMC,GAoBnB96D,WAAAA,CAAYpX,GAA2C,KAXvDA,qBAAe,OACfE,gCAA0B,OAC1ByI,yBAAmB,OACnBgyB,2BAAqB,OACbmuB,aAA4B,IAAI9/B,IACxC,KAGAmpD,eAAS,OACT9vE,YAAM,OAmQE+vE,iBAAoBltE,IAC1B,MAAM,YAAEk4C,EAAW,SAAExkC,EAAQ,oBAAEy5D,GAAwBntE,EAAIkM,OACrDkhE,EAAgBD,EAAoBlpC,UAAUv3B,KAClD2gE,GAAWA,EAAQnpC,cAAgB73B,EAAAA,MAAAA,cAAoB83B,SAGnDmpC,EAAgB,CACpBp1B,cACAxkC,WACAy5D,uBAGF76D,KAAKw1B,gBAAgB3qC,GAAO2vE,eAAgBQ,GAExCF,GACF96D,KAAKw1B,gBAAgB3qC,GAAO4vE,uBAAwBO,IA/QtD,MAAM,2BAAEtyE,EAA0B,oBAAEyI,EAAmB,sBAAEgyB,GACvD36B,EAAgBK,SAClBmX,KAAKtX,2BAA6BA,EAClCsX,KAAK7O,oBAAsBA,EAC3B6O,KAAKmjB,sBAAwBA,EAC7BnjB,KAAK26D,UAAY,CAAC,EAClB36D,KAAKnV,OAASA,GACd4D,OAAO6hB,OAAOtQ,KAAMi7D,EAAAA,IAEpBj7D,KAAKk7D,OACP,CAEAC,UAAAA,GACEn7D,KAAK22D,SACP,CAEQuE,KAAAA,GACN5kD,EAAAA,YAAYruB,iBAAiB8R,EAAAA,MAAAA,OAAaygE,eAAgBx6D,KAAK46D,iBACjE,CAQOrqB,YAAAA,CAAa3K,GAClB,IAAIw1B,EAAmBx1B,EAEvB,IAAKw1B,EAAkB,CAErB,MAAMl7D,EAAiBX,EAAgCS,KAAK7O,qBAE5D,IAAK+O,EACH,OAGF,MAAM,kBAAE4hC,EAAiB,WAAEj8C,GAAeqa,EACpC8hC,EAAYC,EAAAA,iBAAAA,wBAAyCp8C,EAAYi8C,GAEvE,IAAKE,EAOH,YANA1oC,QAAQuM,KACN,sCACAhgB,EACA,yBACAi8C,GAKJs5B,EAAmBp5B,EAAU5pC,EAC/B,CAGA,OADkB6pC,EAAAA,iBAAAA,aAA8Bm5B,EAElD,CAEOz1B,eAAAA,GACL,OAAO52C,MAAMmf,KAAKlO,KAAKsxC,aACzB,CAEO5K,uBAAAA,CAAwB7gD,GAC7B,MAAMk8C,EAAkB/hC,KAAKtX,2BAA2Bka,qBACxD,OAAOq/B,EAAAA,iBAAAA,wBAAyCp8C,EAAYk8C,EAAgB3pC,GAC9E,CAEOszB,wBAAAA,CAAyB7lC,GAC9B,MAAMm8C,EAAYhiC,KAAK0mC,wBAAwB7gD,GAC/C,GAAKm8C,EAIL,OAAOA,EAAUwP,iCACnB,CAEOmlB,OAAAA,GACL10B,EAAAA,iBAAAA,UACAjiC,KAAKsxC,aAAe,IAAI9/B,IAExB8E,EAAAA,YAAYpuB,oBAAoB6R,EAAAA,MAAAA,OAAaygE,eAAgBx6D,KAAK46D,iBACpE,CAEOS,gBAAAA,CAAiBz1B,GACtB3D,EAAAA,iBAAAA,iBAAkC2D,GAClC5lC,KAAKsxC,aAAa7mB,OAAOmb,EAC3B,CAEO01B,2BAAAA,CACLz1E,EACAi8C,EACAy5B,GAEA,MAAMv5B,EAAYC,EAAAA,iBAAAA,wBAAyCp8C,EAAYi8C,GAEvE,IAAKE,EACH,OAGFA,EAAUw5B,gBAAgB15B,EAAmBj8C,GAIlB,IAFPm8C,EAAUy5B,iBAEdvxE,QAAgBqxE,GAC9Bt5B,EAAAA,iBAAAA,iBAAkCD,EAAU5pC,GAEhD,CAEOsjE,sBAAAA,CACL71E,EACAi8C,EACA8D,GAEA,GAAKA,EAME,CACL,IAAI5D,EAAYC,EAAAA,iBAAAA,aAA8B2D,GACzC5D,IACHA,EAAYhiC,KAAK27D,gBAAgB/1B,IAGnC5D,EAAUoB,YAAYv9C,EAAYi8C,EACpC,KAbkB,CAEGG,EAAAA,iBAAAA,mBACRz2C,QAAQw2C,IACjBA,EAAUoB,YAAYv9C,EAAYi8C,IAEtC,CASA9hC,KAAKw1B,gBAAgB3qC,GAAOyvE,eAAgB,CAC1Cz0E,aACA+/C,eAEJ,CAEO+1B,eAAAA,CAAgB/1B,GACrB,GAAI5lC,KAAKuwC,aAAa3K,GACpB,MAAM,IAAIp5C,MAAM,aAAao5C,oBAI/B,MAAM5D,EAAYC,EAAAA,iBAAAA,gBAAiC2D,GAOnD,OANA5lC,KAAKsxC,aAAajuC,IAAIuiC,GAEtB5lC,KAAKw1B,gBAAgB3qC,GAAO0vE,kBAAmB,CAC7C30B,gBAGK5D,CACT,CAEO45B,mBAAAA,CAAoBh2B,EAAqBC,EAAoBg2B,EAAe,CAAC,GAClF,MAAM75B,EAAYC,EAAAA,iBAAAA,aAA8B2D,GAEhD5lC,KAAK87D,UAAU95B,EAAW6D,EAAOg2B,GACjC77D,KAAK+7D,cAAc/5B,EAAW6D,EAChC,CAEOm2B,0BAAAA,CAA2Bp2B,EAAqBC,GACrD,MAAM7D,EAAYhiC,KAAK27D,gBAAgB/1B,GAEvC,OADA5lC,KAAK47D,oBAAoBh2B,EAAaC,GAC/B7D,CACT,CAOO0P,oBAAAA,CAAqB9L,EAAqBxkC,GAC/C,MAAM4gC,EAAYC,EAAAA,iBAAAA,aAA8B2D,GAChD,IAAK5D,EACH,OAAO,KAGT,MAAMI,EAAOJ,EAAU8I,gBAAgB1pC,GACvC,OAAKghC,EAIEA,EAAKt+B,cAHH,IAIX,CASO0wC,oBAAAA,CAAqB5O,EAAaxkC,EAAU4hC,GAC/Bf,EAAAA,iBAAAA,aAA8B2D,GACjBkF,gBAAgB1pC,GAClC0C,cAAgBk/B,CAC/B,CAEOwO,+BAAAA,CAAgC5L,GACrC,OAAO5lC,KAAKuwC,aAAa3K,IAAc4L,iCACzC,CAEQuqB,aAAAA,CAAc/5B,EAAW6D,GAC/B,MAAM,OAAEnU,EAAM,QAAEuqC,EAAO,QAAEl+D,EAAO,SAAES,GAAaqnC,EAE3CnU,GACFA,EAAOlmC,QAAQ,EAAG4V,WAAUuwB,eAC1BqQ,EAAUkP,cAAc9vC,EAAU,CAAEuwB,eAIpCsqC,GACFA,EAAQzwE,QAAQ,EAAG4V,eACjB4gC,EAAU4P,eAAexwC,KAIzBrD,GACFA,EAAQvS,QAAQ,EAAG4V,eACjB4gC,EAAUwB,eAAepiC,KAIzB5C,GACFA,EAAShT,QAAQ,EAAG4V,eAClB4gC,EAAUyB,gBAAgBriC,IAGhC,CAEQ06D,SAAAA,CAAU95B,EAAW6D,GAC3B,MAAMq2B,EAAWr2B,IACfA,EAAMr6C,QAAQ,EAAG4V,WAAU+6D,aAAYr4D,oBACjCq4D,EACFn6B,EAAUo6B,gBAAgBh7D,EAAU+6D,EAAY,IAC3Cr4D,IAGLk+B,EAAU1f,QAAQlhB,EAAU,IAAK0C,OAKnC+hC,EAAMnU,QACRwqC,EAASr2B,EAAMnU,QAGbmU,EAAMo2B,SACRC,EAASr2B,EAAMo2B,SAGbp2B,EAAM9nC,SACRm+D,EAASr2B,EAAM9nC,SAGb8nC,EAAMrnC,UACR09D,EAASr2B,EAAMrnC,SAEnB,EAoBD69D,GAvSoB3B,GAAAA,GACL4B,aAAe,CAC3B3pD,KAAM,mBACN4pD,QAAS,mBACTC,OAAQA,EAAGh0E,qBACF,IAAIkyE,GAAiBlyE,IC5BlC,aCMM,mBAAEi0E,IAAuBC,EAAAA,qBACzB,qCAAEvqE,IAAyC4H,EAAAA,MAAAA,QAC3C,WAAE4iE,IAAe5d,EAAAA,MAER,SAAS6d,GACtBC,GACA,gBAAEr0E,KAAoBkH,IAmBtB,OAjB+B+sE,GAC7BI,EACA1qE,GACA,CAAC2qE,EAAsBC,EAAgBC,EAAgBC,IAC9CC,GACLJ,EACAC,EACAC,EACAC,EACA,CAAEz0E,kBAAiBkH,YAGvB,CACEytE,YAAa,eAKnB,CAEA,MAAMD,GAA6C72D,MACjDy2D,EACAC,EACAC,EACAC,GACEz0E,kBAAiBkH,cAEnB,MAAMzI,EAAQg2E,GAER,eAAExqE,GAAmBxL,EAAM2S,QAC3B,oBAAE/J,GAAwBrH,EAAgBK,SAE1C07C,EAAmBy4B,EAAen3E,YAElC,SAAEsE,IAAaizE,EAAAA,EAAAA,+BAA8B74B,GAInD,IAFkCp6C,EAAS02D,yBAGzC,OAQF,GALqChxD,EAAoBoC,+BACvDsyC,EACA,CAAE9xC,mBAG6BvI,OAAS,EACxC,OAIF,MAKM2Y,EAL+BhT,EAAoBoC,+BACvD8qE,EAAel3E,WACf,CAAE4M,mBAGsC,GAAGoQ,WAEvChT,EAAoB0oD,8BAA8BhU,EAAkB,CACxE9xC,iBACAoQ,OACAmgC,OAAQ,CACNq6B,UAC8B,IAA5BlzE,EAASmzE,eAAuBX,GAAWY,oCAAiCtpE,M,OC1EpF,MAAMpJ,GAAS,CACb2yE,mBAAoB,yDAkBhBC,GAAW,iBACXC,GAAM,MACNC,GAAU,UACVC,GAAa,aACbC,GAAc,aACdC,GAAc,aAKL,MAAMC,GAyBnBn+D,WAAAA,CAAYpX,GAA2C,KAhBvDA,qBAAe,OACfmyE,UAAyD,CAAC,EAAC,KAC3D9vE,YAAM,OACNmzE,qBAAoD,CAClD,CAACP,IAAWQ,EAAAA,cAAAA,iCACZ,CAACP,IAAMO,EAAAA,cAAAA,sBACP,CAACN,IAAUM,EAAAA,cAAAA,0BAGX,CAACL,IAAaK,EAAAA,cAAAA,6BACd,CAACJ,IAAcI,EAAAA,cAAAA,6BACf,CAACH,IAAclB,IAChB,KAEDsB,oBAAyD,CAAC,EAGxDl+D,KAAKxX,gBAAkBA,EACvBwX,KAAK26D,UAAY,CAAC,EAClB36D,KAAKnV,OAASA,GAEd4D,OAAO6hB,OAAOtQ,KAAMi7D,EAAAA,GACtB,CAEQkD,mBAAAA,CAAoBt7D,EAAczK,EAAY1I,GAEpDsQ,KAAKk+D,oBAAoBr7D,GAAQ7C,KAAKk+D,oBAAoBr7D,IAAS,GACnE,MAAMu7D,EAAcp+D,KAAKg+D,qBAAqBn7D,EAAKinB,eAEnD,GAAIs0C,EAAa,CAEf,MAAMnqB,EAAemqB,EAAYhmE,EAAI,IAAK1I,EAASlH,gBAAiBwX,KAAKxX,kBAEzE,GAAIyrD,EAEF,OADAj0C,KAAKk+D,oBAAoBr7D,GAAMnX,KAAKuoD,GAC7BA,CAEX,MACE36C,QAAQyD,MAAM,8BAA8B8F,UAAazK,IAE7D,CAEOimE,qBAAAA,CAAsBx7D,GAC3B,OAAO7C,KAAKg+D,qBAAqBn7D,EAAKinB,cACxC,CAOOw0C,mBAAAA,CAAoBz7D,EAAc07D,GACvCv+D,KAAKg+D,qBAAqBn7D,EAAKinB,eAAiBy0C,CAClD,CAEOrqB,eAAAA,CAAgB97C,GACrB,OAAOskE,EAAAA,oBAAAA,gBAAoCtkE,EAC7C,CAOOomE,0BAAAA,CAA2BpmE,EAAYqmE,GAC5Cz+D,KAAKg+D,qBAAqB5lE,GAAMqmE,CAClC,CAOOC,sBAAAA,CAAuB77D,GAC5B,OAAO7C,KAAKk+D,oBAAoBr7D,EAClC,CAEU87D,wBAAAA,CACR97D,EACAzK,EACA1I,GAEA,IAAIukD,EAAeyoB,EAAAA,oBAAAA,gBAAoCtkE,GAKvD,OAHK67C,IACHA,EAAej0C,KAAKm+D,oBAAoBt7D,EAAMzK,EAAI1I,IAE7CukD,CACT,CAEO9O,sBAAAA,CACLt/C,EACAi8C,EACAwiB,GAEA,IAAKA,EACH,QAGsBv1D,MAAMC,QAAQs1D,GAAcA,EAAa,CAACA,IAElD94D,QAAQozE,IACtB,MAAMC,EAlHSD,IACE,iBAAdA,EAAyB,CAAE/7D,KAAM+7D,GAAcA,EAiH7BE,CAAYF,IAC3B,KAAE/7D,EAAI,OAAEq8B,GAAS,EAAI,OAAEnoB,GAAS,EAAI,QAAErnB,EAAU,CAAC,EAAC,GAAE0I,EAAKyK,GAASg8D,EAElE5qB,EAAej0C,KAAK2+D,yBAAyB97D,EAAMzK,EAAI1I,GAE7D,IAAKukD,EACH,OAGFA,EAAa8qB,WAAWl5E,EAAY6J,GAEpC,MAAMsH,EAAe,CAAEnR,aAAYi8C,qBAC/B5C,GAAUnoB,EACZk9B,EAAa5wC,IAAIrM,GAER+f,EACTk9B,EAAa+qB,UAAUhoE,GACdkoC,GACT+U,EAAagrB,UAAUjoE,IAG7B,CAEO2/D,OAAAA,GACL+F,EAAAA,oBAAAA,SACF,CAEO13B,2BAAAA,CAA4Bn/C,GACjC,MAAMk8C,GACJ0e,EAAAA,EAAAA,uBAAsBtoD,KAAKwoD,GAClBA,EAAGrpC,eAAenf,KAAKyoD,GAAMA,EAAGxoD,KAAOvS,MAC1C46D,EAAAA,EAAAA,uBAAsB,GAG9B,OADsBic,EAAAA,oBAAAA,sBACDvpE,OACnBq6C,GACEA,EAAE0xB,kBAAkBn9B,EAAgB3pC,GAAIvS,IACxC2nD,EAAE2xB,kBAAkBp9B,EAAgB3pC,GAAIvS,GAE9C,CAEOq7C,2BAAAA,CACLr7C,EACAi8C,EACAs9B,GAEA,MAAMnB,EAAgBvB,EAAAA,oBAAAA,uBAEQ0C,EAC1BnB,EAAc9qE,OAAOq6C,GAAKA,EAAEp1C,KAAOgnE,GACnCnB,GAEkBzyE,QAAQyoD,IAC5B,IAAKA,EACH,OAIEj0C,KAAKq/D,wBAAwBprB,IAC/Bj0C,KAAKs/D,8BAA8BrrB,GAGrCA,EAAa7+B,OAAO,CAClBvvB,aACAi8C,sBAIF,MAAMy9B,EAAkBtrB,EAAaurB,qBAC/BC,EAAkBxrB,EAAayrB,qBAEhCH,EAAgBr1E,QAAWu1E,EAAgBv1E,QAC9CwyE,EAAAA,oBAAAA,oBAAwCzoB,EAAa77C,KAG3D,CAMAknE,6BAAAA,CAA8BrrB,GAC5B,MAAMsrB,EAAkBtrB,EAAaurB,qBAAqB31E,IAAI+2D,GAAMA,EAAG/6D,YACjE45E,EAAkBxrB,EAAayrB,qBAAqB71E,IAAI+2D,GAAMA,EAAG/6D,YAIlD05E,EAClB11E,IAAK4qD,GACGgrB,EAAgB51E,IAAI06C,GAAoB,CAACA,EAAkBkQ,KAEnEr7C,OAAO,CAAC2/B,EAAK/7B,IAAM+7B,EAAI4mC,OAAO3iE,GAAI,IAExBxR,QAAQo0E,IACnBhoE,EAAAA,UAAAA,oCAA8CyL,IAAIu8D,OAAgB3rE,IAEtE,CAOAorE,uBAAAA,CAAwBprB,GACtB,OAAOj0C,KAAK6/D,oBAAoB5rB,GAAcnqB,gBAAkB+zC,EAClE,CAKAgC,mBAAAA,CAAoB5rB,GAKlB,OAJ0BxlD,OAAOsgB,KAAK/O,KAAKk+D,qBACR/lE,KAAK2nE,GACtC9/D,KAAK0+D,uBAAuBoB,GAAUr1E,SAASwpD,GAGnD,EACD8rB,GApOoBhC,GAAAA,GACZzB,aAAe,CACpB3pD,KAAM,mBACN4pD,QAAS,mBACTC,OAAQA,EAAGh0E,qBACF,IAAIu1E,GAAiBv1E,ICtClC,YCMO,SAASw3E,GAAc74E,EAAW84E,GACvC,MAAMC,EAAQ,EAAID,EAGlB,OAAI94E,EAAI,EAAI,EACF,EAAI+N,KAAKC,IAAI,EAAIhO,EAAG,GAAK+4E,EAAQD,EAChC94E,EAAI,IACL,EAAI+N,KAAKC,KAAK,EAAIhO,EAAI,EAAG,GAAK,GAAK+4E,EAAQD,EAC1C94E,EAAI,EAAI,GACT,EAAI+N,KAAKC,IAAI,EAAIhO,EAAI,EAAG,GAAK,GAAK+4E,EAAQD,GAExC,EAAI/qE,KAAKC,IAAI,EAAIhO,EAAI,EAAG,GAAM+4E,EAAQD,CAEpD,CAgBO,SAASE,GACdh5E,EACA84E,EACAG,GAEA,MAAM1nE,EAAQunE,EAAWG,EAEzB,OAAIj5E,EAAI,EAAI,EACHi5E,EAAmB,EAAIlrE,KAAKC,IAAI,EAAIhO,EAAG,GAAKuR,EAC1CvR,EAAI,GACNi5E,GAAoB,EAAIlrE,KAAKC,KAAK,EAAIhO,EAAI,EAAG,GAAK,GAAKuR,EACrDvR,EAAI,EAAI,EACVi5E,GAAoB,EAAIlrE,KAAKC,IAAI,EAAIhO,EAAI,EAAG,GAAK,GAAKuR,EAEtD0nE,GAAoB,EAAIlrE,KAAKC,IAAI,EAAIhO,EAAI,EAAG,GAAKuR,CAE5D,C,sFCpDO,MAAM2nE,GAAuB,kCACvBC,GAA+B,yC,OC+B5C,MAAMC,GAAWC,EAAAA,MAAAA,4BAAyCz9B,SACpD09B,GAAUD,EAAAA,MAAAA,4BAAyC/7C,QA0BnD55B,GAAS,CACbwF,sBAAuB,+BAEvBqwE,mBAAoB,4BAEpBnwE,2BAA4B,oCAE5BD,qBAAsB,8BAGtB6B,qCAAsC,8CAEtCC,oCAAqC,6CAIrCuuE,yBAA0B,kCAE1BC,8BAA+B,wCAKjC,MAAMC,WAA4B7sC,EAAAA,GAehCp0B,WAAAA,EAAY,gBAAEpX,IACZwb,MAAMnZ,IAAQ,KAPRi2E,uCAAiC,OACjCC,gCAA0B,OACzBv4E,qBAAe,OACxBw4E,oBAAsB,KAAI,KACjBn2E,OAASA,GAAM,KAuIjB8rE,QAAU,KACfrgD,EAAAA,YAAYpuB,oBACVs4E,EAAAA,MAAAA,OAAoBnwE,sBACpB2P,KAAKihE,mCAGP3qD,EAAAA,YAAYpuB,oBACVs4E,EAAAA,MAAAA,OAAoBlwE,qBACpB0P,KAAKihE,mCAGP3qD,EAAAA,YAAYpuB,oBACVs4E,EAAAA,MAAAA,OAAoBjwE,2BACpByP,KAAKkhE,uCAGP5qD,EAAAA,YAAYpuB,oBACVs4E,EAAAA,MAAAA,OAAoBW,kCACpBnhE,KAAKihE,mCAGP3qD,EAAAA,YAAYpuB,oBACVs4E,EAAAA,MAAAA,OAAoBE,mBACpB1gE,KAAKohE,gCAGPphE,KAAKqhE,SACN,KA6fMC,SAAYC,GAMHC,EAAAA,aAAAA,OAAAA,MAAAA,SAAsCD,GAGrD,KAEM1nB,SAAW,CAChB0nB,EAMA1lE,KAEA2lE,EAAAA,aAAAA,OAAAA,MAAAA,SAAsCD,EAAW1lE,IAClD,KAEM4lE,mBAAqB,KAC1BD,EAAAA,aAAAA,OAAAA,MAAAA,sBA2TF,KAMOroB,2CAA6C,CAClDtzD,GACE4M,iBAAgBoQ,WAElB7C,KAAK0hE,4CAA4C77E,EAAY4M,EAAgBoQ,IAC9E,KAEM8+D,+BAAkClvE,GACnB+uE,EAAAA,aAAAA,MAAAA,+BAAqD/uE,GAE1E,KAulBOivE,4CAA8C,CACpD77E,EACA4M,EACAoQ,KAEA,MAIMjE,EAJkBoB,KAAK/N,+BAA+BpM,EAAY,CACtE4M,iBACAoQ,SAEqC,GAOjC++D,EAA4C,IAL3BJ,EAAAA,aAAAA,OAAAA,WAAAA,wBAA0D37E,EAAY,CAC3F4M,iBACAoQ,KAAMjE,EAAeiE,OAGkBwY,KACzCrb,KAAK6hE,yCACHh8E,EACA4M,EACAmM,EAAeiE,MACd++D,IAEJ,KA4EOV,sCAAwCxzE,IAC9C,MAAM,eAAE+E,GAAmB/E,EAAIkM,OAC/BoG,KAAKw1B,gBAAgBx1B,KAAKnV,OAAO0F,2BAA4B,CAC3DkC,oBAEH,KAEOqvE,gDAAkDp0E,IACxD,MAAM,eAAE+E,EAAc,WAAE5M,GAAe6H,EAAIkM,OAC3CoG,KAAKw1B,gBAAgBx1B,KAAKnV,OAAOsH,qCAAsC,CACrEM,iBACA5M,gBAEH,KAEOo7E,kCACNvzE,IAEA,MAAM,eAAE+E,GAAmB/E,EAAIkM,OAE/BoG,KAAKw1B,gBAAgBx1B,KAAKnV,OAAOwF,sBAAuB,CACtDoC,oBAEH,KAEO2uE,+BACN1zE,IAEA,MAAM,eAAE+E,GAAmB/E,EAAIkM,OAE/BoG,KAAKw1B,gBAAgBx1B,KAAKnV,OAAO61E,mBAAoB,CACnDjuE,oBAttDFuN,KAAK8gE,kCAAoC,IAAI39D,IAE7CnD,KAAKxX,gBAAkBA,EAEvBwX,KAAK+gE,2BAA6B,IAAI59D,GACxC,CAEO4+D,WAAAA,GACL/hE,KAAKgiE,0BACP,CAEO7G,UAAAA,GACLn7D,KAAK22D,SACP,CAaO93D,eAAAA,CAAgBpM,GACrB,OAAO+uE,EAAAA,aAAAA,MAAAA,gBAAsC/uE,EAC/C,CAYOxC,gBAAAA,GACL,OAAOuxE,EAAAA,aAAAA,MAAAA,kBACT,CAEOS,eAAAA,CAAgBp8E,GACrB,MAAMq8E,EAAsD,GACtDC,EAAmB,IAAIh/D,IAEvBi/D,EAAkBpiE,KAAK/N,+BAA+BpM,GAC5D,IAAK,MAAM+Y,KAAkBwjE,EAAiB,CAC5C,MAAM,eAAE3vE,GAAmBmM,EAE3B,IAAKA,EACH,SAGF,MAAM,KAAEiE,GAASjE,EAEjBujE,EAAiB7+D,IAAI7Q,EAAgB,CACnCA,iBACAoQ,OACAwnC,UAAU,EACVrH,OAAQpkC,EAAeokC,QAAU,CAAC,GAEtC,CAmBA,OAFAk/B,EAA0Bx2E,QAAQy2E,EAAiB/zD,UAE5C8zD,CACT,CAEOG,iCAAAA,CACL5vE,GAKA,OAFE+uE,EAAAA,aAAAA,MAAAA,+CAAqE/uE,EAGzE,CAgBOR,8BAAAA,CACLpM,EACA07E,EAGI,CAAC,GAaL,OAVwBC,EAAAA,aAAAA,MAAAA,+BACtB37E,EACA07E,GAI0C13E,IAAI0I,GAC9CyN,KAAKsiE,kCAAkCz8E,EAAY0M,GAIvD,CA+BA,mCAAagmD,CACX1yD,GACA,eACE4M,EAAc,KACdoQ,EAAI,OACJmgC,EAAM,eACNu/B,GAAiB,IAUnB,MAAMz0E,EAAekS,KAAKnB,gBAAgBpM,GACpCuF,EAAagI,KAAKwiE,uBAAuB38E,GAE/C,IAAKmS,EACH,OAGF,MAAM8qC,EAAgB9iC,KAAK8gE,kCAAkCroE,IAAIhG,GAE3DgwE,EAA4BjC,EAAAA,MAAAA,4BAAyCz9B,SAC3E,IAAI2/B,EAA0B7/D,GAAQ4/D,EAClCE,GAAc,EAElB,GAAI9/D,IAAS29D,EAAAA,MAAAA,4BAAyCz9B,SAAU,CAC9D,MAAM,iBAAE6/B,EAAgB,qBAAEC,GAAyB7iE,KAAK8iE,qCACtD9qE,EACAlK,IACG,CAAE80E,kBAAkB,EAAOC,sBAAsB,KAEnDH,0BAAyBC,qBAAsB3iE,KAAK+iE,yBACrDH,EACAC,EACA7qE,EACAlK,EACAjI,EACA4M,EACAiwE,GAEJ,OAEM1iE,KAAKgjE,+BACTn9E,EACA4M,EACAiwE,EACA5/B,EACA6/B,EACA3/B,GAGGu/B,GACHviE,KAAKw1B,gBAAgBx1B,KAAKnV,OAAOsH,qCAAsC,CAAEM,kBAE7E,CAYA,iCAAa2lD,CACXhlD,EACA1D,GASA,MAAM+C,EAAiB/C,GAAS+C,gBAAkB,GAAGc,EAAAA,UAAAA,WAE/CylB,EAAkB5lB,EAAW4lB,gBAEnC,IAAIiqD,EAAoB7vE,EAAWI,SACnC,GAAIwlB,EAAiB,CAEnB,MAAMkqD,EAAa9vE,EAAW+vE,kBAAkBD,WAEhDD,EADwBC,EAAWhuE,KAAK0mB,MAAMsnD,EAAWh5E,OAAS,GAEpE,CAEA,MAAMk5E,QAAsBrpD,EAAAA,YAAAA,oCAAgDkpD,GAEtE/qB,EAAOl4C,KAAK/P,mBACZtD,EAAQ+C,EAAQ/C,OAAS,gBAAgBurD,EAAKhuD,OAAS,IAEvDm5E,EAAcD,EAAcv5E,IAAIgK,GAASA,EAAMC,SAE/CwvE,EAA4D,CAChE7wE,iBACAmM,eAAgB,CACdiE,KAAM09D,GACNlgE,KAAM,CACJ7M,SAAU6vE,EAEVx2B,mBAAoBo2B,IAGxBjgC,OAAQ,CACNr2C,QACAqB,SACE0B,EAAQ1B,UAAYS,OAAOsgB,KAAKrf,EAAQ1B,UAAU9D,OAAS,EACvDwF,EAAQ1B,SACR,CACE,EAAG,CACDrB,MAAO,GAAG2rD,GAAAA,EAAKnrB,EAAE,eACjBuE,QAAQ,IAGlBriC,YAAa,CACX69C,KAAM,IAAI95C,EAAW8b,iBAAiB9b,EAAWm4B,uBAMvD,OADAvrB,KAAK+uB,wBAAwBu0C,GACtB7wE,CACT,CAEA,wCAAa8wE,CACXC,EACA9zE,EAGI,CACFmT,KAAM09D,KAGR,MAAM,KAAE19D,GAASnT,EACjB,IAAI,eAAE+C,GAAmB/C,EACzB,MAAM,eAAE+zE,GAAmBD,EAE3B,GAAI3gE,IAAS09D,GACX,MAAM,IAAI/zE,MAAM,kEAGlB,IAAKi3E,IAAmBA,EAAev5E,OACrC,MAAM,IAAIsC,MAAM,sBAGlBiG,EAAiBA,GAAkB+wE,EAAc5wE,sBACjD,MAAMo1C,EAAkCw7B,EAAcx7B,gCAKhDp0C,EAJuBoM,KAAKxX,gBAAgBK,SAASkD,kBAAkByG,mBAC3Ew1C,GAGkCz7C,UAEpC,IAAKqH,EAAO1J,OACV,MAAM,IAAIsC,MAAM,wEAGlB,MAAMgH,EAAWI,EAAO/J,IAAIgK,GAASA,EAAMC,SACrCsvE,EAAgBK,GAAgBC,OAChCC,EAAkBP,EAAcv5E,IAAIgK,GAASA,EAAMC,SAEzD0vE,EAAc5vE,OAASwvE,EAAcv5E,IAAIgK,IAAS,IAC7CA,KACA2P,EAAAA,SAAAA,IAAa,WAAY3P,EAAM+N,sBAGpC4hE,EAAchwE,SAAWmwE,EAKzB,IAAIC,EAA6B,KACjC,IAAK,IAAIh8D,EAAI,EAAGA,EAAIw7D,EAAcl5E,OAAQ0d,IAAK,CAC7C,MAAMpP,EAAe4qE,EAAcx7D,GAAGpP,aAChCqrE,EAAarrE,EAAasrE,gBAChCtrE,EAAaurE,cAAcF,IAGtBD,GAA8BC,EAAWzpE,KAAKvL,GAAmB,IAAVA,KAC1D+0E,EAA6BR,EAAcx7D,GAAGhG,kBAElD,CAGA4hE,EAAcI,2BAA6BA,EAE3C,MAAMI,EAAeR,EAAcS,YAAY5jE,KAEzCrS,EAAyD,CAAC,EAC1Dk2E,EAAW,GAEjBF,EAAax4E,QAAQ,CAAC24E,EAAa70B,KACjC,GAAc,IAAVA,EAEF,YADA40B,EAASx4E,KAAK,CAAC,EAAG,EAAG,EAAG,IAI1B,MAAM,sCACJ04E,EAAqC,cACrCC,EAAa,aACbx3D,EAAY,qBACZy3D,EAAoB,qBACpBC,EAAoB,kCACpBC,EAAiC,KACjCC,GACEN,EAEJD,EAASx4E,KAAK+4E,GAEd,MAAMj1E,EAAewT,OAAOqhE,GAEtBK,EAAWlB,EAAcmB,WAAWlsE,IAAI62C,GACxCs1B,EAAmBF,GAAU7wE,OAAS,CAAE1M,EAAG,EAAGE,EAAG,EAAGw9E,EAAG,GACvDC,EAAmBJ,GAAUK,OAAS,CAAE59E,EAAG,EAAGE,EAAG,EAAGw9E,EAAG,GAE7D72E,EAASwB,GAAgB,CACvBA,eACA7C,MAAOkgB,GAAgB,WAAWw3D,IAClC52B,QAAQ,EACR/b,QAAQ,EACRriC,YAAa,CACXygC,OAAQ,CACNj8B,MAAO,CAAC+wE,EAAiBz9E,EAAGy9E,EAAiBv9E,EAAGu9E,EAAiBC,GACjEE,MAAO,CAACD,EAAiB39E,EAAG29E,EAAiBz9E,EAAGy9E,EAAiBD,IAEnEG,aAAcxB,EAAcz2B,WAC5Bk4B,SAAUb,EACNA,EAAsCx4B,YACtC,GACJ/oC,KAAM2hE,EACFA,EAAkC54B,YAClC,GACJs5B,cAAeZ,EACfa,cAAeZ,MAMrB,MAAMzhC,GAAgBsiC,EAAAA,GAAAA,MACtBC,EAAAA,GAAAA,GAAYnB,EAAUphC,GACtB9iC,KAAK8gE,kCAAkCx9D,IAAI7Q,EAAgBqwC,GAE3D9iC,KAAKw1B,gBAAgB3qC,GAAO+1E,8BAA+B,CACzDnuE,iBACA+wE,kBAGF,MAAM8B,EAAwC,CAC5C7yE,iBACAmM,eAAgB,CACdiE,KAAM09D,GACNlgE,KAAM,CACJ7M,SAAUmwE,EAEV92B,mBAAoBr5C,IAGxBwvC,OAAQ,CACNr2C,MAAO62E,EAAcj4C,kBACrBv9B,aAQJ,OAJAw1E,EAAc+B,UAAW,EAEzBvlE,KAAK+uB,wBAAwBu2C,GAEtB7yE,CACT,CAEA,uCAAa+yE,CACXC,EACA/1E,EAGI,CACFmT,KAAM49D,KAGR,MAAM,KAAE59D,GAASnT,EACjB,IAAI,eAAE+C,GAAmB/C,EAGzB,GAAImT,IAAS49D,GACX,MAAM,IAAIj0E,MAAM,gEAIlBiG,EAAiBA,GAAkBgzE,EAAa7yE,sBAChD,MAAM,aAAE8yE,GAAiBD,EAEzB,IAAKC,EACH,MAAM,IAAIl5E,MACR,qJAIJ,MAAMm5E,EAAkBF,EAAa7yE,sBAC/B81C,EAAuB1oC,KAAKxX,gBAAgBK,SAASkD,kBAAkByG,mBAC3EizE,EAAaz9B,iCAGT49B,EAAiC72E,MAAMmf,KAAKw3D,EAAaG,8BAEzDh5B,EAAqBnE,EAAqBl1C,SAE1CowE,EACJ/2B,GAAoB10C,KAAKrE,GACvB8xE,EAA+BxrE,KAAKkD,GAAgBxJ,EAAQrJ,SAAS6S,MAClE,KAEPmoE,EAAa7B,2BAA6BA,EAE1C,MAAMkC,EC5jBH,SAAsCJ,EAAuBC,GAClE,OAAOD,EAAaK,YAAYl8E,IAC9B,EAAGm8E,gBAAeC,YAAWC,UAASC,aAAYC,eAChD,MAWMhuE,EAAK8tE,GAAWD,EAEtB,MAAO,CACL5lE,KAdW2lE,EAAcn8E,IAAI,EAAG6W,YAAW4nD,MAKpC,IACFA,EACH5nD,OANgBA,EAAO7W,IAAI,EAAG1C,IAAGE,IAAGw9E,OAC7B,CAAC19E,EAAGE,EAAGw9E,OAahBzsE,KACA5I,aAAcy2E,EACdlqE,MAAOoqE,EACPE,MAAOD,EACPE,WAAY,GAAGX,KAAmBvtE,kBAAmB6tE,MAI7D,CDkiB4BM,CAA6Bb,EAAcC,GAGnEG,EAAgBzxE,KAAK,CAAC1D,EAAGC,IAAMD,EAAEnB,aAAeoB,EAAEpB,cAElD,MAAMg3E,EAAcV,EAAgBj8E,IAAI,EAAGy8E,gBAAiBA,GAGtDx4E,EAAiD,CACrD2E,iBACAmM,eAAgB,CACdiE,KAAM49D,GACNpgE,KAAM,CACJmmE,gBAGJxjC,OAAQ,CACNr2C,MAAO84E,EAAal6C,oBAIxB,IAAKm6C,EAAaK,aAAa77E,OAC7B,MAAM,IAAIsC,MACR,sGAIJ,MAAMwB,EAAyD,CAAC,EAChE,IAAIy4E,EAAsB,CAAC,EAG3B,MAAMvC,EAAW,CAAC,CAAC,EAAG,EAAG,EAAG,IAG5B,IAAK,MAAMwC,KAAgBZ,EAAiB,CAC1C,MAAM,KAAEzlE,EAAI,GAAEjI,EAAE,MAAE2D,EAAK,aAAEvM,EAAY,WAAE82E,EAAU,MAAED,GAAUK,EAG7DxC,EAASx4E,KAAKqQ,GAEd,IACE,MAWM4qE,SAXiBC,EAAAA,eAAAA,uBAAsCN,EAAY,CACvEO,aAAc,CACZxmE,OACAjI,KACA2D,QACA+qE,oBAAqBpB,EAAaoB,oBAClCt3E,gBAEFqT,KAAMkkE,EAAAA,MAAAA,aAAqBtG,WAGDpgE,KAG5BomE,EAAsB,CACpB32C,OAAQ,CAAEi1C,MAHK4B,EAAWjC,UAI1BM,aAAcS,EAAa14B,YAG7B/+C,EAASwB,GAAgB,CACvB7C,MAAOyL,EACP5I,eACAH,YAAao3E,EACbh5B,QAAQ,EACR/b,QAAQ,EACR20C,SAIF,MAAMW,EAAiBv4E,OAAOsgB,KAAK03D,GAAqBv8E,OAClDwrC,EAAkBxgC,KAAK2L,MAAOmmE,EAAiBlB,EAAgB57E,OAAU,KAC/E8V,KAAKw1B,gBAAgB3qC,GAAO81E,yBAA0B,CACpDjrC,kBACAuxC,YAAanB,EAAgB57E,QAEjC,CAAE,MAAOqiC,GACPjzB,QAAQuM,KAAK,0CAA0CrW,KAAiB+8B,GACxE,QACF,CACF,CAGA,MAAMuW,GAAgBsiC,EAAAA,GAAAA,KAkBtB,OAjBAC,EAAAA,GAAAA,GAAYnB,EAAUphC,GACtB9iC,KAAK8gE,kCAAkCx9D,IAAI7Q,EAAgBqwC,GAG3Dh1C,EAAak1C,OAAOh1C,SAAWA,EAG/BgS,KAAKw1B,gBAAgB3qC,GAAO+1E,8BAA+B,CACzDnuE,iBACAgzE,iBAIFA,EAAaF,UAAW,EAExBvlE,KAAK+uB,wBAAwBjhC,GAEtB2E,CACT,CAYOs8B,uBAAAA,CACL1uB,GAEA,MAAM5N,EAAiB4N,EAAK5N,eACC+uE,EAAAA,aAAAA,MAAAA,gBAAsC/uE,GAIjEuN,KAAKknE,2BAA2Bz0E,EAAgB4N,GAGhDL,KAAKmnE,wBAAwB9mE,EAEjC,CAEOm4C,qBAAAA,CAAsB3yD,EAAoB4M,GAC/C+uE,EAAAA,aAAAA,mBAAAA,sBAAyD37E,EAAY4M,EACvE,CAYOm0C,qBAAAA,CAAsB/gD,GAC3B,OAAO27E,EAAAA,aAAAA,mBAAAA,sBAAyD37E,EAClE,CAaOghD,gBAAAA,CAAiBhhD,GACtB,MAAMqmC,EAAqBlsB,KAAK4mC,sBAAsB/gD,GAEtD,IAAKqmC,EACH,OAGF,MAAM,SAAEl+B,GAAak+B,EAErB,IAAIk7C,EACJ,IAAK,MAAMj4E,KAAWV,OAAO2f,OAAOpgB,GAClC,GAAImB,EAAQuiC,OAAQ,CAClB01C,EAAgBj4E,EAChB,KACF,CAGF,OAAOi4E,CACT,CAEOC,eAAAA,CAAgB9F,GAKrB,OAAOC,EAAAA,aAAAA,OAAAA,MAAAA,eAA4CD,EACrD,CA2CO7oB,UAAAA,CACLjmD,EACAuwC,EAOI,CAAC,GAEL,GAA6B,IAAzBA,GAAQxzC,aACV,MAAM,IAAIhD,MAAM8rD,GAAAA,EAAKnrB,EAAE,WAAa,uCAGtC,MAAMm6C,EAAiBtnE,KAAKunE,2BAA2B90E,GAEvD,IAAIjD,EAAewzC,EAAOxzC,aAC1B,IAAKA,EAAc,CAGjB,MAAMg4E,EAAc/4E,OAAOsgB,KAAKu4D,EAAet5E,UAC/CwB,EAAsC,IAAvBg4E,EAAYt9E,OAAe,EAAIgL,KAAK4B,OAAO0wE,EAAY39E,IAAImZ,SAAW,CACvF,CAGKggC,EAAOr2C,QACVq2C,EAAOr2C,MAAQ,GAAG2rD,GAAAA,EAAKnrB,EAAE,cAAc39B,KAGzC,MAAMi4E,EAAkBH,EAAet5E,SAEvCwzE,EAAAA,aAAAA,oBAAoC,CAClC,CACE/uE,iBACAi1E,QAAS,CACP15E,SAAU,IACLy5E,EACH,CAACj4E,GAAe,IACXi4E,EAAgBj4E,GACnBA,eACAH,YAAa,CAAC,EACdo+C,QAAQ,KACLzK,QAObhjC,KAAK44C,iBAAiBnmD,EAAgBjD,QAGdyE,IAApB+uC,EAAO95C,UACT8W,KAAK2nE,wBAAwBl1E,EAAgBjD,EAAcwzC,EAAO95C,UAIhD8W,KAAK2hE,+BAA+BlvE,GAE5CjH,QAAQ3F,SAEGoO,IAAjB+uC,EAAOjnC,OACTiE,KAAK27C,gBAAgB91D,EAAY4M,EAAgBjD,EAAcwzC,EAAOjnC,YAI9C9H,IAAtB+uC,EAAOv1B,YACTzN,KAAK4nE,qBAAqB/hF,EAAY4M,EAAgBjD,EAAcwzC,EAAOv1B,aAGjF,CAeOssC,aAAAA,CAActnD,EAAwBjD,GAC3CgyE,EAAAA,aAAAA,cAA8B/uE,EAAgBjD,EAChD,CAEOo4E,oBAAAA,CACL/hF,EACA4M,EACAjD,EACAkf,EACA7L,GAEA7C,KAAK6nE,sBAAsBhiF,EAAY4M,EAAgBjD,EAAckf,EAAW7L,EAClF,CAaOilE,gBAAAA,CAAiBr1E,EAAwBjD,EAAsBtG,GACpE8W,KAAK2nE,wBAAwBl1E,EAAgBjD,EAActG,EAC7D,CAOO+vD,mBAAAA,CAAoBxmD,EAAwBjD,GACjD,MAAMtG,EAAWs4E,EAAAA,aAAAA,eAAAA,qBACf/uE,EACAjD,GAEFwQ,KAAK2nE,wBAAwBl1E,EAAgBjD,GAAetG,EAC9D,CAEO6vD,uBAAAA,CACLlzD,EACA4M,EACAjD,EACAqT,GAEA,MAAM6L,EAAY8yD,EAAAA,aAAAA,OAAAA,WAAAA,0BAChB37E,EACA,CACE4M,iBACAoQ,QAEFrT,GAEFwQ,KAAK6nE,sBAAsBhiF,EAAY4M,EAAgBjD,GAAekf,EAAW7L,EACnF,CAcO84C,eAAAA,CACL91D,EACA4M,EACAjD,EACAuM,GAEAylE,EAAAA,aAAAA,OAAAA,MAAAA,qBACE37E,EACA4M,EACAjD,EACAuM,EAEJ,CAcOq/C,eAAAA,CAAgBv1D,EAAoB4M,EAAwBjD,GACjE,OAAOgyE,EAAAA,aAAAA,OAAAA,MAAAA,qBACL37E,EACA4M,EACAjD,EAEJ,CAYOu4E,iBAAAA,CAAkBt1E,GACvB,MACMu1E,EADiBxG,EAAAA,aAAAA,MAAAA,gBAAsC/uE,GACzBm6C,mBAClCpoB,GAAAA,4BAA4Bue,UAG9B,IAAKilC,IAAiBA,EAAa/vE,SACjC,OAAO,KAGT,MAAM,SAAEA,GAAa+vE,EAGrB,OAFuBnvD,EAAAA,MAAMC,UAAU7gB,EAGzC,CAYOgjD,eAAAA,CAAgBxoD,EAAwBjD,EAAsB7C,GACnEqT,KAAKioE,iBAAiBx1E,EAAgBjD,EAAc7C,EACtD,CAWOisD,gBAAAA,CAAiBnmD,EAAwBjD,GAC9CwQ,KAAKkoE,kBAAkBz1E,EAAgBjD,EACzC,CAYO8qD,8BAAAA,CAA+Bz0D,EAAoBu0D,GACxDonB,EAAAA,aAAAA,OAAAA,MAAAA,+BAA4D37E,EAAYu0D,EAC1E,CAWOC,8BAAAA,CAA+Bx0D,GACpC,OAAO27E,EAAAA,aAAAA,OAAAA,MAAAA,+BAA4D37E,EACrE,CAUOsiF,yBAAAA,CAA0BC,EAA2Bh6E,GAC1D,MAAMi6E,EAAUroE,KAAKsoE,WAAWF,GAChCpoE,KAAK+gE,2BAA2Bz9D,IAAI+kE,EAASj6E,EAC/C,CAOOm6E,yBAAAA,CAA0BH,GAC/B,MAAMC,EAAUroE,KAAKsoE,WAAWF,GAChC,OAAOpoE,KAAK+gE,2BAA2BtoE,IAAI4vE,EAC7C,CAEQC,UAAAA,CAAWF,GACjB,OAAOA,EAAgB/zE,OAAOub,KAAK,IACrC,CA4BO44D,gCAAAA,CAAiC3iF,GACtCma,KAAKk6C,kCAAkCr0D,EACzC,CAMOuvB,MAAAA,CAAO3iB,GACZ+uE,EAAAA,aAAAA,MAAAA,mBAAyC/uE,EAC3C,CAEOg2E,sBAAAA,GACLjH,EAAAA,aAAAA,MAAAA,wBACF,CAaOtnB,iCAAAA,CACLr0D,EACA07E,EAGI,CAAC,GAELC,EAAAA,aAAAA,kCAAkD37E,EAAY07E,EAChE,CAEO1oB,mBAAAA,CACLpmD,EACAjD,EACA3J,EACA6iF,EAAiB,GACjBC,GAAmB,EACnBC,EAAkB,IAClBC,GAAsB,EACtBC,EAAwB,eAExB,MAAMh5C,EAAS9vB,KAAK+oE,kBAAkBt2E,EAAgBjD,GACtD,IAAKsgC,EAEH,YADAx2B,QAAQuM,KAAK,mCAAoCpT,EAAgBjD,GAInE,MAAM,MAAEu1E,GAAUj1C,GAGEjqC,EAChB,CAACA,GACDma,KAAK2hE,+BAA+BlvE,IAE5BjH,QAAQ3F,IAClB,MAAM,SAAEsE,IAAaizE,EAAAA,EAAAA,+BAA8Bv3E,GACnDsE,EAAS6+E,YAAYjE,GAErB4D,GACE3oE,KAAK2oE,iBACHl2E,EACAjD,EACA3J,EACA6iF,EACAE,EACAC,IAGR,CAEOF,gBAAAA,CACLl2E,EACAjD,EACA3J,EACAq6E,EAAQ,GACR0I,EAAkB,IAClBK,GAAa,EACbH,EAAwB,eAEpB9oE,KAAKghE,qBACPkI,cAAclpE,KAAKghE,qBAGrB,MAAMsG,EAAiBtnE,KAAKunE,2BAA2B90E,IAEnC5M,EAChB,CAACA,GACDma,KAAK2hE,+BAA+BlvE,IAE5BjH,QAAQ3F,IAClB,MAIM+Y,EAJ6BoB,KAAK/N,+BAA+BpM,EAAY,CACjF4M,mBAGgD,IAC5C,KAAEoQ,GAASjE,EACX5Q,EAAWs5E,EAAet5E,UAG9B6U,IAAS09D,GAAWvgE,KAAKmpE,mBAAmBlsD,KAAKjd,MAAQA,KAAKopE,kBAAkBnsD,KAAKjd,OAKrFxQ,EAHoBqT,IAAS09D,GAAWL,EAAQ,EAAIA,EAKpD+I,EACAj7E,EACAnI,EACA+iF,EACAhqE,IAGN,CAEQ4jE,sBAAAA,CAAuB38E,GAC7B,MAAMmS,EACJgI,KAAKxX,gBAAgBK,SAASH,2BAA2B0B,uBAAuBvE,GAClF,OAAKmS,IACHsB,QAAQuM,KAAK,oBAAoBhgB,gBAC1B,KAGX,CASQg8E,wCAAAA,CACNh8E,EACA4M,EACAoQ,EACA6L,GAEwB1O,KAAK/N,+BAA+BpM,EAAY,CACtE4M,iBACAoQ,SAEqC,GASvC2+D,EAAAA,aAAAA,OAAAA,WAAAA,wCACE37E,EACA,CACE4M,iBACAoQ,QAEF6L,GAZApV,QAAQyD,MACN,mFAaN,CAEQ+lE,oCAAAA,CAAqC9qE,EAAYlK,GAIvD,MAAO,CAAE80E,iBAFP5qE,EAAW6K,OAASwmE,GAAAA,aAAapgD,cAAgBjxB,EAAW6K,OAASwmE,GAAAA,aAAaC,UAEzDzG,qBADE,aAAc/0E,EAAa8+C,mBAAmB2zB,IAE7E,CAEA,8BAAcwC,CACZH,EACAC,EACA7qE,EACAlK,EACAjI,EACA4M,EACA82E,GAEA,IAAI7G,EAA0B6G,EAC1B5G,GAAc,EAElB,MAAM/5C,EAAUg6C,EAAmB5iE,KAAKwpE,yBAA2BxpE,KAAKypE,wBAUxE,QARG/G,0BAAyBC,qBAAsB/5C,EAAQ8gD,MAAM1pE,KAAM,CACpEhI,EACAlK,EACA+0E,EACAh9E,EACA4M,KAGK,CAAEiwE,0BAAyBC,cACpC,CAEA,8BAAc6G,CAAyBxxE,EAAYlK,EAAc+0E,GAC/D,OAAI7qE,EAAW6K,OAASwmE,GAAAA,aAAaC,UAC5B,CAAE5G,wBAAyBl+C,GAAAA,4BAA4BmlD,QAAShH,aAAa,UAE9E3iE,KAAK4pE,qBACT5xE,EACAlK,EACA+0E,GAEK,CAAEH,wBAAyBl+C,GAAAA,4BAA4Bue,SAAU4/B,aAAa,GAEzF,CAEA,6BAAc8G,CACZzxE,EACAlK,EACA+0E,EACAh9E,EACA4M,GAEA,GAAIowE,EAAsB,CACxB,MAAMF,QAAoB3iE,KAAK6pE,6BAA6B7xE,GAC5D,MAAO,CAAE0qE,wBAAyBl+C,GAAAA,4BAA4Bue,SAAU4/B,cAC1E,CAEA,IAAImH,EAAAA,GAAAA,GAA0CjkF,EAAY4M,GACxD,MAAO,CAAEiwE,wBAAyBl+C,GAAAA,4BAA4Bue,SAAU4/B,aAAa,GAGvF,MAAMA,QAAoB3iE,KAAK+pE,+BAC7B/xE,EACAlK,EACAjI,EACA4M,GAGF,MAAO,CAAEiwE,wBAAyBl+C,GAAAA,4BAA4Bue,SAAU4/B,cAC1E,CAEA,oCAAcK,CACZn9E,EACA4M,EACA82E,EACAzmC,EACA6/B,EACA3/B,GAIA,MAAMpkC,EAAiB,CACrBiE,KAAM0mE,EACN92E,iBACAuwC,OAAQ,CAAEC,gBAAiBH,KAAkBE,IAGzCgnC,EAAoBA,IACxBxI,EAAAA,aAAAA,+BAA+C37E,EAAY,CAAC+Y,IAE9D,GAAI+jE,EAAa,CACf,MAAM,oBAAExxE,GAAwB6O,KAAKxX,gBAAgBK,eAC/C,IAAIoZ,QAAcC,IACtB,MAAM,YAAEtW,GAAgBuF,EAAoBvG,UAC1CuG,EAAoBtG,OAAOkU,mBAC3B,KACEirE,IACAp+E,IACAsW,OAIR,MACE8nE,GAEJ,CACA,0BAAcJ,CACZz/E,EACA2D,EACA+0E,GAEA,GAAIA,EACF,OAGF,MAAMiE,EAAsB38E,EAAS02D,yBAC/BrtD,GAAWy2E,EAAAA,GAAAA,qBAAoBn8E,EAAa2E,gBAC5Cy3E,EAAWrxD,EAAAA,MAAM45C,SAASj/D,EAAS,IAErC02E,GAAUv2E,sBAAwBmzE,SAC9BqD,EAAAA,GAAAA,GAA6Br8E,EAEvC,CAEA,kCAAc+7E,CAA6B1/E,GACzC,MAAM,oBAAEgH,EAAmB,2BAAEzI,GAA+BsX,KAAKxX,gBAAgBK,SAE3Eo4C,EADQ9vC,EAAoBqO,WACP6Y,UAAU5f,IAAItO,EAASiO,IAE5CgyE,EAAuBjgF,EAAS61D,sBAChCqqB,EAAoBlgF,EAASmgF,mBAC7BC,EAAgB7hF,EAA2B0B,uBAAuBD,EAASiO,KAC3E,QAAE1R,GAAY6jF,EAEdC,EAAiCA,KACrC,MAAMC,EAAiB/hF,EAA2B0B,uBAAuBD,EAASiO,IAClFqyE,EAAevqB,oBAAoBkqB,GACnCK,EAAezjC,iBAAiBqjC,GAChCI,EAAe/tE,SAEfhW,EAAQwB,oBACN6+E,EAAAA,MAAAA,OAAe2D,2BACfF,IAkBJ,OAdA9jF,EAAQuB,iBACN8+E,EAAAA,MAAAA,OAAe2D,2BACfF,GAGFr5E,EAAoBsoD,0BAA0B,CAC5C5zD,WAAYsE,EAASiO,GACrBgE,uBAAwB6kC,EAAa7kC,uBACrCoc,gBAAiB,IACZyoB,EAAazoB,gBAChBC,aAAc4wD,GAAAA,aAAapgD,iBAIxB,CACT,CAEA,oCAAc8gD,CACZ5/E,EACA2D,EACAjI,EACA4M,GAEA,MAAMe,GAAWy2E,EAAAA,GAAAA,qBAAoBn8E,EAAa2E,gBAC5Cq0E,EAAsB38E,EAAS02D,yBAC/BqpB,EAAWrxD,EAAAA,MAAM45C,SAASj/D,EAAS,IAEzC,GACE02E,GAAUv2E,qBACVmzE,GACAoD,EAASv2E,sBAAwBmzE,EACjC,CACA,MAAMnE,QAAoB3iE,KAAK6pE,6BAA6B1/E,GAO5D,OANAwgF,EAAAA,GAAAA,2CACE9kF,EACA4M,EACA+xB,GAAAA,4BAA4Bue,UAGvB4/B,CACT,CACF,CAEQwE,uBAAAA,CAAwB7D,GAC9B9B,EAAAA,aAAAA,iBAAiC,CAAC8B,GACpC,CAEQ4D,0BAAAA,CACNz0E,EACAi1E,GAEAlG,EAAAA,aAAAA,oBAAoC,CAAC,CAAE/uE,iBAAgBi1E,YACzD,CAEQpF,iCAAAA,CACNz8E,EACA+kF,GAEA,MAAM,eAAEn4E,EAAc,KAAEoQ,EAAI,OAAE6uB,EAAM,QAAEm5C,GAAYD,GAC5C,cAAE9nC,GAAkB8nC,EAEpBE,EAA6E,CAAC,EAE9Eh9E,EAAe0zE,EAAAA,aAAAA,MAAAA,gBAAsC/uE,GAE3D,IAAK3E,EACH,MAAM,IAAItB,MAAM,wBAAwBiG,gBAG1C,MAAMs4E,EAAat8E,OAAOsgB,KAAKjhB,EAAaE,UAE5C,IAAK,MAAMu/C,KAAaw9B,EAAY,CAClC,MAAMv7E,EAAe+vC,SAASgO,EAAW,IAEnCxxC,EAAQylE,EAAAA,aAAAA,OAAAA,MAAAA,qBACZ37E,EACA4M,EACAjD,GAGIkf,EAAY8yD,EAAAA,aAAAA,OAAAA,WAAAA,0BAChB37E,EACA,CACE4M,iBACAoQ,QAEFrT,GAGFs7E,EAAwBt7E,GAAgB,CACtCuM,QACAvM,eACA6G,QAAS0F,EAAM,GACf8uE,QAASn8D,EAEb,CAEA,MAAMs8D,EAASxJ,EAAAA,aAAAA,OAAAA,MAAAA,SAAsC,CACnD37E,aACA4M,iBACAoQ,SAKF,MAAO,CACLzK,GAHS,GAAG3F,KAAkBoQ,KAAQhd,IAItC4M,iBACA9F,MAAOmB,EAAanB,MACpB+kC,SACA7uB,OACAgoE,UACA78E,SAAU88E,EACVE,SACAnlF,aACAi9C,gBACAE,OAAQ,CAAC,EAEb,CAEQg/B,wBAAAA,GACN1rD,EAAAA,YAAYruB,iBACVu4E,EAAAA,MAAAA,OAAoBnwE,sBACpB2P,KAAKihE,mCAGP3qD,EAAAA,YAAYruB,iBACVu4E,EAAAA,MAAAA,OAAoBlwE,qBACpB0P,KAAKihE,mCAGP3qD,EAAAA,YAAYruB,iBACVu4E,EAAAA,MAAAA,OAAoBjwE,2BACpByP,KAAKkhE,uCAGP5qD,EAAAA,YAAYruB,iBACVu4E,EAAAA,MAAAA,OAAoBruE,qCACpB6N,KAAK8hE,iDAGPxrD,EAAAA,YAAYruB,iBACVu4E,EAAAA,MAAAA,OAAoBW,kCACpBnhE,KAAK8hE,iDAGPxrD,EAAAA,YAAYruB,iBACVu4E,EAAAA,MAAAA,OAAoBpuE,oCACpB4N,KAAK8hE,iDAGPxrD,EAAAA,YAAYruB,iBACVu4E,EAAAA,MAAAA,OAAoBE,mBACpB1gE,KAAKohE,+BAET,CAEQmG,0BAAAA,CAA2B90E,GACjC,OAAO+uE,EAAAA,aAAAA,MAAAA,gBAAsC/uE,EAC/C,CAEQ02E,kBAAAA,CACN35E,EACA0wE,EACA+I,EACAj7E,EACAnI,EACA+iF,EACAhqE,GAEA,MAAM,eAAEnM,GAAmBmM,EAK3B,GAAIqqE,EACF,MAAM,IAAIz8E,MAAM,uCAUlB,MAAM,UAAEguD,GAAcx6C,KAAKshE,SAAS,CAClCz7E,aACA4M,iBACAoQ,KAAM09D,GACN/wE,iBAGF,IAAIy7E,EAAoB,KACxB,MAAMC,EAAaC,IACC,OAAdF,IACFA,EAAYE,GAGd,MAAMC,EAAUD,EAAYF,EACtBxnD,EAAWvuB,KAAK2B,IAAIu0E,EAAUxC,EAAiB,GAErDpH,EAAAA,aAAAA,OAAAA,MAAAA,SACE,CACE/uE,iBACAjD,eACAqT,KAAM09D,IAER,CACE/lB,UAAWwlB,GAAcv8C,EAAU+2B,KAInC/2B,EAAW,EACb4nD,sBAAsBH,GAEtB1J,EAAAA,aAAAA,OAAAA,MAAAA,SACE,CACE/uE,iBACAjD,eACAqT,KAAM09D,IAER,CAAC,IAKP8K,sBAAsBH,EACxB,CAEQ9B,iBAAAA,CACN55E,EACA0wE,EACA+I,EACAj7E,EACAnI,EACA+iF,EACAhqE,GAEA,MAAM,eAAEnM,GAAmBmM,EACrBqsE,EAAYK,YAAYrxC,MAMxBmmC,EAJYoB,EAAAA,aAAAA,OAAAA,MAAAA,SAAsC,CACtD3+D,KAAM49D,KAG2B/lB,aAE7BulB,EAAW/qE,KAAK4B,IAAuB,IAAnBspE,EAAwB,GAE5CmL,EAAWC,IACf,MAAM/nD,GAAY+nD,EAAcP,GAAarC,EAC7C,GAAInlD,GAAY,EAEd,YADA+9C,EAAAA,aAAAA,OAAAA,MAAAA,qBAIF,MAAMiK,EAAmBtL,GAAsB18C,EAAUw8C,EAAUG,GAEnEoB,EAAAA,aAAAA,OAAAA,MAAAA,SACE,CACE/uE,iBACAjD,eACAqT,KAAM49D,IAER,CACE/lB,aAAc+wB,IAIlBJ,sBAAsBE,IAGxBF,sBAAsBE,EACxB,CA2BQrD,iBAAAA,CAAkBz1E,EAAwBjD,GAChDgyE,EAAAA,aAAAA,aAAAA,sBAAmD/uE,EAAgBjD,EACrE,CAEQk8E,yBAAAA,CAA0Bt4E,GAGhC,MAAO,GAFoBA,EAAWu4E,oBAAsBtL,MAE5BjtE,EAAWR,uBAC7C,CAEQm2E,iBAAAA,CAAkBt2E,EAAgBjD,GACxC,MAAM1B,EAAekS,KAAKnB,gBAAgBpM,GAE1C,IAAK3E,EACH,OAGF,MAAM,SAAEE,GAAaF,GAEf,YAAEuB,GAAgBrB,EAASwB,GAEjC,IAAKH,IAAgBA,GAAaygC,SAAWzgC,GAAa4+B,YAAY6B,OACpE,OAGF,MAAM,OAAEA,GAAWzgC,EAEnB,OAAKygC,GACI,CACLi1C,MAAO11E,EAAY4+B,WAAW6B,OAAOjhC,MAK3C,CAEQ84E,uBAAAA,CAAwBl1E,EAAwBjD,EAAsBtG,GAC5Es4E,EAAAA,aAAAA,eAAAA,sBAAqD/uE,EAAgBjD,EAActG,EACrF,CAEQ2+E,qBAAAA,CACNhiF,EACA4M,EACAjD,EACAkf,EACA7L,GAEA2+D,EAAAA,aAAAA,OAAAA,WAAAA,0BACE37E,EACA,CACE4M,iBACAoQ,QAEFrT,EACAkf,EAEJ,CAEQu5D,gBAAAA,CAAiBx1E,EAAwBjD,EAAsBotD,GACrE,MAAM9uD,EAAekS,KAAKunE,2BAA2B90E,IAC/C,SAAEzE,GAAaF,EAErBE,EAASwB,GAAc7C,MAAQiwD,EAE/B4kB,EAAAA,aAAAA,oBAAoC,CAClC,CACE/uE,iBACAi1E,QAAS,CACP15E,cAIR,EAoCD49E,GA3uDK/K,GAAAA,GACGvE,aAAe,CACpB3pD,KAAM,sBACN4pD,QAAS,sBACTC,OAAQA,EAAGh0E,qBACF,IAAIq4E,GAAoB,CAAEr4E,qBAwuDvC,ME9zDA,GF8zDA,GGtzDe,SAASqjF,GACtBpzD,EACApsB,GAEA,MAAMy/E,EACJz/E,IAAc,IAAIosB,cAAcqR,eAAiBrR,EAAaqR,cAChE,GAbY,UAaRgiD,EACF,OAAO/xE,EAAAA,MAAAA,aAAmBgyE,MAG5B,GAbY,UAaRD,EACF,OAAO/xE,EAAAA,MAAAA,aAAmBiyE,MAE5B,GAfiB,eAebF,EACF,OAAO/xE,EAAAA,MAAAA,aAAmBkyE,YAG5B,GAvBa,WAuBTH,GAtBe,iBAsBiBA,EAClC,OAAO/xE,EAAAA,MAAAA,aAAmBkvB,aAG5B,GAzBgB,aAyBZ6iD,EACF,OAAO/xE,EAAAA,MAAAA,aAAmBuvE,UAG5B,MAAM,IAAI98E,MACR,0BAA0BisB,uDAE9B,C,OC/BA,MAAMyzD,GAaJtsE,WAAAA,CAAYpX,GAA2C,KAJvD2jF,cAAuC,IAAIhpE,IAAK,KAChDipE,eAAwC,IAAIjpE,IAAK,KACxC3a,qBAAe,EAGtBwX,KAAKxX,gBAAkBA,CACzB,CAEO6jF,YAAAA,GACL,OAAOC,EAAAA,MAAUD,cACnB,CAEOE,iBAAAA,GACL,OAAOD,EAAAA,MAAUE,mBACnB,CAEA,wBAAaC,CACXpgF,EACAmsB,EACAhB,EACAk1D,GAEA,MAEMC,EAAmBd,GAFJrzD,EAAgBC,aAE6BpsB,GAClE,IAAIugF,EA0BJ,OApBEA,EAHAD,IAAqB5yE,EAAAA,MAAAA,aAAmBkvB,cACxC0jD,IAAqB5yE,EAAAA,MAAAA,aAAmBuvE,gBAEnBtpE,KAAK6sE,uBAAuBr1D,EAAYnrB,EAAasgF,GACjEA,IAAqB5yE,EAAAA,MAAAA,aAAmBgyE,YAE5B/rE,KAAK8sE,sBACxBt1D,EACAnrB,EACAqgF,EACAC,SAGmB3sE,KAAK+sE,sBACxBv1D,EACAnrB,EACAqgF,EACAC,GAIJC,EAAan0D,aAAek0D,EAErBC,CACT,CAEA,4BAAaI,CACXJ,EACAK,EACAz1D,EACAzrB,GAEA,GAAI6gF,EAAan0D,eAAiB1e,EAAAA,MAAAA,aAAmBgyE,MAAO,CAC1D,MAAM34E,EAAarH,EAAkByG,mBAAmBy6E,GAClDz5E,EAAWwM,KAAKktE,6BAA6B95E,EAAYokB,GAS/D,OANAhkB,EAAShI,QAAQsI,IACXw4E,EAAAA,MAAUryD,mBAAmBnmB,IAC/Bw4E,EAAAA,MAAUa,sBAAsBr5E,KAI7B,CACL2kB,aAAc1e,EAAAA,MAAAA,aAAmBgyE,MACjC1rE,KAAM,CACJyN,iBAAkB1a,EAAW0a,iBAC7Blb,sBAAuBq6E,EACvBz5E,YAGN,CAGA,MAAMyE,EAAW,GAAGooE,MAAwB4M,IAEtCl0D,EAASuzD,EAAAA,MAAUxzD,UAAU7gB,GAE/B8gB,IACEA,EAAOvlB,UAITulB,EAAOvlB,SAAShI,QAAQsI,IAClBw4E,EAAAA,MAAUryD,mBAAmBnmB,IAC/Bw4E,EAAAA,MAAUa,sBAAsBr5E,EAAS,CAAEs5E,OAAO,MAQxDd,EAAAA,MAAUe,aAAa5iD,OAAOxyB,GAC9B+H,KAAKosE,eAAe3hD,OAAOxyB,IAG7B,MAAM5L,EAAcugF,EAAavsE,KAAKxW,IAAI,EAAG+I,2BAC3C7G,EAAkByG,mBAAmBI,IASvC,aAN8BoN,KAAK6sE,uBACjCr1D,EACAnrB,EACAugF,EAAan0D,aAIjB,CAEA,2BAAcs0D,CACZv1D,EACAnrB,EACAihF,EACA70D,GAIA,MAAOrlB,GAAc/G,EAChB+G,EAAWI,WACdJ,EAAWm6E,UAAYvtE,KAAKktE,6BAA6B95E,EAAYokB,IAEvE,MAAQhkB,SAAU6M,EAAMoY,aAAc+0D,GAAmBp6E,EACzD,MAAO,CACLqlB,aAAc+0D,GAAkB/0D,EAChCpY,KAAMhU,EAEV,CAEA,2BAAcygF,CACZt1D,EACAnrB,EACAqgF,EACAj0D,GAEA,MAAM,sBAAE0K,GAA0BnjB,KAAKxX,gBAAgBK,SACjDyJ,EAAqBjG,EAAY8G,OAAOR,GAAMA,EAAG41C,qBACvD,IAAK,MAAMklC,KAAqBn7E,EAC9B,GAAIm7E,EAAkBv4C,MAAQu4C,EAAkBv4C,gBAAgBw4C,SAAU,CACxE,MAAM,0BAAEzqD,GAA8BjjB,KAAKxX,gBAAgBK,SACrD69B,EAAUzD,EAA0B0D,yBAC1C,UACQ8mD,EAAkBv4C,KAAK,CAAExO,WACjC,CAAE,MAAO6F,GACPpJ,EAAsBO,KAAK,CACzBrhB,MAAO,2BACPgnB,QAASkD,EAAElD,QACXxmB,KAAM,UAERvJ,QAAQD,MAAMkzB,EAChB,CACF,CAIF,MAAMohD,EAAoB,GAC1B,IAAK,MAAMv6E,KAAc/G,EAAa,CACpC,MAAM,sBAAEuG,EAAqB,iBAAEkb,EAAgB,iBAAE8/D,GAAqBx6E,EAEtE,GAAIA,EAAW8hC,MAAQ9hC,EAAW8hC,gBAAgBw4C,SAAU,CAC1D,MAAM,0BAAEzqD,GAA8BjjB,KAAKxX,gBAAgBK,SACrD69B,EAAUzD,EAA0B0D,yBAC1C,UACQvzB,EAAW8hC,KAAK,CAAExO,WAC1B,CAAE,MAAO6F,GACPpJ,EAAsBO,KAAK,CACzBrhB,MAAO,2BACPgnB,QAASkD,EAAElD,QACXxmB,KAAM,UAERvJ,QAAQD,MAAMkzB,EAChB,CACF,CAEA,IAAI4/C,EAAgBnsE,KAAKmsE,cAAc1zE,IAAIrF,EAAWR,uBAEjDu5E,IACHA,EAAgBnsE,KAAKktE,6BAA6B95E,EAAYokB,GAE9DpkB,EAAWI,SAAW24E,EACtBnsE,KAAKmsE,cAAc7oE,IAAIlQ,EAAWR,sBAAuBu5E,IAG3DwB,EAAkBjiF,KAAK,CACrBoiB,mBACAlb,wBACAg7E,mBACAp6E,SAAU24E,EACVO,qBAEJ,CAEA,MAAO,CACLj0D,eACApY,KAAMstE,EAEV,CAEA,4BAAcd,CACZr1D,EACAnrB,EACAosB,GAKA,MAAMo1D,EAAa,GAEnB,IAAK,MAAMz6E,KAAc/G,EAAa,CACpC,MAAM,SAAE4E,GAAamC,EACf06E,EAA+B,SAAb78E,EAClB88E,EAAqB,QAAb98E,EAOd,GAAImC,EAAW8hC,MAAQ9hC,EAAW8hC,gBAAgBw4C,SAAU,CAC1D,MAAM,0BAAEzqD,GAA8BjjB,KAAKxX,gBAAgBK,SACrD69B,EAAUzD,EAA0B0D,yBAE1C,UACQvzB,EAAW8hC,KAAK,CAAExO,WAC1B,CAAE,MAAO6F,GACP,MAAM,sBAAEpJ,GAA0BnjB,KAAKxX,gBAAgBK,SACvDs6B,EAAsBO,KAAK,CACzBrhB,MAAO,2BACPgnB,QAASkD,EAAElD,QACXxmB,KAAM,UAERvJ,QAAQD,MAAMkzB,EAChB,CAIA,IAAKuhD,EAAiB,CACpBD,EAAWniF,KAAK,CACdsiF,iBAAkB56E,EAAW0a,iBAC7Blb,sBAAuBQ,EAAWR,wBAIpC,QACF,CACF,CAEA,MACMqF,EAAW,GADU7E,EAAWu4E,oBAAsBtL,MAClBjtE,EAAWR,wBACrD,IAAIw5E,EAAiBpsE,KAAKosE,eAAe3zE,IAAIrF,EAAWR,uBACpDmmB,EAASuzD,EAAAA,MAAUxzD,UAAU7gB,GAI5B61E,GAAoBC,GAAW3B,GAAmBrzD,IACrDqzD,EAAiBpsE,KAAKiuE,8BAA8B76E,EAAYokB,GAEhEuB,QAAe5Z,EAAAA,aAAAA,qBAAkClH,EAAU,CACzDzE,SAAU44E,IAGZpsE,KAAKosE,eAAe9oE,IAAIlQ,EAAWR,sBAAuBw5E,GAG1Dh5E,EAAWI,SAAW44E,GAGxByB,EAAWniF,KAAK,CACdoiB,iBAAkB1a,EAAW0a,iBAC7Blb,sBAAuBQ,EAAWR,sBAClCmmB,SACA9gB,WACAzE,SAAU44E,EACVpzD,gBAAiB5lB,EAAW4lB,iBAEhC,CAEA,MAAO,CACLP,eACApY,KAAMwtE,EAEV,CAEQX,4BAAAA,CAA6B95E,EAAYokB,GAC/C,OAAOA,EAAW02D,yBAAyB96E,EAC7C,CAEQ66E,6BAAAA,CAA8B76E,EAAYokB,GAChD,GAAIpkB,EAAWI,SACb,OAAOJ,EAAWI,SAKpB,OAFsBwM,KAAKktE,6BAA6B95E,EAAYokB,EAGtE,EACD22D,GAzTKjC,GAAAA,GACG5P,aAAe,CACpB3pD,KAAM,0BACN4pD,QAAS,0BACTC,OAAQA,EAAGh0E,qBACF,IAAI0jF,GAAwB1jF,IAsTzC,MChUA,GDgUA,GElUM4lF,GAAsB,iCCiG5B,MACMC,GAAuB,UAIvBC,GAAeA,EAAGjuE,OAAMhN,gBAAeS,UAAS3J,eACpD,GAAI2J,GAAWuM,EAAKutE,kBAAoBvtE,EAAK7M,SAC3C,QAAS6M,EAAK7M,SAAS2E,KAAKo2E,GAAUA,IAAWz6E,GAGnD,GAAIA,IAAYuM,EAAKpI,UAAY9N,aAAoBua,EAAAA,gBAAiB,CAGpE,MAFwBva,EAASI,oBAG/B,OAAO,EAGT,MAAMikF,EAAW52E,EAAAA,UAAAA,aAAuB9D,GAGxC,GAFmB3J,EAASskF,YAAYD,GAGtC,OAAO,CAEX,CAEA,OAAInuE,EAAKzN,wBAA0BS,GAkPrC,SA3OA,MASEuM,WAAAA,CAAY/Z,GAAoB,KARxBA,WAAa,GAAE,KACfa,aAAO,OACP8xB,qBAAe,OACfgG,uBAAiB,OACjBouD,kBAAY,OACZ9qC,uBAAiB,OACjB6I,mBAAa,OAiCdgsB,QAAU,KACf32D,KAAKtZ,QAAU,KACfsZ,KAAK4sE,aAAe,KACpB5sE,KAAKwY,gBAAkB,KACvBxY,KAAKwe,kBAAoB,MAlCzBxe,KAAKna,WAAaA,EAClBma,KAAK0uE,yBAAyB,CAAC,GAC/B1uE,KAAK2uE,2BAA2B,CAAC,CAAC,GACpC,CAMOC,QAAAA,CAASv7E,EAAuBS,GACrC,IAAKkM,KAAK4sE,cAAcvsE,KACtB,OAAO,EAGT,MAAM,SAAElW,IAAaizE,EAAAA,EAAAA,+BAA8Bp9D,KAAKna,aAAe,CAAC,EAExE,OAAIma,KAAK4sE,aAAavsE,KAAKnW,SAChB8V,KAAK4sE,aAAavsE,KAAKlI,KAAKkI,GACnCiuE,GAAa,CAAEjuE,OAAMhN,gBAAeS,UAAS3J,cAI1CmkF,GAAa,CAClBjuE,KAAML,KAAK4sE,aAAavsE,KACxBhN,gBACAS,UACA3J,YAEJ,CASO0kF,oBAAAA,CAAqB/sC,GAC1B9hC,KAAK8hC,kBAAoBA,CAC3B,CAEOgtC,oBAAAA,GACL,OAAO9uE,KAAK8hC,iBACd,CAEOitC,aAAAA,CAAclpF,GACnBma,KAAKna,WAAaA,CACpB,CAEOmpF,UAAAA,CAAWtoF,GAChBsZ,KAAKtZ,QAAUA,CACjB,CAEOuoF,eAAAA,CAAgBrC,GACrB5sE,KAAK4sE,aAAeA,CACtB,CAEOsC,eAAAA,GACL,OAAOlvE,KAAK4sE,YACd,CAEOuC,UAAAA,GACL,OAAOnvE,KAAKtZ,OACd,CAEO0oF,aAAAA,GACL,OAAOpvE,KAAKna,UACd,CAEOykF,gBAAAA,GACL,OAAOtqE,KAAKwY,iBAAiBmyB,aAC/B,CAEOgkC,0BAAAA,CACLU,GAGA,MAAM7wD,EAAoBxe,KAAKsvE,qBAAqBD,GAIpD,OAFArvE,KAAKuvE,qBAAqB/wD,GAEnBxe,KAAKwe,iBACd,CAEOgxD,aAAAA,CAAc58E,GAInB,IAAIg6E,EAAe5sE,KAAKkvE,kBAExB,OACEtC,EAAan0D,eAAiB1e,EAAAA,MAAAA,aAAmBkvB,cACjD2jD,EAAan0D,eAAiB1e,EAAAA,MAAAA,aAAmBuvE,UAG1CsD,EAAavsE,KAAKjG,KACvB,EAAGxH,sBAAuB6kE,KAAYA,IAAU7kE,GAK7Cg6E,EAAavsE,KAAKzN,wBAA0BA,CACrD,CAOO87E,wBAAAA,CACLe,EACAC,GAEA,MAAMC,EAAmBD,GAA0BD,EAAqBh3D,cA3J9D,SA4JJ,gBAAEuP,GAAoBynD,EAC5B,IAAI,YAAE7pC,EAAcyoC,IAAyBoB,EAE7C,MAAM3rC,EC1PK,SAAmCA,GAChD,GAAIA,EACF,OAAQA,EAAYha,eAClB,IAPQ,QAQN,OAAO/vB,EAAAA,MAAAA,gBAAsBywD,MAC/B,IARW,WAST,OAAOzwD,EAAAA,MAAAA,gBAAsB0wD,SAC/B,IATU,UAUR,OAAO1wD,EAAAA,MAAAA,gBAAsB2wD,QAC/B,QACE,OAAO3wD,EAAAA,MAAAA,gBAAsB6wD,YAInC,OAAO7wD,EAAAA,MAAAA,gBAAsB6wD,WAC/B,CD2OwBglB,CAA0BH,EAAqB3rC,aAE7DrrB,EAAeozD,GAA2B8D,GAehD,OAbK/pC,IACHA,EAAcyoC,IAGhBruE,KAAK6vE,mBAAmB,IACnBJ,EACH5pF,WAAYma,KAAKna,WACjB4yB,aAAcA,EACdqrB,cACA8B,cACA5d,oBAGKhoB,KAAKwY,eACd,CAEOq3D,kBAAAA,CAAmBr3D,GACxBxY,KAAKwY,gBAAkBA,CACzB,CAEO/gB,kBAAAA,GACL,OAAOuI,KAAKwY,eACd,CAEOs3D,kBAAAA,GACL,MAAM,gBAAE9nD,GAAoBhoB,KAAKwY,gBACjC,OAAOwP,CACT,CAEOunD,oBAAAA,CAAqB/wD,GAC1Bxe,KAAKwe,kBAAoBA,CAC3B,CAEOuxD,aAAAA,GAEL,OADA/vE,KAAKwY,gBAAgB8rC,aAAe,GAC7BtkD,KAAKwY,gBAAgB8rC,UAC9B,CAEO0rB,oBAAAA,GACL,OAAOhwE,KAAKwe,iBACd,CAEO8rC,eAAAA,GACL,OAAOtqD,KAAKwY,gBAAgBC,cAAgB1e,EAAAA,MAAAA,aAAmBgyE,KACjE,CAEOkE,cAAAA,GACL,OAAOjwE,KAAKwY,gBAAgBotB,WAC9B,CAEOsqC,aAAAA,GACL,OAAOlwE,KAAKwY,gBAAgB9gB,YAAc,CAAC,EAAG,EAAG,EACnD,CAEOsyD,cAAAA,GACL,OAAOhqD,KAAKwY,gBAAgBsrB,WAC9B,CAEOkb,cAAAA,CAAelb,GACpB9jC,KAAKwY,gBAAgBsrB,YAAcA,CACrC,CAEOqsC,cAAAA,GACL,OAAOnwE,KAAKwY,gBAAgB43D,WAC9B,CAEOC,sBAAAA,GACL,OAAOrwE,KAAKwY,gBAAgB6rC,mBAC9B,CAIQirB,oBAAAA,CACN5/E,EAA4D,CAAC,CAAC,IAE9D,MAAM8uB,EAA8C,GAyBpD,OAvBA9uB,EAAQlE,QAAQ6G,IACd,IAAIi+E,EAASj+E,GAAM3C,SAAW2C,EACzBi+E,IACHA,EAAS,CACPjT,eAAWppE,EACXs8E,mBAAet8E,EACfkF,cAAUlF,EACVmxC,IAAK,CAAC,EACNorC,aAAa,IAGjB,MAAMnT,EEtVG,SAAiCA,GAC9C,IAAKA,EACH,OAAOtjE,EAAAA,MAAAA,WAAiB02E,UAG1B,GATU,QASNpT,EAAUvzC,cACZ,OAAO/vB,EAAAA,MAAAA,WAAiB22E,wBAG1B,GAZY,UAYRrT,EAAUvzC,cACZ,OAAO/vB,EAAAA,MAAAA,WAAiB42E,wBAG1B,GAfU,QAeNtT,EAAUvzC,cACZ,OAAO/vB,EAAAA,MAAAA,WAAiB62E,wBAG1B,MAAM,IAAIpkF,MAAM,2BAA2B6wE,IAC7C,CFoUwBwT,CAAwBP,EAAOjT,WAEjD7+C,EAAkB9yB,KAAK,CACrB05C,IAAKkrC,EAAOlrC,IACZorC,YAAaF,EAAOE,YACpBr3E,SAAUm3E,EAAOn3E,SACjBo3E,cAAeD,EAAOC,cACtBlT,YACA3Y,cAAe4rB,EAAO5rB,kBAInBlmC,CACT,GGzWF,IAIKsyD,GAAW,SAAXA,GAAW,OAAXA,EAAW,cAAXA,EAAW,YAAXA,EAAW,gBAAXA,CAAW,EAAXA,IAAW,IAShB,Y,OC0BA,MAAMjmF,GAAS,CACbwqD,sBAAuB,wDACvB07B,yBAA0B,4DAOfC,GAAmB,CAAEC,gBAAgB,EAAMC,iBAAiB,GAMzE,MAAMh/D,WAAmC8hB,EAAAA,GAyBvCp0B,WAAAA,CAAYpX,GACVwb,MAAMnZ,IAAQ,KAfhBk3C,qBAAe,OACfovC,cAA2C,IAAIhuE,IAAK,KACpDiuE,gCAA0B,OAC1BC,qBAA8C,IAAIluE,IAAK,KACvDmuE,kCAAuE,IAAInuE,IAE3E,KACA3a,gBAA4C,KAAI,KAEhD+oF,YAAc,GAAE,KAChBC,oBAAsB,KAAI,KAC1BC,gBAAkB,GAAE,KACpBC,kBAAoB,KAAI,KAQxBtuD,4BAAsB,OACtBuuD,mBAAa,OACbC,uBAAiB,OACjBC,yBAAmB,OACnBC,2BAAqB,OACrBC,gBAAU,OACVC,gCAA0B,OAC1Bl/E,yBAAmB,EAXjBkN,KAAK+hC,gBAAkB,KACvB/hC,KAAKoxE,2BAA6B,KAClCpxE,KAAKxX,gBAAkBA,CACzB,CAeOypF,cAAAA,CAAepsF,EAAoBqsF,GACxC,MAAMl7E,EAAe,IAAIm7E,GAAatsF,GACtCmR,EAAag4E,WAAWkD,GACxBlyE,KAAKmxE,cAAc7tE,IAAIzd,EAAYmR,EACrC,CAEOykE,cAAAA,GACL,OAAO1sE,MAAMmf,KAAKlO,KAAKmxE,cAAcpiE,OACvC,CAMOnM,kBAAAA,GAEL,MAAMm/B,GAAkBn/B,EAAAA,EAAAA,oBAAmBwrE,IAE3C,OAAIrsC,GACF/hC,KAAK+hC,gBAAkBA,EAChB/hC,KAAK+hC,kBAGTA,IAAmBA,EAAgBqwC,mBACtCpyE,KAAK+hC,gBAAkB,IAAIswC,EAAAA,gBAAgBjE,KAGtCpuE,KAAK+hC,gBACd,CAMOrsB,MAAAA,GAWL,GAL2B3mB,MAAMmf,KAAKlO,KAAKmxE,cAAc/iE,UAAU6oB,MAAMjgC,IACvE,MAAMtQ,EAAUsQ,EAAam4E,aAE7B,OAA+B,IAAxBzoF,EAAQ4rF,aAA8C,IAAzB5rF,EAAQ6rF,eAI5C,YADAj5E,QAAQuM,KAAK,8CAIf,MAAM2sE,EAAkCzjF,MAAMmf,KAAKlO,KAAKmxE,cAAc/iE,UAAUjb,OAC9E6D,GAAgBA,EAAaszD,oBAAsByc,EAAAA,MAAAA,aAAqBgF,OACxE7hF,OAEIuoF,EAAmC1jF,MAAMmf,KAAKlO,KAAKmxE,cAAc/iE,UAAUjb,OAC/E6D,GAAgBA,EAAaszD,oBAAsByc,EAAAA,MAAAA,aAAqB99C,cACxE/+B,OAGAsoF,GAlHwC,IAmHxCC,GAlHyC,GA0HzCzyE,KAAK0yE,gBACL1yE,KAAK2yE,yBACL3yE,KAAKuxE,YAAc,GACnBzpF,aAAakY,KAAKwxE,sBAElBxxE,KAAK4yE,8BAET,CAKOjc,OAAAA,GACL32D,KAAK6yE,wBACL7yE,KAAKoxE,2BAA6B,KAClC,IACEpxE,KAAK+hC,iBAAiB40B,WACxB,CAAE,MAAOpqC,GACPjzB,QAAQuM,KAAK,iCAAkC0mB,EACjD,CACAvsB,KAAKqxE,qBAAqBl0D,QAC1Bnd,KAAK+hC,gBAAkB,KACvBlpB,EAAAA,MAAMi6D,YACR,CAYO9uC,cAAAA,CAAen+C,GACpBma,KAAK+hC,iBAAiBiC,eAAen+C,GAGrCma,KAAKmxE,cAAc1mD,OAAO5kC,GAC1Bma,KAAKqxE,qBAAqB5mD,OAAO5kC,EACnC,CAUOktF,gBAAAA,CAAiBltF,EAAoBoiC,GAC1C,MAAM99B,EAAW6V,KAAK5V,uBAAuBvE,GAI7C,IAAKsE,IAAa89B,EAChB,OAGF,MAAM,gBAAEG,EAAe,qBAAEF,EAAoB,yBAAEI,GAA6BL,EAK5EjoB,KAAKgzE,6BAA6B7oF,EAAUm+B,GAE5CtoB,KAAKizE,oBAAoB9oF,EAAUi+B,GACnCpoB,KAAKkzE,yBAAyB/oF,EAAU,IAAK+9B,EAAsBriC,cACrE,CAUO6uD,iBAAAA,EAAkB,WAAE7uD,IACzB,MAAMmiC,EAAkBhoB,KAAK8vE,mBAAmBjqF,IAC1C,iBAAEm7C,GAAqBhhC,KAAKxX,gBAAgBK,SAC5Co1E,EAAgBj9B,EAAiBgE,4BAA4Bn/C,GAEnE,IAAKmiC,GAA2D,IAAxCv5B,OAAOsgB,KAAKiZ,GAAiB99B,OACnD,OAAO,KAGT,MAAM,kBAAEm+B,EAAiB,uBAAEF,EAAsB,2BAAEI,GACjDP,EAEIE,EAAuBloB,KAAKmzE,yBAAyBttF,GACrDuiC,EAAkBpoB,KAAKozE,oBAAoBvtF,GAC3CyiC,EAA2BtoB,KAAKqzE,6BAA6BxtF,IAE7D,mBAAEytF,GAAuBrvD,GAAAA,EAAwBzkB,YACjD,wBAAEgrC,GAA4BnmB,GAAAA,EAA6B7kB,YAC3D,iBAAE+zE,GAAqBC,GAAAA,EAAsBh0E,YAC7C,4BAAEi0E,GAAgCtvD,GAAAA,EAAiC3kB,WAErE6oB,GACFirD,EAAmBjrD,EAAmBD,GAGpCD,GACFqiB,EAAwBriB,EAAwBD,GAG9CK,GACFkrD,EAA4BlrD,EAA4BD,GAGtD21C,GAAe/zE,QACjBqpF,EACE1tF,EACAo4E,EAAcp0E,IAAIoqD,IAAgB,CAChC77C,GAAI67C,EAAa77C,GACjBmnE,gBAAiB,IAAItrB,EAAaurB,sBAClCC,gBAAiB,IAAIxrB,EAAayrB,yBAI1C,CAOOn1B,gBAAAA,CAAiB1kD,GAKtB,MAAO,CACLqiC,qBAL2BloB,KAAKmzE,yBAAyBttF,GAMzDuiC,gBALsBpoB,KAAKozE,oBAAoBvtF,GAM/CyiC,yBAL+BtoB,KAAKqzE,6BAA6BxtF,GAOrE,CAEQiqF,kBAAAA,CAAmBjqF,GACzB,MAAMmR,EAAegJ,KAAKmxE,cAAc14E,IAAI5S,GAC5C,OAAKmR,EAIEA,EAAa84E,qBAHX,IAIX,CAEQqD,wBAAAA,CAAyBttF,GAC/B,MAAMmS,EAAagI,KAAK5V,uBAAuBvE,GAC/C,IAAKmS,EACH,OAKF,MAAO,CACLygB,aAHmBzY,KAAKmxE,cAAc14E,IAAI5S,GAGfykE,kBAC3B3f,cAAe3yC,aAAsBzC,EAAAA,iBAAmB,KAAOyC,EAAWsyE,mBAC1EoJ,iBAAkB17E,EAAWgoD,oBAAoB,CAAE2zB,KAAK,EAAMC,MAAM,IACpE/tF,aAEJ,CAEQutF,mBAAAA,CAAoBvtF,GAC1B,MAAMmS,EAAagI,KAAK5V,uBAAuBvE,GAI/C,IAAKmS,EACH,OAGF,MAAM67E,EAAkB96E,IAClBA,GAAY+6E,uBACP/6E,GAAY9C,gBACZ8C,GAAYg7E,gBAEjBh7E,GAAYI,UAC+B,IAAzCJ,EAAWI,UAAU9C,SAASnM,eACzB6O,EAAWI,SAAS9C,QAGxB0C,GAGHA,EACJf,aAAsB3N,EAAAA,mBAClB,IAAI8Y,IACJ0wE,EAAgB77E,EAAWiB,iBAEjC,GAAIF,aAAsBoK,IAAK,CAC7B,MAAMw/B,EAAa3qC,EAAyCE,kBAC5DyqC,GAAWn3C,QAAQyM,IACjB,MAAM+7E,EAAUH,EAAgB77E,EAAWiB,cAAchB,IACzDc,EAAWuK,IAAIrL,EAAU+7E,IAE7B,CAIA,MAAO,CACLv7D,aAHmBzY,KAAKmxE,cAAc14E,IAAI5S,GAGfykE,kBAC3BvxD,aAEJ,CAEQs6E,4BAAAA,CAA6BxtF,GACnC,MAAM,oBAAEgK,GAAwBmQ,KAAKxX,gBAAgBK,SAGrD,OADqBgH,EAAoBoyE,gBAAgBp8E,EAE3D,CAUOopF,eAAAA,CACLppF,EACA+mF,EACAqH,EACA5E,EACApnD,GAEA,MAAM8Z,EAAkB/hC,KAAK4C,qBAG7B,GAAIgqE,EAAan0D,eAAiBsuD,EAAAA,MAAAA,aAAqBgF,QAEhDa,EAAavsE,KAAK,GAAG7M,UAAUtJ,OAClC,OAMJ,MAAM8M,EAAegJ,KAAKmxE,cAAc14E,IAAI5S,GAc5C,GAPAma,KAAK00C,kBAAkB,CAAE7uD,WAAYmR,EAAao4E,kBAGlDpvE,KAAKxX,gBAAgBK,SAASgH,oBAAoB24E,iCAChDxxE,EAAao4E,kBAGVp4E,EACH,MAAM,IAAIxK,MAAM,mDAKlB,MAAMgyB,EAAoBxnB,EAAa23E,2BAA2BU,GAI5D72D,EAAkBxhB,EAAa03E,yBACnCuF,EACArH,EAAan0D,cAGT/xB,EAAUsQ,EAAam4E,aACvBtsE,EAAO7L,EAAaszD,kBACpB5yD,EAAaV,EAAak5E,gBAC1BpsC,EAAc9sC,EAAagzD,iBAC3BomB,EAAcp5E,EAAam5E,iBAE3BvsC,EAA2C,CAC/C/9C,aACAa,UACAmc,OACAghC,eAAgB,CACdnsC,aACAosC,cACAssC,gBASJp5E,EAAa63E,qBAAqB9sC,EAAgB3pC,IAMlD2pC,EAAgBgC,cAAcH,GAE9B5sC,EAAa64E,mBAAmBr3D,GAChCxhB,EAAau4E,qBAAqB/wD,GAClCxnB,EAAai4E,gBAAgBrC,GAC7B51E,EAAa+3E,cAAclpF,GAE3Bma,KAAKmxE,cAAc7tE,IAAIzd,EAAYmR,GAEnC,MAAM7M,EAAW43C,EAAgBU,YAAY58C,GACnBma,KAAKk0E,gBAC7B/pF,EACAyiF,EACA51E,EACAixB,GAMgBzlB,KAAK,KACrBxC,KAAKw1B,gBAAgBx1B,KAAKnV,OAAOwqD,sBAAuB,CACtDu3B,eACA/mF,gBAGN,CAEO4R,kBAAAA,CAAmB5R,GACxB,OAAOma,KAAKmxE,cAAc14E,IAAI5S,GAAY4R,oBAC5C,CAQOrN,sBAAAA,CAAuBvE,GAG5B,IAFqBma,KAAK/I,gBAAgBpR,KAEpBma,KAAK+hC,iBAAmB/hC,KAAK+hC,gBAAgBqwC,iBACjE,OAAO,KAKT,OAFiBpyE,KAAK+hC,gBAAgBU,YAAY58C,EAGpD,CAUOoR,eAAAA,CAAgBpR,GACrB,OAAOma,KAAKmxE,cAAc14E,IAAI5S,EAChC,CAEOmkE,cAAAA,CAAenkE,GAEpB,OADqBma,KAAK/I,gBAAgBpR,GACtBmkE,gBACtB,CA0BOjjB,kCAAAA,CAAmC5gD,EAA0Bub,GAElE,MAAM0uC,EAAiBpwC,KAAK5V,uBAAuBjE,GAInD,GAHKiqD,GACH92C,QAAQuM,KAAK,+BAAgC1f,GAE3CiqD,GAAgB+jC,oBAAoBzyE,EAAU,CAAEuvE,gBAAgB,IAClE,OAAO9qF,EAKT,IAAK,MAAMiS,KAAM4H,KAAKmxE,cAAcpiE,OAAQ,CAC1C,MAAM5kB,EAAW6V,KAAK5V,uBAAuBgO,GAC7C,GAAIjO,GAAUgqF,oBAAoBzyE,EAAU,CAAEuvE,gBAAgB,IAC5D,OAAO74E,CAEX,CAIA,GACEg4C,GAAgB+jC,oBAAoBzyE,EAAU,CAAEuvE,gBAAgB,EAAMC,iBAAiB,IAEvF,OAAO/qF,EAIT,IAAK,MAAMiS,KAAM4H,KAAKmxE,cAAcpiE,OAAQ,CAC1C,MAAM5kB,EAAW6V,KAAK5V,uBAAuBgO,GAC7C,GACEjO,GAAUgqF,oBAAoBzyE,EAAU,CAAEuvE,gBAAgB,EAAMC,iBAAiB,IAEjF,OAAO94E,CAEX,CAGA,OAAO,IACT,CAsBO8vC,mCAAAA,CAAoC/hD,EAA0BwD,GACnE,MAAM,SAAE+X,EAAQ,sBAAE9O,GAA0BjJ,GACtC,SAAEsO,EAAQ,kBAAE2J,GAAsBF,GAClC,kBAAE3V,EAAiB,oBAAEoF,GAAwB6O,KAAKxX,gBAAgBK,SAClEuK,EAAarH,EAAkByG,mBAAmBI,GAExD,IAAI,aAAE6lB,GAAiBrlB,EAWvB,GAVKqlB,IACC7W,IAAsBxO,EAAWK,kBACnCglB,EAAesuD,EAAAA,MAAAA,aAAqBgF,MAC3B9zE,IACTwgB,EAAe,WAMfxgB,EACF,IAAK,MAAMG,KAAM4H,KAAKmxE,cAAcpiE,OAAQ,CAC1C,MAAM5kB,EAAW6V,KAAK5V,uBAAuBgO,GAC7C,GAAIjO,GAAUgqF,oBAAoBzyE,EAAU,CAAE0yE,UAAU,EAAMnD,gBAAgB,IAC5E,MAAO,CACLprF,WAAYuS,EACZxF,wBACA4lB,gBAAiB,CAAEC,gBAGzB,CAKF,MAAM47D,EAAc,IAAK3yE,EAAUzJ,SAAU,KAAM2J,kBAAmB,MACtE,IAAK,MAAMxJ,KAAM4H,KAAKmxE,cAAcpiE,OAAQ,CAC1C,MAAM5kB,EAAW6V,KAAK5V,uBAAuBgO,GACvCk8E,EAAwBnjF,EAAoB8B,8BAA8BmF,KAAM,GACtF,GAAKk8E,GAA0BnqF,IAG3B8N,IACFo8E,EAAYp8E,SAAWq8E,GAEzBD,EAAY1gF,oBAAsBqM,KAAKu0E,wBAAwBD,GAC3DnqF,EAASgqF,oBAAoBE,EAAa,CAAED,UAAU,EAAMnD,gBAAgB,KAC9E,MAAO,CACLprF,WAAYuS,EACZxF,wBACA4lB,gBAAiB,CAAEC,gBAGzB,CAGA,MAAO,CACL5yB,WAAYM,EACZyM,wBACA4lB,gBAAiB,CAAEC,gBAEvB,CAKA,uBAAc+7D,CACZrqF,EACAyiF,EACA51E,EACAy9E,EAAgC,CAAC,GAEjC,MAAOrhF,GAAcw5E,EAAavsE,KAClC,OAAOlW,EAASuqF,WAAWthF,EAAWI,SAAU,CAC9C60E,QAASj1E,EAAWR,sBACpB+3C,cAAe3zC,EAAaszE,oBAEhC,CAEA,uBAAcqK,CACZxqF,EACAyiF,EACA51E,EACAixB,EAA+B,CAAC,GAEhC,MAAMzJ,EAAoBxnB,EAAag5E,uBAEjC5zE,EAAyBwwE,EAAavsE,KAAKxW,IAAIwW,GAAQA,EAAKzN,uBAKlEoN,KAAKqxE,qBAAqB/tE,IAAInZ,EAASiO,GAAI,IAAIgE,IAE/C,MAAM,kBAAEswE,EAAiB,SAAEl5E,GAAao5E,EAAavsE,KAAK,GAK1D,IAAIu0E,EACF3sD,GAAeC,sBAAsBwkD,mBAA6BA,EAEpE,MAAM,SAAEz6B,EAAQ,eAAEK,EAAc,YAAE89B,GAAgBp5E,EAAaS,qBAEzDsB,EAAa,IAAKkvB,EAAcG,iBAAiBrvB,YACvD,IAAKkvB,EAAcG,iBAAiBrvB,WAAY,CAC9C,MAAM,IAAEqsC,EAAG,YAAEorC,EAAW,SAAEr3E,GAAaqlB,EAAkB,GACzD,GAAI4mB,IAAQA,EAAI5qC,aAAe4qC,EAAI3qC,cAAe,CAChD,MAAM,MAAEH,EAAK,MAAEC,GAAUhH,EAAAA,UAAAA,YAAAA,eACvB6xC,EAAI5qC,YACJ4qC,EAAI3qC,cAEN1B,EAAW9C,SAAW,CAAEqE,QAAOC,QACjC,CAEAxB,EAAW65C,OAAS49B,GAAez3E,EAAW65C,OAC9C75C,EAAWI,SAAWA,GAAYJ,EAAWI,QAC/C,CAEAhP,EAASzD,QAAQuB,iBAAiB8+E,EAAAA,MAAAA,OAAe8N,uBAAwBnnF,IACvE,MAAM,QAAEhH,GAAYgH,EAAIkM,OAEpBlT,IAAYyD,EAASzD,SAIzBouF,EAAAA,UAAAA,qBAAkCC,OAAOruF,KAG3C,MAAMsuF,EAA2Bh1E,KAAKi1E,oCAAoC9qF,GAEpEyX,EAAoBqmB,GAAeC,sBAAsByiB,eAAe/oC,kBAa9E,OAZIA,IACFgzE,EAAyBphF,EAASoqB,QAAQhc,KAI1CgzE,SAEAA,EAAyB,KAEzBA,EAAyB50E,KAAKk1E,iCAAiCl+E,EAAcxD,IAAa,GAGrFrJ,EAASu4C,SAASlvC,EAAUohF,GAAwBpyE,KAAK,KAC9DrY,EAASsS,cAAc,IAAK1D,IAC5BiH,KAAK+yE,iBAAiB5oF,EAASiO,GAAI6vB,EAAejxB,GAE9Cg+E,GAA0B9qF,QAC5B8qF,EAAyBxpF,QAAQ2pF,IAC3BA,GAAyBC,cAC3BD,EAAwBC,iBAK1BhF,GACFjmF,EAASkrF,eAAejF,GAEtBn+B,GACF9nD,EAASsS,cAAc,CAAEw1C,aAEvBK,GACFnoD,EAASw9C,UAAU,CAAE2K,gBAAgB,KAG3C,CAEQ4iC,gCAAAA,CACNl+E,EACAxD,GAEA,MAAM6wD,EAAsBrtD,EAAaq5E,yBACzC,IAAKhsB,EACH,OAEF,MAAM,MAAE/U,EAAK,OAAEx2C,GAAWurD,EACpB5rC,EAAezhB,EAAaszD,kBAElC,IAAIlX,EACJ,GAAI36B,IAAiBsuD,EAAAA,MAAAA,aAAqBgF,MACxC34B,EAAiB5/C,EAAStJ,WACrB,IAAIuuB,IAAiBsuD,EAAAA,MAAAA,aAAqB99C,aAU/C,OAV6D,CAC7D,MAAM9+B,EAAW6V,KAAK5V,uBAAuB4M,EAAao4E,iBACpDkG,EAAiB/hF,EAAAA,UAAAA,mCAA2CpJ,GAElE,IAAKmrF,EACH,SAGCliC,kBAAmBkiC,EACxB,CAEA,CAEA,OAAOt1E,KAAKu1E,sBAAsBniC,EAAgB9D,EAAOx2C,EAC3D,CAEAy8E,qBAAAA,CAAsBniC,EAAwBD,EAAqBr6C,GACjE,MAAM08E,EAAiBpiC,EAAiB,EAExC,YAAmBn/C,IAAfk/C,EACK5/C,EAAAA,UAAAA,KAAa4/C,EAAY,EAAGqiC,GAGjC18E,IAAWg4E,GAAY2E,MAClB,EAGL38E,IAAWg4E,GAAY4E,KAClBF,EAGL18E,IAAWg4E,GAAY6E,OAOlBH,EAAiB,GAAM,EAAIA,EAAiB,GAAKA,EAAiB,GAAK,EAGzE,CACT,CAEA,wBAAMI,CACJzrF,EACAyiF,EACA51E,EACAixB,EAA+B,CAAC,GAahC,MAAM,kBAAEl8B,GAAsBiU,KAAKxX,gBAAgBK,SAC7C+xB,EAAmB,GACnBi7D,EAAyB7+E,EAAag5E,wBACtC,uBAAE5sD,GAA2BpjB,KAAKxX,gBAAgBK,SAElDitF,EAAe,GACf15E,EAAyB,GAE/B,IAAK,MAAOkzC,EAAOjvC,KAASusE,EAAavsE,KAAK9Q,UAAW,CACvD,MAAM,SAAEiE,EAAQ,sBAAEZ,GAA0ByN,EAC5C,IAAI0Y,EAAS1Y,EAAK0Y,OAElB,MAAM3lB,EAAarH,EAAkByG,mBAAmBI,GAOxD,IANKmmB,GAAU3lB,EAAWQ,SACxBmlB,EAAS+7D,EAAAA,UAAAA,uBAAoC1hF,EAAWQ,OAAO/J,IAAIgK,GAASA,EAAMC,WAGpFsI,EAAuB1Q,KAAKkH,IAEvBmmB,EAAQ,CACXzf,QAAQic,IAAI,gCACZ,QACF,CAEAugE,EAAapqF,KAAKqtB,GAElB,MAAMyF,EAAoBq3D,EAAuBvmC,IAC3C,SAAEr3C,GAAa8gB,EACrB6B,EAAiBlvB,KAAK,CACpB8H,WACAyE,WACAH,SAAU1E,EAAWnC,SACrB2B,wBACAyqE,UAAW7+C,EAAkB6+C,UAC7BkT,cAAevwE,KAAK+1E,kBAAkBv3D,EAAmBvmB,IAE7D,CAEA+H,KAAKqxE,qBAAqB/tE,IAAInZ,EAASiO,GAAIgE,GAE3C,MAAM45E,EAAmBF,EAAa3iF,OAAO4lB,IAAWA,EAAOk9D,YAAY3gD,QAC3E,GAAI0gD,EAAiB9rF,OAAQ,CAC3B,GAAIk5B,EAAuB8yD,kCAEzB,OAAO9yD,EAAuB+yD,qBAAqB,CACjDtwF,WAAYsE,EAASiO,GACrBwiB,qBAIJo7D,EAAiBxqF,QAAQutB,KAClBA,EAAOk9D,YAAY3rD,SAAWvR,EAAOmc,gBAAgBw4C,UACxD30D,EAAOmc,QAGb,CASA,OAAOl1B,KAAKwoB,sBAAsBr+B,EAAUywB,EAAkBqN,EAChE,CAEA,2BAAaO,CAAsBr+B,EAAUywB,EAAkBqN,GAC7D,MAAM,kBAAEl8B,EAAiB,oBAAEoF,GAAwB6O,KAAKxX,gBAAgBK,SAElEmO,EAAegJ,KAAK/I,gBAAgB9M,EAASiO,IAC7ComB,EAAoBxnB,EAAag5E,uBACjCvxE,EAAiBtN,EAAoB8B,8BAA8B9I,EAASiO,IAC5EhF,EAAarH,EAAkByG,mBAAmBiM,EAAe,IACjE23E,EAAqBhjF,GAAYnC,SAGjColF,EAA2Bz7D,EAC9B/wB,IAAI,CAACmxB,EAAas0B,KACV,CAAEt0B,cAAawD,kBAAmBA,EAAkB8wB,MAE5Dn8C,OAAO,EAAG6nB,kBACT,MAAM5nB,EAAarH,EAAkByG,mBAAmBwoB,EAAYpoB,uBACpE,OAAQQ,GAAYm1C,sBAIlB+tC,EAAoBD,EAAyBxsF,IAAI,EAAGmxB,cAAawD,wBACrE,MAAM,SAAEvmB,GAAa+iB,GACf,IAAEoqB,EAAG,YAAEorC,EAAW,SAAEr3E,EAAQ,cAAEurD,GAAkBlmC,EAChDzlB,EAAa,CAAC,EAEpB,GAAIqsC,IAAQA,EAAI5qC,aAAe4qC,EAAI3qC,cAAe,CAChD,MAAM,MAAEH,EAAK,MAAEC,GAAUhH,EAAAA,UAAAA,YAAAA,eACvB6xC,EAAI5qC,YACJ4qC,EAAI3qC,cAEN1B,EAAW9C,SAAW,CAAEqE,QAAOC,QACjC,CAcA,YAZoBtG,IAAhBu8E,IACFz3E,EAAW65C,OAAS49B,QAGLv8E,IAAbkF,IACFJ,EAAWI,SAAWA,QAGFlF,IAAlBywD,IACF3rD,EAAWD,OAAS4rD,EAAc0xB,IAAuB1xB,EAAcxI,SAGlE,CAAEnjD,aAAYd,cAIjB+8E,EAA2Bh1E,KAAKi1E,oCAAoC9qF,IAAa,GA2CvF,IA1CKksF,EAAyBnsF,QAAU8qF,GAA0B9qF,QAChE8qF,EAAyBxpF,QAAQ,EAAGgI,WAAU4hF,mBAC5C,GAAIA,EAAc,CAIhB,MAAMmB,EAAgB/iF,EAAS,GACzB1K,EAAuBiD,EAAkBkiB,iBAC7C7a,IACGA,EAAWm1C,qBACZn1C,EAAWQ,OAAOwG,KAAKvG,GAASA,EAAMC,UAAYyiF,IAGtD,GAAoC,IAAhCztF,EAAqBoB,OACvB,MAAM,IAAIsC,MAAM,mCAEpB,UAIErC,EAASy4C,WAAWhoB,GAEtBo6D,GAA0B9qF,QAC5B8qF,EAAyBxpF,QAAQ,EAAG4pF,mBAC9BA,GACFA,MAINjrF,EAASuS,SAET45E,EAAkB9qF,QAAQ,EAAGuN,aAAYd,eACvClQ,WAAW,KAGToC,EAASsS,cAAc1D,EAAYd,GACnC9N,EAASuS,UACR,KAGLsD,KAAK+yE,iBAAiB5oF,EAASiO,GAAI6vB,EAAejxB,IAE7CixB,EAAcC,qBAAsB,CACvC,MAAMirB,EAAanzC,KAAKk1E,iCAAiCl+E,QAEtC/C,IAAfk/C,GACF5/C,EAAAA,UAAAA,YAAoBpJ,EAASzD,QAAS,CACpCysD,cAGN,CAEAnzC,KAAKw1B,gBAAgBx1B,KAAKnV,OAAOkmF,yBAA0B,CACzD/5E,gBAEJ,CAEQi+E,mCAAAA,CACN9qF,GAEA,MAAM,kBAAE4B,GAAsBiU,KAAKxX,gBAAgBK,SAM7CyJ,EAHyB0N,KAAKqxE,qBAAqB54E,IAAItO,EAASiO,IAInEvO,IAAIkC,EAAkByG,oBACtBW,OAAOC,GAAcA,GAAYm1C,qBAMpC,GAAKj2C,GAAoBpI,OAIzB,OAAOoI,EAAmBzI,IAAI4jF,IAC5B,IAAIj6E,EACJ,GAAIi6E,EAAkBzlC,gCAAiC,CAIrDx0C,EAH4BzH,EAAkByG,mBAC5Ci7E,EAAkBzlC,iCAEWp0C,OAAO/J,IAAIgK,GAASA,EAAMC,QAC3D,CACA,MAAO,CACLN,WACA4hF,aAAcA,IAAMp1E,KAAKw2E,sCAAsC/I,EAAmBtjF,KAGxF,CAEQqsF,qCAAAA,CACNpjF,EACAjJ,GAEA,MAAM,oBAAE0F,GAAwBmQ,KAAKxX,gBAAgBK,SAC/C4J,EAAiBW,EAAWR,sBAE5B22E,EACoB,QAAxBn2E,EAAWnC,SACPuvE,EAAAA,MAAAA,4BAAyCz9B,SACzCy9B,EAAAA,MAAAA,4BAAyC/7C,QAE/C50B,EAAoB0oD,8BAA8BpuD,EAASiO,GAAI,CAC7D3F,iBACAoQ,KAAM0mE,IAIRvpE,KAAK00C,kBAAkB,CAAE7uD,WAAYsE,EAASiO,IAChD,CAIOq+E,cAAAA,CAAe5wF,EAAoB+mF,EAAc8J,GAAa,GACnE,MAAM1/E,EAAegJ,KAAK/I,gBAAgBpR,GACpCsE,EAAW6V,KAAK5V,uBAAuBvE,GACvC8wF,EAAiBxsF,EAASg9C,YAEhC,IAAIyvC,GAEAzsF,aAAoBua,EAAAA,gBAAkBva,aAAoBoL,EAAAA,oBAC5DqhF,EAAoB52E,KAAK41E,mBAAmBzrF,EAAUyiF,EAAc51E,GAAcwL,KAAK,KACjFk0E,IACFvsF,EAASw9C,UAAUgvC,GACnBxsF,EAASuS,aAKXvS,aAAoB6O,EAAAA,gBACtB49E,EAAoB52E,KAAK20E,kBAAkBxqF,EAAUyiF,EAAc51E,IAGrE4/E,EAAkBp0E,KAAK,KACrBxC,KAAKw1B,gBAAgBx1B,KAAKnV,OAAOwqD,sBAAuB,CACtDu3B,eACA/mF,gBAGN,CAEAquF,eAAAA,CACE/pF,EACAyiF,EACA51E,EACAixB,EAA+B,CAAC,GAEhC,OAAI99B,aAAoB6O,EAAAA,cACfgH,KAAK20E,kBACVxqF,EACAyiF,EACA51E,EACAixB,GAIA,CAACvjB,EAAAA,eAAgBnP,EAAAA,kBAAkB6E,KAAKyI,GAAQ1Y,aAAoB0Y,GAC/D7C,KAAK41E,mBACVzrF,EACAyiF,EACA51E,EACAixB,GAIGjoB,KAAKw0E,kBACVrqF,EACAyiF,EACA51E,EACAixB,EAEJ,CAKA4qD,qBAAAA,GACM7yE,KAAKoxE,4BACPpxE,KAAKoxE,2BAA2ByF,YAEpC,CAEAd,iBAAAA,CAAkBv3D,EAAmBvmB,GACnC,MAAM,UAAEolE,GAAc7+C,EACtB,QAAkBvqB,IAAdopE,QAA+DppE,IAApCuqB,EAAkB+xD,cAAjD,CAKA,GAA+C,iBAApC/xD,EAAkB+xD,cAC3B,OAAO/xD,EAAkB+xD,cAG3B,GAAsD,eAAlD/xD,EAAkB+xD,cAAczmD,cAAgC,CAElE,MAAMgtD,EAAcj+D,EAAAA,MAAMC,UAAU7gB,IAE9B,WAAE6lC,EAAU,QAAEqY,GAAY2gC,EAOhC,OANsB5hF,KAAKgM,KACzBhM,KAAKC,IAAI2oC,EAAW,GAAKqY,EAAQ,GAAI,GACnCjhD,KAAKC,IAAI2oC,EAAW,GAAKqY,EAAQ,GAAI,GACrCjhD,KAAKC,IAAI2oC,EAAW,GAAKqY,EAAQ,GAAI,GAI3C,CAnBA,CAoBF,CAEAo+B,uBAAAA,CAAwB3hF,GACtB,MAAM,kBAAE7G,GAAsBiU,KAAKxX,gBAAgBK,SAC7CuK,EAAarH,EAAkByG,mBAAmBI,GAExD,IAAKQ,EACH,OAGF,GAAIA,EAAW0zE,oBACb,OAAO1zE,EAAW0zE,oBAGpB,GAA4B,QAAxB1zE,EAAWnC,SAAoB,CACjC,MAAM,SAAE0c,GAAava,EACrB,OAAOua,EAASha,mBAClB,CAEA,GAA4B,aAAxBP,EAAWnC,SAAyB,CACtC,MAAM,SAAE0c,GAAava,EACrB,OAAOua,EAASopE,mCAAmCpjF,mBACrD,CAEA,MAAM,OAAEC,GAAWR,EACnB,OAAIQ,GAAUA,EAAO1J,OACZ0J,EAAO,GAAGD,yBADnB,CAGF,CAEQi/E,4BAAAA,GACN5yE,KAAKuxE,YAAY7lF,MAAK,GAEtB5D,aAAakY,KAAKwxE,qBAClBxxE,KAAKwxE,oBAAsBzpF,WAAW,KACpCiY,KAAKg3E,8BACJh3E,KAAKyxE,gBACV,CAEQuF,0BAAAA,GACN,MAAMC,EAAsBj3E,KAAKuxE,YAAYn3E,KAAK88E,GAAgBA,GAC9Dl3E,KAAKuxE,YAAYrnF,OAAS,IAAM+sF,IAAwBj3E,KAAK0xE,mBAC/D1xE,KAAK0yE,gBAIP1yE,KAAKuxE,YAAc,EACrB,CAEQmB,aAAAA,GACN,MAAMyE,GAAc,EAEpB,IACoBn3E,KAAK4C,qBAAqB0U,eAGlC9rB,QAAQ,EAAG4M,GAAIvS,MACvB,MAAMuxF,EAAep3E,KAAKmzE,yBAAyBttF,UAK5CuxF,EAAazsC,eAAe0sC,WACnCr3E,KAAKsxE,kCAAkChuE,IAAIzd,EAAYuxF,KAIzD,MAAMr1C,EAAkB/hC,KAAK+hC,gBAC7BA,EAAgBrsB,OAAOyhE,GACvBp1C,EAAgBrlC,SAIhBsD,KAAKsxE,kCAAkC9lF,QAAQ,CAAC08B,EAAsBriC,KACpEma,KAAK+yE,iBAAiBltF,EAAY,CAChCqiC,2BAKJ6Z,EAAgBrsB,OAAOyhE,GACvBp1C,EAAgBrlC,QAClB,CAAE,MAAO6vB,GAEPjzB,QAAQuM,KAAK,0BAA2B0mB,EAC1C,CACF,CAEQomD,sBAAAA,GACN7qF,aAAakY,KAAK0xE,mBAClB1xE,KAAK0xE,kBAAoB3pF,WAAW,KAClCiY,KAAK0xE,kBAAoB,MACxB1xE,KAAKyxE,gBACV,CAEQwB,mBAAAA,CACN9oF,EACAi+B,GAEA,IAAKA,EACH,OAGF,MAAM,WAAErvB,GAAeqvB,EACnBj+B,aAAoBE,EAAAA,oBAClB0O,aAAsBoK,IACxBpK,EAAWvN,QAAQ,CAAC8rF,EAAiBr/E,KACnC9N,EAASsS,cAAc66E,EAAiBr/E,KAM5C9N,EAASsS,cAAc1D,EAE3B,CAEQm6E,wBAAAA,CACN/oF,EACA+9B,GAEA,MAAMqvD,EAAUrvD,GAAsByiB,cAClC4sC,IAIEptF,EAASgqF,oBAAoBoD,EAASvG,IACxC7mF,EAAS68C,iBAAiBuwC,GAE1Bj+E,QAAQuM,KAAK,qCAAsC0xE,IAIvD,MAAM7D,EAAmBxrD,GAAsBwrD,iBAC3CA,GACFvpF,EAAS+1D,oBAAoBwzB,EAEjC,CAEQV,4BAAAA,CACN7oF,EACAm+B,GAEA,IAAKA,EACH,OAGF,MAAM,oBAAEz4B,GAAwBmQ,KAAKxX,gBAAgBK,SAErDy/B,EAAyB98B,QAASgsF,IAChC,MAAM,eAAE/kF,EAAc,KAAEoQ,EAAI,SAAEwnC,GAAamtC,EAEvCntC,GACFx6C,EAAoB0oD,8BAA8BpuD,EAASiO,GAAI,CAC7D3F,iBACAoQ,UAIR,CAOO40E,sBAAAA,CAAuB5xF,GAC5B,MAAM,kBAAEkG,GAAsBiU,KAAKxX,gBAAgBK,SAGnD,OAF+BmX,KAAKqxE,qBAAqB54E,IAAI5S,IAAe,IAGzEgE,IAAIC,GAAOiC,EAAkByG,mBAAmB1I,IAChDqJ,OAAOwuB,QACZ,EACD+1D,GAzxCKxlE,GAAAA,GACGoqD,aAAe,CACpB3pD,KAAM,6BACN4pD,QAAS,6BACTC,OAAQA,EACNh0E,qBAEO,IAAI0pB,GAA2B1pB,IAoxC5C,YCpuCO,IAAKmvF,GAAW,SAAXA,GAAW,OAAXA,EAAW,kBAAXA,EAAW,cAAXA,EAAW,oBAAXA,CAAW,M,OCxGR,MAAMC,WAAwB5jD,EAAAA,GA8B3Cp0B,WAAAA,CAAYpX,GACVwb,MAAM4zE,GAAgB/sF,QAnBxB,KAeAusE,UAAY,CAAC,EAAC,KACd5uE,qBAAe,EAIbwX,KAAKxX,gBAAkBA,CACzB,CAQQqvF,oBAAAA,CAAqB1tF,EAAUyI,GAErC,GAAIzI,EAAS+N,gBAAiB,CAC5B,MAAMyqC,EAAYx4C,EAAS+N,mBAAqB,GAChD,OAAOyqC,EAAUz4C,OAAS,GACtBy4C,EAAUxqC,KAAKC,GAAMA,EAAG3N,SAASmI,UACjCqB,CACN,CAIF,CAUO87C,WAAAA,CACLlqD,EACAuW,EACA1M,EAAU,CAAC,GAEX,MAAM,kBAAE3D,GAAsBiU,KAAKxX,gBAAgBK,SAE7CsB,GADkByY,EAAAA,EAAAA,oBAAmBwrE,IACV3rC,YAAY58C,GAE7C,IAAKsE,EACH,OAGF,MAAM+S,EAAe/S,EAASgT,YAC9B,IAAKD,GAAwC,IAAxBA,EAAahT,OAChC,OAGF,MAAM,mBAAE0R,EAAkB,UAAEH,GAAc/L,EAE1C0M,EAAuB5Q,QAAQoH,IAG7B,GADmB7G,EAAkByG,mBAAmBI,GACzC21C,oBACb,OAGF,MAAMgmC,EAASvuE,KAAK63E,qBAAqB1tF,EAAUyI,GAC7CmG,EAAaw1E,EAASpkF,EAAS8O,cAAcs1E,GAAUpkF,EAAS8O,gBAChEE,EAAWJ,GAAYI,SAEzByC,IAAuBzC,GACzB6G,KAAKwzC,oBACH3tD,EACA+M,EACA6I,EAAUG,IACV,GAKJ,MAAMk8E,EAAe,CACnBl8E,mBAAoBzC,GAAUwZ,MAAQjjB,GAASkM,oBAAsB,YACrEH,UAAW/L,EAAQ+L,UAAYhN,OAAO2f,OAAO1e,EAAQ+L,WAAa,GAClExD,SAAUs2E,EACVA,UAIF,GAAIvuE,KAAKo3D,UAAUvxE,GAAa,CAE9B,MAAMkyF,EAAgB/3E,KAAKo3D,UAAUvxE,GAAYwgE,UAC/Ch0D,GAAQA,EAAKO,wBAA0BA,IAGlB,IAAnBmlF,EAEF/3E,KAAKo3D,UAAUvxE,GAAYkyF,GAAepgB,SAAWmgB,EAGrD93E,KAAKo3D,UAAUvxE,GAAY6F,KAAK,CAC9BisE,SAAUmgB,EACVllF,yBAGN,MAEEoN,KAAKo3D,UAAUvxE,GAAc,CAC3B,CACE8xE,SAAUmgB,EACVllF,4BAORoN,KAAKw1B,gBAAgBoiD,GAAgB/sF,OAAO4O,cAAe,CACzD5T,aACAmyF,WAAYL,GAAYM,OAE5B,CAUOnoC,cAAAA,CAAejqD,EAAY+M,GAChC,MAAM8kE,EAAe13D,KAAKo3D,UAAUvxE,GACpC,GAAK6xE,EAAL,CAIA,GAAI9kE,EAAuB,CAEzB,MAAM08C,EAAQooB,EAAarR,UACzBnZ,GAAQA,EAAKt6C,wBAA0BA,IAG1B,IAAX08C,IAEFooB,EAAa/5C,OAAO2xB,EAAO,GAGC,IAAxBooB,EAAaxtE,eACR8V,KAAKo3D,UAAUvxE,GAG5B,aACSma,KAAKo3D,UAAUvxE,GAGxBma,KAAKw1B,gBAAgBoiD,GAAgB/sF,OAAO4O,cAAe,CACzD5T,aACA+M,wBACAolF,WAAYL,GAAYO,SAxB1B,CA0BF,CAQOriF,WAAAA,CAAYhQ,GACjB,QAAOma,KAAKo3D,UAAUvxE,EACxB,CAOO2Z,QAAAA,GACL,OAAOQ,KAAKo3D,SACd,CAQOG,mBAAAA,CAAoB1xE,GACzB,OAAOma,KAAKo3D,UAAUvxE,EACxB,CAOOs1E,UAAAA,GACe1sE,OAAOsgB,KAAK/O,KAAKo3D,WACzB5rE,QAAQ3F,IAClBma,KAAK8vC,eAAejqD,IAExB,CAUQ2tD,mBAAAA,CAAoB3tD,EAAY+M,EAAuBuG,EAAUmD,GAAY,GACnF,MACMnS,GADkByY,EAAAA,EAAAA,oBAAmBwrE,IACV3rC,YAAY58C,GACvCqX,EAAe/S,GAAUgT,YAC/B,IAAKhT,IAAa+S,GAAwC,IAAxBA,EAAahT,OAC7C,OAIF,MAAMqkF,EAASvuE,KAAK63E,qBAAqB1tF,EAAUyI,GAGnDzI,EAASsS,cAAc,CAAEtD,YAAYo1E,GAEjCjyE,GACFnS,EAASuS,QAEb,EACDy7E,GA5PoBP,GAAAA,GACZ/sF,OAAS,CACd4O,cAAe,uCAFEm+E,GAKLtb,aAAe,CAC3B3pD,KAAM,kBACN6pD,OAAQA,EAAGh0E,qBACF,IAAIovF,GAAgBpvF,ICZjC,Y,gBCIA,MAAM4vF,GAAaC,IACjB,GAAKA,EAIL,MAAsC,mBAAxBA,EAASD,WAA4BC,EAASD,aAAeC,EAASjyC,KAiBhFkyC,GAAqBC,IACJxpF,MAAMC,QAAQupF,GAAWA,EAAU,CAACA,IAE9Bn+E,KADPo+E,IAAWA,GAK3BC,GAAmBC,GAChBA,GAAWA,EAAQ9kF,QAAU8kF,EAAQ9kF,OAAO,GAO/C+kF,GAAqBC,GAClBR,GAAWQ,GAGdC,GAAUA,CAACzyC,EAAK1f,EAAUoyD,EAAAA,GAASnyD,2BAChCoyD,MAAM3yC,EAAK1f,GAASlkB,KAAKw2E,GAAYA,EAASpyE,eAGjDqyE,GAAuBnlF,GACpBimB,EAAAA,YAAAA,kBAA8BjmB,GAAS0O,KAAK3O,GAC1CA,GAASA,EAAMwM,MAAQxM,EAAMwM,KAAK64E,UAAUC,QAIjDC,GAAkBA,CACtBhzC,EACA4nC,EACAxkF,EACA6vF,EACA3yD,EAAUoyD,EAAAA,GAASnyD,yBACnBO,EAAmBC,EAAAA,GAAaC,yBAEhC,MAAM4b,EAAS,CACboD,MACA1f,UACAQ,oBAIF,OAFiB,IAAIoyD,GAAAA,GAAIC,eAAev2C,GAExBw2C,iBAAiB,CAC/BxL,mBACAxkF,oBACA6vF,oBAoJJ,MAEA,GAF2B,IAnI3B,MACEI,YAAAA,CAAaf,EAASgB,GAEpB,MAAMd,EAAgBH,GAAiBC,GACjCiB,EAzDkBjB,IACnBA,GAAWA,EAAQ/qE,SAwDCisE,CAAoBlB,GAE7C,IACIE,IAAkBe,IACnBA,EAAiB7lF,SAAS+lF,WAAW,aAEtC,OAKF,IAAI/lF,EAAU6kF,GAFGC,GAAiBe,GASlC,OAJIrB,GAAmBxkF,KACrBA,EAjGuBgmF,EAACJ,EAAS9mF,KACrC,MAAMmnF,EAAQL,EAAQvhF,KAAK4hF,GACNA,EAAM1tF,YAAY+N,KACnChH,GAAcA,EAAWR,wBAA0BA,KAIjD,OAAEonF,EAAS,IAAOD,GAClB,UAAExtF,EAAY,IAAOytF,EAAO,IAAM,CAAC,EACnCrsE,EAAWphB,EAAU,GAE3B,OAAO6rF,GAAWzqE,IAsFJmsE,CAAqBJ,EAAShB,EAAQ9lF,wBAG7C0lF,GAAmBxkF,QAAxB,EACSkyB,EAAAA,GAAAA,QAAyB+P,gBAAgBjiC,EAEpD,CAEAmmF,kBAAAA,CAAmBvB,GACjB,MAAME,EAAgBH,GAAiBC,GAEvC,GAAIE,EAAe,CACjB,IAAI9kF,EAAU6kF,GAAmBC,GAC7BsB,EAAqBrB,GACzB,MAAMsB,EA9CermF,KACzB,MAAMsmF,EAAe,SACfD,EAAaC,EAAaC,KAAKvmF,GAErC,OAC8B,IAA3BsmF,EAAaE,WACZH,GACAA,EAAW,IACXA,EAAW,GAAGpwD,QAAQ,IAAK,KAC7B,IAqCqBwwD,CAAmBzmF,GAEtC,OAAQqmF,GACN,IAAK,YACHD,EAAqBjB,GAAqBh8D,KAAKjd,KAAMlM,GACrD,MACF,IAAK,SACH,MAAMsyC,EAAMwyC,EAAc4B,UAAUC,SAC9BzM,EAAmB4K,EAAc8B,sBACjClxF,EAAoBovF,EAAc+B,uBAClCtB,EAAiBT,EAAcgC,oBAOrC,GANsBtC,GAAmB,CACvClyC,EACA4nC,EACAxkF,EACA6vF,IAGA,OAGFa,EAAqBd,GAAgBn8D,KACnCjd,KACAomC,EACA4nC,EACAxkF,EACA6vF,GAEF,MACF,IAAK,UAIH,GAFAvlF,EAAUA,EAAQw1B,UAAUx1B,EAAQ8pB,QAAQ,KAAO,GAE/C06D,GAAmBxkF,GACrB,OAEFomF,EAAqBrB,GAAQ57D,KAAKjd,KAAMlM,GACxC,MACF,QACE,OAGJ,OAAOomF,GACT,CACF,CAEAW,oBAAAA,CAAqBnC,GACnB,MAAM,iBACJ5qE,EAAgB,kBAChBvkB,EAAiB,eACjBskB,EAAc,qBACditE,EAAoB,SACpBL,EAAQ,QACRM,EAAO,SACPptE,GACE+qE,EAEJ,IAAKJ,GAAmBmC,GACtB,OAAOrB,GACLqB,EACA3sE,EACAvkB,EACAskB,EACAitE,GAEG,IAAKxC,GAAmByC,GAC7B,OAAOlC,GAAQkC,EAAS,CAAEr0D,QAASo0D,IAC9B,IAAKxC,GAAmB3qE,GAAUy4B,KAAM,CAI7C,MAAMA,EAAMz4B,EAASy4B,IACf40C,EAAc50C,EAAIyzC,WAAW,QAAUzzC,EAAMA,EAAI9c,UAAU8c,EAAIxoB,QAAQ,KAAO,GACpF,OAAOi7D,GAAQmC,EAAa,CAAEt0D,QAASo0D,GACzC,CACF,CAEA,kBAACG,CAAkBvC,EAASgB,EAAShzD,SAC7B1mB,KAAKy5E,aAAaf,EAASgB,SAC3B15E,KAAKi6E,mBAAmBvB,SACxB14E,KAAK66E,qBAAqBnC,EAClC,CAEAwC,oBAAAA,CAAqBxC,EAASgB,EAAShzD,GACrCgyD,EAAQoC,qBAAuBp0D,EAC/B,MAAMy0D,EAAiBn7E,KAAKi7E,kBAAkBvC,EAASgB,GAEvD,IAAK,MAAM0B,KAAUD,EACnB,GAAIC,EACF,OAAOA,EAKX,MAAM,IAAI5uF,MAAM,4BAClB,GCzNI4L,G,mDAAKijF,GCCLC,GAAwBA,CAC5Bxe,EACAC,EACAC,KAEA,MAAMj7B,GAAkBn/B,EAAAA,EAAAA,oBAAmBo6D,EAAel7B,mBAC1D,IAAKC,EACH,MAAM,IAAIv1C,MAAM,8BAA8BwwE,EAAel7B,qBAE/D,MAAMy5C,EAAYx5C,EAAgBU,YAAYs6B,EAAel3E,aAErDw/D,cAAem2B,GAAwB1e,EAAqB2e,WAClEze,EAAen3E,aAGTw/D,cAAeq2B,GAAwB5e,EAAqB2e,WAClE1e,EAAel3E,YAGjB,QAA4BoO,IAAxBunF,QAA6DvnF,IAAxBynF,EACvC,MAAM,IAAIlvF,MAAM,6BAGlB,MAAMmvF,EAAY55C,EAAgBU,YAAYu6B,EAAen3E,YAIvD+1F,EAFmBL,EAAUM,iBACX74E,OAAOw4E,GAAuBx4E,OAAO04E,IAGzDE,IAAqBD,EAAUE,iBAInCjkF,EAAAA,UAAAA,YAAsB+jF,EAAUj1F,QAAS,CACvCysD,WAAYyoC,KAIVE,GAA+Bjf,GACdH,EAAAA,oBAAAA,mBACnBG,EACAhyE,EAAAA,OAAOkxF,sBACPT,GACA,CAAEU,gBAAiB,CAAC,CAAErpE,KAAM9nB,EAAAA,OAAOoxF,gBAAiBllE,OAAQ,c,eCxChE,MAAM,gBAAEmlE,IAAoBnV,EAAAA,OACpBh2E,MAAKA,IAAK6zB,EAAAA,IACZ,oBAAEu3D,IAAwBC,GAAAA,GAAAA,KAAWC,qBACrC,6BAAEC,GAA4B,kBAAEC,IAAsBC,EAAAA,cAEtDC,GACqC,iCAM3C,SAASC,GAA0BnwF,EAAW/D,EAAiBqsB,GAC7D,MAAM2C,EAAa3C,EAAiB2R,sBAAsB,GAE1D,IAAKj6B,IAAcA,EAAUrC,OAC3B,MAAM,IAAIsC,MAAM,8BAGlB,MAAMmhB,EAAWphB,EAAU,GAE3B,IAAIowF,EAAsBhvE,EACtBivE,GAAiBD,EAAoBE,gBAAkB,EAC3D,IAAK,MAAMC,KAAavwF,EAAW,CACjC,MAAMwwF,GAAWD,EAAUD,gBAAkB,EACzCE,EAAUH,IACZD,EAAsBG,EACtBF,EAAgBG,EAEpB,CAEA,MAAM,oBACJppF,EAAmB,kBACnB43B,EAAiB,YACjByxD,EAAW,YACXC,EAAW,aACX/tE,EAAY,iBACZpB,EAAgB,kBAChBvkB,EAAiB,eACjBskB,EAAc,YACdqvE,GACEvvE,EAgBEwvE,GAdN5wF,EAAYA,EAAU1C,IAAIuzF,IASxBA,EAAKzpF,oBAAsBga,EAASha,oBAE7BypF,KAINjqF,OAAOyrD,GAAKA,GACZ/0D,IAAIuzF,GAAQA,EAAKzpF,qBACjBR,OAAO,CAACtE,EAAOygD,EAAO+tC,IAAUA,EAAMz/D,QAAQ/uB,KAAWygD,GACxD6tC,EAA0BjzF,OAAS,GACrCoP,QAAQuM,KACN,uHACAs3E,GAIJ,MAAM/pF,EAAa,CACjBkqF,OAAQ,aACRrsF,SAAU,KACVwnB,aAAcsuD,EAAAA,MAAAA,aAAqBkF,YACnCsR,aAAc,aACd3qF,sBAAuB7B,GAAM+V,OAC7B+G,iBACAtkB,oBACAukB,mBACAna,sBACA6pF,kBApEF,mFAqEEN,cACA3xD,kBAAmBA,GAAqB,kBAExCwhB,WAAYiwC,EACZhwC,WAAYiwC,EACZ/tE,eACAuuE,cAAed,EACfhvE,WACA+vE,eAAgB,EAChBC,aAAc,EACdC,OAAQrxF,EACRA,YACA4wF,4BACA3pF,SAAUjH,EAAU1C,IAAI8jB,GAAYA,EAAS7Z,SAC7C+pF,gBAAiBrmE,EAAWsmE,SAASC,qBACnCpB,EACAA,EAAoB7oF,SAEtBnH,MAAO4+B,GAAqB,GAAG+sB,GAAAA,EAAKnrB,EAAE,aAAaje,OAAkBopC,GAAAA,EAAKnrB,EAAE,SAKxE6wD,EAAiBxmE,EAAWsmE,SAASG,0BACrCC,EAAc,IAAI/6E,IAExB,GADA5W,EAAUf,QAAQmiB,GAAYuwE,EAAY56E,IAAIqK,EAAS7Z,QAAS6Z,IAC5DqwE,EAAgB,CAClB,MAAMG,EAAY1vF,OAAO+tE,OAAOwhB,GAGhCG,EAAUC,oBAAsBA,GAAoBnhE,KAAKkhE,EAAWD,GAEpE3qF,EAAAA,UAAAA,wBAAgC8qF,OAAOjrF,EAAWI,SAAS,GAAI,CAC7DqP,KAAMq5E,GAAgBoC,gBACtB58E,SAAUy8E,GAEd,CAKA,MAAO,CAAC/qF,EACV,CAOA,SAASgrF,GAAoBF,EAAapqF,GAExC,OADiBoqF,EAAYzlF,IAAI3E,GAK1BwoF,GACLH,GAAoBI,GAAkB2B,EAAYzlF,IAAI3E,OAJtDwF,QAAQuM,KAAK,iCAAkC/R,EAAS,KAAMoqF,GACvDl+E,KAAKgE,MAAMo6E,oBAAoBtqF,GAK1C,CAEO,SAASyqF,IAAkC,gBAAE/1F,EAAe,iBAAEqsB,IAKnE,MAAO,CACLlC,KAAM,iCACN6rE,aAAc,CAAC/B,IACfgC,yBAP+BlyF,GACxBmwF,GAA0BnwF,EAAW/D,EAAiBqsB,GAQjE,C,2BCrJe,SAAS6pE,IAAkB,SAAEC,IAC1C,MAAM,gBAAElpF,EAAe,gBAAEjN,IAAoBC,EAAAA,EAAAA,OACvC,qBAAEsF,EAAoB,kBAAEhC,GAAsBvD,EAAgBK,UAE9D,iCAAEyV,EAAgC,SAAEE,IACxCnW,EAAAA,GAAAA,KAGIu2F,EAAwB7wF,EAAqBG,iBACjD,+BAEI29B,EAAoB99B,EAAqBG,iBAC7C,uCAEI2wF,EAAiB9wF,EAAqBG,iBAAiB,oCACvD4wF,EAAiB/wF,EAAqBG,iBAAiB,oCACvDy9B,EAA4B59B,EAAqBG,iBACrD,+CAGI8/B,EAAgCjgC,EAAqBG,iBACzD,mDAII6wF,EAAW,CACfC,oBAAsBvsF,IACpBgD,EAAgBkF,IAAI,wBAAyB,CAAElI,oBAEjDwsF,aAAcxsF,IACZgD,EAAgBkF,IAAI,aAAc,CAAElI,oBAEtCysF,eAAgBA,CAACzsF,EAAgBjD,KAC/BiG,EAAgBkF,IAAI,4BAA6B,CAAElI,iBAAgBjD,kBAErE2vF,cAAeA,CAAC1sF,EAAgBjD,KAC9BiG,EAAgBkF,IAAI,mBAAoB,CAAElI,iBAAgBjD,kBAE5Du8B,mBAAoBt5B,IAClBgD,EAAgBkF,IAAI,wBAAyB,CAAElI,oBAEjD2sF,oBAAqBA,CAAC3sF,EAAgBjD,KACpCiG,EAAgBkF,IAAI,mBAAoB,CAAElI,iBAAgBjD,kBAE5D6vF,gBAAiBA,CAAC5sF,EAAgBjD,KAChCiG,EAAgBkF,IAAI,gBAAiB,CAAElI,iBAAgBjD,kBAEzD8vF,0BAA2BA,CAAC7sF,EAAgBjD,EAAcqT,KACxDpN,EAAgBkF,IAAI,0BAA2B,CAAElI,iBAAgBjD,eAAcqT,UAEjF08E,oBAAqBA,CAAC9sF,EAAgBjD,KACpCiG,EAAgBkF,IAAI,oBAAqB,CAAElI,iBAAgBjD,kBAE7DgwF,6CAA8CA,CAAC/sF,EAAgBoQ,KAC7DpN,EAAgBkF,IAAI,+BAAgC,CAAElI,iBAAgBoQ,UAExE48E,uBAAwBhtF,IACtBgD,EAAgBkF,IAAI,uBAAwB,CAAElI,oBAEhDonD,SAAUA,CAACpnD,EAAgBoQ,EAAMrU,EAAKK,KACpC4G,EAAgBkF,IAAI,uBAAwB,CAAElI,iBAAgBoQ,OAAMrU,MAAKK,WAE3E2zD,kCAAmCA,KACjC/sD,EAAgBkF,IAAI,sCAEtBmxB,iCAAkCr5B,IAChCgD,EAAgBkF,IAAI,iCAAkC,CAAElI,oBAE1Du5B,qBAAsBv5B,IACpBgD,EAAgBkF,IAAI,qBAAsB,CAAElI,oBAE9CgwD,aAAcA,EAAG5/C,QAAQhU,KACvB4G,EAAgBkF,IAAI,eAAgB,CAAEkI,OAAMhU,WAE9C6zD,gBAAiBA,EAAG7/C,QAAQhU,KAC1B4G,EAAgBkF,IAAI,kBAAmB,CAAEkI,OAAMhU,WAEjD8zD,cAAeA,EAAG9/C,QAAQhU,KACxB4G,EAAgBkF,IAAI,gBAAiB,CAAEkI,OAAMhU,WAE/C+zD,iBAAkBA,EAAG//C,QAAQhU,KAC3B4G,EAAgBkF,IAAI,mBAAoB,CAAEkI,OAAMhU,WAElDg0D,qBAAsBA,EAAGhgD,QAAQhU,KAC/B4G,EAAgBkF,IAAI,uBAAwB,CAAEkI,OAAMhU,WAEtDwrD,+BAAgCA,IACvB5kD,EAAgBkF,IAAI,mCAKzBsxB,EAAgB3tB,EAAiCzU,IAAI,EAAGiE,mBAC5D,MAAM,mBAAE8+C,EAAkB,eAAEn6C,GAAmB3E,GACzC,SAAEi1C,GAAa6J,EAErB,IAAK7J,EACH,MAAO,CAAEtwC,iBAAgBi6B,cAAc,GAmBzC,IAf0B,MACxB,MAAMl5B,EAAWuvC,EAASvvC,SAC1B,IAAKA,GAAUtJ,OAAQ,OAAO,EAE9B,IAAK,MAAM4J,KAAWN,EAAU,CAC9B,MAAM2S,EAAY0S,EAAAA,MAAM45C,SAAS3+D,IAAU4rF,eAC3C,GAAKv5E,EAEL,IAAK,IAAIyB,EAAI,EAAGA,EAAIzB,EAAUjc,OAAQ0d,IACpC,GAAqB,IAAjBzB,EAAUyB,GAAU,OAAO,CAEnC,CACA,OAAO,CACR,EAbyB,GAgBxB,MAAO,CAAEnV,iBAAgBi6B,cAAc,GAGzC,MACMogB,EADqB/J,EAAS8J,mBACI,GAClCl/B,EAAWnK,EAAAA,SAAAA,IAAa,WAAYspC,GAE1C,IAAKn/B,EACH,MAAO,CAAElb,iBAAgBi6B,cAAc,GAGzC,MAAM7e,EAAiBF,EAASE,gBAAkBF,EAASgyE,eACrDp2F,EAAoBokB,EAASpkB,kBAC7B6J,EAAarH,EAAkB6iB,+BACnCf,EACAtkB,GAGF,MAAO,CACLkJ,iBACAi6B,aAAct5B,GAAYK,qBAKxBmsF,EAAa,CACjBphF,WACA6B,KAAM/B,EACN+jC,KAAMu8C,EACNv8E,MAAO,gBACP4pB,gBACA4yD,iBACAhzD,oBACAizD,iBACAe,4BAA6Bd,EAAS1kC,oCACnC0kC,GAGCe,EAAiBA,IAEnB1pF,EAAAA,cAAC2pF,GAAAA,IAAkBC,SAAQ,KACzB5pF,EAAAA,cAAC2pF,GAAAA,IAAkBE,kBAAkBC,OAAM,KACzC9pF,EAAAA,cAAC43B,EAA6B,OAEhC53B,EAAAA,cAAC2pF,GAAAA,IAAkBE,kBAAkBrhD,KAAI,OA6C/C,OACExoC,EAAAA,cAAC2pF,GAAAA,IAAsBH,EACpBjB,EACDvoF,EAAAA,cAAC2pF,GAAAA,IAAkBI,OAAM,MACzB/pF,EAAAA,cAAC2pF,GAAAA,IAAkBK,mBAAkB,MA1Cf,cAApBR,EAAWv9C,KAEXjsC,EAAAA,cAAC2pF,GAAAA,IAAkBM,UAAS,KAC1BjqF,EAAAA,cAAC2pF,GAAAA,IAAkBM,UAAUH,OAAM,KACjC9pF,EAAAA,cAAC2pF,GAAAA,IAAkBM,UAAU/4B,aAAY,KACvClxD,EAAAA,cAACu1B,EAAyB,OAE5Bv1B,EAAAA,cAAC2pF,GAAAA,IAAkBM,UAAUC,SAAQ,MACrClqF,EAAAA,cAAC2pF,GAAAA,IAAkBM,UAAUE,KAAI,OAEnCnqF,EAAAA,cAAC2pF,GAAAA,IAAkBM,UAAUG,QAAO,KAClCpqF,EAAAA,cAAC2pF,GAAAA,IAAkBU,cAAa,MAC/BX,MAOP1pF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC2pF,GAAAA,IAAkBW,SAAQ,KACzBtqF,EAAAA,cAAC2pF,GAAAA,IAAkBW,SAASR,OAAM,KAChC9pF,EAAAA,cAAC2pF,GAAAA,IAAkBW,SAASp5B,aAAY,KACtClxD,EAAAA,cAACu1B,EAAyB,OAE5Bv1B,EAAAA,cAAC2pF,GAAAA,IAAkBW,SAAS7xB,MAAK,MACjCz4D,EAAAA,cAAC2pF,GAAAA,IAAkBW,SAASH,KAAI,OAGlCnqF,EAAAA,cAAC2pF,GAAAA,IAAkBW,SAASF,QAAO,KACjCpqF,EAAAA,cAAC2pF,GAAAA,IAAkBU,cAAa,MAC/BX,OAeb,C,qCC1NA,MAAMa,IAAgBC,EAAAA,EAAAA,uBAEhBC,GAAgB,CACpBC,mBAAoB,EACpBz+D,oBAAqB,CACnBtkB,SAAS,EACTgjF,kBAAmB,MAKjBC,GAAWA,IACR,IAAIC,OAAO,IAAI1yC,IAAI,mBAA0C,CAClE57B,KAAM,qBCPGuuE,GAAiBA,CAACC,EAAaC,KAC1C,MACMC,EAAY,GAIlB,OALsBF,EAAYtqC,cAAcC,iBAAiB,GAGnDK,aAAaiqC,EAAWC,GAE/BA,EAAU,IAoENC,GAAsBj7E,MACjClc,EACA6M,EACAuqF,KAEA,IAAKp3F,EACH,MAAO,GAGT,MAAMw4C,EAAax4C,EAAuC+N,kBACpDspF,EAAqBr3F,EAAS8O,iBAC9B,SAAEhD,GAAaurF,EACfC,EAAcxrF,EAChB,CACEuE,YAAavE,EAASsE,MAAQtE,EAASqE,MACvCG,aAAcxE,EAASqE,OAASrE,EAASsE,MAAQtE,EAASqE,OAAS,QAErErG,EAEEytF,QAAqBz/E,QAAQmE,IACjCu8B,EAAU94C,IAAIwc,MAAOpO,EAAU0pF,KAC7B,MAAM5oE,EAASuzD,EAAAA,MAAUxzD,UAAU7gB,GAE7B5B,EAAUkrF,EAAiBp3F,EAAU8N,IACrC,SAAEyJ,EAAQ,QAAEkgF,GAAY7oE,EACxBjhB,EAAW4J,EAASzQ,SAEpBvB,EAAU,CACdmH,IAAkB,OAAbiB,EAAoB,IAAO,IAChChB,IAAkB,OAAbgB,EAAoB,EAAI,KAGzB+pF,OD/FuBx7E,OAAOlc,EAAU4uB,EAAQrpB,KAK1D,GAJAixF,GAAcmB,eAAe,mBAAoBd,GAAUH,KAEnC12F,EAASmO,aAAaygB,EAAO9gB,UAGnD,OAGF,IAAI4rE,EAAa9qD,EAAO8qD,WAExB,GAAI9qD,EAAOgpE,cAAgB,EAAG,CAC5B,MAAMC,EAAkBjpE,EAAOgpE,cAAgB,EAC/Cle,EAAa9qD,EAAOvgB,aAAaypF,uBAAuBD,EAC1D,MACEne,EAAa9qD,EAAOvgB,aAAa0pF,6BAGnC,IAAKre,GAAY35E,OACf,OAGF,MAAM,WAAE4zC,EAAU,OAAEqkD,EAAM,UAAElvC,EAAS,QAAEkD,GAAYp9B,EAE7CrgB,QAAcioF,GAAcyB,YAAY,mBAAoB,WAAY,CAC5EtkD,aACAqkD,SACAlvC,YACAkD,UACA0tB,gBAGMwe,QAASxrF,EAAKyrF,QAASxrF,GAAQ4B,EAEvC,GAAI7B,IAAQ27D,KAAY17D,KAAQ,IAC9B,OAGF,MAAMyrF,EAAkB,CACtBC,QAAS,IACT3rF,IAAK3B,KAAK4B,IAAID,EAAKnH,GAASmH,KAAOA,GACnCC,IAAK5B,KAAK2B,IAAIC,EAAKpH,GAASoH,KAAOA,IAQrC,aALwB6pF,GAAcyB,YAAY,mBAAoB,gBAAiB,CACrF/hF,KAAMwjE,EACNn0E,QAAS6yF,KCiDiBE,CAA2Bt4F,EAAU4uB,EAAQrpB,GAErE,IAAKmyF,GAAaA,EAAUnpF,MAAM7B,MAAQgrF,EAAUnpF,MAAM5B,IACxD,OAAO,KAGT,IAAKE,EAAawnB,oBAAsBxnB,EAAawnB,kBAAkBmjE,GACrE,OAAO,KAGT,MAAQv8C,IAAKs9C,EAAevpF,SAAUwpF,GACpC3rF,EAAawnB,kBAAkBmjE,GAEjC,IAAIxoF,EACAwpF,IACFxpF,EACE5F,EAAAA,UAAAA,SAAAA,YAA6BovF,EAAmBhwE,OAChDiwE,GAAAA,EAAaC,gBAAgBF,EAAmBhwE,OAGpD,MAAMyyB,EAAOu8C,EAA+Ce,EAAhCjB,GAAeiB,EAE3C,MAAO,CACL78F,WAAYmR,EAAanR,WACzBiS,WACAG,WACA0pF,cACAv8C,MACAy8C,YACA1oF,WACA7B,KAAMsqF,GAASruD,GAAK,IAAO,EAC3Bl9B,UACAysF,kBAAmC,IAAhBnB,QAAiC1tF,IAAZoC,MAK9C,OAAOqrF,EAAavuF,OAAOwuB,WC1IvB,OAAEohE,IAAWhpF,EAAAA,MAEbi4D,GAAsBA,EAC1BxpE,kBACA3C,iBAIA,MAAM,2BAAE6C,GAA+BF,EAAgBK,UAChD64F,EAAcsB,IAAmBh9F,EAAAA,EAAAA,UAAgB,KACjDi9F,EAAWC,IAAgBl9F,EAAAA,EAAAA,WAAS,GACrCqG,GAAc82F,EAAAA,EAAAA,MAEdC,GAA4B98F,EAAAA,EAAAA,aAC/Bq8C,GACyBj6C,EAA2Bka,qBACjBygF,qBAEjBlwF,OAAOytD,IACtB,MAAM0iC,EAAoB1iC,aAAcv2D,EAAAA,mBAAqBu2D,EAAG1oD,kBAAoB,GACpF,OACEyqC,EAAUz4C,SAAWo5F,EAAkBp5F,QACvCy4C,EAAU1L,MAAMh/B,GAAYqrF,EAAkB74F,SAASwN,MAI7D,CAACvP,IAGG64F,GAAmBj7F,EAAAA,EAAAA,aAAY,CAAC6D,EAAU8N,KAC9C,MAAMkpF,EAAch3F,EAASgT,YAAYhF,KAAK29C,GAASA,EAAMx4C,eAAiBrF,IAAW69C,MAEzF,MDzByCytC,EAACtrF,EAAkBkpF,KAC9D,MAAMpoE,EAASuzD,EAAAA,MAAUxzD,UAAU7gB,GAEnC,IAAK8gB,GAAuC,OAA7BA,EAAOrX,SAASzQ,SAC7B,OAAO,EAGT,MAAMuyF,EAAgBrC,EAAYtqC,cAAcC,iBAAiB,GAEjE,GAAI0sC,EAAcxsC,UAAY,EAC5B,OAAO,EAGT,MAAMysC,EAAa,GACbC,EAAa,GAKnB,GAHAF,EAAcrsC,aAAa,EAAGssC,GAC9BD,EAAcrsC,aAAa,EAAGusC,GAER,IAAlBD,EAAW,IAA8B,IAAlBA,EAAW,IAA8B,KAAlBC,EAAW,GAC3D,OAAO,EAGT,MAAMC,EAAkBD,EAAW,GAC7BE,EAAcJ,EAAcxsC,UAC5B6sC,EAAmB,GAEzB,IAAK,IAAIj8E,EAAI,EAAGA,EAAIg8E,EAAah8E,IAE/B,GADA47E,EAAcrsC,aAAavvC,EAAGi8E,GAC1BA,EAAiB,KAAOF,EAC1B,OAAO,EAIX,OAAO,GCTDJ,CAA8BtrF,EAAUkpF,GACnCD,GAAeC,EAAa,GDcEA,KACzC,MAAMqC,EAAgBrC,EAAYtqC,cAAcC,iBAAiB,GAC3D8sC,EAAcJ,EAAcxsC,UAC5B8sC,EAAiB,GAEvBN,EAAcrsC,aAAa,EAAG2sC,GAC9B,MAAMC,EAAmBD,EAAe,GAExC,IAAK,IAAIl8E,EAAI,EAAGA,EAAIg8E,EAAah8E,IAAK,CACpC,MAAMi8E,EAAmB,GAEzB,GADAL,EAAcrsC,aAAa,EAAG0sC,GAC1BA,EAAiB,KAAOE,EAC1B,OAAO,CAEX,CAEA,OAAO,GC7BMC,CAA4B7C,GAC9BD,GAAeC,EAAa,QAD9B,GAKN,IAEG8C,GAA2B39F,EAAAA,EAAAA,aAAY,KAC3C,MAAM6D,EAAWzB,EAA2B0B,uBAAuBvE,GAC7DmR,EAAetO,EAA2BuO,gBAAgBpR,GAEhEy7F,GAAoBn3F,EAAU6M,EAAcuqF,GAAkB/+E,KAAKnC,IACjE2iF,EAAgB3iF,MAEjB,CAACxa,EAAY6C,EAA4B64F,IAEtC2C,GAA+B59F,EAAAA,EAAAA,aACnCimC,IACE,MAAM,OAAE3yB,GAAW2yB,GACb,SAAEt0B,EAAQ,MAAES,GAAUkB,EACtBuqF,EAAiBzC,EAAavpF,KAAKisF,GAAMA,EAAGnsF,WAAaA,GAE/D,IAAKksF,EACH,OAGF,MAAME,EAASF,EAAe/+C,IACxB5qC,EAAc9B,EAAM6B,MAAQ7B,EAAM4B,MAClCG,EAAe/B,EAAM4B,MAAQE,EAAc,EAEjD,GAAIA,IAAgB6pF,EAAO7pF,aAAeC,IAAiB4pF,EAAO5pF,aAChE,OAGF,MAAM6pF,EAAiB,IAClBH,EACH/+C,IAAK,CACH5qC,cACAC,iBAIJuoF,EACEtB,EAAa73F,IAAIoR,GACfA,IAAgBkpF,EAAiBG,EAAiBrpF,KAIxD,CAACymF,IAGG6C,GAAwCn8F,EAAAA,EAAAA,SAC5C,IAAMqF,KAASy2F,EAA8B,KAC7C,CAACA,IAGGM,GAAkBl+F,EAAAA,EAAAA,aACtB,CAAC2R,EAAUmtC,KACT,MAAMj7C,EAAWzB,EAA2B0B,uBAAuBvE,GAE7D4+F,EAAW,CACfnqF,MAAO8qC,EAAI3qC,aAAe2qC,EAAI5qC,YAAc,EAC5CD,MAAO6qC,EAAI3qC,aAAe2qC,EAAI5qC,YAAc,GAG9CrQ,EAASsS,cAAc,CAAExG,SAAUwuF,GAAYxsF,GAC/C9N,EAASuS,UAEX,CAAChU,EAA4B7C,IAGzB6+F,GAAsBp+F,EAAAA,EAAAA,aAC1B,CAACT,EAAY8+F,EAAc1sF,EAAU5B,KACnC,MAAMlM,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,IAAKsE,EACH,OAGF,MAAMm5F,EACJn5F,aAAoBE,EAAAA,mBAAqBF,EAAS+N,kBAAoB,GACtDkrF,EAA0BE,GAElC93F,QAAQo1D,IAChBA,EAAGnkD,cAAc,CAAEtD,SAAU,CAAE9C,YAAa4B,GAC5C2oD,EAAGlkD,YAGP,CAAC0mF,EAA2B16F,IAIxBk8F,GAAoCt+F,EAAAA,EAAAA,aAAY,KACpD48F,GAAa,GACbe,KACC,CAACA,KAGJ97F,EAAAA,EAAAA,WAAU,KACR3B,SAASyB,iBAAiB86F,GAAO/oF,aAAcuqF,GAAuC,GACtFjuE,EAAAA,YAAYruB,iBACV86F,GAAO8B,+BACPD,GAGF,MAAME,EAAaC,YAAY,KACzB9B,GACFgB,KAED,KAEH,MAAO,KACLz9F,SAAS0B,oBACP66F,GAAO/oF,aACPuqF,GACA,GAEFjuE,EAAAA,YAAYpuB,oBACV66F,GAAO8B,+BACPD,GAEF1b,cAAc4b,KAEf,CACDb,EACAM,EACAK,EACA3B,IAIF,MAAM+B,GAAgB58F,EAAAA,EAAAA,SAAQ,IACrBiE,GAAaxC,IAAI8I,GAAMA,EAAGC,uBAAuByB,QAAU,GACjE,CAAChI,IAsBJ,OApBAlE,EAAAA,EAAAA,WAAU,KACR,MAAM,YAAEyD,GAAgBlD,EAA2BkC,UACjDlC,EAA2BmC,OAAOkmF,yBAClC,EAAG/5E,mBACGA,EAAanR,aAAeA,GAC9Bo+F,MAUN,OAJIe,EAAc96F,SAAW+4F,GAC3BgB,IAGK,KACLr4F,MAED,CAAC/F,EAAY6C,EAA4Bu7F,EAA0Be,EAAe/B,IAGnF7sF,EAAAA,cAAC6uF,GAAAA,IAAY,CAACC,aAAa,GACzB9uF,EAAAA,cAAC6uF,GAAAA,IAAa/E,OAAM,KAAC,gBACrB9pF,EAAAA,cAAC6uF,GAAAA,IAAazE,QAAO,CAACtzD,UAAU,iBAC7Bw0D,EAAa73F,IAAI,CAACoR,EAAa2M,IACzB3M,EAAY4mF,UAKfzrF,EAAAA,cAACmS,GAAAA,IAAW,CACV/Z,IAAKyM,EAAYhD,SACjB4pF,UAAW5mF,EAAY4mF,UACvBz8C,IAAKnqC,EAAYmqC,IACjB9tC,KAAM2D,EAAY3D,KAClBwrF,kBAAmB7nF,EAAY6nF,kBAC/B3pF,SAAU8B,EAAY9B,SACtBgsF,YAAa//C,GAAOo/C,EAAgBvpF,EAAYhD,SAAUmtC,GAC1D/uC,QAAS4E,EAAY5E,QACrB+uF,gBAAiB/uF,GACfquF,EAAoBzpF,EAAYpV,WAAY+hB,EAAG3M,EAAYhD,SAAU5B,KAdlE,MAmBc,IAAxBqrF,EAAax3F,SAAiB+4F,GAC7B7sF,EAAAA,cAAA,OAAK82B,UAAU,kDAAiD,qCAS1E8kC,GAAoB95B,UAAY,CAC9B1vC,gBAAiB2vC,KAAAA,OAAiBC,WAClCvyC,WAAYsyC,KAAAA,OAAiBC,YAG/B,YC7OMitD,GAA4BA,EAAG78F,sBACnC,MAAOvC,IAAgBC,EAAAA,GAAAA,QACjB,iBAAEC,GAAqBF,EAE7B,OACEmQ,EAAAA,cAAAA,EAAAA,SAAA,KACGjQ,GACCiQ,EAAAA,cAAC47D,GAAmB,CAClBxpE,gBAAiBA,EACjB3C,WAAYM,MAOtBk/F,GAA0BntD,UAAY,CACpC1vC,gBAAiB2vC,KAAAA,OAAiBC,YAGpC,Y,gBCRO,MAAMktD,GAAgB95D,IAC3B,MAAM,MAAE66C,EAAK,YAAEkf,EAAW,SAAE5G,EAAQ,UAAE6G,EAAS,aAAEC,GAAiBj6D,EAE5Dk6D,EAAUrf,GAAOqf,QAEvB,IAAK,MAAMC,KAASJ,EAClB,IAAIG,GAAWC,EAAMn6D,OAAOk6D,UAAYA,EAAxC,CAGA,GAAIF,GAAaG,EAAM9iF,OAAS2iF,EAC9B,OAAOpvF,EAAAA,aAAmBuvF,EAAO,IAAKn6D,EAAOmzD,SAAUgH,EAAMn6D,MAAMmzD,WAErE,IAA2C,IAAvC8G,GAAc7nE,QAAQ+nE,EAAM9iF,MAC9B,OAAO2iF,EAAU,IAAKh6D,EAAOmzD,SAAUgH,GALzC,CASF,IAAKhH,EACH,MAAM,IAAInyF,MAAM,2BAA2Bg/B,EAAM7Y,+BAA+B0zD,GAAO1zD,QAEzF,OAAOvc,EAAAA,aAAmBuoF,EAAUnzD,IAIhCo6D,GAAgB,CAACC,GAAgBrF,GAASsF,IAezC,SAASC,GAAev6D,GAC7B,MAAM,SAAEw6D,EAAQ,MAAEz5C,EAAK,SAAEoyC,EAAQ,eAAEsH,EAAc,KAAEpjF,GAAS2oB,EACtD06D,GAAaz9F,EAAAA,EAAAA,MACnB,IAAI8Z,EAAeipB,EAAMjpB,aACzB,MAAM4jF,EAASH,EAASI,iBAAiB75C,EAAOy5C,EAAUE,GAE1D,IAAK3jF,EAAc,CACjB,MAAM8jF,EAAeF,EAAO/3E,SAASjW,KAAKkuE,GAASA,EAAMigB,YACzD/jF,EAAe8jF,GAAc73F,KAAO63F,GAAchkF,KACpD,CAEA,MAAMkkF,EACHx3F,MAAMC,QAAQuT,IAAiBA,GAAkBA,GAAgB,CAACA,IAAkB,GACjFikF,EAAoBP,EAAiB7vF,EAAAA,SAAeqwF,QAAQR,GAAkB,GAC9ES,EAAc/H,EAAWvoF,EAAAA,SAAeqwF,QAAQ9H,GAAY,GAC5D4G,EAAciB,EAAkB7mB,OAAO+mB,GAE7C,OACEtwF,EAAAA,cAACkvF,GAAa,CACZC,YAAaA,EACbY,OAAQA,EACRX,UAAWK,GACXG,SAAUA,EACVzjF,aAAcgkF,EACd5zE,KAAM,YAAcqzE,EAASrzE,MAE7Bvc,EAAAA,cAACuwF,GAAgB,CAACh0E,KAAK,qBAG7B,CAEA,SAASg0E,GAAiBn7D,GACxB,MAAM,OAAE26D,EAAM,aAAE5jF,EAAY,SAAEyjF,EAAQ,YAAET,EAAW,QAAEl3D,GAAY7C,EACjE,OAAK+5D,GAAgBY,EAIjBxkE,QAAQ0M,GACHj4B,EAAAA,aAAmBo1B,EAAMmzD,SAAUnzD,GAI1Cp1B,EAAAA,cAACwwF,GAAAA,IAAS,CACR/jF,KAAMmjF,EAASnjF,MAAQ,WACvBqqB,UAAU,aACV3qB,aAAcA,GAEb,IAAI4jF,EAAO52F,WAAW1F,IAAI,EAAE2E,EAAK63E,KAE9BjwE,EAAAA,cAACywF,GAAAA,IAAa,CACZr4F,IAAK63E,EAAM73E,IAAM,KACjBK,MAAOw3E,EAAM73E,KAEb4H,EAAAA,cAACkvF,GAAa,CACZC,YAAaA,EACblf,MAAOA,EACPmf,UAAWM,GACXnzE,KAAK,2BAEPvc,EAAAA,cAACkvF,GAAa,CACZC,YAAaA,EACblf,MAAOA,EACPmf,UAAWhF,GACXiF,aAAcG,GACdjzE,KAAK,8BA9BR,IAqCX,CAEA,SAASkzE,GAAer6D,GACtB,MAAM,OAAE26D,EAAM,SAAExH,GAAanzD,EAC7B,OAAK26D,EAGE,IAAIA,EAAO/3E,UAAUvkB,IAAIw8E,GAC9BjwE,EAAAA,aAAmBuoF,EAAU,IACxBnzD,EACHmzD,SAAUA,EAASnzD,MAAMmzD,SACzBtY,WACGA,EACH73E,IAAK63E,EAAMhkE,SARN,IAWX,CAEA,SAASm+E,GAAQh1D,GACf,MAAM,SAAEmzD,EAAQ,QAAEtwD,KAAY63D,GAAe16D,GACvC,MAAE66C,GAAU76C,EAGlB,OAFA/8B,OAAO6hB,OAAO41E,EAAY7f,GAErBA,EAGDh4C,EACKj4B,EAAAA,aAAmBuoF,EAAU,IAAKtY,KAAU76C,EAAOmzD,SAAUA,EAASnzD,MAAMmzD,WAGnFvoF,EAAAA,cAAC0wF,GAAAA,IAAgB,KACd1wF,EAAAA,aAAmBuoF,EAAU,IAAKtY,KAAU76C,EAAOmzD,SAAUA,EAASnzD,MAAMmzD,YAPxE,IAUX,CAEA,SAASmH,GAAQt6D,GACf,MAAM,SAAEmzD,EAAQ,QAAEtwD,KAAY63D,GAAe16D,GACvC,MAAE66C,GAAU76C,EAGlB,OAFA/8B,OAAO6hB,OAAO41E,EAAY7f,GAErBA,EAGDh4C,EACKj4B,EAAAA,aAAmBuoF,EAAUuH,GAGpC9vF,EAAAA,cAAC2wF,GAAAA,IAAgB,CACfl4F,MAAOw3E,EAAMx3E,MACbw/B,SAAS,GAETj4B,EAAAA,cAAA,WACGA,EAAAA,aAAmBuoF,EAAUuH,GAC9B9vF,EAAAA,cAAC4wF,GAAAA,IAAe,CACdx4F,IAAI,cACJ0+B,UAAU,sEAdT,IAmBX,CAEA64D,GAAevF,QAAUA,GACzBuF,GAAeD,QAAUA,GACzBC,GAAea,UAAYf,GAE3B,MC/LA,GD+LA,G,2NE1Le,SAASoB,GAAuBz7D,GAC7C,MAAM,MAAEnpB,EAAK,MAAEkqC,EAAK,MAAE85B,EAAK,aAAE6gB,GAAiB17D,GACxC,gBAAE/1B,IAAoBhN,EAAAA,EAAAA,MAK5B,OACE2N,EAAAA,cAAC+wF,GAAAA,IAAgB3qD,GAAA,CACfn6B,MAAOA,GAAgB,eACvBhC,KAAMksC,EACN66C,SARaA,CAAC76D,EAAG5M,EAAS71B,KAC5B2L,EAAgBkF,IAAIglB,EAAS,CAAE71B,MAAKwjB,cAAexjB,EAAKkC,oBAAqBugD,MAQvE85B,EAAK,CACT73E,IAAK63E,EAAM73E,MAEX4H,EAAAA,cAAC+wF,GAAAA,IAAiBjH,OAAM,CAAC1xF,IAAI,0BAC1B04F,GAAgB7gB,EAAMghB,SAAWH,EAAa,IAAK17D,EAAO+gB,MAAO/gB,EAAM87D,YAE1ElxF,EAAAA,cAAC+wF,GAAAA,IAAiBvoD,KAAI,CAACpwC,IAAI,yBAGjC,CCxBA,MAAM,UAAE+4F,GAAS,yBAAEC,IAA6Bz2F,EAAAA,GAAM02F,mBAEzCC,GAAqC,CAChD,CACErlF,MAAO,eACPlP,OAAQo0F,GAAUC,KAEpB,CACEnlF,MAAO,sBACPlP,OAAQq0F,KAQCG,GAAmBA,CAACp7C,EAAOy5C,KACtC,MAAMG,EAAS,IAAIhjF,KACb,UAAEykF,GAAc5B,EAEtB,IAAK,MAAM6B,KAAYD,EAAW,CAChC,MAAMj1E,EAAOk1E,EAASzvF,IAAMyvF,EAASxlF,MACrC8jF,EAAO7iF,IAAIqP,EAAM,IACZqzE,KACA6B,EACHt7C,MAAO,GACP86C,QAAyB,IAAhBlB,EAAO9qE,KAChBhZ,MAAOsQ,EACPnkB,IAAKmkB,GAET,CACA45B,EAAM/gD,QAAQ6G,IACZ,IAAK,MAAMw1F,KAAYD,EACrB,GAAIC,EAAS10F,OAAOd,GAAO,CACzB,MAAMsgB,EAAOk1E,EAASzvF,IAAMyvF,EAASxlF,MAErC,YADA8jF,EAAO1tF,IAAIka,GAAM45B,MAAM7gD,KAAK2G,EAE9B,IAGJ,IAAK,MAAMw1F,KAAYD,EAAW,CAChC,MAAMj1E,EAAOk1E,EAASzvF,IAAMyvF,EAASxlF,MAChC8jF,EAAO1tF,IAAIka,GAAM45B,MAAMriD,QAC1Bi8F,EAAO17D,OAAO9X,EAElB,CACA,OAAOwzE,GAGF,SAAS2B,GAAiCt8D,GAC/C,MAAM,MAAE+gB,EAAK,SAAEoyC,EAAQ,SAAEqH,EAAW,CAAC,EAAC,aAAEkB,EAAY,MAAE7gB,EAAK,QAAE15C,GAAYnB,EAEzE,OACEp1B,EAAAA,cAAC2vF,GAAc,CACbC,SAAU,CACRI,iBAAkBuB,GAClBh1E,KAAM,2BACNi1E,UAAWF,GACX55E,iBAAkBu4D,GAAOv4D,oBACtBk4E,GAELz5C,MAAOA,EACP05C,eAAgBtH,GAEhBvoF,EAAAA,cAAC2vF,GAAea,UAAS,CAACmB,UAAU,QAClC3xF,EAAAA,cAAC6wF,GAAsB,CACrBC,aAAcA,EACdI,SAAU/6C,EACV5f,QAASA,KAKnB,CAEA,aC7EM,WAAErB,IAAev6B,EAAAA,GAEhB,SAASi3F,GAAyBx8D,GACvC,MAAM,iBAAE1d,GAAqB0d,EAC7B,IAAK1d,EACH,OAAO,KAET,MAAMm6E,EAAYxwE,EAAAA,GAAmBywE,SAASp6E,GAC9C,IAAKm6E,GAAWjO,QAAQ9vF,OACtB,OAAO,KAGT,MAAMi+F,EAAeF,EAAUjO,OAAO,GAAGztF,UAAU,IAC7C,UAAE4+B,EAAS,iBAAEi9D,GAAqBD,EAExC,OACE/xF,EAAAA,cAACiyF,GAAAA,IAAY,CACXC,KAAMh9D,GAAWH,GACjBhK,YAAainE,GAGnB,CCrBO,SAASG,IAAyB,MAAEh8C,EAAK,iBAAEz+B,EAAgB,kBAAEhiB,EAAiB,QAAE6gC,IACrF,MAAM,gBAAEl3B,IAAoBhN,EAAAA,EAAAA,MAG5B,OAFkB8jD,GAAOriD,OAGhB,KAIPkM,EAAAA,cAAA,OAAK82B,UAAU,6DACb92B,EAAAA,cAAA,OAAK82B,UAAU,kBACb92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLjT,KAAK,KACLkT,QAAQ,QACRrB,UAAU,SACVH,QAASA,KACPt3B,EAAgBopB,WAAW,gCAAiC,CAC1D/Q,mBACAhiB,wBAIJsK,EAAAA,cAAC42B,GAAAA,IAAMa,SAAQ,CAACX,UAAU,YAC1B92B,EAAAA,cAAA,QAAM82B,UAAU,QAAO,QAGzB92B,EAAAA,cAACk4B,GAAAA,IAAM,CACLjT,KAAK,KACLkT,QAAQ,QACRrB,UAAU,SACVH,QAASR,IACPA,EAAEuC,kBACEnC,GAAS67D,SACX77D,EAAQ67D,SAAS,CAAE16E,mBAAkBhiB,sBAGvC2J,EAAgBkF,IAAI,mBAAoB,CACtCmT,mBACAhiB,wBAIJsK,EAAAA,cAAC42B,GAAAA,IAAMC,IAAG,MAAG,aAGf72B,EAAAA,cAACk4B,GAAAA,IAAM,CACLjT,KAAK,KACLkT,QAAQ,QACRrB,UAAU,SACVH,QAASR,IACPA,EAAEuC,kBACEnC,GAAS87D,SACX97D,EAAQ87D,WAGVhzF,EAAgBopB,WAAW,oBAAqB,CAC9C/yB,wBAIJsK,EAAAA,cAAC42B,GAAAA,IAAMe,OAAM,MAAG,WAM1B,CAEA,YC3DA,SATO,SAAiCvC,GACtC,OACEp1B,EAAAA,cAAA,WACEA,EAAAA,cAAC4xF,GAA6Bx8D,GAC9Bp1B,EAAAA,cAACmyF,GAA6B/8D,GAGpC,GCHM,mBAAEi8D,IAAuB12F,EAAAA,GAMlB23F,GAAeA,CAACn8C,EAAOy5C,EAAUE,KAC5C,MAAMC,EAAS,IAAIhjF,KACb,eAAEwlF,GAAmB3C,GACrB,kBAAEj6F,GAAsBm6F,EAAW19F,gBAAgBK,SAOzD,IAAI+/F,EAAeC,EAmCnB,OAjCAt8C,EACGp5C,OAAOd,GAAQA,EAAKO,uBACpBpH,QAAQ6G,IACP,MAAMy2F,EAVsBz2F,IACXtG,EAAkByG,mBAAmBH,EAAKO,uBAC3CrG,UAAU,GAAGuhB,iBAQZi7E,CAAwB12F,GACzC,IAAK8zF,EAAOr0E,IAAIg3E,GAAW,CACzB,MAAMv8C,EAAQ,GACRp5C,EAASs0F,GAAmBuB,UAChCvB,GAAmBwB,6BAA6BH,GAChD9C,EAAS7yF,QAELkzE,EAAQ,IACT2f,EACHz5C,QACAvgD,oBAAqBugD,EACrB/9C,IAAKs6F,EACLxC,WAAYwC,IAAaH,EACzB76E,iBAAkBg7E,EAClB31F,SACArH,kBAAmBqH,GAEjBkzE,EAAMigB,aAAesC,IACvBA,EAAgBviB,GAElBwiB,IAAexiB,EACf8f,EAAO7iF,IAAIwlF,EAAUziB,EACvB,EACKuiB,GAAiBC,IACpBA,EAAWvC,YAAa,GAEZH,EAAO1tF,IAAIqwF,GACnBv8C,MAAM7gD,KAAK2G,KAGd8zF,GAGF,SAAS+C,GAAkB19D,GAChC,MAAM,MAAE+gB,EAAK,SAAEy5C,EAAW,CAAC,EAAC,SAAErH,GAAanzD,EAErC29D,GAAS1gG,EAAAA,EAAAA,MACT2gG,GAAoBjG,EAAAA,EAAAA,IAA6BgG,GACjDR,EAAiBS,IAAoB,IAAIt7E,iBAE/C,OACE1X,EAAAA,cAAC2vF,GAAc,CACbC,SAAU,CACRrzE,KAAM,eACNyzE,iBAAkBsC,GAClBC,oBACG3C,GAELz5C,MAAOA,EACP19C,MAAO,CAAC85F,GACR1C,eAAgBtH,GAEhBvoF,EAAAA,cAAC2vF,GAAeD,QAAO,KACrB1vF,EAAAA,cAACizF,GAAuB,OAE1BjzF,EAAAA,cAAC0xF,GAAgC,CAACa,eAAgBA,IAGxD,CAEA,YC/Be,SAASW,GAAiB99D,GACvC,MAAM,kBAAE1/B,EAAmBy9F,eAAgBC,EAAc,SAAE7K,GAAanzD,EAElEx/B,GAAsBH,EAAAA,GAAAA,GAAgB,CAAEC,sBAE9C,IAAKE,EAAoB9B,OACvB,OAAOs/F,EACLpzF,EAAAA,cAACozF,EAAc,CAACj9C,MAAOvgD,IAEvBoK,EAAAA,cAAA,QAAM82B,UAAU,cAAa,mBAIjC,GAAIyxD,EAAU,CAOZ,OANevoF,EAAAA,SAAevM,IAAI80F,EAAUgH,GAC1CvvF,EAAAA,aAAmBuvF,EAAO,CACxBp5C,MAAOvgD,EACPmH,OAAQrH,IAId,CAEA,OAAOsK,EAAAA,cAAC8yF,GAAiB,CAAC38C,MAAOvgD,GACnC,CC3EA,MAsFA,GAtFuBy9F,EAAGh0F,kBAAiBjN,kBAAiBqsB,sBAgDnD,CACL,CACElC,KAAM,4BACN+2E,UAAWA,IACFtzF,EAAAA,cAACivF,GAAyB,CAAC78F,gBAAiBA,KAGvD,CACEmqB,KAAM,mBACNg3E,SAAU,aACVC,UAAW,UACXj9F,MAAO,cACP+8F,UAAWJ,IAEb,CACE32E,KAAM,oBACNg3E,SAAU,mBACVC,UAAW,eACXj9F,MAAO,eACP+8F,UAlE6BG,EAAG/lF,mBAEhC1N,EAAAA,cAACsoF,GAAiB,CAChBjpF,gBAAiBA,EACjBjN,gBAAiBA,EACjBqsB,iBAAkBA,EAClB/Q,cAAe,IACVA,MA6DT,CACE6O,KAAM,4BACNg3E,SAAU,mBACVC,UAAW,eACXj9F,MAAO,eACP+8F,UA5DqCI,EAAGhmF,mBAExC1N,EAAAA,cAACsoF,GAAiB,CAChBjpF,gBAAiBA,EACjBjN,gBAAiBA,EACjBqsB,iBAAkBA,EAClB/Q,cAAe,IACVA,MAuDT,CACE6O,KAAM,6BACNg3E,SAAU,mBACVC,UAAW,eACXj9F,MAAO,eACP+8F,UAtDsCK,EAAGjmF,oBAC3C,MAAM,eAAEuf,GAAmB76B,EAAgBK,SAE3C,OACEuN,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC4zF,EAAAA,QAAO,CACNC,gBAAiB5mE,EAAe6mE,SAASC,oBACzC9nF,MAAM,uBAERjM,EAAAA,cAACsoF,GAAiB,CAChBjpF,gBAAiBA,EACjBjN,gBAAiBA,EACjBqsB,iBAAkBA,EAClB/Q,cAAe,IACVA,S,gBC/C6B,IAErCsmF,GAAkBrwF,EAAAA,MAAAA,gBCGlB,SAASswF,IAAqC,oBACnDx6F,EAAmB,qBACnB9B,EAAoB,gBACpB0H,IAKA,IAAI60F,GAAiB,EACrB,MAAQ1+F,YAAa2+F,GAAyB16F,EAAoB26F,mBAChE36F,EAAoBhF,OAAO0F,2BAC3B8V,OAAS5T,qBAEP,MAAMg4F,EAAiC18F,EAAqBG,iBAAiB,oDAEvEJ,EAAe+B,EAAoBgP,gBAAgBpM,GAEzD,IAAK3E,GAAgB28F,EACnB,OAGF,MAAM37F,EAAef,EAAqBG,iBAAiB,kCAGrDg7C,EAAiBz6C,OAAOsgB,KAAKjhB,EAAaE,UAC7CnE,IAAIylD,GAAS/P,SAAS+P,IACtBn8C,OAAOm8C,GAASA,EAAQ,GAE3B,IAAK,MAAM9/C,KAAgB05C,EAAgB,CACzC,MAAM/5C,EAAUrB,EAAaE,SAASwB,GAClCL,GAASE,aAAa4+B,YAAYC,eAEpCz4B,EAAgBopB,WAAW,0BAA2B,CACpDpsB,iBACAjD,gBAGN,CAEA,MAAM85C,QpFzBLjjC,gBAAuC,aAC5CvY,EAAY,eACZ2E,EAAc,aACd3D,IAMA,IAAKhB,EAEH,OADAwL,QAAQyD,MAAM,gCAAiCtK,GACxC,KAGT,MAAMy2C,EAAiBz6C,OAAOsgB,KAAKjhB,EAAaE,UAC7CnE,IAAIylD,GAAS/P,SAAS+P,IACtBn8C,OAAOm8C,GAASA,EAAQ,GAE3B,GAA8B,IAA1BpG,EAAeh/C,OAEjB,OADAoP,QAAQyD,MAAM,qCAAsCtK,GAC7C,KAGT,MAAMrE,QAAcm2B,EAAAA,UAAAA,aAAAA,cAAsD,CACxE9xB,iBACAy2C,iBACA7G,KAAM,eAGR,IAAKj0C,EACH,OAAO,KAGT,MAAMk7C,EAAsB,IAAKx7C,GACjC,IAAIy7C,GAAa,EAmDjB,OAhDA96C,OAAOc,QAAQnB,GAAO5C,QAAQ,EAAEgE,EAAck7F,MAC5C,MAAMp7C,EAAQ/P,SAAS/vC,GAElB85C,EAAoBt7C,SAASshD,GAAOjgD,cACvCi6C,EAAoBt7C,SAASshD,GAAOjgD,YAAc,CAAC,EACnDk6C,GAAa,GAIf,MAAMtb,EAAaqb,EAAoBt7C,SAASshD,GAAOjgD,YAAY4+B,YAAc,CAAC,EAE9Ey8D,EAAarN,QACfqN,EAAarN,MAAM7xF,QAAQoiD,IAEpB9+C,EAAa8+C,EAAKj7B,OAInBi7B,GAAQA,EAAKj7B,OACfsb,EAAW2f,EAAKj7B,MAAQ,CACtBA,KAAMi7B,EAAKj7B,KACXhmB,MAAOmC,EAAa8+C,EAAKj7B,MACzB9jB,MAAO++C,EAAK/+C,MACZsgB,KAAMy+B,EAAKz+B,KACXw7E,MAAOl8F,OAAOsgB,KAAKjgB,GAAc8uB,QAAQgwB,EAAKj7B,UAKhD7jB,EAAaiqB,QAEX2xE,EAAa3xE,SAAWkV,EAAWlV,SACrCkV,EAAWlV,OAAS,CAClBpG,KAAM,SACNhmB,MAAO,SACPkC,MAAO67F,EAAa3xE,OAAOlqB,MAC3BsgB,KAAMu7E,EAAa3xE,OAAO5J,KAC1Bw7E,MAAOl8F,OAAOsgB,KAAKjgB,GAAc8uB,QAAQ,YAM/C0rB,EAAoBt7C,SAASshD,GAAOjgD,YAAY4+B,WAAaA,EAC7Dsb,GAAa,KAIVA,EAAaD,EAAsB,IAC5C,CoF7DwCshD,CAAwB,CACxD98F,eACA2E,iBACA3D,kBAGGw7F,GAAkBhhD,GACrBz5C,EAAoBk/B,wBAAwB,CAC1Ct8B,iBACAzE,SAAUs7C,EAAoBt7C,YAIpC,KAOF,MAAO,CAAEpC,YAJWA,KAClB0+F,GAAiB,EACjBC,KAGJ,CAKO,SAASM,IAAiC,oBAAEh7F,IACjD,MAAM,YAAEjE,GAAgBiE,EAAoBjF,UAC1CiF,EAAoBhF,OAAOwF,sBAC3BgW,OAAS5T,qBACP,MAAM3E,EAAe+B,EAAoBgP,gBAAgBpM,GAEzD,IAAK3E,EACH,OAGF,MACMg9F,EADkBvmE,EAAAA,WAAAA,MAAkCwmE,oBACT53F,OAC/CsO,GACEA,EAAWC,SAASN,WAAamjB,EAAAA,yBAA0CnjB,UAG/E,IAAI4pF,EAAe,GACnB,GAAKl9F,EAAL,CAKO,CACL,MAAMo7C,EAAiBz6C,OAAOsgB,KAAKjhB,EAAaE,UAC7CnE,IAAIylD,GAAS/P,SAAS+P,IACtBn8C,OAAOm8C,GAASA,EAAQ,GAIrB27C,EAAmCH,EAAyB33F,OAChEsO,GACEA,EAAWC,SAASjP,iBAAmBA,IACtCy2C,EAAez+C,SAASgX,EAAWC,SAASlS,eAGjDw7F,EAAeC,EAAiCphG,IAAI4X,GAAcA,EAAW6L,cAC/E,CAEA09E,EAAax/F,QAAQ1B,IACnBy6B,EAAAA,WAAAA,MAAkC7P,iBAAiB5qB,IAHrD,MAlBEkhG,EAAeF,EAAyBjhG,IACtC4X,GAAcA,EAAWC,SAASjP,iBAAmBA,KAyB7D,MAAO,CAAE7G,cACX,CClHO,MAAMs/F,GAAgB,CAC3BC,IAAK,MACLC,GAAI,KACJC,SAAU,YAqBNC,GAEI,EAFJA,GAOK,EAgBX,SAASC,GAAY1oF,GACnB,OAAQA,GACN,KAAKqoF,GAAcM,KACjB,MAAO,kBACT,KAAKN,GAAcC,IACjB,MAAO,mBACT,KAAKD,GAAcE,GACjB,MAAO,kBACT,QACE,MAAO,gBAEb,CAgIA,MCpKA,GAXc,CACZ71B,oBCZiCA,EACjCtiB,YACAxgD,iBACA5M,aACA2vE,6BACA3lE,0BAQA,MAAM/B,EAAe+B,EAAoBgP,gBAAgBpM,IAEnD,SAAEzE,GAAaF,EAEf29F,EAAmBh9F,OAAOsgB,KAAK/gB,GAAU9D,OAGzCk9E,EAAgBv3E,EAAoBg3C,iBAAiBhhD,GACvDuhF,IAEF5R,EAA6B/mE,OAAO2f,OAAOpgB,GAAUq4D,UACnDl3D,GAAWA,EAAQK,eAAiB43E,EAAc53E,eAGtD,IAAIk8F,EAA0Bl2B,EAA6BviB,EAGvDy4C,EAA0BD,EAAmB,EAC/CC,EAA0B,EACjBA,EAA0B,IACnCA,EAA0BD,EAAmB,GAK/C,MAAMj8F,EAAef,OAAO2f,OAAOpgB,GAAU09F,IAA0Bl8F,aAEvEK,EAAoB+oD,iBAAiBnmD,EAAgBjD,GACrDK,EAAoBgpD,oBAAoBpmD,EAAgBjD,EAAc3J,GACtE2vE,EAA6Bk2B,GD7B7BvX,oBHViCA,CAAC3rF,EAAiB3C,EAAYwnD,EAAW70B,KAC1E,MAAM,2BAAE9vB,EAA0B,kBAAEqD,GAAsBvD,EAAgBK,SAE1E,IAAK2vB,EAAiB,CAUpB,OATiB9vB,EAA2B0B,uBAAuBvE,GAIvCsuF,oBAAoB9mC,EAAW,CACzD4jC,gBAAgB,EAChBmD,UAAU,GAId,CAEA,GAAqC,UAAjC57D,EAAgBC,aAA0B,CAI5C,OAFmB1sB,EAAkByG,mBAAmB66C,EAAUz6C,uBACtCrG,UAAU1C,IAAI8jB,GAAYA,EAAS7Z,SAC/CrJ,SAAS4iD,EAAUzrC,kBACrC,CAGA,MAAM,YAAEkiC,GAAgBtrB,EAGlBmzE,EAeO,SACb5/F,EACA6G,GAEA,MAAMQ,EAAarH,EAAkByG,mBAAmBI,GAClDg5F,EAA0Bx4F,EAAW7G,UAAU,GAAGs/F,wBAExD,GAAwC,IAApCD,GAAyB1hG,OAC3B,OAIF,MAAM4hG,EAAepkD,GAAAA,GAAAA,WACnBkkD,EAAwB,GACxBA,EAAwB,GACxBA,EAAwB,IAEpBG,EAAerkD,GAAAA,GAAAA,WACnBkkD,EAAwB,GACxBA,EAAwB,GACxBA,EAAwB,IAEpBI,EAAiBtkD,GAAAA,GAAAA,MAAWA,GAAAA,GAAAA,SAAeokD,EAAcC,GAGzDE,EAAc,CAClB,CAAC7B,GAAgB5/B,OAAQ9iB,GAAAA,GAAAA,WAAgB,EAAG,EAAG,GAC/C,CAAC0iD,GAAgB1/B,SAAUhjB,GAAAA,GAAAA,WAAgB,EAAG,EAAG,GACjD,CAAC0iD,GAAgB3/B,UAAW/iB,GAAAA,GAAAA,WAAgB,EAAG,EAAG,IAKpD,IAAIwkD,EAAS,EACTC,EAAyB,GAC7B,IAAK,MAAOC,EAAGxtC,KAAMnwD,OAAOc,QAAQ08F,GAAc,CAIhD,MAAMI,EAAMn3F,KAAKkJ,IAAIspC,GAAAA,GAAAA,IAASskD,EAAgBptC,IAC1CytC,EAAMH,IACRA,EAASG,EACTF,EAAiBC,EAErB,CAEA,OAAOD,CACT,CA9D6BG,CACzBvgG,EACAshD,EAAUz6C,uBAGZ,OAAO+4F,IAAuB7nD,GGrB9BumD,qCAAoC,GACpCQ,iCAAgC,GAChC0B,sBD4CF,UAA+B,gBAC7B/jG,EAAe,WACf3C,EAAU,WACVuN,EAAU,oBACVo5F,EAAsB,GAAE,gBACxBC,EAAe,KACf5pF,IAEA,MAAM,wBAAE6pF,EAAuB,qBAAE3+F,GAAyBvF,EAAgBK,SAEpE04B,EADmB/4B,EAAgBmkG,kBACNC,WAG7BC,EAAsD,aAAvCtrE,GAAWurE,wBAEhC,OAAO,IAAI7qF,QAAQoE,eAAgBnE,EAASC,GAG1C,MAGM4qF,GAFJlqF,IAASqoF,GAAcE,GAAKyB,GAAgBtrE,GAAWyrE,kCA2D7D,SACEN,EACA3+F,EACAlI,EACAgd,GAEA,OAAO,IAAIZ,QAAQ,SAAUC,EAASC,GACpC,MAAM8qF,EA/GV,SAAoCpqF,GAClC,OAAQA,GACN,KAAKqoF,GAAcG,SACjB,MAAO,wCACT,KAAKH,GAAcC,IACjB,MAAO,yCACT,KAAKD,GAAcE,GACjB,MAAO,wCACT,QACE,MAAO,sCAEb,CAoGuB8B,CAA2BrqF,GACxCwmB,EAAUt7B,EAAqBG,iBAAiB++F,GAChDtgE,EAAU,CACd,CACEv0B,GAAI,aACJyK,KAAM,YACN7V,KAAM,KACN6B,MAAOy8F,IAET,CACElzF,GAAI,cACJyK,KAAM,UACN7V,KAAM,MACN6B,MAAOy8F,KAGL6B,EAAW34F,IACfk4F,EAAwBnrD,OACxBr/B,EAAQ1N,IAGVk4F,EAAwBhpE,KAAK,CAC3BtrB,GAAImzF,GAAY1oF,GAChBhd,aACAgd,KAAM,OACNwmB,UACAsD,UACAwgE,WACAC,eAAgBA,KACdV,EAAwBnrD,OACxBr/B,EAAQopF,KAEV+B,WAAYpmG,IACQ,UAAdA,EAAMuH,KACR2+F,EAAS7B,MAIjB,EACF,CAtGcgC,CAAYZ,EAAyB3+F,EAAsBlI,EAAYgd,GAC7EyoF,GAEJ,GAAIyB,IAAiBzB,IAMnB,GAJAkB,GAAqBhhG,QAAQg4B,IAC3BA,MAGE3gB,IAASqoF,GAAcC,IAEzBnjG,OAAOD,WAAWse,UAChB,MAAM+tD,QAAmBq4B,EAAgB,CACvCjpB,cAAepwE,EACfvN,eAGFqc,EAAQkyD,IACP,QACE,GAAIvxD,IAASqoF,GAAcG,SAAU,CAE1C,MAAMj3B,QAAmBq4B,EAAgB,CACvChnB,aAAcryE,EACdvN,aACA2C,oBAGF0Z,EAAQkyD,EACV,MAAO,GAAIvxD,IAASqoF,GAAcE,GAAI,CAEpC,MAAMmC,QAAwBd,EAAgBr5F,GAE9C8O,EAAQ,CACNsrF,aAAcT,EACdn6F,sBAAuBQ,EAAWR,sBAClC66F,oBAAqBr6F,EAAW7J,kBAChC1D,aACAioB,iBAAkBy/E,GAAiBz/E,iBACnC66B,mBAAoB4kD,GAAiB5kD,oBAEzC,OAGEzmC,EADEW,IAASqoF,GAAcE,IACjB,CACNoC,aAAcT,EACdn6F,sBAAuBQ,EAAWR,sBAClC66F,oBAAqBr6F,EAAW7J,kBAChC1D,cAMR,EACF,ECvHE2+C,gBAAeA,IERV,SAASkpD,GAAeliE,GAC7B,MAAM,MAAE66C,EAAK,WAAExqC,GAAerQ,EAC9B,IAAK66C,EAAM95B,OAAOriD,OAEhB,OADAoP,QAAQic,IAAI,sBAAuB8wD,EAAM95B,OAClC,KAET,MAAM,MAAEA,GAAU85B,GACXh0E,GAAQk6C,GACT,WAAE+5C,EAAU,UAAE53E,GAAcrc,EAE5B82F,GAAS1gG,EAAAA,EAAAA,MAET2+F,EAAWA,CAACngG,EAAO04B,EAAS9f,KAChC,MAAM/V,EAAMyiD,EAAM1iD,IAAIwI,GAAQA,EAAKvI,KAEnCq/F,EAAO1zF,gBAAgBkF,IAAIglB,EAAS,IAC/B9f,EACH/V,MACAkC,oBAAqBugD,EACrBA,QACAtlD,YAIG0mG,EAAgBC,IAAqB5nG,EAAAA,EAAAA,WAAS,GAErD,OACEoQ,EAAAA,cAAA,OAAK82B,UAAW,oDAAoD2O,KAElEzlC,EAAAA,cAACk4B,GAAAA,IAAM,CACLjT,KAAK,OACLkT,QAAQ,QACRrB,UAAW,+BACTo5D,IAAe53E,EAAY,cAAgB,sCAE7C,aAAYA,EAAY,OAAS,OACjCqe,QAASR,IACPA,EAAEuC,kBACFs4D,EAAS76D,EAAG,CAAC,oBAAqB,kCAGnC7d,EAAYtY,EAAAA,cAAC42B,GAAAA,IAAMgC,KAAI,CAAC9B,UAAU,YAAe92B,EAAAA,cAAC42B,GAAAA,IAAMiC,KAAI,CAAC/B,UAAU,aAG1E92B,EAAAA,cAACkxD,GAAAA,IAAY,CAAC2B,aAAcD,GAAQ4kC,EAAkB5kC,IACpD5yD,EAAAA,cAACmxD,GAAAA,IAAmB,CAACl5B,SAAO,GAC1Bj4B,EAAAA,cAACk4B,GAAAA,IAAM,CACLjT,KAAK,OACLkT,QAAQ,QACRrB,UAAW,+BACTo5D,GAAcqH,EAAiB,cAAgB,sCAEjD,aAAW,UACX5gE,QAASR,GAAKA,EAAEuC,mBAEhB14B,EAAAA,cAAC42B,GAAAA,IAAMw6B,KAAI,CAACt6B,UAAU,cAG1B92B,EAAAA,cAACw2B,GAAAA,IAAmB,CAACC,MAAM,OACzBz2B,EAAAA,cAAC02B,GAAAA,IAAgB,CAACC,QAASR,GAAK66D,EAAS76D,EAAG,sBAC1Cn2B,EAAAA,cAAC42B,GAAAA,IAAMe,OAAM,CAACb,UAAU,oBACxB92B,EAAAA,cAAA,QAAM82B,UAAU,QAAO,aAMnC,CAEA,Y,2NC5EA,SAAS2gE,GAAethE,GACtB,MAAM,MAAE85C,EAAK,QAAEt5C,EAAUs5C,GAAOt5C,SAAY/sB,KAC5C,GAAK+sB,EAUL,OANAzzB,QAAQic,IAAI,kBACZgX,EAAEuB,iBACFvB,EAAEuC,kBAEF/B,EAAQR,EAAG85C,IAEJ,EATL/sE,QAAQic,IAAI,sBAAuB8wD,EAUvC,CAEe,SAASynB,GAAsBtiE,GAC5C,MAAM,WAAEuiE,EAAa,EAAC,SAAE3nG,GAAW,EAAK,SAAE4nG,EAAQ,MAAEz+D,EAAK,KAAEviC,EAAMihG,KAAM38B,EAAO,MAAS9lC,EAEvF,OACEp1B,EAAAA,cAAC2wF,GAAAA,IAAgB,CACflrF,MAAO,CAAEkyF,WAAY,GAAGA,MAAgBG,QAAS,GACjD7/D,SAAS,GAETj4B,EAAAA,cAAA,OAAK82B,UAAW,yBAAyB9mC,EAAW,aAAe,wBACjEgQ,EAAAA,cAAA,UAAQ22B,QAAS8gE,GAAe5wE,KAAKuO,IACnCp1B,EAAAA,cAAA,QACE82B,UAAW,gDAA+C9mC,EAAW,eAAiB,kBAE3E6N,IAAVs7B,EAAsBn5B,EAAAA,cAAA,QAAM82B,UAAU,QAAQqC,GAAgB,KAC9Dy+D,GAAY53F,EAAAA,cAAC+3F,GAAAA,IAAW,CAACH,SAAUA,KAEtC53F,EAAAA,cAAA,YAAOpJ,IAERskE,GACCl7D,EAAAA,cAACk7D,EAAI90B,GAAA,GACChR,EAAK,CACTqQ,WAAW,2BAGfzlC,EAAAA,cAAC4wF,GAAAA,IAAe,CAAC95D,UAAU,qEAInC,CCxCO,SAASkhE,GAAgB5iE,GAC9B,MAAM,MAAE8jB,EAAK,KAAEj9C,GAASm5B,EACxB,OACEp1B,EAAAA,cAAC03F,GAAqB,CACpBv+D,MAAO+f,EAAQ,EACftiD,KAAMqF,EAAK+O,UAAY/O,EAAK1F,OAAS0F,EAAKgQ,MAC1C2rF,SAAS,OACT5nG,SAAUiM,EAAKi0F,WACf2H,KAAMI,GACNhoB,MAAO,CAAE95B,MAAO,CAACl6C,GAAO06B,QAASvB,EAAMuB,UAG7C,CAEe,SAASuhE,GAAqB9iE,GAC3C,MAAM,MAAE+gB,GAAU/gB,EACZ29D,GAAS1gG,EAAAA,EAAAA,MAETskC,EAAUA,CAACR,EAAG85C,KAClB,MAAM,MAAE95B,GAAU85B,EAGlB8iB,EAAO1zF,gBAAgBkF,IAAI,oBAAqB,CAC9C7Q,IAAKyiD,EAAM,GAAGziD,IACdkC,oBAAqBugD,EACrB85B,WAIJ,OACEjwE,EAAAA,cAACwwF,GAAAA,IAAS,CACR/jF,KAAK,WACLqqB,UAAU,iCAETqf,EAAM1iD,IAAI,CAACwI,EAAMi9C,KAChB,MAAQziD,YAAa0hG,EAAU,CAAC,GAAMl8F,EACtC,OACE+D,EAAAA,cAACywF,GAAAA,IAAa,CACZr4F,IAAK,wBAAwB6D,EAAKvI,MAClC+E,MAAOwD,EAAKvI,KAEZsM,EAAAA,cAACg4F,GAAe,CACd/7F,KAAMA,EACN7D,IAAK,mBAAmB6D,EAAKvI,MAC7BwlD,MAAOA,EACPviB,QAASA,IAEX32B,EAAAA,cAAC0wF,GAAAA,IAAgB,CAACt4F,IAAK,sBAAsB6D,EAAKvI,OAChDsM,EAAAA,cAAA,OAAK82B,UAAU,kBACb92B,EAAAA,cAAA,OAAK82B,UAAU,8EACZqhE,EAAQthG,SAAS/C,OAAS,GACzBqkG,EAAQthG,QAAQpD,IAAI,CAAC+P,EAAQ01C,IAC3Bl5C,EAAAA,cAAA,QAAM5H,IAAK,WAAW6D,EAAKvI,OAAOwlD,KAAU11C,UAUlE,CCzDO,MAAM40F,GAAoBA,CAACjiD,EAAOy5C,EAAUE,KACjD,MAAMC,EAAS,IAAIhjF,KACb,kBAAEpX,GAAsBm6F,EAAW19F,gBAAgBK,UACnD,4BAAEkO,GAAgCivF,EAoBxC,OAlBAz5C,EAAM/gD,QAAQ6G,IACZ,MAAM,sBAAEO,GAA0BP,EAElC,IAAK8zF,EAAOr0E,IAAIlf,GAAwB,CACtC,MAAMQ,EAAarH,EAAkByG,mBAAmBI,GACxDuzF,EAAO7iF,IAAI1Q,EAAuB,CAChC67F,OAAQ,KACRnI,WAAY1zF,GAAyBmE,KAClCivF,EACHz5C,MAAO,GACP/9C,IAAKoE,EACLyP,MAAO,sBACPjP,cAEJ,CACA+yF,EAAO1tF,IAAI7F,GAAuB25C,MAAM7gD,KAAK2G,KAGxC8zF,GAGF,SAASuI,GAAyBljE,GACvC,MAAM,MAAE66C,EAAK,WAAEigB,EAAU,WAAElzF,EAAU,KAAE66F,GAASziE,GAC1C,aAAEtc,EAAe,EAAC,kBAAEqc,GAAsBn4B,EAEhD,OACEgD,EAAAA,cAAC03F,GAAqB,CACpB9gG,KAAM,WAAWkiB,KAAgBqc,IACjCgE,MAAO82C,EAAM95B,MAAMriD,OACnB9D,SAAUkgG,EACVjgB,MAAOA,EACP4nB,KAAMA,EACNF,WAAW,KAGjB,CAEO,SAASY,GAAmBnjE,GACjC,MAAM,MAAE+gB,EAAK,SAAEy5C,EAAW,CAAC,EAAC,SAAErH,GAAanzD,EACrC29D,GAAS1gG,EAAAA,EAAAA,MACT2gG,GAAoBjG,EAAAA,EAAAA,IAA6BgG,GACjDpyF,EAA8BqyF,IAAoB,IAAIx2F,sBAY5D,OACEwD,EAAAA,cAAC2vF,GAAc,CACbC,SAAU,CACRI,iBAAkBoI,GAClBz3F,iCACGivF,EACHj5D,QAjBUA,CAAC6hE,EAAIvoB,KACnB,MAAM,MAAE95B,GAAU85B,EAClB8iB,EAAO1zF,gBAAgBkF,IAAI,oBAAqB,CAC9C7Q,IAAKyiD,EAAM,GAAGziD,IACdkC,oBAAqBugD,EACrB85B,YAcA95B,MAAOA,EACP05C,eAAgBtH,GAEhBvoF,EAAAA,cAAC2vF,GAAeD,QAAO,CAACz3D,SAAS,GAC/Bj4B,EAAAA,cAACs4F,GAAwB,CAACT,KAAMI,MAElCj4F,EAAAA,cAACy4F,GAAgB,MAGvB,C,2NC1BA,MAAM,8BAAEhkE,IAAkCjd,EAAAA,UAEpC8rD,GAAYtjE,EAAAA,KAAW,IACpB,gCAGH04F,GAA0BtjE,GAE5Bp1B,EAAAA,cAACA,EAAAA,SAAc,CAAC24F,SAAU34F,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAACsjE,GAAcluC,IAKfwjE,GAAuB,CAC3BC,gBAAiB,CACfC,OAAQ,CACNC,WAAW,EACXC,YAAa,KAKbC,GAAkB,GAIlBC,GAAmD,CAIvDl3F,GAAE,GAEF2pE,YAAaA,EAAGv5E,kBAAiBiN,sBAC/B,MAAM,2BAAE/M,EAA0B,eAAE26B,EAAc,oBAAExzB,GAClDrH,EAAgBK,UAEVwmG,gBAAiBE,GC7FiBC,GAAGhnG,kBAAiBiN,sBAChE,MAAM,oBAAE5F,EAAmB,qBAAE9B,EAAoB,kBAAEhC,GAAsBvD,EAAgBK,UAEjF+C,YAAa6jG,GACnBpF,GAAqC,CACnCx6F,sBACA9B,uBACA0H,qBAGI7J,YAAa8jG,GAA2C7E,GAAiC,CAC/Fh7F,yBAGMjE,YAAa+jG,GAAmC9/F,EAAoBjF,UAC1EiF,EAAoBhF,OAAO61E,mBAC3BhzE,IACE,MAAM,eAAE+E,GAAmB/E,EAE3B,GADmB3B,EAAkByG,mBAAmBC,GAEtD,OAGF,MAAM3E,EAAe+B,EAAoBgP,gBAAgBpM,GACnD9F,EAAQmB,EAAauB,YAAY69C,KACjC15C,EAAW1F,EAAa8+C,mBAAmB7J,SAASvvC,SAGpDo8F,EAAyB,CAC7Bh9F,sBAAuBH,EACvByqF,YAAa,+BACbM,kBAAmB,wEACnBjyD,kBAAmB5+B,EACnBsE,SAAU,MACVysF,eAAgBlqF,EAAStJ,OACzBsJ,WACA+0C,qBAAqB,EACrB57C,QACAkjG,cAAc,EACdp9F,eAAgBA,EAChBq9F,WAAW,GAGb/jG,EAAkBgkG,eAAeH,KAUrC,MAAO,CAAEP,gBANe,CACtBI,EACAC,EACAC,KD2CyDH,CAA+B,CACtFhnG,kBACAiN,oBAEF45F,GAAgB3jG,QAAQ6jG,GAExBlsE,EAAeC,8BAA8B56B,EAA4B,CACvEA,EAA2BmC,OAAOwqD,wBAGpChyB,EAAeC,8BAA8BzzB,EAAqB,CAChEA,EAAoBhF,OAAOyF,qBAC3BT,EAAoBhF,OAAOwF,wBAG7BgzB,EAAeC,8BAA8B1V,EAAAA,YAAyB,CACpE2W,EAAAA,MAAAA,OAA8Bi2C,iBAIhC3vC,GAA8B1N,QAK9B0N,GAA8BxnB,IAC5B,SACAuK,EAAAA,0BAAsCoiF,2BAKxCnlE,GAA8BxnB,IAAI,QAAS2rF,KAE7CvF,eAAc,GACdtuB,WAAYA,EAAG3yE,sBACb6mG,GAAgB7jG,QAAQI,GAAeA,KAEvCyjG,GAAgBnlG,OAAS,EAEzB,MAAM,YAAEkvB,EAAW,oBAAEvpB,GAAwBrH,EAAgBK,SAG7D4F,OAAO2f,OAAO6hF,EAAAA,MAAAA,aAAuBzkG,QAAQqX,IAC3CiX,EAAAA,qBAAqBo2E,kBAAkBrtF,GACvCstF,EAAAA,0BAA0BD,kBAAkBrtF,KAG9CuW,EAAYg2B,kBAAiB,IAE7BghD,EAAAA,EAAAA,MAEAnsE,GAAAA,EAAwBzkB,WAAW6wF,4BACnChsE,GAAAA,EAA6B7kB,WAAW8wF,iCACxC9c,GAAAA,EAAsBh0E,WAAW+wF,0BACjCC,EAAAA,gCAAgChxF,WAAWixF,oCAC3CtsE,GAAAA,EAAiC3kB,WAAWkxF,qCAC5C7gG,EAAoB44E,0BAQtBkoB,gBAAiBtqF,eAAgBmlB,GAC/B,MAAM,gBAAEhjC,GAAoBgjC,EAC5BhjC,EAAgBooG,gBAAgB1+E,GAA2BoqD,cAC3D9zE,EAAgBooG,gBAAgBl2B,GAAiB4B,cACjD9zE,EAAgBooG,gBAAgB7yB,GAAiBzB,cACjD9zE,EAAgBooG,gBAAgB/vB,GAAoBvE,cACpD9zE,EAAgBooG,gBAAgB1kB,GAAwB5P,cACxD9zE,EAAgBooG,gBAAgBhZ,GAAgBtb,cAEhD,MAAM,iBAAEt7B,GAAqBx4C,EAAgBK,SAC7Cm4C,EAAiBw9B,2BAA2B,YAAasd,UAEnDx6D,GAAK1yB,KAAKoR,KAAMwrB,EACxB,EACAqlE,iBnD9Ja,UAA0B,gBAAEroG,EAAe,iBAAEqsB,IAC1D,MAAM,iBACJ4W,EAAgB,eAChBpI,EAAc,iBACd2d,EAAgB,2BAChBt4C,EAA0B,gBAC1BgN,EAAe,kBACf3J,EAAiB,oBACjBoF,EAAmB,oBACnBtB,GACErH,EAAgBK,SAEpB,MAAO,CACL,CACE8pB,KAAM,iCACNm+E,iBAAkBC,IAEpB,CACEp+E,KAAM,qCACNq+E,SAAUA,EAAGnrG,iBAGX,IAFiB6C,EAA2B0B,uBAAuBvE,GAGjE,MAAO,CACL2Y,UAAU,GAKd,MAAO,CACLA,WAFkB9I,GAAiBG,YAAYhQ,KAAe,MAMpE,CACE8sB,KAAM,gBACNm+E,iBAAkB35B,IAEpB,CACExkD,KAAM,sBACNm+E,iBAAkBG,IAEpB,CACEt+E,KAAM,0BACNq+E,SAAUA,EAAGnrG,iBACX,MAAM4Y,EAAiBtN,EAAoB8B,8BAA8BpN,GAEzE,OAAK4Y,GAAgBvU,OAMd,CACLsU,UAAU,GANH,CACLA,UAAU,KAUlB,CACEmU,KAAM,yBACNm+E,iBAAkBI,IAEpB,CACEv+E,KAAM,6BACNq+E,SAAUA,EAAGnrG,iBAGX,MAAM4Y,EAAiBtN,EAAoB8B,8BAA8BpN,GAEzE,IAAK4Y,GAAgBvU,OACnB,MAAO,CACLsU,UAAU,GAiBd,MAAO,CACLA,UAb0BC,EAAe5U,IAAIC,GAC7CiC,EAAkByG,mBAAmB1I,IAIKsQ,KAC1ChH,GAC2B,OAAzBA,GAAYnC,UACa,QAAzBmC,GAAYnC,UACa,aAAzBmC,GAAYnC,aASpB,CACE0hB,KAAM,2BACNm+E,iBAAkBK,IAEpB,CACEx+E,KAAM,+BACNq+E,SAAUA,EAAGnrG,iBACX,MAAM,2BAAE8C,GAA+BH,EAAgBK,SAEjD4V,EAAiBtN,EAAoB8B,8BAA8BpN,GAEzE,IAAK4Y,GAAgBvU,OACnB,MAAO,CACLsU,UAAU,GAKd,MAAM1L,EAAsB2L,EAAe5U,IAAIC,GAC7CiC,EAAkByG,mBAAmB1I,IAQjCsnG,EACJvhG,EAAoBoC,+BAA+BpM,GAAYqE,OAAS,EAE1E,IAAKvB,EACH,MAAO,CACL6V,UAAW4yF,GAKf,MAAMC,EAAuBv+F,EAAoBsH,KAC/ChH,GACEA,GAAY7J,mBACZZ,EAA2B2oG,gBAAgBl+F,EAAW7J,oBAGpDyrE,EAAiBliE,EAAoBsH,KACzChH,GAAuC,OAAzBA,GAAYnC,UAQ5B,MAAO,CACLuN,WAHsB4yF,GAAmBC,GAAwBr8B,MAOvE,CACEriD,KAAM,uBACNm+E,iBAAkB3oC,IAEpB,CACEx1C,KAAM,2BACNq+E,SAAUA,EAAGnrG,iBAGX,IAFiB6C,EAA2B0B,uBAAuBvE,GAGjE,MAAO,CACL2Y,UAAU,GAKd,MAAMC,EAAiBtN,EAAoB8B,8BAA8BpN,GACzE,OAAK4Y,GAAgBvU,OAMd,CACLsU,UAAU,GANH,CACLA,UAAU,KASlB,CACEmU,KAAM,uBACNm+E,iBAAkB9lC,IAEpB,CACEr4C,KAAM,2BACNq+E,SAAUA,EAAGnrG,iBAGX,IAFiB6C,EAA2B0B,uBAAuBvE,GAGjE,MAAO,CACL2Y,UAAU,GAWd,MAAO,CACLA,SAPqBrN,EAAoB8B,8BAA8BpN,GACtCgE,IAAIkC,EAAkByG,oBAChB4H,KAAKhH,IAAeA,GAAYK,sBAS7E,CACEkf,KAAM,uBACNm+E,iBAAkBp/B,IAEpB,CACE/+C,KAAM,4BACNm+E,iBAAkB19B,IAEpB,CACEzgD,KAAM,+BACNm+E,iBAAkBp/B,IAEpB,CACE/+C,KAAM,mCACNq+E,SAAUA,KACD,CACLr/B,YAAY,KAIlB,CACEh/C,KAAM,qBACNm+E,iBAAkBt9B,IAEpB,CACE7gD,KAAM,mBACNm+E,iBAAkBj9B,IAEpB,CACElhD,KAAM,2BACNq+E,SAAUA,EAAGnrG,iBAGX,IAFiB6C,EAA2B0B,uBAAuBvE,GAGjE,MAAO,CACL2Y,UAAU,GAWd,MAAO,CACLA,UARqBrN,EAAoB8B,8BAA8BpN,GACtCgE,IAAIkC,EAAkByG,oBAElB4H,KAAKhH,GAAcA,GAAY2+D,qBAMpED,0BAJqBzuC,EAAekuE,eAAe,8BAQzD,CACE5+E,KAAM,gCACNq+E,SAAUA,EAAGnrG,iBAGX,IAFiB6C,EAA2B0B,uBAAuBvE,GAGjE,MAAO,CACL2Y,UAAU,GASd,MAAO,CACLA,UANqBrN,EAAoB8B,8BAA8BpN,GACtCgE,IAAIkC,EAAkByG,oBAElB4H,KAAKhH,GAAcA,GAAY2+D,wBAO1E,CACEp/C,KAAM,yBACNq+E,SAAUA,EAAGnrG,iBACX,MAAMsE,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,IAAKsE,EACH,MAAO,CACLqU,UAAU,GAId,GAAsB,iBAAlBrU,EAAS0Y,KACX,MAAO,CACLrE,UAAU,GAKd,OADuBrN,EAAoB8B,8BAA8BpN,GACrDqE,OAMb,CACLsU,UAAU,GANH,CACLA,UAAU,KASlB,CACEmU,KAAM,uBACNq+E,SAAUA,EAAGnrG,iBACX,MAAMsE,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,IAAKsE,GAA8B,iBAAlBA,EAAS0Y,KACxB,MAAO,CACLrE,UAAU,GAId,MAAMC,EAAiBtN,EAAoB8B,8BAA8BpN,GAEzE,GAAI4Y,EAAevU,QAAU,EAC3B,MAAO,CACLsU,UAAU,GAOd,MAAO,CACLA,SAJkBC,EAAe5U,IAAIkC,EAAkByG,oBACtB4H,KAAKhH,GAAcA,GAAYm1C,wBAStE,CACE51B,KAAM,8BACNq+E,SAAUA,EAAGnrG,aAAY2rG,2BAA0Bv3B,mBACjD,MAAM9vE,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,GAAIsE,GAAYqnG,GAA0B/mG,SAASN,EAAS0Y,MAC1D,OAAOm3D,GAAiBC,KAM9B,CACEtnD,KAAM,8BACNq+E,SAAUA,EAAGnrG,aAAY4rG,wBAAuBC,sBAAqBz3B,mBACnE,MAAMx7D,EAAiBtN,EAAoB8B,8BAA8BpN,GAEzE,IAAK4Y,GAAgBvU,OACnB,OAGF,MAAMmC,EAAcoS,EAAe5U,IAAIkC,EAAkByG,oBAGzD,GAAIi/F,GAAuBvnG,OAAQ,CAKjC,GAJ+BmC,EAAY+N,KAAKhH,GAC9Cq+F,EAAsBhnG,SAAS2I,GAAYnC,WAI3C,OAAO+oE,GAAiBC,EAE5B,CAGA,GAAIy3B,GAAqBxnG,OAAQ,CAK/B,IAJgCmC,EAAY+N,KAAKhH,GAC/Cs+F,EAAoBjnG,SAAS2I,GAAYnC,WAIzC,OAAO+oE,GAAiBC,GAAgB,uCAE5C,IAGJ,CACEtnD,KAAM,2BACNq+E,SAAUA,EAAGnrG,aAAYo5B,SAAQ/W,YAAW+xD,mBAC1C,MAAMj4B,EAAYvW,EAAiBib,wBAAwB7gD,GAE3D,IAAKm8C,EACH,OAGF,MAAM5gC,EAAWiiB,EAAe+2C,qBAAqBn7C,GAErD,IAAK+iB,IAAeA,EAAUwO,QAAQpvC,KAAc8G,EAClD,OAAO8xD,GAAiBC,GAO1B,MAAO,CACLz7D,UAAU,EACVpY,SANsB8hB,EACpBA,EAAUzd,SAASu3C,EAAUwP,mCAC7BxP,EAAUwP,oCAAsCpwC,KAQxD,CACEuR,KAAM,kBACNq+E,SAAUA,KACD,CACLxyF,UAAU,KAIhB,CACEmU,KAAM,qDACNq+E,SAAUA,EAAGnrG,aAAYo5B,SAAQg7C,kBAC/BC,GAAgB,CACdr0E,aACAo5B,SACAoE,iBACA42C,eACAE,SAAU,CAACpgE,EAAAA,MAAAA,UAAgB43F,UAC3BlmE,sBAGN,CACE9Y,KAAM,kCACNq+E,SAAUA,EAAGnrG,aAAYo5B,SAAQg7C,kBAC/BC,GAAgB,CACdr0E,aACAo5B,SACAoE,iBACA42C,eACAE,SAAU,CAACpgE,EAAAA,MAAAA,UAAgB43F,SAAU53F,EAAAA,MAAAA,UAAgBk3C,SACrDxlB,sBAGN,CACE9Y,KAAM,oCACNq+E,SAAUA,EAAGnrG,aAAYo5B,aACvB,IAAIg/C,EAAgBj9B,EAAiBgE,4BAA4Bn/C,GAEjE,IAAKo4E,GAAe/zE,QAAU+zE,EAAc/zE,QAAU,EACpD,MAAO,CACLgjC,UAAWn8B,GAAAA,IAAAA,qBAA0B,IAIzC,MAEM6gG,EAFU7iG,MAAMC,QAAQiwB,EAAOuM,OAAO01B,UAGxCjiC,EAAOuM,OAAO01B,WAAW,GAAGrmD,eAAegI,KAC3Coc,EAAOuM,OAAO01B,UAAUrmD,eAAegI,KAI3C,GAFAo7D,EAAgBj9B,EAAiB09B,uBAAuBkzB,IAEnD3zB,GAAe/zE,OAClB,MAAO,CACLgjC,UAAWn8B,GAAAA,IAAAA,qBAA0B,IAOzC,MAAMkjD,EAAegqB,EAAc,GAE7B4zB,EAAY59C,GAAc69C,SAEhC,MAAO,CACL5kE,UAAWn8B,GAAAA,IAAAA,oBAA0B8gG,MAI3C,CACEl/E,KAAM,qCACNq+E,SAAUA,EAAGnrG,aAAYo5B,aACvB,MAAM90B,EAAWzB,EAA2B0B,uBAAuBvE,GAEnE,IAAKsE,GAAYA,EAASgqD,WACxB,OAGF,MAAM49C,EAAS9yE,EAAO7mB,GAEhBW,EAAa5O,EAAS8O,gBACtBiuC,EAAS/8C,EAASg9C,YAElB6qD,EAAO9qD,IAAS6qD,IAAWh5F,IAAag5F,GAE9C,IAAKC,EACH,MAAO,CACLxzF,UAAU,GAId,MAAMyzF,EAAYD,EAElB,MAAO,CACL9kE,UAAWn8B,GAAAA,IAAAA,oBAA0BkhG,MAI3C,CACEt/E,KAAM,uCACNq+E,SAAUA,EAAGnrG,aAAYo0E,eAAe,+CAGtC,IAFiBvxE,EAA2B0B,uBAAuBvE,GAGjE,OAWF,OARuBsL,EAAoB8B,8BAA8BpN,GAEtCgE,IAAIkC,EAAkByG,oBAElBykC,MAAM7jC,GACpCA,GAAYK,mBAOd,CACL+K,UAAU,GAJHw7D,GAAiBC,KASlC,EmDvXEi4B,yBAAwB,GACxBC,kBAAiBA,EAAC,gBAAE3pG,EAAe,gBAAEiN,KAc5B,CACL,CACEkd,KAAM,cACN+2E,UAhBoCl+D,IACtC,MAAM,eAAEnI,GAAmB76B,EAAgBK,SAE3C,OACEuN,EAAAA,cAAC04F,GAAuBtyD,GAAA,GAClBhR,EAAK,CACTnI,eAAgBA,EAChB76B,gBAAiBA,EACjBiN,gBAAiBA,MASnB0+E,oBAAqBpjF,GAAMojF,oBAAoBl3D,KAAK,KAAMz0B,KAIhE4pG,kBAAiB,GACjBC,uBAAsB,GACtBC,iBAAgBA,EAAC,gBAAE9pG,KACV,CACL,CACEmqB,KAAM,SACN4/E,QAAS,CACPC,wBAAyBA,KAChB,CAAE5kF,YAAW,EAAE2W,iBAAgBA,IAExCjlB,kBAAiB,KACjBmzF,mBAAkBA,KAGtB,CACE9/E,KAAM,OACN4/E,QAAS,CACPx4F,MAAOk2F,EAAAA,QAGX,CACEt9E,KAAM,QACN4/E,QAAS,CACPrqF,UAAS,EACTnO,MAAO24F,EAAAA,QAGX,CACE//E,KAAM,eACN4/E,QAAS,CACPI,qBAAoBA,GAAAA,wBAK5BC,yBzB/EK,SAAkC53F,GACvC,MAAO,CAACujF,GAAkCvjF,GAC5C,GyBkHA,K,sDEjRA,MAAM8gD,EAAQ,CAEZ+2C,gBAAiB,cACjBC,gBAAiB,CAAC,GAQdhzE,EAAoBA,CAACj6B,EAAoBa,EAAsBoU,KACnE,MAAMi4F,EAAgBj4F,GAAWghD,EAAM+2C,gBAEvC/2C,EAAMg3C,gBAAgBjtG,GAAc,CAClCa,UACAoU,QAASi4F,IASPzzF,EAAoBzZ,GACjBi2D,EAAMg3C,gBAAgBjtG,GAGzBw7E,EAAQA,KACZvlB,EAAMg3C,gBAAkB,CAAC,E,sDC9B3B,MAAME,EAAW,IAGXC,EAAc,UASdC,EAAiBA,CACrBn8D,EACAvoC,EACA6pB,EACA86E,KAKA,GAHAp8D,EAAIrrC,KAAK,IAGLynG,EAOJ,IAAK,IAAIC,EAAkB,EAAGA,EAAkB,IAAKA,IAAmB,CACtEr8D,EAAIA,EAAI7sC,OAAS,GAAKkpG,EACtB,MAAMC,EAASt8D,EAAInnB,KAAKojF,GACxB,IACGjkG,MAAMmf,KAAKmK,EAAUjK,UAAUjW,KAC9BhO,GAAYA,EAASquB,iBAAiBwP,kBAAkBx5B,KAAS6kG,GAGnE,KAEJ,E,wEC9BF,MAAMC,EAAuB,oBAiEvBtvE,EAAuBA,CAC3B5rB,GAEEjO,WACAkuB,YACA86E,6BAOF,GAAI/6F,IAAOk7F,EACT,OAiBF,IAAKnpG,IAAaA,EAASquB,kBAAoBruB,EAASiS,wBAAwBlS,OAC9E,OAGF,MAAM,kBAAEs0B,EAAiB,uBAAEpiB,GAA2BjS,EAEhDopG,EAAqB,CApBT5gG,KAChB,IAAKA,IAAOA,EAAGjD,QACb,OAAOujG,EAAAA,GAET,GAAItgG,EAAGjD,QAAQ0I,GACb,OAAOzF,EAAGjD,QAAQ0I,GAEpB,MAAM2+B,EAAMtoC,OAAOc,QAAQoD,EAAGjD,SAAS7F,IAAI,EAAE2E,EAAK08C,KAAS,GAAG18C,KAAO08C,KACrE,OAAKnU,EAAI7sC,OAGF6sC,EAAInnB,KAAKojF,EAAAA,IAFPC,EAAAA,IAUGO,CAASh1E,EAAkB,KAGzC,IAAK,MAAM10B,KAAOsS,EAChBm3F,EAAmB7nG,KAAK5B,GAK1B,OAFAopG,EAAAA,EAAAA,IAAeK,EAAoBD,EAAsBj7E,EAAW86E,GAE7DI,EAAmB3jF,KAAKojF,EAAAA,KAS3BS,EAA8BnwF,IAAG,CACrCT,KAAMywF,EACN1rE,qBAAsB,CAAC,EAKvB0rD,mBAAoBA,CAAC9kF,EAAKK,IACxByU,EACEw4C,IAAS,CACPl0B,qBAAsB,IACjBk0B,EAAMl0B,qBACT,CAACp5B,GAAMK,MAGX,EACA,sBAMJwhG,0BAA2BA,IACzB/sF,EAAI,CAAEskB,qBAAsB,CAAC,IAAK,EAAO,6BAK3C7D,kBAAmBC,IAORC,GAA0Bu4C,EAAAA,EAAAA,KAAAA,CAGjCi3B,E,wEC/JN,MAAMH,EAAuB,yBAkEvBvvE,EAAoBA,CACxB3rB,GAEEjO,WACAkuB,YACA86E,6BAOF,GAAI/6F,IAAOk7F,GAINnpG,GAAUquB,iBAAoBruB,EAASiS,wBAAwBlS,OAIpE,OAAOk6B,EAA0Bj6B,EAAUkuB,EAAW86E,IAGxD,SAAS/uE,EAA0Bj6B,EAAUkuB,EAAW86E,GACtD,MAAM,gBAAE36E,EAAkB,CAAC,EAAC,uBAAEpc,EAAyB,GAAE,kBAAEoiB,EAAoB,IAAOr0B,GAC9EiO,GAAIs7F,EAAgB,YAAE5vD,GAAgBtrB,EAExCm7E,EAA0B,CAAC7vD,GAAe,eAC5C4vD,GACFC,EAAwBjoG,KAAKgoG,GAG3Bl1E,GAAmBpkB,KAAKzH,GAAMA,EAAGjD,SAAS2tE,WAAa1qE,EAAGjD,SAASg1D,gBACrEivC,EAAwBjoG,KAAK,UAG/B,IAAK,MAAM5B,KAAOsS,EAChBu3F,EAAwBjoG,KAAK5B,GAc/B,OAXIuuB,GAAaA,EAAUnuB,aAAqC+J,IAA3Bk/F,GACnCD,EAAAA,EAAAA,IACES,EACAL,EACAj7E,EACA86E,GAGFQ,EAAwBjoG,KAAK,GAGxBioG,EAAwB/jF,KAAKojF,EAAAA,GACtC,CAQA,MAAMY,EAAkCtwF,IAAO,CAC7CT,KAAMywF,EACNxrE,0BAA2B,CAAC,EAK5B0iB,wBAAyBA,CAACh8C,EAAKK,IAC7ByU,EACEw4C,IAAS,CACPh0B,0BAA2B,IACtBg0B,EAAMh0B,0BACT,CAACt5B,GAAMK,MAGX,EACA,2BAMJyhG,+BAAgCA,IAC9BhtF,EAAI,CAAEwkB,0BAA2B,CAAC,IAAK,EAAO,kCAKhD/D,oBACAK,0BAA2BA,IAOhBC,GAA+Bm4C,EAAAA,EAAAA,KAAAA,CAGtCo3B,E,kFCxKN,MAAM,kBAAEC,GAAsBhhE,EAAAA,UCIxBygE,EAAuB,6BA2FvBvvE,EAAoBA,CACxB3rB,GAEEjO,WACAkuB,YACA86E,yBACA3qG,sBAQF,GAAI4P,IAAOk7F,EAIX,OAAOQ,EAA+B,CAAE3pG,WAAU3B,qBAW9CsrG,EAAiCA,EACrC3pG,WACA3B,sBAKA,IAAK2B,GAAUquB,kBAAoBruB,EAASiS,wBAAwBlS,OAClE,OAGF,MAAM,uBAAEkS,EAAsB,gBAAEoc,GAAoBruB,EAEpD,IAAI25C,EAActrB,EAAgBsrB,YAElC,IAAKA,EAAa,CAEhB,MAAM1wC,EAAa5K,EAAgBK,SAASkD,kBAAkByG,mBAC5D4J,EAAuB,IAEnB23F,EAAc3gG,EAAWQ,SAAS,GAClCg4F,EAA0BmI,GAAalI,wBAE7C/nD,ED/HF8nD,KAEA,IAAKA,GAA8D,IAAnCA,EAAwB1hG,OACtD,OAGF,MAAM8pG,EAAYpI,EAAwBt6E,MAAM,EAAG,GAC7C2iF,EAAWrI,EAAwBt6E,MAAM,EAAG,GAC5CuuC,EAAS,EAAEo0C,EAAS,IAAKA,EAAS,IAAKA,EAAS,IAGtD,OACEr8F,EAAAA,UAAAA,QAAkBo8F,EAAWH,EAAkBK,MAAMF,YACrDp8F,EAAAA,UAAAA,QAAkBioD,EAAQg0C,EAAkBK,MAAMr0C,QAE3C,QAIPjoD,EAAAA,UAAAA,QAAkBo8F,EAAWH,EAAkBM,SAASH,YACxDp8F,EAAAA,UAAAA,QAAkBioD,EAAQg0C,EAAkBM,SAASt0C,QAE9C,WAIPjoD,EAAAA,UAAAA,QAAkBo8F,EAAWH,EAAkBO,QAAQJ,YACvDp8F,EAAAA,UAAAA,QAAkBioD,EAAQg0C,EAAkBO,QAAQv0C,QAE7C,eAJT,GCsGgBw0C,CAAkDzI,EAClE,CAEA,MAAM0I,EAA8B,GAYpC,OAVAA,EAA4B5oG,QAAQ0Q,GAU7Bk4F,EAA4B1kF,KAAKojF,EAAAA,KASpCuB,EAAsCjxF,IAAO,CACjDT,KAAMywF,EACNzrE,8BAA+B,CAAC,EAKhC6oE,mCAAoCA,IAClCptF,EAAI,CAAEukB,8BAA+B,CAAC,IAAK,EAAO,sCAYpDuiB,gCAAiCA,CAC/BoqD,EACAC,IAEAnxF,EACEw4C,IAAS,CACPj0B,8BAA+B,IAC1Bi0B,EAAMj0B,8BACT,CAAC2sE,GAAiB,IACZ14C,EAAMj0B,8BAA8B2sE,IAAmB,GAC3DC,OAIN,EACA,mCAgBJhhB,4BAA6BA,CAAC+gB,EAAwBpmF,IACpD9K,EACEw4C,IAAS,CACPj0B,8BAA+B,IAC1Bi0B,EAAMj0B,8BACT,CAAC2sE,GAAiBpmF,MAGtB,EACA,+BAMJ2V,oBAKAG,8BAA+B4vE,IAOpB3vE,GAAmCq4C,EAAAA,EAAAA,KAAAA,CAG1C+3B,E,2DCxPN,MA+CMG,EAA4BpxF,IAAG,CACnCqxF,mBAAoB,CAAC,EACrB9xF,KAjD2B,uBAmD3B0wE,iBAAkBA,CAAC1tF,EAAoBo4E,KACrC36D,EACEw4C,IAAS,CACP64C,mBAAoB,IACf74C,EAAM64C,mBACT,CAAC9uG,GAAao4E,MAGlB,EACA,qBAIJsyB,wBAAyBA,KACvBjtF,EAAI,CAAEqxF,mBAAoB,CAAC,IAAK,EAAO,8BAQ9BnhB,GAAwBhX,EAAAA,EAAAA,KAAAA,CAG/Bk4B,E","sources":["webpack:///../../../extensions/cornerstone/src/hooks/useViewportHover.ts","webpack:///../../../extensions/cornerstone/src/hooks/useActiveViewportSegmentationRepresentations.ts","webpack:///../../../extensions/cornerstone/src/hooks/useMeasurementTracking.ts","webpack:///../../../extensions/cornerstone/src/hooks/useMeasurements.ts","webpack:///../../../extensions/cornerstone/src/hooks/useSegmentations.ts","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/utils.ts","webpack:///../../../extensions/cornerstone/src/hooks/useViewportDisplaySets.ts","webpack:///../../../extensions/cornerstone/src/hooks/useViewportRendering.tsx","webpack:///../../../extensions/cornerstone/src/hooks/useViewportSegmentations.ts","webpack:///../../../extensions/cornerstone/src/enums.ts","webpack:///../../../extensions/cornerstone/src/initWADOImageLoader.js","webpack:///../../../extensions/cornerstone/src/utils/getViewportEnabledElement.ts","webpack:///../../../extensions/cornerstone/src/utils/getActiveViewportEnabledElement.ts","webpack:///../../../extensions/cornerstone/src/tools/CalibrationLineTool.ts","webpack:///../../../extensions/cornerstone/src/tools/OverlayPlaneModuleProvider.ts","webpack:///../../../extensions/cornerstone/src/tools/ImageOverlayViewerTool.tsx","webpack:///../../../extensions/cornerstone/src/initCornerstoneTools.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getIsLocked.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getIsVisible.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getSOPInstanceAttributes.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/Length.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getHandlesFromPoints.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/selection.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getDisplayUnit.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/Bidirectional.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getValueDisplayString.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/EllipticalROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/CircleROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/ArrowAnnotate.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/CobbAngle.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/Angle.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/PlanarFreehandROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/RectangleROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/SplineROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/LivewireContour.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/Probe.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/UltrasoundDirectional.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/SegmentBidirectional.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/UltrasoundPleuraBLine.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.ts","webpack:///../../../extensions/cornerstone/src/initMeasurementService.ts","webpack:///../../../extensions/cornerstone/src/initCineService.ts","webpack:///../../../extensions/cornerstone/src/initStudyPrefetcherService.ts","webpack:///../../../extensions/cornerstone/src/utils/interleaveCenterLoader.ts","webpack:///../../../extensions/cornerstone/src/utils/getInterleavedFrames.js","webpack:///../../../extensions/cornerstone/src/utils/nthLoader.ts","webpack:///../../../extensions/cornerstone/src/utils/interleave.js","webpack:///../../../extensions/cornerstone/src/utils/getNthFrames.js","webpack:///../../../extensions/cornerstone/src/utils/interleaveTopToBottom.ts","webpack:///../../../extensions/cornerstone/src/utils/findNearbyToolData.ts","webpack:///../../../extensions/cornerstone/src/initContextMenu.ts","webpack:///../../../extensions/cornerstone/src/initDoubleClick.ts","webpack:///../../../extensions/cornerstone/src/utils/initViewTiming.ts","webpack:///../../../extensions/cornerstone/src/utils/colormaps.js","webpack:///../../../extensions/cornerstone/src/init.tsx","webpack:///../../../extensions/cornerstone/src/utils/initWebWorkerProgressHandler.ts","webpack:///../../../extensions/cornerstone/src/customizations/viewportOverlayCustomization.tsx","webpack:///../../../extensions/cornerstone/src/customizations/CustomDropdownMenuContent.tsx","webpack:///../../../extensions/cornerstone/src/customizations/CustomSegmentStatisticsHeader.tsx","webpack:///../../../extensions/cornerstone/src/customizations/segmentationPanelCustomization.tsx","webpack:///../../../extensions/cornerstone/src/customizations/layoutSelectorCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/viewportToolsCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/viewportClickCommandsCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/measurementsCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/volumeRenderingCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/colorbarCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/modalityColorMapCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/windowLevelPresetsCustomization.ts","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/defaultWindowLevelPresets.ts","webpack:///../../../extensions/cornerstone/src/utils/DicomFileUploader.ts","webpack:///../../../extensions/cornerstone/src/components/DicomUpload/DicomUploadProgressItem.tsx","webpack:///../../../extensions/cornerstone/src/components/DicomUpload/DicomUploadProgress.tsx","webpack:///../../../extensions/cornerstone/src/components/DicomUpload/DicomUpload.tsx","webpack:///../../../extensions/cornerstone/src/customizations/miscCustomization.ts","webpack:///../../../extensions/cornerstone/src/customizations/captureViewportModalCustomization.tsx","webpack:///../../../extensions/cornerstone/src/customizations/viewportDownloadWarningCustomization.tsx","webpack:///../../../extensions/cornerstone/src/getCustomizationModule.tsx","webpack:///../../../extensions/cornerstone/src/utils/imageSliceSync/toggleImageSliceSync.ts","webpack:///../../../extensions/cornerstone/src/utils/toggleVOISliceSync.ts","webpack:///../../../extensions/cornerstone/src/utils/CornerstoneViewportDownloadForm.tsx","webpack:///../../../extensions/cornerstone/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone/src/utils/getCenterExtent.ts","webpack:///../../../extensions/cornerstone/src/commandsModule.ts","webpack:///../../../extensions/cornerstone/src/utils/isMeasurementWithinViewport.ts","webpack:///../../../extensions/cornerstone/src/utils/updateSegmentationStats.ts","webpack:///../../../extensions/cornerstone/src/utils/generateSegmentationCSVReport.ts","webpack:///../../../extensions/cornerstone/src/hps/mpr.ts","webpack:///../../../extensions/cornerstone/src/hps/fourUp.ts","webpack:///../../../extensions/cornerstone/src/hps/main3D.ts","webpack:///../../../extensions/cornerstone/src/hps/mprAnd3DVolumeViewport.ts","webpack:///../../../extensions/cornerstone/src/hps/only3D.ts","webpack:///../../../extensions/cornerstone/src/hps/primary3D.ts","webpack:///../../../extensions/cornerstone/src/hps/primaryAxial.ts","webpack:///../../../extensions/cornerstone/src/hps/frameView.ts","webpack:///../../../extensions/cornerstone/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone/src/components/SelectItemWithModality.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/ViewportDataOverlayMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/ViewportDataOverlayMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportOrientationMenu/ViewportOrientationMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportOrientationMenu/ViewportOrientationMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colormap.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colorbar.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresetsContent.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresets.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingQuality.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShift.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeLighting.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShade.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingOptions.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevelActionMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/VOIManualControlMenu/VOIManualControlMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/VOIManualControlMenu/VOIManualControlMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/ThresholdMenu/ThresholdMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/ThresholdMenu/ThresholdMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/OpacityMenu/OpacityMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/OpacityMenu/OpacityMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/ModalityLoadBadge/ModalityLoadBadge.tsx","webpack:///../../../extensions/cornerstone/src/components/NavigationComponent/NavigationComponent.tsx","webpack:///../../../extensions/cornerstone/src/components/TrackingStatus/TrackingStatus.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportColorbar/ViewportColorbar.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportColorbar/ViewportColorbarsContainer.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportColorbar/index.ts","webpack:///../../../extensions/cornerstone/src/components/AdvancedRenderingControls/AdvancedRenderingControls.tsx","webpack:///../../../extensions/cornerstone/src/getToolbarModule.tsx","webpack:///../../../extensions/cornerstone/src/services/ToolGroupService/ToolGroupService.ts","webpack:///../../../extensions/cornerstone/src/services/ToolGroupService/index.js","webpack:///../../../extensions/cornerstone/src/services/SyncGroupService/createHydrateSegmentationSynchronizer.ts","webpack:///../../../extensions/cornerstone/src/services/SyncGroupService/SyncGroupService.ts","webpack:///../../../extensions/cornerstone/src/services/SyncGroupService/index.js","webpack:///../../../extensions/cornerstone/src/utils/transitions.ts","webpack:///../../../extensions/cornerstone/src/constants/index.ts","webpack:///../../../extensions/cornerstone/src/services/SegmentationService/SegmentationService.ts","webpack:///../../../extensions/cornerstone/src/services/SegmentationService/RTSTRUCT/mapROIContoursToRTStructData.ts","webpack:///../../../extensions/cornerstone/src/services/SegmentationService/index.ts","webpack:///../../../extensions/cornerstone/src/utils/getCornerstoneViewportType.ts","webpack:///../../../extensions/cornerstone/src/services/CornerstoneCacheService/CornerstoneCacheService.ts","webpack:///../../../extensions/cornerstone/src/services/CornerstoneCacheService/index.js","webpack:///../../../extensions/cornerstone/src/services/ViewportService/constants.ts","webpack:///../../../extensions/cornerstone/src/services/ViewportService/Viewport.ts","webpack:///../../../extensions/cornerstone/src/utils/getCornerstoneOrientation.ts","webpack:///../../../extensions/cornerstone/src/utils/getCornerstoneBlendMode.ts","webpack:///../../../extensions/cornerstone/src/utils/JumpPresets.ts","webpack:///../../../extensions/cornerstone/src/services/ViewportService/CornerstoneViewportService.ts","webpack:///../../../extensions/cornerstone/src/types/Colorbar.ts","webpack:///../../../extensions/cornerstone/src/services/ColorbarService/ColorbarService.ts","webpack:///../../../extensions/cornerstone/src/services/ColorbarService/index.ts","webpack:///../../../extensions/cornerstone/src/utils/dicomLoaderService.js","webpack:///../../../extensions/cornerstone/src/id.js","webpack:///../../../extensions/cornerstone/src/synchronizers/frameViewSynchronizer.ts","webpack:///../../../extensions/cornerstone/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportWindowLevel/getViewportVolumeHistogram.ts","webpack:///../../../extensions/cornerstone/src/components/ViewportWindowLevel/utils.ts","webpack:///../../../extensions/cornerstone/src/components/ViewportWindowLevel/ViewportWindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/ActiveViewportWindowLevel/ActiveViewportWindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/AccordionGroup/AccordionGroup.tsx","webpack:///../../../extensions/cornerstone/src/components/AccordionGroup/index.ts","webpack:///../../../extensions/cornerstone/src/components/MeasurementTableNested.tsx","webpack:///../../../extensions/cornerstone/src/components/MeasurementsOrAdditionalFindings.tsx","webpack:///../../../extensions/cornerstone/src/components/StudySummaryFromMetadata.tsx","webpack:///../../../extensions/cornerstone/src/components/StudyMeasurementsActions.tsx","webpack:///../../../extensions/cornerstone/src/components/StudySummaryWithActions.tsx","webpack:///../../../extensions/cornerstone/src/components/StudyMeasurements.tsx","webpack:///../../../extensions/cornerstone/src/panels/PanelMeasurement.tsx","webpack:///../../../extensions/cornerstone/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone/src/utils/isReferenceViewable.ts","webpack:///../../../extensions/cornerstone/src/utils/segmentationHandlers.ts","webpack:///../../../extensions/cornerstone/src/utils/promptHydrationDialog.ts","webpack:///../../../extensions/cornerstone/src/utils/index.ts","webpack:///../../../extensions/cornerstone/src/utils/segmentUtils.ts","webpack:///../../../extensions/cornerstone/src/components/MeasurementsMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/PanelAccordionTrigger.tsx","webpack:///../../../extensions/cornerstone/src/components/MeasurementItems.tsx","webpack:///../../../extensions/cornerstone/src/components/SeriesMeasurements.tsx","webpack:///../../../extensions/cornerstone/src/index.tsx","webpack:///../../../extensions/cornerstone/src/utils/setUpSegmentationEventHandlers.ts","webpack:///../../../extensions/cornerstone/src/state.ts","webpack:///../../../extensions/cornerstone/src/stores/presentationUtils.ts","webpack:///../../../extensions/cornerstone/src/stores/useLutPresentationStore.ts","webpack:///../../../extensions/cornerstone/src/stores/usePositionPresentationStore.ts","webpack:///../../../extensions/cornerstone/src/utils/getViewportOrientationFromImageOrientationPatient.ts","webpack:///../../../extensions/cornerstone/src/stores/useSegmentationPresentationStore.ts","webpack:///../../../extensions/cornerstone/src/stores/useSynchronizersStore.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useViewportGrid } from '@ohif/ui-next';\n\n/**\n * Hook to track whether the mouse is hovering over a specific viewport\n * and whether the viewport is active\n *\n * @param viewportId - The ID of the viewport to track\n * @returns { isHovered, isActive } - Whether the viewport is hovered and active\n */\nexport function useViewportHover(viewportId: string): { isHovered: boolean; isActive: boolean } {\n  const [isHovered, setIsHovered] = useState(false);\n  const [viewportGrid] = useViewportGrid();\n  const { activeViewportId } = viewportGrid;\n\n  const isActive = activeViewportId === viewportId;\n\n  const setupListeners = useCallback(() => {\n    const viewportElement = document.querySelector(`[data-viewportid=\"${viewportId}\"]`);\n    const element = viewportElement?.closest('.viewport-wrapper') || viewportElement;\n\n    if (!element) {\n      return null;\n    }\n\n    let elementRect = (element as HTMLElement).getBoundingClientRect();\n    let lastIsInside = false;\n\n    // Update rectangle when window is resized\n    const updateRect = () => {\n      elementRect = (element as HTMLElement).getBoundingClientRect();\n    };\n\n    const isPointInViewport = (x, y) => {\n      return (\n        x >= elementRect.left &&\n        x <= elementRect.right &&\n        y >= elementRect.top &&\n        y <= elementRect.bottom\n      );\n    };\n\n    const handleMouseMove = event => {\n      const isInside = isPointInViewport(event.clientX, event.clientY);\n\n      if (isInside !== lastIsInside) {\n        lastIsInside = isInside;\n        setIsHovered(isInside);\n      }\n    };\n\n    let resizeTimeout;\n    const handleResize = () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(updateRect, 10);\n    };\n\n    window.addEventListener('resize', handleResize);\n    document.addEventListener('mousemove', handleMouseMove);\n\n    updateRect();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      document.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(resizeTimeout);\n    };\n  }, [viewportId]);\n\n  useEffect(() => {\n    const cleanup = setupListeners();\n    return cleanup;\n  }, [setupListeners]);\n\n  // Memoize the return value to prevent unnecessary re-renders\n  return useMemo(() => ({ isHovered, isActive }), [isHovered, isActive]);\n}\n","import { useViewportGrid } from '@ohif/ui-next';\nimport { useViewportSegmentations } from './useViewportSegmentations';\n\nfunction useActiveViewportSegmentationRepresentations() {\n  const [viewportGrid] = useViewportGrid();\n\n  const viewportId = viewportGrid?.activeViewportId;\n\n  const segmentations = useViewportSegmentations({ viewportId });\n\n  return segmentations;\n}\n\nexport { useActiveViewportSegmentationRepresentations };\n","import { useState, useEffect, useCallback } from 'react';\nimport { useSystem } from '@ohif/core/src';\nimport { useViewportDisplaySets } from './useViewportDisplaySets';\nimport { BaseVolumeViewport } from '@cornerstonejs/core';\n\n/**\n * Hook that provides measurement tracking information for a viewport\n *\n * @param options - The hook options\n * @param options.viewportId - The ID of the viewport to track\n * @returns An object containing the tracking state, related information, and tracked measurement UIDs\n */\nexport function useMeasurementTracking({ viewportId }: { viewportId: string }) {\n  const { servicesManager } = useSystem();\n  const { cornerstoneViewportService, trackedMeasurementsService, measurementService } =\n    servicesManager.services;\n\n  const { backgroundDisplaySet } = useViewportDisplaySets(viewportId);\n\n  // Tracking states\n  const [isTracked, setIsTracked] = useState(false);\n  const [isLocked, setIsLocked] = useState(false);\n  const [trackedMeasurementUIDs, setTrackedMeasurementUIDs] = useState<string[]>([]);\n\n  const updateTrackedMeasurements = useCallback(() => {\n    if (!measurementService || !backgroundDisplaySet?.SeriesInstanceUID || !isTracked) {\n      setTrackedMeasurementUIDs([]);\n      return;\n    }\n\n    const seriesInstanceUID = backgroundDisplaySet.SeriesInstanceUID;\n\n    const seriesMeasurements = measurementService.getMeasurements(\n      measurement => measurement.referenceSeriesUID === seriesInstanceUID\n    );\n\n    const uids = seriesMeasurements.map(measurement => measurement.uid);\n    setTrackedMeasurementUIDs(uids);\n  }, [measurementService, backgroundDisplaySet, isTracked]);\n\n  const updateIsTracked = useCallback(() => {\n    if (!trackedMeasurementsService || !backgroundDisplaySet?.SeriesInstanceUID) {\n      setIsTracked(false);\n      return;\n    }\n\n    const trackedSeries = trackedMeasurementsService.getTrackedSeries();\n\n    if (!trackedSeries?.length) {\n      setIsTracked(false);\n      return;\n    }\n\n    const viewport = cornerstoneViewportService?.getCornerstoneViewport(viewportId);\n    const SeriesInstanceUID = backgroundDisplaySet.SeriesInstanceUID;\n\n    if (viewport instanceof BaseVolumeViewport) {\n      const currentImageId = viewport?.getCurrentImageId();\n\n      if (!currentImageId) {\n        setIsTracked(false);\n        return;\n      }\n    }\n\n    const seriesIsTracked = trackedSeries.includes(SeriesInstanceUID);\n    setIsTracked(seriesIsTracked);\n  }, [viewportId, backgroundDisplaySet, cornerstoneViewportService, trackedMeasurementsService]);\n\n  // Update tracked measurements whenever tracking state changes\n  useEffect(() => {\n    updateTrackedMeasurements();\n  }, [isTracked, updateTrackedMeasurements]);\n\n  useEffect(() => {\n    if (!trackedMeasurementsService) {\n      return;\n    }\n\n    setIsLocked(trackedMeasurementsService.isTrackingEnabled());\n    updateIsTracked();\n\n    const subscriptions = [\n      trackedMeasurementsService.subscribe(trackedMeasurementsService.EVENTS.TRACKING_ENABLED, () =>\n        setIsLocked(true)\n      ),\n      trackedMeasurementsService.subscribe(\n        trackedMeasurementsService.EVENTS.TRACKING_DISABLED,\n        () => setIsLocked(false)\n      ),\n\n      trackedMeasurementsService.subscribe(\n        trackedMeasurementsService.EVENTS.TRACKED_SERIES_CHANGED,\n        () => updateIsTracked()\n      ),\n      trackedMeasurementsService.subscribe(trackedMeasurementsService.EVENTS.SERIES_ADDED, () =>\n        updateIsTracked()\n      ),\n      trackedMeasurementsService.subscribe(trackedMeasurementsService.EVENTS.SERIES_REMOVED, () =>\n        updateIsTracked()\n      ),\n    ];\n\n    // Subscribe to measurement service events to update trackedMeasurementUIDs\n    if (measurementService) {\n      [\n        measurementService.EVENTS.MEASUREMENT_ADDED,\n        measurementService.EVENTS.RAW_MEASUREMENT_ADDED,\n        measurementService.EVENTS.MEASUREMENT_UPDATED,\n        measurementService.EVENTS.MEASUREMENT_REMOVED,\n        measurementService.EVENTS.MEASUREMENTS_CLEARED,\n      ].forEach(eventType => {\n        subscriptions.push(\n          measurementService.subscribe(eventType, () => updateTrackedMeasurements())\n        );\n      });\n    }\n\n    return () => {\n      subscriptions.forEach(sub => sub.unsubscribe());\n    };\n  }, [trackedMeasurementsService, measurementService, updateIsTracked, updateTrackedMeasurements]);\n\n  return {\n    isTracked,\n    isLocked,\n    seriesInstanceUID: backgroundDisplaySet?.SeriesInstanceUID,\n    trackedMeasurementUIDs,\n  };\n}\n\nexport default useMeasurementTracking;\n","import { useState, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nimport { useSystem } from '@ohif/core';\nfunction mapMeasurementToDisplay(measurement, displaySetService) {\n  const { referenceSeriesUID } = measurement;\n\n  const displaySets = displaySetService.getDisplaySetsForSeries(referenceSeriesUID);\n\n  if (!displaySets[0]?.instances) {\n    throw new Error('The tracked measurements panel should only be tracking \"stack\" displaySets.');\n  }\n\n  const { findingSites, finding, label: baseLabel, displayText: baseDisplayText } = measurement;\n\n  const firstSite = findingSites?.[0];\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\n\n  // Initialize displayText with the structure used in Length.ts and CobbAngle.ts\n  const displayText = {\n    primary: [],\n    secondary: baseDisplayText?.secondary || [],\n  };\n\n  // Add baseDisplayText to primary if it exists\n  if (baseDisplayText) {\n    displayText.primary.push(...baseDisplayText.primary);\n  }\n\n  // Add finding sites to primary\n  if (findingSites) {\n    findingSites.forEach(site => {\n      if (site?.text && site.text !== label) {\n        displayText.primary.push(site.text);\n      }\n    });\n  }\n\n  // Add finding to primary if it's different from the label\n  if (finding && finding.text && finding.text !== label) {\n    displayText.primary.push(finding.text);\n  }\n\n  return {\n    ...measurement,\n    displayText,\n    label,\n  };\n}\n\n/**\n * A custom hook that provides mapped measurements based on the given services and filters.\n *\n * @param {Object} servicesManager - The services manager object.\n * @param {Object} options - The options for filtering and mapping measurements.\n * @param {Function} options.measurementFilter - Optional function to filter measurements.\n * @param {Object} options.valueTypes - The value types for mapping measurements.\n * @returns {Array} An array of mapped and filtered measurements.\n */\nexport function useMeasurements({ measurementFilter } = { measurementFilter: () => true }) {\n  const { servicesManager } = useSystem();\n  const { measurementService, displaySetService } = servicesManager.services;\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\n\n  useEffect(() => {\n    const updateDisplayMeasurements = () => {\n      const measurements = measurementService.getMeasurements(measurementFilter);\n      const mappedMeasurements = measurements.map(m =>\n        mapMeasurementToDisplay(m, displaySetService)\n      );\n      setDisplayMeasurements(prevMeasurements => {\n        if (JSON.stringify(prevMeasurements) !== JSON.stringify(mappedMeasurements)) {\n          return mappedMeasurements;\n        }\n        return prevMeasurements;\n      });\n    };\n\n    const debouncedUpdate = debounce(updateDisplayMeasurements, 100);\n\n    updateDisplayMeasurements();\n\n    const events = [\n      measurementService.EVENTS.MEASUREMENT_ADDED,\n      measurementService.EVENTS.RAW_MEASUREMENT_ADDED,\n      measurementService.EVENTS.MEASUREMENT_UPDATED,\n      measurementService.EVENTS.MEASUREMENT_REMOVED,\n      measurementService.EVENTS.MEASUREMENTS_CLEARED,\n    ];\n\n    const subscriptions = events.map(\n      evt => measurementService.subscribe(evt, debouncedUpdate).unsubscribe\n    );\n\n    return () => {\n      subscriptions.forEach(unsub => unsub());\n      debouncedUpdate.cancel();\n    };\n  }, [measurementService, measurementFilter, displaySetService]);\n\n  return displayMeasurements;\n}\n","import { useState, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nimport { roundNumber } from '@ohif/core/src/utils';\nimport { SegmentationData } from '../services/SegmentationService/SegmentationService';\nimport { useSystem } from '@ohif/core';\n\nfunction mapSegmentationToDisplay(segmentation, customizationService) {\n  const { label, segments } = segmentation;\n\n  // Get the readable text mapping once\n  const readableTextMap = customizationService.getCustomization('panelSegmentation.readableText');\n\n  // Helper function to recursively map cachedStats to readable display text\n  function mapStatsToDisplay(stats, indent = 0) {\n    const primary = [];\n    const indentation = '  '.repeat(indent);\n\n    for (const key in stats) {\n      if (Object.prototype.hasOwnProperty.call(stats, key)) {\n        const value = stats[key];\n        const readableText = readableTextMap?.[key];\n\n        if (!readableText) {\n          continue;\n        }\n\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n          // Add empty row before category (except for the first category)\n          if (primary.length > 0) {\n            primary.push('');\n          }\n          // Add category title\n          primary.push(`${indentation}${readableText}`);\n          // Recursively handle nested objects\n          primary.push(...mapStatsToDisplay(value, indent + 1));\n        } else {\n          // For non-nested values, don't add empty rows\n          primary.push(`${indentation}${readableText}: ${roundNumber(value, 2)}`);\n        }\n      }\n    }\n\n    return primary;\n  }\n\n  // Get customization for display text mapping\n  const displayTextMapper = segment => {\n    const defaultDisplay = {\n      primary: [],\n      secondary: [],\n    };\n\n    // If the segment has cachedStats, map it to readable text\n    if (segment.cachedStats) {\n      const primary = mapStatsToDisplay(segment.cachedStats);\n      defaultDisplay.primary = primary;\n    }\n\n    return defaultDisplay;\n  };\n\n  const updatedSegments = {};\n\n  Object.entries(segments).forEach(([segmentIndex, segment]) => {\n    updatedSegments[segmentIndex] = {\n      ...segment,\n      displayText: displayTextMapper(segment),\n    };\n  });\n\n  // Map the segments and apply the display text mapper\n  return {\n    ...segmentation,\n    label,\n    segments: updatedSegments,\n  };\n}\n\n/**\n * Custom hook that provides segmentation data.\n * @param options - The options object.\n * @param options.servicesManager - The services manager object.\n * @param options.subscribeToDataModified - Whether to subscribe to segmentation data modifications.\n * @param options.debounceTime - Debounce time in milliseconds for updates.\n * @returns An array of segmentation data.\n */\nexport function useSegmentations(options?: {\n  subscribeToDataModified?: boolean;\n  debounceTime?: number;\n}): SegmentationData[] {\n  const { subscribeToDataModified = false, debounceTime = 0 } = options || {};\n  const { servicesManager } = useSystem();\n  const { segmentationService, customizationService } = servicesManager.services;\n\n  const [segmentations, setSegmentations] = useState<SegmentationData[]>([]);\n\n  useEffect(() => {\n    const update = () => {\n      const segmentations = segmentationService.getSegmentations();\n\n      if (!segmentations?.length) {\n        setSegmentations([]);\n        return;\n      }\n\n      const mappedSegmentations = segmentations.map(segmentation =>\n        mapSegmentationToDisplay(segmentation, customizationService)\n      );\n\n      setSegmentations(mappedSegmentations);\n    };\n\n    const debouncedUpdate =\n      debounceTime > 0 ? debounce(update, debounceTime, { leading: true, trailing: true }) : update;\n\n    update();\n\n    const subscriptions = [\n      segmentationService.subscribe(\n        segmentationService.EVENTS.SEGMENTATION_MODIFIED,\n        debouncedUpdate\n      ),\n      segmentationService.subscribe(\n        segmentationService.EVENTS.SEGMENTATION_REMOVED,\n        debouncedUpdate\n      ),\n    ];\n\n    if (subscribeToDataModified) {\n      subscriptions.push(\n        segmentationService.subscribe(\n          segmentationService.EVENTS.SEGMENTATION_DATA_MODIFIED,\n          debouncedUpdate\n        )\n      );\n    }\n\n    return () => {\n      subscriptions.forEach(subscription => subscription.unsubscribe());\n      if (debounceTime > 0) {\n        debouncedUpdate.cancel();\n      }\n    };\n  }, [segmentationService, customizationService, debounceTime, subscribeToDataModified]);\n\n  return segmentations;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\n\nexport const DEFAULT_COLORMAP = 'hsv';\nexport const DEFAULT_OPACITY = 0.5;\nexport const DEFAULT_OPACITY_PERCENT = DEFAULT_OPACITY * 100;\nexport const DERIVED_OVERLAY_MODALITIES = ['SEG', 'RTSTRUCT'];\n\n/**\n * Get modality-specific color and opacity settings from the customization service\n */\nexport function getModalityOverlayColormap(customizationService, modality) {\n  const modalityOverlayDefaultColorMaps = customizationService?.getCustomization(\n    'cornerstone.modalityOverlayDefaultColorMaps'\n  ) || { defaultSettings: {} };\n\n  return (\n    modalityOverlayDefaultColorMaps.defaultSettings[modality] || {\n      colormap: DEFAULT_COLORMAP,\n      opacity: DEFAULT_OPACITY,\n    }\n  );\n}\n\n/**\n * Identifies display sets that can be used as overlays for a specific viewport.\n *\n * \"Enhanced\" display sets are those that:\n * 1. Are not already in the viewport\n * 2. Are evaluated for their ability to be overlaid onto the background display set\n * 3. Have an \"isOverlayable\" flag indicating if they're compatible with the viewport\n *\n * A display set is considered overlayable when:\n * - The background display set is reconstructable\n * - The display set is not unsupported\n * - The Frame of Reference matches the background display set\n * - For non-derived modalities: background can be a volume and display set is either multiframe or valid volume\n *\n * @returns {Object} Object containing:\n *   - viewportDisplaySets: Display sets already in the viewport\n *   - enhancedDisplaySets: Other display sets with overlayability assessment\n */\nexport function getEnhancedDisplaySets({ viewportId, services }) {\n  const { displaySetService, viewportGridService } = services;\n  const displaySetsUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n  if (!displaySetsUIDs?.length) {\n    return {\n      viewportDisplaySets: [],\n      enhancedDisplaySets: [],\n    };\n  }\n\n  const allDisplaySets = displaySetService.getActiveDisplaySets();\n\n  const otherDisplaySets = allDisplaySets.filter(\n    displaySet => !displaySetsUIDs.includes(displaySet.displaySetInstanceUID)\n  );\n\n  const viewportDisplaySets = displaySetsUIDs.map(displaySetUID =>\n    displaySetService.getDisplaySetByUID(displaySetUID)\n  );\n\n  const backgroundCanBeVolume = csUtils.isValidVolume(viewportDisplaySets[0].imageIds || []);\n  const backgroundDisplaySet = viewportDisplaySets[0];\n\n  const enhancedDisplaySets = otherDisplaySets.map(displaySet => {\n    if (!backgroundDisplaySet.isReconstructable) {\n      return {\n        ...displaySet,\n        isOverlayable: false,\n      };\n    }\n\n    if (displaySet.unsupported) {\n      return {\n        ...displaySet,\n        isOverlayable: false,\n      };\n    }\n\n    // Check if Frame of Reference matches\n    if (\n      displaySet.FrameOfReferenceUID &&\n      displaySet.FrameOfReferenceUID !== backgroundDisplaySet.FrameOfReferenceUID\n    ) {\n      return {\n        ...displaySet,\n        isOverlayable: false,\n      };\n    }\n\n    // Special handling for derived modalities\n    if (!DERIVED_OVERLAY_MODALITIES.includes(displaySet.Modality)) {\n      if (!backgroundCanBeVolume) {\n        return {\n          ...displaySet,\n          isOverlayable: false,\n        };\n      }\n\n      const imageIds = displaySet.imageIds || displaySet.images?.map(image => image.imageId);\n      const isMultiframe = displaySet.isMultiFrame;\n\n      if (!isMultiframe && imageIds?.length > 0 && !csUtils.isValidVolume(imageIds)) {\n        return {\n          ...displaySet,\n          isOverlayable: false,\n        };\n      }\n    }\n\n    return {\n      ...displaySet,\n      isOverlayable: true,\n    };\n  });\n\n  return {\n    viewportDisplaySets,\n    enhancedDisplaySets,\n  };\n}\n\n/**\n * Sort function: puts disabled items (isOverlayable: false) at the end\n */\nexport const sortByOverlayable = (a, b) => {\n  if (a.isOverlayable === b.isOverlayable) {\n    return 0;\n  }\n  return a.isOverlayable ? -1 : 1;\n};\n\n/**\n * Create display set options based on modality and opacity settings\n */\nexport function createColormapOverlayDisplaySetOptions(displaySet, opacity, customizationService) {\n  if (displaySet.Modality === 'SEG') {\n    return {};\n  }\n\n  const modalitySettings = getModalityOverlayColormap(customizationService, displaySet.Modality);\n  return {\n    colormap: {\n      name: modalitySettings.colormap || DEFAULT_COLORMAP,\n      opacity: opacity / 100, // Convert from percentage to 0-1 range\n    },\n  };\n}\n\n/**\n * Get segmentations that can be added as overlays to the viewport\n *\n * Note: This function is deprecated as we now use display sets for segmentations\n */\nexport function getAvailableSegmentations(segmentationService) {\n  const segmentations = segmentationService.getSegmentations() || [];\n  return segmentations.map(segmentation => ({\n    segmentationId: segmentation.segmentationId,\n    label: segmentation.label || 'Segmentation',\n    segments: segmentation.segments,\n    frameOfReferenceUID: segmentation.frameOfReferenceUID,\n  }));\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSystem, utils } from '@ohif/core';\nimport { useViewportGrid } from '@ohif/ui-next';\nimport {\n  getEnhancedDisplaySets,\n  sortByOverlayable,\n  DERIVED_OVERLAY_MODALITIES,\n} from '../components/ViewportDataOverlaySettingMenu/utils';\n\nconst sortByPriority = (a, b) => {\n  if (utils.isLowPriorityModality(a.Modality)) {\n    return 1;\n  }\n  return -1;\n};\n\n/**\n * Options for the useViewportDisplaySets hook\n */\nexport type UseViewportDisplaySetsOptions = {\n  /**\n   * Whether to include background display set\n   */\n  includeBackground?: boolean;\n  /**\n   * Whether to include foreground display sets\n   */\n  includeForeground?: boolean;\n  /**\n   * Whether to include overlay display sets\n   */\n  includeOverlay?: boolean;\n  /**\n   * Whether to include potential overlay display sets\n   */\n  includePotentialOverlay?: boolean;\n  /**\n   * Whether to include potential foreground display sets\n   */\n  includePotentialForeground?: boolean;\n  /**\n   * Whether to include potential background display sets\n   */\n  includePotentialBackground?: boolean;\n};\n\n/**\n * Return type for useViewportDisplaySets\n */\nexport type ViewportDisplaySets = {\n  /**\n   * All display sets for the viewport\n   */\n  allDisplaySets: AppTypes.DisplaySet[];\n  /**\n   * The viewport display sets for the viewport\n   */\n  viewportDisplaySets: AppTypes.DisplaySet[];\n  /**\n   * The primary display set for the viewport (base image)\n   */\n  backgroundDisplaySet?: AppTypes.DisplaySet;\n  /**\n   * Display sets currently shown with background (non-overlay layers)\n   */\n  foregroundDisplaySets?: AppTypes.DisplaySet[];\n  /**\n   * Segmentation display sets currently applied as overlays\n   */\n  overlayDisplaySets?: AppTypes.DisplaySet[];\n  /**\n   * Display sets that could be toggled on as overlays (derived modalities)\n   */\n  potentialOverlayDisplaySets?: AppTypes.DisplaySet[];\n  /**\n   * Display sets that could be added as foreground layers\n   */\n  potentialForegroundDisplaySets?: AppTypes.DisplaySet[];\n  /**\n   * Display sets that could replace the current background\n   */\n  potentialBackgroundDisplaySets?: AppTypes.DisplaySet[];\n};\n\n/**\n * Hook to provide display sets and overlay information for a viewport based on options.\n *\n * @param viewportId - The viewport ID to get display sets for\n * @param options - Options to control which display sets to compute\n * @returns Object containing requested display set collections based on options\n */\nexport function useViewportDisplaySets(\n  viewportId?: string,\n  options?: UseViewportDisplaySetsOptions\n): ViewportDisplaySets {\n  const { servicesManager } = useSystem();\n  const { displaySetService, segmentationService } = servicesManager.services;\n\n  // Note: this is very important we should use the useViewportGrid hook here,\n  // since if the viewport displaySet is changed we should re-run this hook\n  // to get the latest displaySets\n  const [viewportGridState, viewportGridService] = useViewportGrid();\n\n  const viewportIdToUse = viewportId || viewportGridState.activeViewportId;\n\n  // Apply defaults - include everything if no options specified\n  const {\n    includeBackground = true,\n    includeForeground = true,\n    includeOverlay = true,\n    includePotentialOverlay = true,\n    includePotentialForeground = true,\n    includePotentialBackground = true,\n  } = options || {};\n\n  // Get all available display sets (only if needed)\n  const needsAllDisplaySets = includePotentialBackground;\n  const allDisplaySets = useMemo(\n    () => (needsAllDisplaySets ? displaySetService.getActiveDisplaySets() : []),\n    [displaySetService, needsAllDisplaySets]\n  );\n\n  // Get all available segmentations (only if needed)\n  const needsSegmentations = includeOverlay;\n\n  const [segmentationRepresentations, setSegmentationRepresentations] = useState(\n    needsSegmentations ? segmentationService.getSegmentationRepresentations(viewportIdToUse) : []\n  );\n\n  useEffect(() => {\n    setSegmentationRepresentations(\n      needsSegmentations ? segmentationService.getSegmentationRepresentations(viewportIdToUse) : []\n    );\n\n    const unsubscribeArr = needsSegmentations\n      ? [\n          segmentationService.EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n          segmentationService.EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n        ].map(event =>\n          segmentationService.subscribe(event, () => {\n            setSegmentationRepresentations(\n              segmentationService.getSegmentationRepresentations(viewportIdToUse)\n            );\n          })\n        )\n      : [];\n\n    return () => {\n      unsubscribeArr.forEach(item => item.unsubscribe());\n    };\n  }, [segmentationService, viewportIdToUse, needsSegmentations]);\n\n  const overlayDisplaySets = useMemo(() => {\n    if (!includeOverlay) {\n      return [];\n    }\n    return segmentationRepresentations.map(repr => {\n      const displaySet = displaySetService.getDisplaySetByUID(repr.segmentationId);\n      return displaySet;\n    });\n  }, [includeOverlay, segmentationRepresentations, displaySetService]);\n\n  const overlayDisplaySetUIDs = useMemo(() => {\n    return overlayDisplaySets.map(ds => ds.displaySetInstanceUID);\n  }, [overlayDisplaySets]);\n\n  // Get enhanced display sets (only if needed)\n  const needsEnhancedDisplaySets =\n    includeBackground || includeForeground || includePotentialOverlay || includePotentialForeground;\n\n  const { viewportDisplaySets = [], enhancedDisplaySets = [] } = useMemo(() => {\n    if (!needsEnhancedDisplaySets) {\n      return { viewportDisplaySets: [], enhancedDisplaySets: [] };\n    }\n    return (\n      getEnhancedDisplaySets({\n        viewportId: viewportIdToUse,\n        services: { displaySetService, viewportGridService },\n      }) || { viewportDisplaySets: [], enhancedDisplaySets: [] }\n    );\n  }, [viewportIdToUse, displaySetService, viewportGridService, needsEnhancedDisplaySets]);\n\n  const backgroundDisplaySet = useMemo(\n    () =>\n      includeBackground && viewportDisplaySets.length > 0 ? viewportDisplaySets[0] : undefined,\n    [includeBackground, viewportDisplaySets]\n  );\n\n  const foregroundDisplaySets = useMemo(() => {\n    if (!includeForeground || !backgroundDisplaySet) {\n      return [];\n    }\n    return viewportDisplaySets.filter(\n      ds =>\n        !DERIVED_OVERLAY_MODALITIES.includes(ds.Modality) &&\n        ds.displaySetInstanceUID !== backgroundDisplaySet.displaySetInstanceUID\n    );\n  }, [includeForeground, viewportDisplaySets, backgroundDisplaySet]);\n\n  const foregroundDisplaySetUIDs = useMemo(\n    () => foregroundDisplaySets.map(ds => ds.displaySetInstanceUID),\n    [foregroundDisplaySets]\n  );\n\n  const potentialOverlayDisplaySets = useMemo(() => {\n    if (!includePotentialOverlay) {\n      return [];\n    }\n    return enhancedDisplaySets\n      .filter(\n        ds =>\n          DERIVED_OVERLAY_MODALITIES.includes(ds.Modality) &&\n          !overlayDisplaySetUIDs.includes(ds.displaySetInstanceUID) &&\n          ds.isOverlayable\n      )\n      .sort(sortByOverlayable);\n  }, [includePotentialOverlay, enhancedDisplaySets, overlayDisplaySetUIDs]);\n\n  const potentialForegroundDisplaySets = useMemo(() => {\n    if (!includePotentialForeground) {\n      return [];\n    }\n    return enhancedDisplaySets\n      .filter(\n        ds =>\n          !DERIVED_OVERLAY_MODALITIES.includes(ds.Modality) &&\n          !foregroundDisplaySetUIDs.includes(ds.displaySetInstanceUID) &&\n          ds.isOverlayable\n      )\n      .sort(sortByPriority);\n  }, [includePotentialForeground, enhancedDisplaySets, foregroundDisplaySetUIDs]);\n\n  const potentialBackgroundDisplaySets = useMemo(() => {\n    if (!includePotentialBackground || !backgroundDisplaySet) {\n      return [];\n    }\n    return allDisplaySets\n      .filter(\n        ds =>\n          !DERIVED_OVERLAY_MODALITIES.includes(ds.Modality) &&\n          ds.displaySetInstanceUID !== backgroundDisplaySet.displaySetInstanceUID &&\n          !overlayDisplaySetUIDs.includes(ds.displaySetInstanceUID) &&\n          !foregroundDisplaySetUIDs.includes(ds.displaySetInstanceUID)\n      )\n      .sort(sortByPriority);\n  }, [\n    includePotentialBackground,\n    allDisplaySets,\n    backgroundDisplaySet,\n    overlayDisplaySetUIDs,\n    foregroundDisplaySetUIDs,\n  ]);\n\n  const result: ViewportDisplaySets = {\n    allDisplaySets: allDisplaySets || [],\n    viewportDisplaySets: viewportDisplaySets || [],\n  };\n\n  if (includeBackground) {\n    result.backgroundDisplaySet = backgroundDisplaySet;\n  }\n\n  if (includeForeground) {\n    result.foregroundDisplaySets = foregroundDisplaySets;\n  }\n\n  if (includeOverlay) {\n    result.overlayDisplaySets = overlayDisplaySets;\n  }\n\n  if (includePotentialOverlay) {\n    result.potentialOverlayDisplaySets = potentialOverlayDisplaySets;\n  }\n\n  if (includePotentialForeground) {\n    result.potentialForegroundDisplaySets = potentialForegroundDisplaySets;\n  }\n\n  if (includePotentialBackground) {\n    result.potentialBackgroundDisplaySets = potentialBackgroundDisplaySets;\n  }\n\n  return result;\n}\n","import React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useSystem } from '@ohif/core';\nimport { useViewportDisplaySets } from './useViewportDisplaySets';\nimport {\n  StackViewport,\n  Types,\n  VolumeViewport3D,\n  utilities,\n  Enums,\n  BaseVolumeViewport,\n  cache,\n} from '@cornerstonejs/core';\nimport { WindowLevelPreset } from '../types/WindowLevel';\nimport { ColorbarPositionType, ColorbarOptions, ColorbarProperties } from '../types/Colorbar';\nimport { VolumeRenderingConfig } from '../types/VolumeRenderingConfig';\nimport { VolumeLightingParams } from '../types';\nimport { ButtonLocation } from '@ohif/core/src/services/ToolBarService/ToolbarService';\n\ninterface ViewportRenderingOptions {\n  location?: number;\n  displaySetInstanceUID?: string;\n}\n\ninterface PixelValueRange {\n  min: number;\n  max: number;\n}\n\ninterface WindowLevelHook {\n  // Viewport information\n  is3DVolume: boolean;\n  isViewportBackgroundLight: boolean;\n  viewportDisplaySets: AppTypes.DisplaySet[] | undefined;\n  voiRange: { lower: number; upper: number } | undefined;\n  windowLevel: { windowWidth: number; windowCenter: number } | undefined;\n\n  // Window level functions\n  setWindowLevel: (preset: {\n    windowWidth: number;\n    windowCenter: number;\n    immediate?: boolean;\n  }) => void;\n  setVOIRange: (params: { lower: number; upper: number }) => void;\n  windowLevelPresets: WindowLevelPreset[];\n  allWindowLevelPresets: Array<{\n    displaySetInstanceUID: string;\n    modality: string;\n    presets: WindowLevelPreset[];\n  }>;\n\n  // Colorbar functions\n  hasColorbar: boolean;\n  toggleColorbar: (options?: Partial<ColorbarOptions>) => void;\n  colorbarProperties: ColorbarProperties;\n  colorbarPosition: ColorbarPositionType;\n  setColorbarPosition: React.Dispatch<React.SetStateAction<ColorbarPositionType>>;\n\n  // Colormap functions\n  setColormap: (params: { colormap: any; opacity?: number; immediate?: boolean }) => void;\n  colormap: any;\n\n  // Opacity functions\n  opacity: number | undefined;\n  setOpacity: (opacity: number) => void;\n  opacityLinear: number | undefined;\n  setOpacityLinear: (opacityLinear: number) => void;\n\n  // Threshold functions\n  threshold: number | undefined;\n  setThreshold: (threshold: number) => void;\n  pixelValueRange: PixelValueRange;\n\n  // 3D volume rendering functions\n  setVolumeRenderingPreset: (preset: any) => void;\n  setVolumeRenderingQuality: (quality: number) => void;\n  setVolumeLighting: (params: { ambient: number; diffuse: number; specular: number }) => void;\n  setVolumeShading: (enabled: boolean) => void;\n  volumeRenderingPresets: Array<any>;\n  volumeRenderingQualityRange: { min: number; max: number; step: number };\n}\n\nconst getPosition = (location: number): ColorbarPositionType => {\n  switch (location) {\n    case ButtonLocation.LeftMiddle:\n      return 'left';\n    case ButtonLocation.RightMiddle:\n      return 'right';\n    case ButtonLocation.BottomMiddle:\n      return 'bottom';\n    case ButtonLocation.TopMiddle:\n      return 'top';\n    default:\n      return 'bottom'; // Default to bottom if location doesn't match a middle position\n  }\n};\n\nconst GAMMA = 1 / 5;\n\nconst linearToOpacity = (linearValue: number): number => {\n  return Math.pow(linearValue, GAMMA);\n};\n\nconst opacityToLinear = (opacityValue: number): number => {\n  return Math.pow(opacityValue, 1.0 / GAMMA);\n};\n\nconst is3DViewport = ({ viewportId, cornerstoneViewportService }) => {\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  return viewport instanceof VolumeViewport3D;\n};\n\n/**\n * Hook to access window level functionality for a specific viewport\n *\n * @param viewportId - The ID of the viewport to get window level functionality for\n * @param options - Options for the hook, including location and displaySetInstanceUID\n * @returns Window level API for the specified viewport\n */\nexport function useViewportRendering(\n  viewportId?: string,\n  options?: ViewportRenderingOptions\n): WindowLevelHook {\n  const { servicesManager, commandsManager } = useSystem();\n  const { cornerstoneViewportService, colorbarService, customizationService } =\n    servicesManager.services;\n\n  const [is3DVolume, setIs3DVolume] = useState(\n    is3DViewport({ viewportId, cornerstoneViewportService })\n  );\n  const [hasColorbar, setHasColorbar] = useState(colorbarService.hasColorbar(viewportId));\n  const [colorbarPosition, setColorbarPosition] = useState<ColorbarPositionType>(\n    options?.location ? getPosition(options.location) : 'bottom'\n  );\n  const [voiRange, setVoiRange] = useState<{ lower: number; upper: number } | undefined>();\n  const voiRangeRef = React.useRef<{ lower: number; upper: number } | undefined>();\n  const [opacity, setOpacityState] = useState<number | undefined>();\n  const [opacityLinear, setOpacityLinearState] = useState<number | undefined>();\n  const [threshold, setThresholdState] = useState<number | undefined>();\n  const [pixelValueRange, setPixelValueRange] = useState<PixelValueRange>({ min: 0, max: 255 });\n\n  const { viewportDisplaySets } = useViewportDisplaySets(viewportId);\n  const { displaySetService } = servicesManager.services;\n\n  // Determine the active display set instance UID (internal only, not exposed)\n  const activeDisplaySetInstanceUID = useMemo(() => {\n    if (options?.displaySetInstanceUID) {\n      return options.displaySetInstanceUID;\n    }\n\n    if (viewportDisplaySets && viewportDisplaySets.length > 0) {\n      return viewportDisplaySets[0].displaySetInstanceUID;\n    }\n\n    return undefined;\n  }, [options?.displaySetInstanceUID, viewportDisplaySets]);\n\n  const viewportInfo = viewportId ? cornerstoneViewportService.getViewportInfo(viewportId) : null;\n\n  const { presets, colorbarProperties, volumeRenderingPresets, volumeRenderingQualityRange } =\n    getCustomizationData(customizationService);\n\n  const backgroundColor = viewportInfo?.getViewportOptions().background;\n  const isViewportBackgroundLight = backgroundColor\n    ? utilities.isEqual(backgroundColor, [1, 1, 1])\n    : false;\n\n  const allWindowLevelPresets = useMemo(() => {\n    return (\n      viewportDisplaySets\n        ?.filter(displaySet => presets?.[displaySet.Modality as string])\n        .map(displaySet => {\n          return {\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\n            modality: displaySet.Modality as string,\n            presets: presets[displaySet.Modality as string],\n          };\n        }) || []\n    );\n  }, [viewportDisplaySets, presets]);\n\n  // Calculate pixel value range for the active display set\n  useEffect(() => {\n    if (!activeDisplaySetInstanceUID) {\n      return;\n    }\n\n    const selectedDisplaySet = displaySetService.getDisplaySetByUID(activeDisplaySetInstanceUID);\n    if (!selectedDisplaySet?.imageIds?.length) {\n      return;\n    }\n\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    if (!csViewport) {\n      return;\n    }\n\n    if (!(csViewport instanceof BaseVolumeViewport)) {\n      return;\n    }\n\n    const volumeIds = csViewport.getAllVolumeIds();\n    const volumeId = volumeIds.find(id => id.includes(activeDisplaySetInstanceUID));\n\n    if (!volumeId) {\n      return;\n    }\n\n    // only handle volume viewports for now\n    const imageData = csViewport.getImageData(volumeId);\n\n    if (!imageData) {\n      return;\n    }\n\n    const imageDataVtk = imageData.imageData;\n\n    const { voxelManager } = imageDataVtk.get('voxelManager');\n\n    const range = voxelManager.getRange();\n\n    setPixelValueRange({ min: range[0], max: range[1] });\n  }, [activeDisplaySetInstanceUID, displaySetService, cornerstoneViewportService, viewportId]);\n\n  // Get the presets specifically for the active display set\n  const activeDisplaySetPresets = useMemo(() => {\n    if (!activeDisplaySetInstanceUID || allWindowLevelPresets.length === 0) {\n      return [];\n    }\n\n    const activePresetData = allWindowLevelPresets.find(\n      preset => preset.displaySetInstanceUID === activeDisplaySetInstanceUID\n    );\n\n    if (!activePresetData) {\n      return [];\n    }\n\n    return activePresetData.presets;\n  }, [allWindowLevelPresets, activeDisplaySetInstanceUID]);\n\n  useEffect(() => {\n    setIs3DVolume(is3DViewport({ viewportId, cornerstoneViewportService }));\n\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    // Initialize the VOI range from the viewport\n    if (viewport && activeDisplaySetInstanceUID) {\n      try {\n        let properties;\n\n        if (viewport instanceof StackViewport) {\n          properties = viewport.getProperties();\n          if (properties.voiRange) {\n            setVoiRange(properties.voiRange);\n            voiRangeRef.current = properties.voiRange;\n          }\n        } else if (viewport instanceof BaseVolumeViewport) {\n          // For volume viewports, find the actor for the active display set\n          const volumeIds = viewport.getAllVolumeIds();\n          const volumeId = volumeIds.find(id => id.includes(activeDisplaySetInstanceUID));\n\n          if (volumeId) {\n            properties = viewport.getProperties(volumeId);\n            if (properties?.voiRange) {\n              setVoiRange(properties.voiRange);\n              voiRangeRef.current = properties.voiRange;\n            }\n\n            // Get opacity from colormap if available\n            if (properties?.colormap?.opacity !== undefined) {\n              const isArray = Array.isArray(properties.colormap.opacity);\n              const opacity = isArray\n                ? properties.colormap.opacity.reduce((max, current) => Math.max(max, current), 0)\n                : properties.colormap.opacity;\n\n              setOpacityState(opacity);\n              setOpacityLinearState(opacityToLinear(opacity));\n            }\n\n            // Get threshold from colormap if available\n            if (properties?.colormap && properties.colormap.threshold !== undefined) {\n              setThresholdState(properties.colormap.threshold);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing VOI range:', error);\n      }\n    }\n  }, [cornerstoneViewportService, viewportId, activeDisplaySetInstanceUID]);\n\n  useEffect(() => {\n    if (!viewportId) {\n      return;\n    }\n\n    const updateColorbarState = () => {\n      const hasColorbarValue = colorbarService.hasColorbar(viewportId);\n      setHasColorbar(hasColorbarValue);\n    };\n\n    updateColorbarState();\n\n    const { unsubscribe } = colorbarService.subscribe(\n      colorbarService.EVENTS.STATE_CHANGED,\n      updateColorbarState\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [colorbarService, viewportId]);\n\n  useEffect(() => {\n    if (!viewportId || !activeDisplaySetInstanceUID) {\n      return;\n    }\n\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (!viewport) {\n      return;\n    }\n\n    const element = viewport.element;\n    if (!element) {\n      return;\n    }\n\n    const updateVOI = eventDetail => {\n      const { range } = eventDetail.detail;\n\n      if (!range) {\n        return;\n      }\n\n      // Check if this update is coming from our own setVOIRange or setWindowLevel call\n      // If so, we already updated our state and don't need to do it again\n      const isInternalUpdate = voiRangeRef.current && areVoiRangesClose(voiRangeRef.current, range);\n\n      if (!isInternalUpdate) {\n        voiRangeRef.current = range;\n        setVoiRange(range);\n      }\n    };\n\n    const updateColormap = eventDetail => {\n      const { colormap } = eventDetail.detail;\n\n      if (!colormap) {\n        return;\n      }\n\n      // Extract threshold from colormap in the event detail\n      if (colormap.threshold !== undefined) {\n        setThresholdState(colormap.threshold);\n      }\n\n      if (colormap.opacity !== undefined) {\n        setOpacityState(colormap.opacity);\n        setOpacityLinearState(opacityToLinear(colormap.opacity));\n      }\n    };\n\n    element.addEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\n    element.addEventListener(Enums.Events.COLORMAP_MODIFIED, updateColormap);\n\n    return () => {\n      element.removeEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\n      element.removeEventListener(Enums.Events.COLORMAP_MODIFIED, updateColormap);\n    };\n  }, [viewportId, activeDisplaySetInstanceUID, cornerstoneViewportService, opacityToLinear]);\n\n  const validateActiveDisplaySet = useCallback(() => {\n    if (!activeDisplaySetInstanceUID) {\n      throw new Error('No active display set instance UID is available');\n    }\n\n    if (viewportDisplaySets?.length === 0) {\n      throw new Error('No display sets are available for this viewport');\n    }\n\n    // Verify the active display set is in the viewport\n    const isDisplaySetInViewport = viewportDisplaySets?.some(\n      ds => ds.displaySetInstanceUID === activeDisplaySetInstanceUID\n    );\n\n    if (!isDisplaySetInViewport) {\n      throw new Error(\n        `Display set with UID ${activeDisplaySetInstanceUID} is not present in the viewport`\n      );\n    }\n\n    return activeDisplaySetInstanceUID;\n  }, [activeDisplaySetInstanceUID, viewportDisplaySets]);\n\n  const setWindowLevel = useCallback(\n    (preset: { windowWidth: number; windowCenter: number; immediate?: boolean }) => {\n      if (!viewportId) {\n        return;\n      }\n\n      const displaySetInstanceUID = validateActiveDisplaySet();\n\n      // Update voiRange as well, to ensure immediate UI updates\n      const { lower, upper } = utilities.windowLevel.toLowHighRange(\n        preset.windowWidth,\n        preset.windowCenter\n      );\n\n      const newVoiRange = { lower, upper };\n\n      if (!voiRangeRef.current || !areVoiRangesClose(voiRangeRef.current, newVoiRange)) {\n        voiRangeRef.current = newVoiRange;\n        setVoiRange(newVoiRange);\n\n        commandsManager.run({\n          commandName: 'setViewportWindowLevel',\n          commandOptions: {\n            ...preset,\n            viewportId,\n            displaySetInstanceUID,\n          },\n          context: 'CORNERSTONE',\n        });\n      }\n    },\n    [commandsManager, viewportId, validateActiveDisplaySet]\n  );\n\n  const setVOIRange = useCallback(\n    (params: { lower: number; upper: number }) => {\n      if (!viewportId) {\n        return;\n      }\n\n      // Only update if VOI values have actually changed\n      if (!voiRangeRef.current || !areVoiRangesClose(voiRangeRef.current, params)) {\n        // Update the ref and state immediately to avoid race conditions with the event listener\n        voiRangeRef.current = params;\n        setVoiRange(params);\n\n        const windowLevel = utilities.windowLevel.toWindowLevel(params.lower, params.upper);\n\n        // Set window level using the command manager directly to avoid circular calls\n        const displaySetInstanceUID = validateActiveDisplaySet();\n        commandsManager.run({\n          commandName: 'setViewportWindowLevel',\n          commandOptions: {\n            ...windowLevel,\n            viewportId,\n            displaySetInstanceUID,\n          },\n          context: 'CORNERSTONE',\n        });\n      }\n    },\n    [viewportId, commandsManager, validateActiveDisplaySet]\n  );\n\n  const toggleColorbar = useCallback(\n    (options?: Partial<ColorbarOptions>) => {\n      if (!viewportId) {\n        return;\n      }\n\n      if (viewportDisplaySets?.length === 0) {\n        return;\n      }\n\n      if (!colorbarProperties) {\n        return;\n      }\n\n      const {\n        width: colorbarWidth,\n        colorbarTickPosition,\n        colorbarInitialColormap,\n      } = colorbarProperties as ColorbarProperties;\n\n      let appropriateTickPosition = colorbarTickPosition || 'top';\n\n      if (colorbarPosition === 'left' || colorbarPosition === 'right') {\n        appropriateTickPosition = colorbarPosition === 'left' ? 'right' : 'left';\n      } else {\n        appropriateTickPosition = colorbarPosition === 'top' ? 'bottom' : 'top';\n      }\n\n      const colorbarOptions = {\n        viewportId,\n        colormaps: colorbarProperties.colormaps || {},\n        ticks: {\n          position: appropriateTickPosition,\n        },\n        width: colorbarWidth,\n        position: colorbarPosition,\n        activeColormapName: colorbarInitialColormap || 'Grayscale',\n        ...options,\n      };\n\n      // If light background, adjust tick style but keep the appropriate position\n      if (isViewportBackgroundLight) {\n        colorbarOptions.ticks = {\n          position: appropriateTickPosition,\n          style: {\n            font: '13px Inter',\n            color: '#000000',\n            maxNumTicks: 8,\n            tickSize: 5,\n            tickWidth: 1,\n            labelMargin: 3,\n          },\n        };\n      }\n\n      const displaySetInstanceUIDs = viewportDisplaySets.map(ds => ds.displaySetInstanceUID);\n\n      try {\n        commandsManager.run('toggleViewportColorbar', {\n          viewportId,\n          options: colorbarOptions,\n          displaySetInstanceUIDs,\n        });\n      } catch (error) {\n        console.error('Error toggling colorbar:', error);\n      }\n    },\n    [\n      commandsManager,\n      viewportId,\n      colorbarProperties,\n      isViewportBackgroundLight,\n      viewportDisplaySets,\n      colorbarPosition,\n    ]\n  );\n\n  const setColormap = useCallback(\n    ({ colormap, opacity = 1, immediate = false }) => {\n      if (!viewportId) {\n        return;\n      }\n\n      const displaySetInstanceUID = validateActiveDisplaySet();\n\n      // Update local opacity state\n      if (opacity !== undefined) {\n        setOpacityState(opacity);\n      }\n\n      commandsManager.run({\n        commandName: 'setViewportColormap',\n        commandOptions: {\n          viewportId,\n          colormap,\n          displaySetInstanceUID,\n          opacity,\n          immediate,\n        },\n        context: 'CORNERSTONE',\n      });\n    },\n    [commandsManager, viewportId, validateActiveDisplaySet]\n  );\n\n  const setOpacity = useCallback(\n    (opacityValue: number) => {\n      if (!viewportId) {\n        return;\n      }\n\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      if (!viewport || !(viewport instanceof BaseVolumeViewport)) {\n        return;\n      }\n\n      // Apply the actual opacity value\n      setOpacityState(opacityValue);\n      // Update the linear value for UI\n      setOpacityLinearState(opacityToLinear(opacityValue));\n\n      const displaySetInstanceUID = validateActiveDisplaySet();\n      const volumeIds = viewport.getAllVolumeIds();\n      const volumeId = volumeIds.find(id => id.includes(displaySetInstanceUID));\n\n      if (!volumeId) {\n        return;\n      }\n\n      // Get current properties including colormap\n      const properties = viewport.getProperties(volumeId);\n      const currentColormap = properties.colormap || {};\n\n      // Update colormap with new opacity\n      const updatedColormap = {\n        ...currentColormap,\n        opacity: opacityValue,\n      };\n\n      // Apply updated colormap\n      viewport.setProperties(\n        {\n          colormap: updatedColormap,\n        },\n        volumeId\n      );\n\n      viewport.render();\n    },\n    [cornerstoneViewportService, viewportId, validateActiveDisplaySet, opacityToLinear]\n  );\n\n  const setOpacityLinear = useCallback(\n    (linearValue: number) => {\n      // Convert linear UI value to actual opacity value and apply it\n      const actualOpacity = linearToOpacity(linearValue);\n      setOpacity(actualOpacity);\n    },\n    [linearToOpacity, setOpacity]\n  );\n\n  const setThreshold = useCallback(\n    (thresholdValue: number) => {\n      if (!viewportId) {\n        return;\n      }\n\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      if (!viewport || !(viewport instanceof BaseVolumeViewport)) {\n        return;\n      }\n\n      setThresholdState(thresholdValue);\n\n      const displaySetInstanceUID = validateActiveDisplaySet();\n      const volumeIds = viewport.getAllVolumeIds();\n      const volumeId = volumeIds.find(id => id.includes(displaySetInstanceUID));\n\n      if (!volumeId) {\n        return;\n      }\n\n      console.debug('🚀 ~ thresholdValue:', thresholdValue);\n\n      viewport.setProperties(\n        {\n          colormap: {\n            threshold: thresholdValue,\n          },\n        },\n        volumeId\n      );\n\n      viewport.render();\n    },\n    [cornerstoneViewportService, viewportId, validateActiveDisplaySet]\n  );\n\n  // Get the current colormap for the active display set\n  const colormap = useMemo(() => {\n    if (!viewportId || !activeDisplaySetInstanceUID || !viewportDisplaySets?.length) {\n      return null;\n    }\n\n    try {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n      if (!viewport) {\n        return null;\n      }\n\n      if (viewport instanceof StackViewport) {\n        const { colormap } = viewport.getProperties();\n        if (!colormap) {\n          return (\n            colorbarProperties?.colormaps?.find(c => c.Name === 'Grayscale') ||\n            colorbarProperties?.colormaps?.[0]\n          );\n        }\n        return colormap;\n      }\n\n      const actorEntries = viewport.getActors();\n      const actorEntry = actorEntries?.find(entry =>\n        entry.referencedId.includes(activeDisplaySetInstanceUID)\n      );\n\n      if (!actorEntry) {\n        return (\n          colorbarProperties?.colormaps?.find(c => c.Name === 'Grayscale') ||\n          colorbarProperties?.colormaps?.[0]\n        );\n      }\n\n      const { colormap } = (viewport as Types.IVolumeViewport).getProperties(\n        actorEntry.referencedId\n      );\n\n      if (!colormap) {\n        return (\n          colorbarProperties?.colormaps?.find(c => c.Name === 'Grayscale') ||\n          colorbarProperties?.colormaps?.[0]\n        );\n      }\n\n      return colormap;\n    } catch (error) {\n      console.error('Error getting viewport colormap:', error);\n      return (\n        colorbarProperties?.colormaps?.find(c => c.Name === 'Grayscale') ||\n        colorbarProperties?.colormaps?.[0]\n      );\n    }\n  }, [\n    cornerstoneViewportService,\n    viewportId,\n    activeDisplaySetInstanceUID,\n    viewportDisplaySets,\n    colorbarProperties?.colormaps,\n  ]);\n\n  // 3D volume rendering functions\n  const setVolumeRenderingPreset = useCallback(\n    (preset: any) => {\n      if (!viewportId) {\n        return;\n      }\n\n      const displaySetInstanceUID = validateActiveDisplaySet();\n\n      commandsManager.run({\n        commandName: 'setVolumesPreset',\n        commandOptions: {\n          preset,\n          viewportId,\n          displaySetInstanceUID,\n        },\n      });\n    },\n    [commandsManager, viewportId, validateActiveDisplaySet]\n  );\n\n  const setVolumeRenderingQuality = useCallback(\n    (quality: number) => {\n      if (!viewportId) {\n        return;\n      }\n\n      commandsManager.run({\n        commandName: 'setVolumeRenderingQuality',\n        commandOptions: {\n          quality,\n          viewportId,\n        },\n      });\n    },\n    [commandsManager, viewportId]\n  );\n\n  const setVolumeLighting = useCallback(\n    ({ ambient, diffuse, specular }: VolumeLightingParams) => {\n      if (!viewportId) {\n        return;\n      }\n\n      commandsManager.run({\n        commandName: 'setVolumeLighting',\n        commandOptions: {\n          ambient,\n          diffuse,\n          specular,\n          viewportId,\n        },\n      });\n    },\n    [commandsManager, viewportId]\n  );\n\n  const setVolumeShading = useCallback(\n    (enabled: boolean) => {\n      if (!viewportId) {\n        return;\n      }\n\n      commandsManager.run({\n        commandName: 'setVolumeShading',\n        commandOptions: {\n          enabled,\n          viewportId,\n        },\n      });\n    },\n    [commandsManager, viewportId]\n  );\n\n  return {\n    is3DVolume,\n    isViewportBackgroundLight,\n\n    // Window level functions\n    setWindowLevel,\n    setVOIRange,\n    voiRange,\n    windowLevel: utilities.windowLevel.toWindowLevel(voiRange?.lower, voiRange?.upper),\n\n    // Colorbar functions\n    hasColorbar,\n    toggleColorbar,\n\n    // Colormap functions\n    setColormap,\n    colormap,\n\n    // Opacity functions\n    opacity,\n    setOpacity,\n    opacityLinear,\n    setOpacityLinear,\n\n    // Threshold functions\n    threshold,\n    setThreshold,\n    pixelValueRange,\n\n    // 3D volume rendering functions\n    setVolumeRenderingPreset,\n    setVolumeRenderingQuality,\n    setVolumeLighting,\n    setVolumeShading,\n\n    // Display sets\n    viewportDisplaySets,\n\n    // Colorbar properties\n    colorbarProperties,\n    colorbarPosition,\n    setColorbarPosition,\n\n    // Presets\n    windowLevelPresets: activeDisplaySetPresets,\n    allWindowLevelPresets,\n    volumeRenderingPresets,\n    volumeRenderingQualityRange,\n  };\n}\n\nexport default useViewportRendering;\n\n/**\n * Helper function to compare two VOI ranges with a small tolerance.\n * @param rangeA - The first VOI range { lower, upper }.\n * @param rangeB - The second VOI range { lower, upper }.\n * @param epsilon - The tolerance for comparison.\n * @returns True if the ranges are considered close, false otherwise.\n */\nfunction areVoiRangesClose(\n  rangeA: { lower: number; upper: number },\n  rangeB: { lower: number; upper: number },\n  epsilon = 0.001\n): boolean {\n  if (!rangeA || !rangeB) {\n    return false;\n  }\n  return (\n    Math.abs(rangeA.lower - rangeB.lower) < epsilon &&\n    Math.abs(rangeA.upper - rangeB.upper) < epsilon\n  );\n}\n\nfunction getCustomizationData(customizationService) {\n  const presets = customizationService.getCustomization('cornerstone.windowLevelPresets');\n  const colorbarProperties = customizationService.getCustomization(\n    'cornerstone.colorbar'\n  ) as ColorbarProperties;\n\n  const {\n    volumeRenderingPresets = [],\n    volumeRenderingQualityRange = { min: 0, max: 1, step: 0.1 },\n  } =\n    (customizationService.getCustomization(\n      'cornerstone.3dVolumeRendering'\n    ) as VolumeRenderingConfig) || {};\n\n  return {\n    presets,\n    colorbarProperties,\n    volumeRenderingPresets,\n    volumeRenderingQualityRange,\n  };\n}\n","import { useState, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nimport { roundNumber } from '@ohif/core/src/utils';\nimport {\n  SegmentationData,\n  SegmentationRepresentation,\n} from '../services/SegmentationService/SegmentationService';\nimport { useSystem } from '@ohif/core';\nconst excludedModalities = ['SM', 'OT', 'DOC', 'ECG'];\n\nfunction mapSegmentationToDisplay(segmentation, customizationService) {\n  const { label, segments } = segmentation;\n\n  // Get the readable text mapping once\n  const readableTextMap = customizationService.getCustomization('panelSegmentation.readableText');\n\n  // Helper function to recursively map cachedStats to readable display text\n  function mapStatsToDisplay(stats, indent = 0) {\n    const primary = [];\n    const indentation = '  '.repeat(indent);\n\n    for (const key in stats) {\n      if (Object.prototype.hasOwnProperty.call(stats, key)) {\n        const value = stats[key];\n        const readableText = readableTextMap?.[key];\n\n        if (!readableText) {\n          continue;\n        }\n\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n          // Add empty row before category (except for the first category)\n          if (primary.length > 0) {\n            primary.push('');\n          }\n          // Add category title\n          primary.push(`${indentation}${readableText}`);\n          // Recursively handle nested objects\n          primary.push(...mapStatsToDisplay(value, indent + 1));\n        } else {\n          // For non-nested values, don't add empty rows\n          primary.push(`${indentation}${readableText}: ${roundNumber(value, 2)}`);\n        }\n      }\n    }\n\n    return primary;\n  }\n\n  // Get customization for display text mapping\n  const displayTextMapper = segment => {\n    const defaultDisplay = {\n      primary: [],\n      secondary: [],\n    };\n\n    // If the segment has cachedStats, map it to readable text\n    if (segment.cachedStats) {\n      const primary = mapStatsToDisplay(segment.cachedStats);\n      defaultDisplay.primary = primary;\n    }\n\n    return defaultDisplay;\n  };\n\n  const updatedSegments = {};\n\n  Object.entries(segments).forEach(([segmentIndex, segment]) => {\n    updatedSegments[segmentIndex] = {\n      ...segment,\n      displayText: displayTextMapper(segment),\n    };\n  });\n\n  // Map the segments and apply the display text mapper\n  return {\n    ...segmentation,\n    label,\n    segments: updatedSegments,\n  };\n}\n\n/**\n * Represents the combination of segmentation data and its representation in a viewport.\n */\ntype ViewportSegmentationRepresentation = {\n  segmentationsWithRepresentations: {\n    representation: SegmentationRepresentation;\n    segmentation: SegmentationData;\n  }[];\n  disabled: boolean;\n};\n\n/**\n * Custom hook that provides segmentation data and their representations for the active viewport.\n * @param options - The options object.\n * @param options.servicesManager - The services manager object.\n * @param options.subscribeToDataModified - Whether to subscribe to segmentation data modifications.\n * @param options.debounceTime - Debounce time in milliseconds for updates.\n * @returns An array of segmentation data and their representations for the active viewport.\n */\nexport function useViewportSegmentations({\n  viewportId,\n  subscribeToDataModified = false,\n  debounceTime = 0,\n}: {\n  viewportId: string;\n  subscribeToDataModified?: boolean;\n  debounceTime?: number;\n}): ViewportSegmentationRepresentation {\n  const { servicesManager } = useSystem();\n  const { segmentationService, viewportGridService, customizationService, displaySetService } =\n    servicesManager.services;\n\n  const [segmentationsWithRepresentations, setSegmentationsWithRepresentations] =\n    useState<ViewportSegmentationRepresentation>({\n      segmentationsWithRepresentations: [],\n      disabled: false,\n    });\n\n  useEffect(() => {\n    const update = () => {\n      const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n      if (!displaySetUIDs?.length) {\n        return;\n      }\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetUIDs[0]);\n\n      if (!displaySet) {\n        return;\n      }\n\n      if (excludedModalities.includes(displaySet.Modality)) {\n        setSegmentationsWithRepresentations(prev => ({\n          segmentationsWithRepresentations: [],\n          disabled: true,\n        }));\n        return;\n      }\n\n      const segmentations = segmentationService.getSegmentations();\n\n      if (!segmentations?.length) {\n        setSegmentationsWithRepresentations(prev => ({\n          segmentationsWithRepresentations: [],\n          disabled: false,\n        }));\n        return;\n      }\n\n      const representations = segmentationService.getSegmentationRepresentations(viewportId);\n\n      const newSegmentationsWithRepresentations = representations.map(representation => {\n        const segmentation = segmentationService.getSegmentation(representation.segmentationId);\n        const mappedSegmentation = mapSegmentationToDisplay(segmentation, customizationService);\n        return {\n          representation,\n          segmentation: mappedSegmentation,\n        };\n      });\n\n      setSegmentationsWithRepresentations({\n        segmentationsWithRepresentations: newSegmentationsWithRepresentations,\n        disabled: false,\n      });\n    };\n\n    const debouncedUpdate =\n      debounceTime > 0 ? debounce(update, debounceTime, { leading: true, trailing: true }) : update;\n\n    update();\n\n    const subscriptions = [\n      segmentationService.subscribe(\n        segmentationService.EVENTS.SEGMENTATION_MODIFIED,\n        debouncedUpdate\n      ),\n      segmentationService.subscribe(\n        segmentationService.EVENTS.SEGMENTATION_REMOVED,\n        debouncedUpdate\n      ),\n      segmentationService.subscribe(\n        segmentationService.EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n        debouncedUpdate\n      ),\n      viewportGridService.subscribe(\n        viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED,\n        debouncedUpdate\n      ),\n      viewportGridService.subscribe(viewportGridService.EVENTS.GRID_STATE_CHANGED, debouncedUpdate),\n    ];\n\n    if (subscribeToDataModified) {\n      subscriptions.push(\n        segmentationService.subscribe(\n          segmentationService.EVENTS.SEGMENTATION_DATA_MODIFIED,\n          debouncedUpdate\n        )\n      );\n    }\n\n    return () => {\n      subscriptions.forEach(subscription => subscription.unsubscribe());\n      if (debounceTime > 0) {\n        debouncedUpdate.cancel();\n      }\n    };\n  }, [\n    segmentationService,\n    viewportGridService,\n    customizationService,\n    displaySetService,\n    debounceTime,\n    subscribeToDataModified,\n    viewportId,\n  ]);\n\n  return segmentationsWithRepresentations;\n}\n","export const CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\nexport const CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\n\nconst Enums = {\n  CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n  CORNERSTONE_3D_TOOLS_SOURCE_VERSION,\n};\n\nexport default Enums;\n","import { volumeLoader } from '@cornerstonejs/core';\nimport {\n  cornerstoneStreamingImageVolumeLoader,\n  cornerstoneStreamingDynamicImageVolumeLoader,\n} from '@cornerstonejs/core/loaders';\nimport dicomImageLoader from '@cornerstonejs/dicom-image-loader';\nimport { errorHandler, utils } from '@ohif/core';\n\nconst { registerVolumeLoader } = volumeLoader;\n\nexport default function initWADOImageLoader(\n  userAuthenticationService,\n  appConfig,\n  extensionManager\n) {\n  registerVolumeLoader('cornerstoneStreamingImageVolume', cornerstoneStreamingImageVolumeLoader);\n\n  registerVolumeLoader(\n    'cornerstoneStreamingDynamicImageVolume',\n    cornerstoneStreamingDynamicImageVolumeLoader\n  );\n\n  dicomImageLoader.init({\n    maxWebWorkers: Math.min(\n      Math.max(navigator.hardwareConcurrency - 1, 1),\n      appConfig.maxNumberOfWebWorkers\n    ),\n    beforeSend: function (xhr) {\n      //TODO should be removed in the future and request emitted by DicomWebDataSource\n      const sourceConfig = extensionManager.getActiveDataSource()?.[0].getConfig() ?? {};\n      const headers = userAuthenticationService.getAuthorizationHeader();\n      const acceptHeader = utils.generateAcceptHeader(\n        sourceConfig.acceptHeader,\n        sourceConfig.requestTransferSyntaxUID,\n        sourceConfig.omitQuotationForMultipartRequest\n      );\n\n      const xhrRequestHeaders = {\n        Accept: acceptHeader,\n      };\n\n      if (headers) {\n        Object.assign(xhrRequestHeaders, headers);\n      }\n\n      return xhrRequestHeaders;\n    },\n    errorInterceptor: error => {\n      errorHandler.getHTTPErrorHandler(error);\n    },\n  });\n}\n\nexport function destroy() {\n  console.debug('Destroying WADO Image Loader');\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { getEnabledElement as OHIFgetEnabledElement } from '../state';\n\nexport function getViewportEnabledElement(viewportId: string) {\n  const { element } = OHIFgetEnabledElement(viewportId) || {};\n  const enabledElement = getEnabledElement(element);\n  return enabledElement;\n}\n","import { IEnabledElement } from '@cornerstonejs/core/types';\n\nimport { getViewportEnabledElement } from './getViewportEnabledElement';\n\nexport default function getActiveViewportEnabledElement(viewportGridService): IEnabledElement {\n  const { activeViewportId } = viewportGridService.getState();\n  return getViewportEnabledElement(activeViewportId);\n}\n","import { LengthTool, utilities } from '@cornerstonejs/tools';\nimport { callInputDialog } from '@ohif/extension-default';\nimport getActiveViewportEnabledElement from '../utils/getActiveViewportEnabledElement';\n\nconst { calibrateImageSpacing } = utilities;\n\n/**\n * Calibration Line tool works almost the same as the\n */\nclass CalibrationLineTool extends LengthTool {\n  static toolName = 'CalibrationLine';\n\n  _renderingViewport: any;\n  _lengthToolRenderAnnotation = this.renderAnnotation;\n\n  renderAnnotation = (enabledElement, svgDrawingHelper) => {\n    const { viewport } = enabledElement;\n    this._renderingViewport = viewport;\n    return this._lengthToolRenderAnnotation(enabledElement, svgDrawingHelper);\n  };\n\n  _getTextLines(data, targetId) {\n    const [canvasPoint1, canvasPoint2] = data.handles.points.map(p =>\n      this._renderingViewport.worldToCanvas(p)\n    );\n    // for display, round to 2 decimal points\n    const lengthPx = Math.round(calculateLength2(canvasPoint1, canvasPoint2) * 100) / 100;\n\n    const textLines = [`${lengthPx}px`];\n\n    return textLines;\n  }\n}\n\nfunction calculateLength2(point1, point2) {\n  const dx = point1[0] - point2[0];\n  const dy = point1[1] - point2[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction calculateLength3(pos1, pos2) {\n  const dx = pos1[0] - pos2[0];\n  const dy = pos1[1] - pos2[1];\n  const dz = pos1[2] - pos2[2];\n\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\nexport default CalibrationLineTool;\n\nexport function onCompletedCalibrationLine(\n  servicesManager: AppTypes.ServicesManager,\n  csToolsEvent\n) {\n  const { uiDialogService, viewportGridService } = servicesManager.services;\n\n  // calculate length (mm) with the current Pixel Spacing\n  const annotationAddedEventDetail = csToolsEvent.detail;\n  const {\n    annotation: { metadata, data: annotationData },\n  } = annotationAddedEventDetail;\n  const { referencedImageId: imageId } = metadata;\n  const enabledElement = getActiveViewportEnabledElement(viewportGridService);\n  const { viewport } = enabledElement;\n\n  const length =\n    Math.round(\n      calculateLength3(annotationData.handles.points[0], annotationData.handles.points[1]) * 100\n    ) / 100;\n\n  const adjustCalibration = newLength => {\n    const spacingScale = newLength / length;\n\n    // trigger resize of the viewport to adjust the world/pixel mapping\n    calibrateImageSpacing(imageId, viewport.getRenderingEngine(), {\n      type: 'User',\n      scale: 1 / spacingScale,\n    });\n  };\n\n  return new Promise((resolve, reject) => {\n    if (!uiDialogService) {\n      reject('UIDialogService is not initiated');\n      return;\n    }\n\n    callInputDialog({\n      uiDialogService,\n      title: 'Calibration',\n      placeholder: 'Actual Physical distance (mm)',\n      defaultValue: `${length}`,\n    }).then(newValue => {\n      adjustCalibration(Number.parseFloat(newValue));\n      resolve(true);\n    });\n  });\n}\n","import { metaData } from '@cornerstonejs/core';\n\nconst _cachedOverlayMetadata: Map<string, any[]> = new Map();\n\n/**\n * Image Overlay Viewer tool is not a traditional tool that requires user interactin.\n * But it is used to display Pixel Overlays. And it will provide toggling capability.\n *\n * The documentation for Overlay Plane Module of DICOM can be found in [C.9.2 of\n * Part-3 of DICOM standard](https://dicom.nema.org/medical/dicom/2018b/output/chtml/part03/sect_C.9.2.html)\n *\n * Image Overlay rendered by this tool can be toggled on and off using\n * toolGroup.setToolEnabled() and toolGroup.setToolDisabled()\n */\nconst OverlayPlaneModuleProvider = {\n  /** Adds the metadata for overlayPlaneModule */\n  add: (imageId, metadata) => {\n    if (_cachedOverlayMetadata.get(imageId) === metadata) {\n      // This is a no-op here as the tool re-caches the data\n      return;\n    }\n    _cachedOverlayMetadata.set(imageId, metadata);\n  },\n\n  /** Standard getter for metadata */\n  get: (type: string, query: string | string[]) => {\n    if (Array.isArray(query)) {\n      return;\n    }\n    if (type !== 'overlayPlaneModule') {\n      return;\n    }\n    return _cachedOverlayMetadata.get(query);\n  },\n};\n\n// Needs to be higher priority than default provider\nmetaData.addProvider(OverlayPlaneModuleProvider.get, 10_000);\n\nexport default OverlayPlaneModuleProvider;\n","import { VolumeViewport, metaData, utilities } from '@cornerstonejs/core';\nimport { IStackViewport, IVolumeViewport } from '@cornerstonejs/core/types';\nimport { AnnotationDisplayTool, drawing } from '@cornerstonejs/tools';\nimport { guid, b64toBlob } from '@ohif/core/src/utils';\nimport OverlayPlaneModuleProvider from './OverlayPlaneModuleProvider';\n\ninterface CachedStat {\n  color: number[]; // [r, g, b, a]\n  overlays: {\n    // ...overlayPlaneModule\n    _id: string;\n    type: 'G' | 'R'; // G for Graphics, R for ROI\n    color?: number[]; // Rendered color [r, g, b, a]\n    dataUrl?: string; // Rendered image in Data URL expression\n  }[];\n}\n\n/**\n * Image Overlay Viewer tool is not a traditional tool that requires user interactin.\n * But it is used to display Pixel Overlays. And it will provide toggling capability.\n *\n * The documentation for Overlay Plane Module of DICOM can be found in [C.9.2 of\n * Part-3 of DICOM standard](https://dicom.nema.org/medical/dicom/2018b/output/chtml/part03/sect_C.9.2.html)\n *\n * Image Overlay rendered by this tool can be toggled on and off using\n * toolGroup.setToolEnabled() and toolGroup.setToolDisabled()\n */\nclass ImageOverlayViewerTool extends AnnotationDisplayTool {\n  static toolName = 'ImageOverlayViewer';\n\n  /**\n   * The overlay plane module provider add method is exposed here to be used\n   * when updating the overlay for this tool to use for displaying data.\n   */\n  public static addOverlayPlaneModule = OverlayPlaneModuleProvider.add;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: [],\n      configuration: {\n        fillColor: [255, 127, 127, 255],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolDisabled = (): void => {};\n\n  protected getReferencedImageId(viewport: IStackViewport | IVolumeViewport): string {\n    if (viewport instanceof VolumeViewport) {\n      return;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    return targetId.split('imageId:')[1];\n  }\n\n  renderAnnotation = (enabledElement, svgDrawingHelper) => {\n    const { viewport } = enabledElement;\n\n    const imageId = this.getReferencedImageId(viewport);\n    if (!imageId) {\n      return;\n    }\n\n    const overlayMetadata = metaData.get('overlayPlaneModule', imageId);\n    const overlays = overlayMetadata?.overlays;\n\n    // no overlays\n    if (!overlays?.length) {\n      return;\n    }\n\n    // Fix the x, y positions\n    overlays.forEach(overlay => {\n      overlay.x ||= 0;\n      overlay.y ||= 0;\n    });\n\n    // Will clear cached stat data when the overlay data changes\n    ImageOverlayViewerTool.addOverlayPlaneModule(imageId, overlayMetadata);\n\n    this._getCachedStat(imageId, overlayMetadata, this.configuration.fillColor).then(cachedStat => {\n      cachedStat.overlays.forEach(overlay => {\n        this._renderOverlay(enabledElement, svgDrawingHelper, overlay);\n      });\n    });\n\n    return true;\n  };\n\n  /**\n   * Render to DOM\n   *\n   * @param enabledElement\n   * @param svgDrawingHelper\n   * @param overlayData\n   * @returns\n   */\n  private _renderOverlay(enabledElement, svgDrawingHelper, overlayData) {\n    const { viewport } = enabledElement;\n    const imageId = this.getReferencedImageId(viewport);\n    if (!imageId) {\n      return;\n    }\n\n    // Decide the rendering position of the overlay image on the current canvas\n    const { _id, columns: width, rows: height, x, y } = overlayData;\n    const overlayTopLeftWorldPos = utilities.imageToWorldCoords(imageId, [\n      x - 1, // Remind that top-left corner's (x, y) is be (1, 1)\n      y - 1,\n    ]);\n    const overlayTopLeftOnCanvas = viewport.worldToCanvas(overlayTopLeftWorldPos);\n    const overlayBottomRightWorldPos = utilities.imageToWorldCoords(imageId, [width, height]);\n    const overlayBottomRightOnCanvas = viewport.worldToCanvas(overlayBottomRightWorldPos);\n\n    // add image to the annotations svg layer\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = `image-overlay-${_id}`;\n    const existingImageElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n    const attributes = {\n      'data-id': svgNodeHash,\n      width: overlayBottomRightOnCanvas[0] - overlayTopLeftOnCanvas[0],\n      height: overlayBottomRightOnCanvas[1] - overlayTopLeftOnCanvas[1],\n      x: overlayTopLeftOnCanvas[0],\n      y: overlayTopLeftOnCanvas[1],\n      href: overlayData.dataUrl,\n    };\n\n    if (\n      isNaN(attributes.x) ||\n      isNaN(attributes.y) ||\n      isNaN(attributes.width) ||\n      isNaN(attributes.height)\n    ) {\n      console.warn('Invalid rendering attribute for image overlay', attributes['data-id']);\n      return false;\n    }\n\n    if (existingImageElement) {\n      drawing.setAttributesIfNecessary(attributes, existingImageElement);\n      svgDrawingHelper.setNodeTouched(svgNodeHash);\n    } else {\n      const newImageElement = document.createElementNS(svgns, 'image');\n      drawing.setNewAttributesIfValid(attributes, newImageElement);\n      svgDrawingHelper.appendNode(newImageElement, svgNodeHash);\n    }\n    return true;\n  }\n\n  private async _getCachedStat(\n    imageId: string,\n    overlayMetadata,\n    color: number[]\n  ): Promise<CachedStat> {\n    const missingOverlay = overlayMetadata.overlays.filter(\n      overlay => overlay.pixelData && !overlay.dataUrl\n    );\n    if (missingOverlay.length === 0) {\n      return overlayMetadata;\n    }\n\n    const overlays = await Promise.all(\n      overlayMetadata.overlays\n        .filter(overlay => overlay.pixelData)\n        .map(async (overlay, idx) => {\n          let pixelData = null;\n          if (overlay.pixelData.Value) {\n            pixelData = overlay.pixelData.Value;\n          } else if (overlay.pixelData instanceof Array) {\n            pixelData = overlay.pixelData[0];\n          } else if (overlay.pixelData.retrieveBulkData) {\n            pixelData = await overlay.pixelData.retrieveBulkData();\n          } else if (overlay.pixelData.InlineBinary) {\n            const blob = b64toBlob(overlay.pixelData.InlineBinary);\n            const arrayBuffer = await blob.arrayBuffer();\n            pixelData = arrayBuffer;\n          }\n\n          if (!pixelData) {\n            return;\n          }\n\n          const dataUrl = this._renderOverlayToDataUrl(\n            { width: overlay.columns, height: overlay.rows },\n            overlay.color || color,\n            pixelData\n          );\n\n          return {\n            ...overlay,\n            _id: guid(),\n            dataUrl, // this will be a data url expression of the rendered image\n            color,\n          };\n        })\n    );\n    overlayMetadata.overlays = overlays;\n\n    return overlayMetadata;\n  }\n\n  /**\n   * compare two RGBA expression of colors.\n   *\n   * @param color1\n   * @param color2\n   * @returns\n   */\n  private _isSameColor(color1: number[], color2: number[]) {\n    return (\n      color1 &&\n      color2 &&\n      color1[0] === color2[0] &&\n      color1[1] === color2[1] &&\n      color1[2] === color2[2] &&\n      color1[3] === color2[3]\n    );\n  }\n\n  /**\n   * pixelData of overlayPlane module is an array of bits corresponding\n   * to each of the underlying pixels of the image.\n   * Let's create pixel data from bit array of overlay data\n   *\n   * @param pixelDataRaw\n   * @param color\n   * @returns\n   */\n  private _renderOverlayToDataUrl({ width, height }, color, pixelDataRaw) {\n    const pixelDataView = new DataView(pixelDataRaw);\n    const totalBits = width * height;\n\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, width, height); // make it transparent\n    ctx.globalCompositeOperation = 'copy';\n\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    for (let i = 0, bitIdx = 0, byteIdx = 0; i < totalBits; i++) {\n      if (pixelDataView.getUint8(byteIdx) & (1 << bitIdx)) {\n        data[i * 4] = color[0];\n        data[i * 4 + 1] = color[1];\n        data[i * 4 + 2] = color[2];\n        data[i * 4 + 3] = color[3];\n      }\n\n      // next bit, byte\n      if (bitIdx >= 7) {\n        bitIdx = 0;\n        byteIdx++;\n      } else {\n        bitIdx++;\n      }\n    }\n    ctx.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n  }\n}\n\nexport default ImageOverlayViewerTool;\n","import {\n  PanTool,\n  WindowLevelTool,\n  SegmentBidirectionalTool,\n  StackScrollTool,\n  VolumeRotateTool,\n  ZoomTool,\n  MIPJumpToClickTool,\n  LengthTool,\n  RectangleROITool,\n  RectangleROIThresholdTool,\n  EllipticalROITool,\n  CircleROITool,\n  BidirectionalTool,\n  ArrowAnnotateTool,\n  DragProbeTool,\n  ProbeTool,\n  AngleTool,\n  CobbAngleTool,\n  MagnifyTool,\n  CrosshairsTool,\n  RectangleScissorsTool,\n  SphereScissorsTool,\n  CircleScissorsTool,\n  BrushTool,\n  PaintFillTool,\n  init,\n  addTool,\n  annotation,\n  ReferenceLinesTool,\n  TrackballRotateTool,\n  AdvancedMagnifyTool,\n  UltrasoundDirectionalTool,\n  UltrasoundPleuraBLineTool,\n  PlanarFreehandROITool,\n  PlanarFreehandContourSegmentationTool,\n  SplineROITool,\n  LivewireContourTool,\n  OrientationMarkerTool,\n  WindowLevelRegionTool,\n  SegmentSelectTool,\n  RegionSegmentPlusTool,\n  SegmentLabelTool,\n} from '@cornerstonejs/tools';\nimport { LabelmapSlicePropagationTool, MarkerLabelmapTool } from '@cornerstonejs/ai';\nimport * as polySeg from '@cornerstonejs/polymorphic-segmentation';\n\nimport CalibrationLineTool from './tools/CalibrationLineTool';\nimport ImageOverlayViewerTool from './tools/ImageOverlayViewerTool';\n\nexport default function initCornerstoneTools(configuration = {}) {\n  CrosshairsTool.isAnnotation = false;\n  LabelmapSlicePropagationTool.isAnnotation = false;\n  MarkerLabelmapTool.isAnnotation = false;\n  ReferenceLinesTool.isAnnotation = false;\n  AdvancedMagnifyTool.isAnnotation = false;\n  PlanarFreehandContourSegmentationTool.isAnnotation = false;\n\n  init({\n    addons: {\n      polySeg,\n    },\n    computeWorker: {\n      autoTerminateOnIdle: {\n        enabled: false,\n      },\n    },\n  });\n  addTool(PanTool);\n  addTool(SegmentBidirectionalTool);\n  addTool(WindowLevelTool);\n  addTool(StackScrollTool);\n  addTool(VolumeRotateTool);\n  addTool(ZoomTool);\n  addTool(ProbeTool);\n  addTool(MIPJumpToClickTool);\n  addTool(LengthTool);\n  addTool(RectangleROITool);\n  addTool(RectangleROIThresholdTool);\n  addTool(EllipticalROITool);\n  addTool(CircleROITool);\n  addTool(BidirectionalTool);\n  addTool(ArrowAnnotateTool);\n  addTool(DragProbeTool);\n  addTool(AngleTool);\n  addTool(CobbAngleTool);\n  addTool(MagnifyTool);\n  addTool(CrosshairsTool);\n  addTool(RectangleScissorsTool);\n  addTool(SphereScissorsTool);\n  addTool(CircleScissorsTool);\n  addTool(BrushTool);\n  addTool(PaintFillTool);\n  addTool(ReferenceLinesTool);\n  addTool(CalibrationLineTool);\n  addTool(TrackballRotateTool);\n  addTool(ImageOverlayViewerTool);\n  addTool(AdvancedMagnifyTool);\n  addTool(UltrasoundDirectionalTool);\n  addTool(UltrasoundPleuraBLineTool);\n  addTool(PlanarFreehandROITool);\n  addTool(SplineROITool);\n  addTool(LivewireContourTool);\n  addTool(OrientationMarkerTool);\n  addTool(WindowLevelRegionTool);\n  addTool(PlanarFreehandContourSegmentationTool);\n  addTool(SegmentSelectTool);\n  addTool(SegmentLabelTool);\n  addTool(LabelmapSlicePropagationTool);\n  addTool(MarkerLabelmapTool);\n  addTool(RegionSegmentPlusTool);\n  // Modify annotation tools to use dashed lines on SR\n  const annotationStyle = {\n    textBoxFontSize: '15px',\n    lineWidth: '1.5',\n  };\n\n  const defaultStyles = annotation.config.style.getDefaultToolStyles();\n  annotation.config.style.setDefaultToolStyles({\n    global: {\n      ...defaultStyles.global,\n      ...annotationStyle,\n    },\n  });\n}\n\nconst toolNames = {\n  Pan: PanTool.toolName,\n  ArrowAnnotate: ArrowAnnotateTool.toolName,\n  WindowLevel: WindowLevelTool.toolName,\n  StackScroll: StackScrollTool.toolName,\n  Zoom: ZoomTool.toolName,\n  VolumeRotate: VolumeRotateTool.toolName,\n  MipJumpToClick: MIPJumpToClickTool.toolName,\n  Length: LengthTool.toolName,\n  DragProbe: DragProbeTool.toolName,\n  Probe: ProbeTool.toolName,\n  RectangleROI: RectangleROITool.toolName,\n  RectangleROIThreshold: RectangleROIThresholdTool.toolName,\n  EllipticalROI: EllipticalROITool.toolName,\n  CircleROI: CircleROITool.toolName,\n  Bidirectional: BidirectionalTool.toolName,\n  Angle: AngleTool.toolName,\n  CobbAngle: CobbAngleTool.toolName,\n  Magnify: MagnifyTool.toolName,\n  Crosshairs: CrosshairsTool.toolName,\n  Brush: BrushTool.toolName,\n  PaintFill: PaintFillTool.toolName,\n  ReferenceLines: ReferenceLinesTool.toolName,\n  CalibrationLine: CalibrationLineTool.toolName,\n  TrackballRotateTool: TrackballRotateTool.toolName,\n  CircleScissors: CircleScissorsTool.toolName,\n  RectangleScissors: RectangleScissorsTool.toolName,\n  SphereScissors: SphereScissorsTool.toolName,\n  ImageOverlayViewer: ImageOverlayViewerTool.toolName,\n  AdvancedMagnify: AdvancedMagnifyTool.toolName,\n  UltrasoundDirectional: UltrasoundDirectionalTool.toolName,\n  UltrasoundAnnotation: UltrasoundPleuraBLineTool.toolName,\n  SplineROI: SplineROITool.toolName,\n  LivewireContour: LivewireContourTool.toolName,\n  PlanarFreehandROI: PlanarFreehandROITool.toolName,\n  OrientationMarker: OrientationMarkerTool.toolName,\n  WindowLevelRegion: WindowLevelRegionTool.toolName,\n  PlanarFreehandContourSegmentation: PlanarFreehandContourSegmentationTool.toolName,\n  SegmentBidirectional: SegmentBidirectionalTool.toolName,\n  SegmentSelect: SegmentSelectTool.toolName,\n  SegmentLabel: SegmentLabelTool.toolName,\n  LabelmapSlicePropagation: LabelmapSlicePropagationTool.toolName,\n  MarkerLabelmap: MarkerLabelmapTool.toolName,\n  RegionSegmentPlus: RegionSegmentPlusTool.toolName,\n};\n\nexport { toolNames };\n","const supportedTools = [\n  'Length',\n  'EllipticalROI',\n  'CircleROI',\n  'Bidirectional',\n  'ArrowAnnotate',\n  'Angle',\n  'CobbAngle',\n  'Probe',\n  'RectangleROI',\n  'PlanarFreehandROI',\n  'SplineROI',\n  'LivewireContour',\n  'UltrasoundDirectionalTool',\n  'UltrasoundPleuraBLineTool',\n  'SCOORD3DPoint',\n  'SegmentBidirectional',\n];\n\nexport default supportedTools;\n","import { locking } from '@cornerstonejs/tools/annotation';\n\nexport const getIsLocked = annotationUID => {\n  return locking.isAnnotationLocked(annotationUID);\n};\n","import { visibility } from '@cornerstonejs/tools/annotation';\n\nexport const getIsVisible = annotationUID => {\n  const isVisible = visibility.isAnnotationVisible(annotationUID);\n  return isVisible;\n};\n","import * as cornerstone from '@cornerstonejs/core';\n\nfunction getDisplaySet({ metadata, displaySetService }) {\n  const { volumeId } = metadata;\n\n  if( volumeId ) {\n    const displaySet = displaySetService.getDisplaySetsBy(displaySet =>\n      volumeId.includes(displaySet.uid)\n    )[0];\n    if( displaySet ) {\n      return displaySet;\n    }\n    console.warn(\"Unable to find volumeId\", volumeId);\n    metadata.volumeId = null;\n  }\n\n  if (!metadata.FrameOfReferenceUID) {\n      throw new Error(\n        'No volumeId and no FrameOfReferenceUID provided. Could not find matching displaySet.'\n      );\n    }\n    const displaySet = Array.from(displaySetService.getDisplaySetCache().values()).find(\n      ds => ds.instance?.FrameOfReferenceUID === metadata.FrameOfReferenceUID\n    );\n\n    if (!displaySet) {\n      throw new Error('Could not find matching displaySet for the provided FrameOfReferenceUID.');\n    }\n\n    return displaySet;\n\n}\n\n/**\n * It checks if the imageId is provided then it uses it to query\n * the metadata and get the SOPInstanceUID, SeriesInstanceUID and StudyInstanceUID.\n * If the imageId is not provided then undefined is returned.\n * @param {string} imageId The image id of the referenced image\n * @returns\n */\nexport default function getSOPInstanceAttributes(imageId, displaySetService, annotation) {\n  if (imageId) {\n    return _getUIDFromImageID(imageId);\n  }\n\n  const { metadata } = annotation;\n  const displaySet = getDisplaySet({ metadata, displaySetService });\n  const { StudyInstanceUID, SeriesInstanceUID } = displaySet;\n\n  return {\n    SOPInstanceUID: undefined,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n  };\n}\n\nfunction _getUIDFromImageID(imageId) {\n  const instance = cornerstone.metaData.get('instance', imageId);\n\n  return {\n    SOPInstanceUID: instance.SOPInstanceUID,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    frameNumber: instance.frameNumber || 1,\n  };\n}\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\n\nconst Length = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    // const colorString = config.style.getStyleProperty('color', { annotationUID });\n\n    // color string is like 'rgb(255, 255, 255)' we need them to be in RGBA array [255, 255, 255, 255]\n    // Todo: this should be in a utility\n    // const color = colorString.replace('rgb(', '').replace(')', '').split(',').map(Number);\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      isLocked,\n      isVisible,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { length, unit = 'mm' } = targetStats;\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      length,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Length');\n\n  mappedAnnotations.forEach(annotation => {\n    const { length, unit } = annotation;\n    columns.push(`Length`);\n    values.push(length);\n    columns.push('Unit');\n    values.push(unit);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Length is the same for all series\n  const { length, SeriesNumber, SOPInstanceUID, frameNumber, unit } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  if (length === null || length === undefined) {\n    return displayText;\n  }\n  const roundedLength = utils.roundNumber(length, 2);\n  displayText.primary.push(`${roundedLength} ${unit}`);\n  displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n\n  return displayText;\n}\n\nexport default Length;\n","export default function getHandlesFromPoints(points) {\n  if (points.longAxis && points.shortAxis) {\n    const handles = {};\n    handles.start = points.longAxis[0];\n    handles.end = points.longAxis[1];\n    handles.perpendicularStart = points.longAxis[0];\n    handles.perpendicularEnd = points.longAxis[1];\n    return handles;\n  }\n\n  return points\n    .map((p, i) => (i % 10 === 0 ? { start: p } : { end: p }))\n    .reduce((obj, item) => Object.assign(obj, { ...item }), {});\n}\n","import { annotation as cs3dToolAnnotationUtils } from '@cornerstonejs/tools';\n\n/**\n * Check whether an annotation from imaging library is selected or not.\n * @param {string} annotationUID uid of imaging library annotation\n * @returns boolean\n */\nfunction isAnnotationSelected(annotationUID: string): boolean {\n  return cs3dToolAnnotationUtils.selection.isAnnotationSelected(annotationUID);\n}\n\n/**\n * Change an annotation from imaging library's selected property.\n * @param annotationUID - uid of imaging library annotation\n * @param selected - new value for selected\n */\nfunction setAnnotationSelected(annotationUID: string, selected: boolean): void {\n  const isCurrentSelected = isAnnotationSelected(annotationUID);\n  // branch cut, avoid invoking imaging library unnecessarily.\n  if (isCurrentSelected !== selected) {\n    cs3dToolAnnotationUtils.selection.setAnnotationSelected(annotationUID, selected);\n  }\n}\n\nfunction getFirstAnnotationSelected(element) {\n  const [selectedAnnotationUID] = cs3dToolAnnotationUtils.selection.getAnnotationsSelected() || [];\n\n  if (selectedAnnotationUID) {\n    return cs3dToolAnnotationUtils.state.getAnnotation(selectedAnnotationUID);\n  }\n}\n\nexport { isAnnotationSelected, setAnnotationSelected, getFirstAnnotationSelected };\n","const getDisplayUnit = unit => (unit == null ? '' : unit);\n\nexport default getDisplayUnit;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getDisplayUnit } from './utils';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\n\nconst Bidirectional = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      isLocked,\n      isVisible,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats = {} } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { length, width, unit } = targetStats;\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      length,\n      width,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Bidirectional');\n\n  mappedAnnotations.forEach(annotation => {\n    const { length, width, unit } = annotation;\n    columns.push(`Length`, `Width`, 'Unit');\n    values.push(length, width, unit);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { length, width, unit, SeriesNumber, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n  const roundedLength = utils.roundNumber(length, 2);\n  const roundedWidth = utils.roundNumber(width, 2);\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  displayText.primary.push(`L: ${roundedLength} ${getDisplayUnit(unit)}`);\n  displayText.primary.push(`W: ${roundedWidth} ${getDisplayUnit(unit)}`);\n  displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n\n  return displayText;\n}\n\nexport default Bidirectional;\n","import { utils } from '@ohif/core';\nimport getDisplayUnit from './getDisplayUnit';\n\nexport const getStatisticDisplayString = (numbers, unit, key) => {\n  if (Array.isArray(numbers) && numbers.length > 0) {\n    const results = numbers.map(number => utils.roundNumber(number, 2));\n    return `${key.charAt(0).toUpperCase() + key.slice(1)}: ${results.join(', ')} ${getDisplayUnit(unit)}`;\n  }\n\n  const result = utils.roundNumber(numbers, 2);\n  return `${key.charAt(0).toUpperCase() + key.slice(1)}: ${result} ${getDisplayUnit(unit)}`;\n};\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getDisplayUnit } from './utils';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getStatisticDisplayString } from './utils/getValueDisplayString';\n\nconst EllipticalROI = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet, customizationService);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      metadata,\n      isLocked,\n      isVisible,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  const addedModalities = new Set();\n\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality, areaUnit, modalityUnit } = targetStats;\n\n    // Skip if we've already added this modality\n    if (Modality && addedModalities.has(Modality)) {\n      return;\n    }\n\n    // Add modality to the set if it exists\n    if (Modality) {\n      addedModalities.add(Modality);\n    }\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit: modalityUnit,\n      areaUnit,\n      mean,\n      stdDev,\n      max,\n      area,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:EllipticalROI');\n\n  mappedAnnotations.forEach(annotation => {\n    const { mean, stdDev, max, area, unit, areaUnit } = annotation;\n\n    if (!mean || !unit || !max || !area) {\n      return;\n    }\n\n    columns.push(`max (${unit})`, `mean (${unit})`, `std (${unit})`, 'Area', 'Unit');\n    values.push(max, mean, stdDev, area, areaUnit);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet, customizationService) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber, areaUnit } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  const roundedArea = utils.roundNumber(area, 2);\n  displayText.primary.push(`${roundedArea} ${getDisplayUnit(areaUnit)}`);\n\n  // Todo: we need a better UI for displaying all these information\n  mappedAnnotations.forEach(mappedAnnotation => {\n    const { unit, max, SeriesNumber } = mappedAnnotation;\n\n    const maxStr = getStatisticDisplayString(max, unit, 'max');\n    displayText.primary.push(maxStr);\n    displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n  });\n\n  return displayText;\n}\n\nexport default EllipticalROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getDisplayUnit } from './utils';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getStatisticDisplayString } from './utils/getValueDisplayString';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\n\nconst CircleROI = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      isLocked,\n      isVisible,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats={} } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  const addedModalities = new Set();\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality, areaUnit, modalityUnit, perimeter, radiusUnit } =\n      targetStats;\n\n    if (Modality && addedModalities.has(Modality)) {\n      return;\n    }\n\n    addedModalities.add(Modality);\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit: modalityUnit,\n      mean,\n      stdDev,\n      max,\n      area,\n      areaUnit,\n      perimeter,\n      radiusUnit,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:CircleROI');\n\n  mappedAnnotations.forEach(annotation => {\n    const { mean, stdDev, max, area, unit, areaUnit } = annotation;\n\n    if (!mean || !unit || !max || !area) {\n      return;\n    }\n\n    columns.push(`max (${unit})`, `mean (${unit})`, `std (${unit})`, 'Area', 'Unit');\n    values.push(max, mean, stdDev, area, areaUnit);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber, areaUnit } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  // Area sometimes becomes undefined if `preventHandleOutsideImage` is off.\n  if (!isNaN(area)) {\n    const roundedArea = utils.roundNumber(area || 0, 2);\n    displayText.primary.push(`${roundedArea} ${getDisplayUnit(areaUnit)}`);\n  }\n\n  // Todo: we need a better UI for displaying all these information\n  mappedAnnotations.forEach(mappedAnnotation => {\n    const { unit, perimeter, radiusUnit, max, SeriesNumber } = mappedAnnotation;\n\n    if (!isNaN(max)) {\n      const maxStr = getStatisticDisplayString(max, unit, 'max');\n      displayText.primary.push(maxStr);\n    } else if (perimeter && !isNaN(perimeter)) {\n      const perimeterStr = getStatisticDisplayString(perimeter, radiusUnit, 'perimeter');\n      displayText.primary.push(perimeterStr);\n    }\n    displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n  });\n\n  return displayText;\n}\n\nexport default CircleROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getIsLocked } from './utils/getIsLocked';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { getIsVisible } from './utils/getIsVisible';\n\nconst ArrowAnnotate = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () => _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      isLocked,\n      isVisible,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { text } = data;\n  const { referencedImageId } = metadata;\n\n  const annotations = [];\n\n  const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n    referencedImageId,\n    displaySetService,\n    annotation\n  );\n\n  const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n  const { SeriesNumber } = displaySet;\n\n  annotations.push({\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesNumber,\n    frameNumber,\n    text,\n  });\n\n  return annotations;\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  const { SeriesNumber, SOPInstanceUID, frameNumber, text } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  // Add the annotation text to the primary array\n  if (text) {\n    displayText.primary.push(text);\n  }\n\n  // Add the series information to the secondary array\n  displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n\n  return displayText;\n}\n\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  columns.push('AnnotationType');\n  values.push('Cornerstone:ArrowAnnote');\n\n  mappedAnnotations.forEach(annotation => {\n    const { text } = annotation;\n    columns.push(`Text`);\n    values.push(text);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\nexport default ArrowAnnotate;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getDisplayUnit } from './utils';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\n\nconst CobbAngle = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n\n    if (!metadata || !data) {\n      console.warn('Cobb Angle tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      isLocked,\n      isVisible,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations?.[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n\n  if( !cachedStats ) {\n    return;\n  }\n\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return;\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { angle } = targetStats;\n    const unit = '\\u00B0';\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      angle,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:CobbAngle');\n\n  mappedAnnotations.forEach(annotation => {\n    const { angle, unit } = annotation;\n    columns.push(`Angle (${unit})`);\n    values.push(angle);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Angle is the same for all series\n  const { angle, unit, SeriesNumber, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n  if (angle === undefined) {\n    return displayText;\n  }\n  const roundedAngle = utils.roundNumber(angle, 2);\n\n  displayText.primary.push(`${roundedAngle} ${getDisplayUnit(unit)}`);\n  displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n\n  return displayText;\n}\n\nexport default CobbAngle;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getDisplayUnit } from './utils';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\n\nconst Angle = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      isLocked,\n      isVisible,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations?.[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n      referencedImageId,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return;\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { angle } = targetStats;\n    const unit = '\\u00B0';\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      angle,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Angle');\n\n  mappedAnnotations.forEach(annotation => {\n    const { angle, unit } = annotation;\n    columns.push(`Angle (${unit})`);\n    values.push(angle);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { angle, unit, SeriesNumber, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n  if (angle === undefined) {\n    return displayText;\n  }\n  const roundedAngle = utils.roundNumber(angle, 2);\n\n  displayText.primary.push(`${roundedAngle} ${getDisplayUnit(unit)}`);\n  displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n\n  return displayText;\n}\n\nexport default Angle;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nimport { getDisplayUnit } from './utils';\nimport { getStatisticDisplayString } from './utils/getValueDisplayString';\n/**\n * Represents a mapping utility for Planar Freehand ROI measurements.\n */\nconst PlanarFreehandROI = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} csToolsEventDetail Cornerstone event data\n   * @param {DisplaySetService} displaySetService Service for managing display sets\n   * @param {CornerstoneViewportService} CornerstoneViewportService Service for managing viewports\n   * @param {Function} getValueTypeFromToolType Function to get value type from tool type\n   * @param {CustomizationService} customizationService Service for customization\n   * @returns {Measurement | null} Measurement instance or null if invalid\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.debug('PlanarFreehandROI tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n    if (!validToolType) {\n      throw new Error(`Tool ${toolName} not supported`);\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber, StudyInstanceUID } =\n      getSOPInstanceAttributes(referencedImageId, displaySetService, annotation);\n\n    let displaySet;\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points: data.contour.polyline,\n      textBox: data.handles.textBox,\n      metadata,\n      frameNumber,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport: () => getColumnValueReport(annotation, customizationService),\n      isLocked,\n      isVisible,\n    };\n  },\n};\n\n/**\n * Maps annotations to a structured format with relevant attributes.\n *\n * @param {Object} annotation The annotation object.\n * @param {DisplaySetService} displaySetService Service for managing display sets.\n * @returns {Array} Mapped annotations.\n */\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n\n  if( !cachedStats ) {\n    return;\n  }\n\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality, areaUnit, modalityUnit } = targetStats;\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit: modalityUnit,\n      mean,\n      stdDev,\n      max,\n      area,\n      areaUnit,\n    });\n  });\n\n  return annotations;\n}\n\n/**\n * Converts the measurement data to a format suitable for report generation.\n *\n * @param {object} annotation The annotation object.\n * @param {CustomizationService} customizationService Service for customization.\n * @returns {object} Report's content.\n */\nfunction getColumnValueReport(annotation, customizationService) {\n  const { PlanarFreehandROI } = customizationService.getCustomization('cornerstone.measurements');\n  const { report } = PlanarFreehandROI;\n  const columns = [];\n  const values = [];\n\n  /** Add type */\n  columns.push('AnnotationType');\n  values.push('Cornerstone:PlanarFreehandROI');\n\n  /** Add cachedStats */\n  const { metadata, data } = annotation;\n  const stats = data.cachedStats[`imageId:${metadata.referencedImageId}`];\n\n  report.forEach(({ name, value }) => {\n    columns.push(name);\n    stats[value] ? values.push(stats[value]) : values.push('not available');\n  });\n\n  /** Add FOR */\n  if (metadata.FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(metadata.FrameOfReferenceUID);\n  }\n\n  /** Add points */\n  if (data.contour.polyline) {\n    columns.push('points');\n    values.push(data.contour.polyline.map(p => p.join(' ')).join(';'));\n  }\n\n  return { columns, values };\n}\n\n/**\n * Retrieves the display text for an annotation in a display set.\n *\n * @param {Array} mappedAnnotations The mapped annotations.\n * @param {Object} displaySet The display set object.\n * @returns {Object} Display text with primary and secondary information.\n */\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber, areaUnit } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  const roundedArea = utils.roundNumber(area || 0, 2);\n  displayText.primary.push(`${roundedArea} ${getDisplayUnit(areaUnit)}`);\n\n  mappedAnnotations.forEach(mappedAnnotation => {\n    const { unit, max, SeriesNumber } = mappedAnnotation;\n\n    const maxStr = getStatisticDisplayString(max, unit, 'max');\n\n    displayText.primary.push(maxStr);\n    displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n  });\n\n  return displayText;\n}\n\nexport default PlanarFreehandROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getDisplayUnit } from './utils';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getStatisticDisplayString } from './utils/getValueDisplayString';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\n\nconst RectangleROI = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n\n    if (!metadata || !data) {\n      console.warn('Rectangle ROI tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet, customizationService);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n      isLocked,\n      isVisible,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n\n  const addedModalities = new Set();\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality, modalityUnit, areaUnit } = targetStats;\n\n    // Skip if we've already added this modality\n    if (Modality && addedModalities.has(Modality)) {\n      return;\n    }\n\n    // Add modality to the set if it exists\n    if (Modality) {\n      addedModalities.add(Modality);\n    }\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit: modalityUnit,\n      mean,\n      stdDev,\n      metadata,\n      max,\n      area,\n      areaUnit,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:RectangleROI');\n\n  mappedAnnotations.forEach(annotation => {\n    const { mean, stdDev, max, area, unit, areaUnit } = annotation;\n\n    if (!mean || !unit || !max || !area) {\n      return;\n    }\n\n    columns.push(`Maximum`, `Mean`, `Std Dev`, 'Pixel Unit', `Area`, 'Unit');\n    values.push(max, mean, stdDev, unit, area, areaUnit);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet, customizationService) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber, areaUnit } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  // Area sometimes becomes undefined if `preventHandleOutsideImage` is off.\n  const roundedArea = utils.roundNumber(area || 0, 2);\n  displayText.primary.push(`${roundedArea} ${getDisplayUnit(areaUnit)}`);\n\n  // Todo: we need a better UI for displaying all these information\n  mappedAnnotations.forEach(mappedAnnotation => {\n    const { unit, max, SeriesNumber } = mappedAnnotation;\n\n    if (Number.isFinite(max)) {\n      const maxStr = getStatisticDisplayString(max, unit, 'max');\n\n      displayText.primary.push(maxStr);\n    }\n    displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n  });\n\n  return displayText;\n}\n\nexport default RectangleROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nimport { getDisplayUnit } from './utils';\nimport { getStatisticDisplayString } from './utils/getValueDisplayString';\n\n/**\n * Represents a mapping utility for Spline ROI measurements.\n */\nconst SplineROI = {\n  toAnnotation: measurement => {\n    // Implementation for converting measurement to annotation\n  },\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} csToolsEventDetail - Cornerstone event data\n   * @param {DisplaySetService} displaySetService - Service for managing display sets\n   * @param {CornerstoneViewportService} CornerstoneViewportService - Service for managing viewports\n   * @param {Function} getValueTypeFromToolType - Function to get value type from tool type\n   * @param {CustomizationService} customizationService - Service for customization\n   * @returns {Measurement | null} Measurement instance or null if invalid\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.warn('SplineROI tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n    if (!validToolType) {\n      throw new Error(`Tool ${toolName} not supported`);\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber, StudyInstanceUID } =\n      getSOPInstanceAttributes(referencedImageId, displaySetService, annotation);\n\n    let displaySet;\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points: data.contour.polyline,\n      textBox: data.handles.textBox,\n      metadata,\n      frameNumber,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport: () => getColumnValueReport(annotation, customizationService),\n      isLocked,\n      isVisible,\n    };\n  },\n};\n\n/**\n * Maps annotations to a structured format with relevant attributes.\n *\n * @param {Object} annotation - The annotation object.\n * @param {DisplaySetService} displaySetService - Service for managing display sets.\n * @returns {Array} Mapped annotations.\n */\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality, areaUnit, modalityUnit } = targetStats;\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit: modalityUnit,\n      mean,\n      stdDev,\n      max,\n      area,\n      areaUnit,\n    });\n  });\n\n  return annotations;\n}\n\n/**\n * Converts the measurement data to a format suitable for report generation.\n *\n * @param {object} annotation - The annotation object.\n * @param {CustomizationService} customizationService - Service for customization.\n * @returns {object} Report's content.\n */\nfunction getColumnValueReport(annotation, customizationService) {\n  const { SplineROI } = customizationService.getCustomization('cornerstone.measurements');\n  const { report } = SplineROI;\n  const columns = [];\n  const values = [];\n\n  /** Add type */\n  columns.push('AnnotationType');\n  values.push('Cornerstone:SplineROI');\n\n  /** Add cachedStats */\n  const { metadata, data } = annotation;\n  const stats = data.cachedStats[`imageId:${metadata.referencedImageId}`];\n\n  report.forEach(({ name, value }) => {\n    columns.push(name);\n    stats[value] ? values.push(stats[value]) : values.push('not available');\n  });\n\n  /** Add FOR */\n  if (metadata.FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(metadata.FrameOfReferenceUID);\n  }\n\n  /** Add points */\n  if (data.contour.polyline) {\n    columns.push('points');\n    values.push(data.contour.polyline.map(p => p.join(' ')).join(';'));\n  }\n\n  return { columns, values };\n}\n\n/**\n * Retrieves the display text for an annotation in a display set.\n *\n * @param {Array} mappedAnnotations - The mapped annotations.\n * @param {Object} displaySet - The display set object.\n * @returns {Object} Display text with primary and secondary information.\n */\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber, areaUnit } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  const roundedArea = utils.roundNumber(area || 0, 2);\n  displayText.primary.push(`${roundedArea} ${getDisplayUnit(areaUnit)}`);\n\n  // we don't have max yet for splines rois\n  // mappedAnnotations.forEach(mappedAnnotation => {\n  //   const { unit, max, SeriesNumber } = mappedAnnotation;\n\n  //   const maxStr = getStatisticDisplayString(max, unit, 'max');\n\n  //   displayText.primary.push(maxStr);\n  //   displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n  // });\n\n  return displayText;\n}\n\nexport default SplineROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { getDisplayUnit } from './utils';\nimport { utils } from '@ohif/core';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\n/**\n * Represents a mapping utility for Livewire measurements.\n */\nconst LivewireContour = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} csToolsEventDetail Cornerstone event data\n   * @param {DisplaySetService} DisplaySetService Service for managing display sets\n   * @param {CornerstoneViewportService} CornerstoneViewportService Service for managing viewports\n   * @param {Function} getValueTypeFromToolType Function to get value type from tool type\n   * @returns {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.warn('Livewire tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n    if (!validToolType) {\n      throw new Error(`Tool ${toolName} not supported`);\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber, StudyInstanceUID } =\n      getSOPInstanceAttributes(referencedImageId, displaySetService, annotation);\n\n    let displaySet;\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points: data.contour.polyline,\n      textBox: data.handles.textBox,\n      metadata,\n      frameNumber,\n      referenceSeriesUID: SeriesInstanceUID,\n      referencedImageId,\n      referenceStudyUID: StudyInstanceUID,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      isLocked,\n      isVisible,\n      displayText: getDisplayText(annotation, displaySet, displaySetService),\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport: () => getColumnValueReport(annotation, customizationService),\n    };\n  },\n};\n\n/**\n * This function is used to convert the measurement data to a\n * format that is suitable for report generation (e.g. for the csv report).\n * The report returns a list of columns and corresponding values.\n *\n * @param {object} annotation\n * @returns {object} Report's content from this tool\n */\nfunction getColumnValueReport(annotation, customizationService) {\n  const columns = [];\n  const values = [];\n\n  /** Add type */\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Livewire');\n\n  /** Add cachedStats */\n  const { metadata, data } = annotation;\n\n  /** Add FOR */\n  if (metadata.FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(metadata.FrameOfReferenceUID);\n  }\n\n  /** Add points */\n  if (data.contour.polyline) {\n    /**\n     * Points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n     * convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n     * so that it can be used in the CSV report\n     */\n    columns.push('points');\n    values.push(data.contour.polyline.map(p => p.join(' ')).join(';'));\n  }\n\n  return { columns, values };\n}\n\n/**\n * Retrieves the display text for an annotation in a display set.\n *\n * @param {Object} annotation - The annotation object.\n * @param {Object} displaySet - The display set object.\n * @returns {object} - An object with primary and secondary text arrays.\n */\nfunction getDisplayText(annotation, displaySet, displaySetService) {\n  const { metadata, data } = annotation;\n\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!data.cachedStats || !data.cachedStats[`imageId:${metadata.referencedImageId}`]) {\n    return displayText;\n  }\n\n  const { area, areaUnit } = data.cachedStats[`imageId:${metadata.referencedImageId}`];\n\n  const { SOPInstanceUID, frameNumber } = getSOPInstanceAttributes(\n    metadata.referencedImageId,\n    displaySetService,\n    annotation\n  );\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  const { SeriesNumber } = displaySet;\n  let seriesText = null;\n  if (SeriesNumber !== undefined) {\n    seriesText = `S: ${SeriesNumber}${instanceText}${frameText}`;\n  }\n\n  if (area) {\n    const roundedArea = utils.roundNumber(area || 0, 2);\n    displayText.primary.push(`${roundedArea} ${getDisplayUnit(areaUnit)}`);\n  }\n\n  if (seriesText) {\n    displayText.secondary.push(seriesText);\n  }\n\n  return displayText;\n}\n\nexport default LivewireContour;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getDisplayUnit } from './utils';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nconst Probe = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.warn('Probe tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet, customizationService);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      isLocked,\n      isVisible,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations?.[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return;\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { value } = targetStats;\n    const unit = 'HU';\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      value,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Probe');\n\n  mappedAnnotations.forEach(annotation => {\n    const { value, unit } = annotation;\n    columns.push(`Probe (${unit})`);\n    values.push(value);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet, customizationService) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  const { value, unit, SeriesNumber, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  if (value !== undefined) {\n    const roundedValue = utils.roundNumber(value, 2);\n    displayText.primary.push(`${roundedValue} ${getDisplayUnit(unit)}`);\n    displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n  }\n\n  return displayText;\n}\n\nexport default Probe;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nconst UltrasoundDirectional = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } =\n      getSOPInstanceAttributes(referencedImageId);\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet, customizationService);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations?.[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n      isLocked,\n      isVisible,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, DisplaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return;\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      throw new Error('Non-acquisition plane measurement mapping not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } =\n      getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { xValues, yValues, units, isUnitless, isHorizontal } = targetStats;\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      xValues,\n      yValues,\n      units,\n      isUnitless,\n      isHorizontal,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:UltrasoundDirectional');\n\n  mappedAnnotations.forEach(annotation => {\n    const { xValues, yValues, units, isUnitless } = annotation;\n    if (isUnitless) {\n      columns.push('Length' + units[0]);\n      values.push(utils.roundNumber(xValues[0], 2));\n    } else {\n      const dist1 = Math.abs(xValues[1] - xValues[0]);\n      const dist2 = Math.abs(yValues[1] - yValues[0]);\n      columns.push('Time' + units[0]);\n      values.push(utils.roundNumber(dist1, 2));\n      columns.push('Length' + units[1]);\n      values.push(utils.roundNumber(dist2, 2));\n    }\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet, customizationService) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  const { xValues, yValues, units, isUnitless, SeriesNumber, SOPInstanceUID, frameNumber } =\n    mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n  const seriesText = `S: ${SeriesNumber}${instanceText}${frameText}`;\n\n  if (xValues === undefined || yValues === undefined) {\n    return displayText;\n  }\n\n  if (isUnitless) {\n    displayText.primary.push(`${utils.roundNumber(xValues[0], 2)} ${units[0]}`);\n  } else {\n    const dist1 = Math.abs(xValues[1] - xValues[0]);\n    const dist2 = Math.abs(yValues[1] - yValues[0]);\n    displayText.primary.push(`${utils.roundNumber(dist1)} ${units[0]}`);\n    displayText.primary.push(`${utils.roundNumber(dist2)} ${units[1]}`);\n  }\n\n  displayText.secondary.push(seriesText);\n\n  return displayText;\n}\n\nexport default UltrasoundDirectional;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getDisplayUnit } from './utils';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\n\nconst SegmentBidirectional = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n\n    if (!metadata || !data) {\n      console.debug('SegmentBidirectional tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n    }\n\n    const { points, textBox } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      textBox,\n      isLocked,\n      isVisible,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      referencedImageId,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } = getSOPInstanceAttributes(\n      referencedImageId,\n      displaySetService,\n      annotation\n    );\n\n    const displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID)[0];\n\n    const { SeriesNumber } = displaySet;\n    const { length, width, unit } = targetStats;\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      length,\n      width,\n    });\n  });\n\n  return annotations;\n}\n\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:SegmentBidirectional');\n\n  mappedAnnotations.forEach(annotation => {\n    const { length, width, unit } = annotation;\n    columns.push(`Length`, `Width`, 'Unit');\n    values.push(length, width, unit);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  // Area is the same for all series\n  const { length, width, unit, SeriesNumber, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n  const roundedLength = utils.roundNumber(length, 2);\n  const roundedWidth = utils.roundNumber(width, 2);\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  displayText.primary.push(`L: ${roundedLength} ${getDisplayUnit(unit)}`);\n  displayText.primary.push(`W: ${roundedWidth} ${getDisplayUnit(unit)}`);\n  displayText.secondary.push(`S: ${SeriesNumber}${instanceText}${frameText}`);\n\n  return displayText;\n}\n\nexport default SegmentBidirectional;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\nimport { getIsLocked } from './utils/getIsLocked';\nimport { getIsVisible } from './utils/getIsVisible';\nimport { annotation } from '@cornerstonejs/tools';\nconst UltrasoundPleuraBLine = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType,\n    customizationService\n  ) => {\n    const { annotation } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n    const isLocked = getIsLocked(annotationUID);\n    const isVisible = getIsVisible(annotationUID);\n    if (!metadata || !data) {\n      console.warn('UltrasoundPleuraBLine tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } =\n      getSOPInstanceAttributes(referencedImageId);\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(annotation, displaySetService);\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet, customizationService);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations?.[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n      isLocked,\n      isVisible,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, DisplaySetService) {\n  const { metadata } = annotation;\n  const { annotationType } = annotation.data;\n  const { referencedImageId } = metadata;\n\n  const annotations = [];\n  if (!referencedImageId) {\n    throw new Error('Non-acquisition plane measurement mapping not supported');\n  }\n\n  const { SOPInstanceUID, SeriesInstanceUID, frameNumber } =\n    getSOPInstanceAttributes(referencedImageId);\n\n  const displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    frameNumber\n  );\n\n  const { SeriesNumber } = displaySet;\n\n  annotations.push({\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesNumber,\n    frameNumber,\n    annotationType,\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID, customizationService) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:UltrasoundPleuraBLine');\n\n  mappedAnnotations.forEach(annotation => {\n    const { annotationType } = annotation;\n    columns.push('AnnotationType');\n    values.push(annotationType);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet, customizationService) {\n  const displayText = {\n    primary: [],\n    secondary: [],\n  };\n\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return displayText;\n  }\n\n  const { annotationType, SeriesNumber, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.instances.find(image => image.SOPInstanceUID === SOPInstanceUID);\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n  const seriesText = `S: ${SeriesNumber}${instanceText}${frameText}`;\n\n  displayText.primary.push(`Annotation : ${annotationType}`);\n  displayText.secondary.push(seriesText);\n\n  return displayText;\n}\n\nexport default UltrasoundPleuraBLine;\n","import { MeasurementService } from '@ohif/core';\nimport Length from './Length';\nimport Bidirectional from './Bidirectional';\nimport EllipticalROI from './EllipticalROI';\nimport CircleROI from './CircleROI';\nimport ArrowAnnotate from './ArrowAnnotate';\nimport CobbAngle from './CobbAngle';\nimport Angle from './Angle';\nimport PlanarFreehandROI from './PlanarFreehandROI';\nimport RectangleROI from './RectangleROI';\nimport SplineROI from './SplineROI';\nimport LivewireContour from './LivewireContour';\nimport Probe from './Probe';\nimport UltrasoundDirectional from './UltrasoundDirectional';\nimport SegmentBidirectional from './SegmentBidirectional';\nimport UltrasoundPleuraBLine from './UltrasoundPleuraBLine';\n\nconst measurementServiceMappingsFactory = (\n  measurementService: MeasurementService,\n  displaySetService,\n  cornerstoneViewportService,\n  customizationService\n) => {\n  /**\n   * Maps measurement service format object to cornerstone annotation object.\n   *\n   * @param measurement The measurement instance\n   * @param definition The source definition\n   * @return Cornerstone annotation data\n   */\n\n  const _getValueTypeFromToolType = toolType => {\n    const { POLYLINE, ELLIPSE, CIRCLE, RECTANGLE, BIDIRECTIONAL, POINT, ANGLE } =\n      MeasurementService.VALUE_TYPES;\n\n    // TODO -> I get why this was attempted, but its not nearly flexible enough.\n    // A single measurement may have an ellipse + a bidirectional measurement, for instances.\n    // You can't define a bidirectional tool as a single type..\n    const TOOL_TYPE_TO_VALUE_TYPE = {\n      Length: POLYLINE,\n      EllipticalROI: ELLIPSE,\n      CircleROI: CIRCLE,\n      RectangleROI: RECTANGLE,\n      PlanarFreehandROI: POLYLINE,\n      Bidirectional: BIDIRECTIONAL,\n      ArrowAnnotate: POINT,\n      CobbAngle: ANGLE,\n      Angle: ANGLE,\n      SplineROI: POLYLINE,\n      LivewireContour: POLYLINE,\n      Probe: POINT,\n      UltrasoundDirectional: POLYLINE,\n      SegmentBidirectional: BIDIRECTIONAL,\n    };\n\n    return TOOL_TYPE_TO_VALUE_TYPE[toolType];\n  };\n\n  const factories = {\n    Length: {\n      toAnnotation: Length.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        Length.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n      ],\n    },\n    Bidirectional: {\n      toAnnotation: Bidirectional.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        Bidirectional.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        // TODO -> We should eventually do something like shortAxis + longAxis,\n        // But its still a little unclear how these automatic interpretations will work.\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n      ],\n    },\n    SegmentBidirectional: {\n      toAnnotation: SegmentBidirectional.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        SegmentBidirectional.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n      ],\n    },\n    EllipticalROI: {\n      toAnnotation: EllipticalROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        EllipticalROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.ELLIPSE,\n        },\n      ],\n    },\n    CircleROI: {\n      toAnnotation: CircleROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        CircleROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.CIRCLE,\n        },\n      ],\n    },\n    RectangleROI: {\n      toAnnotation: RectangleROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        RectangleROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n        },\n      ],\n    },\n    PlanarFreehandROI: {\n      toAnnotation: PlanarFreehandROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        PlanarFreehandROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n        },\n      ],\n    },\n    SplineROI: {\n      toAnnotation: SplineROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        SplineROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n        },\n      ],\n    },\n    LivewireContour: {\n      toAnnotation: LivewireContour.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        LivewireContour.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n        },\n      ],\n    },\n    ArrowAnnotate: {\n      toAnnotation: ArrowAnnotate.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        ArrowAnnotate.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POINT,\n          points: 1,\n        },\n      ],\n    },\n    Probe: {\n      toAnnotation: Probe.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        Probe.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POINT,\n          points: 1,\n        },\n      ],\n    },\n    CobbAngle: {\n      toAnnotation: CobbAngle.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        CobbAngle.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.ANGLE,\n        },\n      ],\n    },\n    Angle: {\n      toAnnotation: Angle.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        Angle.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.ANGLE,\n        },\n      ],\n    },\n    UltrasoundDirectional: {\n      toAnnotation: UltrasoundDirectional.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        UltrasoundDirectional.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n      ],\n    },\n    UltrasoundPleuraBLine: {\n      toAnnotation: UltrasoundPleuraBLine.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        UltrasoundPleuraBLine.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType,\n          customizationService\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n      ],\n    },\n  };\n\n  return factories;\n};\n\nexport default measurementServiceMappingsFactory;\n","import { eventTarget, Types } from '@cornerstonejs/core';\nimport { Enums, annotation } from '@cornerstonejs/tools';\nimport { DicomMetadataStore } from '@ohif/core';\n\nimport * as CSExtensionEnums from './enums';\nimport { toolNames } from './initCornerstoneTools';\nimport { onCompletedCalibrationLine } from './tools/CalibrationLineTool';\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\nimport getSOPInstanceAttributes from './utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\nimport {\n  setAnnotationLabel,\n  triggerAnnotationRenderForViewportIds,\n} from '@cornerstonejs/tools/utilities';\nimport getActiveViewportEnabledElement from './utils/getActiveViewportEnabledElement';\n\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\nconst { removeAnnotation } = annotation.state;\nconst csToolsEvents = Enums.Events;\n\nconst initMeasurementService = (\n  measurementService,\n  displaySetService,\n  cornerstoneViewportService,\n  customizationService\n) => {\n  /* Initialization */\n  const {\n    Length,\n    Bidirectional,\n    EllipticalROI,\n    CircleROI,\n    ArrowAnnotate,\n    Angle,\n    CobbAngle,\n    RectangleROI,\n    PlanarFreehandROI,\n    SplineROI,\n    LivewireContour,\n    Probe,\n    UltrasoundDirectional,\n    UltrasoundPleuraBLine,\n    SegmentBidirectional,\n  } = measurementServiceMappingsFactory(\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService,\n    customizationService\n  );\n  const csTools3DVer1MeasurementSource = measurementService.createSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  /* Mappings */\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Length',\n    Length.matchingCriteria,\n    Length.toAnnotation,\n    Length.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Crosshairs',\n    Length.matchingCriteria,\n    () => {\n      return null;\n    },\n    () => {\n      return null;\n    }\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Bidirectional',\n    Bidirectional.matchingCriteria,\n    Bidirectional.toAnnotation,\n    Bidirectional.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'EllipticalROI',\n    EllipticalROI.matchingCriteria,\n    EllipticalROI.toAnnotation,\n    EllipticalROI.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'CircleROI',\n    CircleROI.matchingCriteria,\n    CircleROI.toAnnotation,\n    CircleROI.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'ArrowAnnotate',\n    ArrowAnnotate.matchingCriteria,\n    ArrowAnnotate.toAnnotation,\n    ArrowAnnotate.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'CobbAngle',\n    CobbAngle.matchingCriteria,\n    CobbAngle.toAnnotation,\n    CobbAngle.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Angle',\n    Angle.matchingCriteria,\n    Angle.toAnnotation,\n    Angle.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'RectangleROI',\n    RectangleROI.matchingCriteria,\n    RectangleROI.toAnnotation,\n    RectangleROI.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'PlanarFreehandROI',\n    PlanarFreehandROI.matchingCriteria,\n    PlanarFreehandROI.toAnnotation,\n    PlanarFreehandROI.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'SplineROI',\n    SplineROI.matchingCriteria,\n    SplineROI.toAnnotation,\n    SplineROI.toMeasurement\n  );\n\n  // On the UI side, the Calibration Line tool will work almost the same as the\n  // Length tool\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'CalibrationLine',\n    Length.matchingCriteria,\n    Length.toAnnotation,\n    Length.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'LivewireContour',\n    LivewireContour.matchingCriteria,\n    LivewireContour.toAnnotation,\n    LivewireContour.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Probe',\n    Probe.matchingCriteria,\n    Probe.toAnnotation,\n    Probe.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'UltrasoundDirectionalTool',\n    UltrasoundDirectional.matchingCriteria,\n    UltrasoundDirectional.toAnnotation,\n    UltrasoundDirectional.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'UltrasoundPleuraBLineTool',\n    UltrasoundPleuraBLine.matchingCriteria,\n    UltrasoundPleuraBLine.toAnnotation,\n    UltrasoundPleuraBLine.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'SegmentBidirectional',\n    SegmentBidirectional.matchingCriteria,\n    SegmentBidirectional.toAnnotation,\n    SegmentBidirectional.toMeasurement\n  );\n\n  return csTools3DVer1MeasurementSource;\n};\n\nconst connectToolsToMeasurementService = ({\n  commandsManager,\n  servicesManager,\n  extensionManager,\n}: {\n  commandsManager: AppTypes.CommandsManager;\n  servicesManager: AppTypes.ServicesManager;\n  extensionManager: AppTypes.ExtensionManager;\n}) => {\n  const {\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService,\n    customizationService,\n  } = servicesManager.services;\n  const csTools3DVer1MeasurementSource = initMeasurementService(\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService,\n    customizationService\n  );\n  connectMeasurementServiceToTools({ servicesManager, commandsManager, extensionManager });\n  const { annotationToMeasurement, remove } = csTools3DVer1MeasurementSource;\n\n  //\n  function addMeasurement(csToolsEvent) {\n    try {\n      const annotationAddedEventDetail = csToolsEvent.detail;\n      const {\n        annotation: { metadata, annotationUID },\n      } = annotationAddedEventDetail;\n      const { toolName } = metadata;\n\n      if (csToolsEvent.type === completedEvt && toolName === toolNames.CalibrationLine) {\n        // show modal to input the measurement (mm)\n        onCompletedCalibrationLine(servicesManager, csToolsEvent)\n          .then(\n            () => {\n              console.log('Calibration applied.');\n            },\n            () => true\n          )\n          .finally(() => {\n            // we don't need the calibration line lingering around, remove the\n            // annotation from the display\n            removeAnnotation(annotationUID);\n            removeMeasurement(csToolsEvent);\n            // this will ensure redrawing of annotations\n            cornerstoneViewportService.resize();\n          });\n      } else {\n        // To force the measurementUID be the same as the annotationUID\n        // Todo: this should be changed when a measurement can include multiple annotations\n        // in the future\n        annotationAddedEventDetail.uid = annotationUID;\n        annotationToMeasurement(toolName, annotationAddedEventDetail);\n      }\n    } catch (error) {\n      console.warn('Failed to add measurement:', error);\n    }\n  }\n\n  function updateMeasurement(csToolsEvent) {\n    try {\n      const annotationModifiedEventDetail = csToolsEvent.detail;\n\n      const {\n        annotation: { metadata, annotationUID },\n      } = annotationModifiedEventDetail;\n\n      // If the measurement hasn't been added, don't modify it\n      const measurement = measurementService.getMeasurement(annotationUID);\n\n      if (!measurement) {\n        return;\n      }\n      const { toolName } = metadata;\n\n      annotationModifiedEventDetail.uid = annotationUID;\n      // Passing true to indicate this is an update and NOT a annotation (start) completion.\n      annotationToMeasurement(toolName, annotationModifiedEventDetail, true);\n    } catch (error) {\n      console.warn('Failed to update measurement:', error);\n    }\n  }\n\n  function selectMeasurement(csToolsEvent) {\n    try {\n      const annotationSelectionEventDetail = csToolsEvent.detail;\n\n      const { added: addedSelectedAnnotationUIDs, removed: removedSelectedAnnotationUIDs } =\n        annotationSelectionEventDetail;\n\n      if (removedSelectedAnnotationUIDs) {\n        removedSelectedAnnotationUIDs.forEach(annotationUID =>\n          measurementService.setMeasurementSelected(annotationUID, false)\n        );\n      }\n\n      if (addedSelectedAnnotationUIDs) {\n        addedSelectedAnnotationUIDs.forEach(annotationUID =>\n          measurementService.setMeasurementSelected(annotationUID, true)\n        );\n      }\n    } catch (error) {\n      console.warn('Failed to select/unselect measurements:', error);\n    }\n  }\n\n  /**\n   * When csTools fires a removed event, remove the same measurement\n   * from the measurement service\n   *\n   * @param {*} csToolsEvent\n   */\n  function removeMeasurement(csToolsEvent) {\n    try {\n      const annotationRemovedEventDetail = csToolsEvent.detail;\n      const {\n        annotation: { annotationUID },\n      } = annotationRemovedEventDetail;\n      const measurement = measurementService.getMeasurement(annotationUID);\n      if (measurement) {\n        remove(annotationUID, annotationRemovedEventDetail);\n      }\n    } catch (error) {\n      console.warn('Failed to remove measurement:', error);\n    }\n  }\n\n  // on display sets added, check if there are any measurements in measurement service that need to be\n  // put into cornerstone tools\n  const addedEvt = csToolsEvents.ANNOTATION_ADDED;\n  const completedEvt = csToolsEvents.ANNOTATION_COMPLETED;\n  const updatedEvt = csToolsEvents.ANNOTATION_MODIFIED;\n  const removedEvt = csToolsEvents.ANNOTATION_REMOVED;\n  const selectionEvt = csToolsEvents.ANNOTATION_SELECTION_CHANGE;\n\n  eventTarget.addEventListener(addedEvt, addMeasurement);\n  eventTarget.addEventListener(completedEvt, addMeasurement);\n  eventTarget.addEventListener(updatedEvt, updateMeasurement);\n  eventTarget.addEventListener(removedEvt, removeMeasurement);\n  eventTarget.addEventListener(selectionEvt, selectMeasurement);\n\n  return csTools3DVer1MeasurementSource;\n};\n\nconst connectMeasurementServiceToTools = ({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}) => {\n  const { measurementService, cornerstoneViewportService, viewportGridService } =\n    servicesManager.services;\n  const { MEASUREMENT_REMOVED, MEASUREMENTS_CLEARED, MEASUREMENT_UPDATED, RAW_MEASUREMENT_ADDED } =\n    measurementService.EVENTS;\n\n  measurementService.subscribe(MEASUREMENTS_CLEARED, ({ measurements }) => {\n    if (!Object.keys(measurements).length) {\n      return;\n    }\n\n    commandsManager.run('startRecordingForAnnotationGroup');\n    for (const measurement of Object.values(measurements)) {\n      const { uid, source } = measurement;\n      if (source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        continue;\n      }\n      const removedAnnotation = annotation.state.getAnnotation(uid);\n      removeAnnotation(uid);\n      commandsManager.run('triggerCreateAnnotationMemo', {\n        annotation: removedAnnotation,\n        FrameOfReferenceUID: removedAnnotation.metadata.FrameOfReferenceUID,\n        options: { deleting: true },\n      });\n    }\n    commandsManager.run('endRecordingForAnnotationGroup');\n\n    // trigger a render\n    cornerstoneViewportService.getRenderingEngine().render();\n  });\n\n  measurementService.subscribe(\n    MEASUREMENT_UPDATED,\n    ({ source, measurement, notYetUpdatedAtSource }) => {\n      if (!source) {\n        return;\n      }\n\n      if (source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        return;\n      }\n\n      if (notYetUpdatedAtSource === false) {\n        // This event was fired by cornerstone telling the measurement service to sync.\n        // Already in sync.\n        return;\n      }\n\n      const { uid, label, isLocked, isVisible } = measurement;\n      const sourceAnnotation = annotation.state.getAnnotation(uid);\n      const { data, metadata } = sourceAnnotation;\n\n      if (!data) {\n        return;\n      }\n\n      if (data.label !== label) {\n        const element = getActiveViewportEnabledElement(viewportGridService)?.viewport.element;\n        setAnnotationLabel(sourceAnnotation, element, label);\n      }\n\n      // update the isLocked state\n      annotation.locking.setAnnotationLocked(uid, isLocked);\n\n      // update the isVisible state\n      annotation.visibility.setAnnotationVisibility(uid, isVisible);\n\n      // annotation.config.style.setAnnotationStyles(uid, {\n      //   color: `rgb(${color[0]}, ${color[1]}, ${color[2]})`,\n      // });\n\n      // I don't like this but will fix later\n      const renderingEngine =\n        cornerstoneViewportService.getRenderingEngine() as Types.IRenderingEngine;\n      // Note: We could do a better job by triggering the render on the\n      // viewport itself, but the removeAnnotation does not include that info...\n      const viewportIds = renderingEngine.getViewports().map(viewport => viewport.id);\n      triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n  );\n\n  measurementService.subscribe(\n    RAW_MEASUREMENT_ADDED,\n    ({ source, measurement, data, dataSource }) => {\n      if (source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        return;\n      }\n\n      const { referenceSeriesUID, referenceStudyUID, SOPInstanceUID, metadata } = measurement;\n\n      const instance = DicomMetadataStore.getInstance(\n        referenceStudyUID,\n        referenceSeriesUID,\n        SOPInstanceUID\n      );\n\n      let imageId;\n      let frameNumber = 1;\n\n      if (measurement?.metadata?.referencedImageId) {\n        imageId = measurement.metadata.referencedImageId;\n        frameNumber = getSOPInstanceAttributes(measurement.metadata.referencedImageId).frameNumber;\n      } else {\n        imageId = dataSource.getImageIdsForInstance({ instance });\n      }\n\n      /**\n       * This annotation is used by the cornerstone viewport.\n       * This is not the read-only annotation rendered by the SR viewport.\n       */\n      const annotationManager = annotation.state.getAnnotationManager();\n      const newAnnotation = {\n        annotationUID: measurement.uid,\n        highlighted: false,\n        isLocked: false,\n        // This is used to force a re-render of the annotation to\n        // re-calculate cached stats since sometimes in SR we\n        // get empty cached stats\n        invalidated: true,\n        metadata: {\n          ...metadata,\n          toolName: measurement.toolName,\n          FrameOfReferenceUID: measurement.FrameOfReferenceUID,\n          referencedImageId: imageId,\n        },\n        data: {\n          /**\n           * Don't remove this destructuring of data here.\n           * This is used to pass annotation specific data forward e.g. contour\n           */\n          ...(data.annotation.data || {}),\n          text: data.annotation.data.text,\n          handles: { ...data.annotation.data.handles },\n          cachedStats: { ...data.annotation.data.cachedStats },\n          label: data.annotation.data.label,\n          frameNumber,\n        },\n      };\n      annotationManager.addAnnotation(newAnnotation);\n      commandsManager.run('triggerCreateAnnotationMemo', {\n        annotation: newAnnotation,\n        FrameOfReferenceUID: newAnnotation.metadata.FrameOfReferenceUID,\n        options: { newAnnotation: true },\n      });\n    }\n  );\n\n  measurementService.subscribe(\n    MEASUREMENT_REMOVED,\n    ({ source, measurement: removedMeasurementId }) => {\n      if (source?.name && source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        return;\n      }\n      const removedAnnotation = annotation.state.getAnnotation(removedMeasurementId);\n      removeAnnotation(removedMeasurementId);\n      commandsManager.run('triggerCreateAnnotationMemo', {\n        annotation: removedAnnotation,\n        FrameOfReferenceUID: removedAnnotation.metadata.FrameOfReferenceUID,\n        options: { deleting: true },\n      });\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      // Note: We could do a better job by triggering the render on the\n      // viewport itself, but the removeAnnotation does not include that info...\n      renderingEngine.render();\n    }\n  );\n};\n\nexport {\n  initMeasurementService,\n  connectToolsToMeasurementService,\n  connectMeasurementServiceToTools,\n};\n","import { cache, Types } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\n\nfunction _getVolumeFromViewport(viewport: Types.IBaseVolumeViewport) {\n  const volumeIds = viewport.getAllVolumeIds();\n  const volumes = volumeIds.map(id => cache.getVolume(id));\n  const dynamicVolume = volumes.find(volume => volume.isDynamicVolume());\n\n  return dynamicVolume ?? volumes[0];\n}\n\n/**\n * Return all viewports that needs to be synchronized with the source\n * viewport passed as parameter when cine is updated.\n * @param servicesManager ServiceManager\n * @param srcViewportIndex Source viewport index\n * @returns array with viewport information.\n */\nfunction _getSyncedViewports(servicesManager: AppTypes.ServicesManager, srcViewportId) {\n  const { viewportGridService, cornerstoneViewportService } = servicesManager.services;\n\n  const { viewports: viewportsStates } = viewportGridService.getState();\n  const srcViewportState = viewportsStates.get(srcViewportId);\n\n  if (srcViewportState?.viewportOptions?.viewportType !== 'volume') {\n    return [];\n  }\n\n  const srcViewport = cornerstoneViewportService.getCornerstoneViewport(srcViewportId);\n\n  const srcVolume = srcViewport ? _getVolumeFromViewport(srcViewport) : null;\n\n  if (!srcVolume?.isDynamicVolume()) {\n    return [];\n  }\n\n  const { volumeId: srcVolumeId } = srcVolume;\n\n  return Array.from(viewportsStates.values())\n    .filter(({ viewportId }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n      return viewportId !== srcViewportId && viewport?.hasVolumeId?.(srcVolumeId);\n    })\n    .map(({ viewportId }) => ({ viewportId }));\n}\n\nfunction initCineService(servicesManager: AppTypes.ServicesManager) {\n  const { cineService } = servicesManager.services;\n\n  const getSyncedViewports = viewportId => {\n    return _getSyncedViewports(servicesManager, viewportId);\n  };\n\n  const playClip = (element, playClipOptions) => {\n    return utilities.cine.playClip(element, playClipOptions);\n  };\n\n  const stopClip = (element, stopClipOptions) => {\n    return utilities.cine.stopClip(element, stopClipOptions);\n  };\n\n  cineService.setServiceImplementation({\n    getSyncedViewports,\n    playClip,\n    stopClip,\n  });\n}\n\nexport default initCineService;\n","import { cache, imageLoadPoolManager, imageLoader, Enums, eventTarget, EVENTS as csEvents } from '@cornerstonejs/core';\n\nfunction initStudyPrefetcherService(servicesManager: AppTypes.ServicesManager) {\n  const { studyPrefetcherService } = servicesManager.services;\n\n  studyPrefetcherService.requestType = Enums.RequestType.Prefetch;\n  studyPrefetcherService.imageLoadPoolManager = imageLoadPoolManager;\n  studyPrefetcherService.imageLoader = imageLoader;\n\n  studyPrefetcherService.cache = {\n    isImageCached(imageId: string): boolean {\n      return !!cache.getImageLoadObject(imageId);\n    }\n  }\n\n  studyPrefetcherService.imageLoadEventsManager = {\n    addEventListeners(onImageLoaded, onImageLoadFailed) {\n      eventTarget.addEventListener(csEvents.IMAGE_LOADED, onImageLoaded);\n      eventTarget.addEventListener(csEvents.IMAGE_LOAD_FAILED, onImageLoadFailed);\n\n      return [\n        {\n          unsubscribe: () => eventTarget.removeEventListener(csEvents.IMAGE_LOADED, onImageLoaded)\n        },\n        {\n          unsubscribe: () => eventTarget.removeEventListener(csEvents.IMAGE_LOAD_FAILED, onImageLoadFailed)\n        },\n      ]\n    }\n  }\n}\n\nexport default initStudyPrefetcherService;\n","import { cache, imageLoadPoolManager, Enums } from '@cornerstonejs/core';\nimport getInterleavedFrames from './getInterleavedFrames';\nimport zip from 'lodash.zip';\nimport compact from 'lodash.compact';\nimport flatten from 'lodash.flatten';\n\n// Map of volumeId and SeriesInstanceId\nconst volumeIdMapsToLoad = new Map<string, string>();\nconst viewportIdVolumeInputArrayMap = new Map<string, unknown[]>();\n\n/**\n * This function caches the volumeUIDs until all the volumes inside the\n * hanging protocol are initialized. Then it goes through the imageIds\n * of the volumes, and interleave them, in order for the volumes to be loaded\n * together from middle to the start and the end.\n * @param {Object} props image loading properties from Cornerstone ViewportService\n * @returns\n */\nexport default function interleaveCenterLoader({\n  data: { viewportId, volumeInputArray },\n  displaySetsMatchDetails,\n  viewportMatchDetails: matchDetails,\n}) {\n  viewportIdVolumeInputArrayMap.set(viewportId, volumeInputArray);\n\n  // Based on the volumeInputs store the volumeIds and SeriesInstanceIds\n  // to keep track of the volumes being loaded\n  for (const volumeInput of volumeInputArray) {\n    const { volumeId } = volumeInput;\n    const volume = cache.getVolume(volumeId);\n\n    if (!volume) {\n      return;\n    }\n\n    // if the volumeUID is not in the volumeUIDs array, add it\n    if (!volumeIdMapsToLoad.has(volumeId)) {\n      const { metadata } = volume;\n      volumeIdMapsToLoad.set(volumeId, metadata.SeriesInstanceUID);\n    }\n  }\n\n  /**\n   * The following is checking if all the viewports that were matched in the HP has been\n   * successfully created their cornerstone viewport or not. Todo: This can be\n   * improved by not checking it, and as soon as the matched DisplaySets have their\n   * volume loaded, we start the loading, but that comes at the cost of viewports\n   * not being created yet (e.g., in a 10 viewport ptCT fusion, when one ct viewport and one\n   * pt viewport are created we have a guarantee that the volumes are created in the cache\n   * but the rest of the viewports (fusion, mip etc.) are not created yet. So\n   * we can't initiate setting the volumes for those viewports. One solution can be\n   * to add an event when a viewport is created (not enabled element event) and then\n   * listen to it and as the other viewports are created we can set the volumes for them\n   * since volumes are already started loading.\n   */\n  const uniqueViewportVolumeDisplaySetUIDs = new Set();\n  viewportIdVolumeInputArrayMap.forEach((volumeInputArray, viewportId) => {\n    volumeInputArray.forEach(volumeInput => {\n      const { volumeId } = volumeInput;\n      uniqueViewportVolumeDisplaySetUIDs.add(volumeId);\n    });\n  });\n\n  const uniqueMatchedDisplaySetUIDs = new Set();\n\n  matchDetails.forEach(matchDetail => {\n    const { displaySetsInfo } = matchDetail;\n    displaySetsInfo.forEach(({ displaySetInstanceUID }) => {\n      uniqueMatchedDisplaySetUIDs.add(displaySetInstanceUID);\n    });\n  });\n\n  if (uniqueViewportVolumeDisplaySetUIDs.size !== uniqueMatchedDisplaySetUIDs.size) {\n    return;\n  }\n\n  const volumeIds = Array.from(volumeIdMapsToLoad.keys()).slice();\n  // get volumes from cache\n  const volumes = volumeIds.map(volumeId => {\n    return cache.getVolume(volumeId);\n  });\n\n  // iterate over all volumes, and get their imageIds, and interleave\n  // the imageIds and save them in AllRequests for later use\n  const AllRequests = [];\n  volumes.forEach(volume => {\n    const requests = volume.getImageLoadRequests();\n\n    if (!requests.length || !requests[0] || !requests[0].imageId) {\n      return;\n    }\n\n    const requestImageIds = requests.map(request => {\n      return request.imageId;\n    });\n\n    const imageIds = getInterleavedFrames(requestImageIds);\n\n    const reOrderedRequests = imageIds.map(({ imageId }) => {\n      const request = requests.find(req => req.imageId === imageId);\n      return request;\n    });\n\n    AllRequests.push(reOrderedRequests);\n  });\n\n  // flatten the AllRequests array, which will result in a list of all the\n  // imageIds for all the volumes but interleaved\n  const interleavedRequests = compact(flatten(zip(...AllRequests)));\n\n  // set the finalRequests to the imageLoadPoolManager\n  const finalRequests = [];\n  interleavedRequests.forEach(request => {\n    const { imageId } = request;\n\n    AllRequests.forEach(volumeRequests => {\n      const volumeImageIdRequest = volumeRequests.find(req => req.imageId === imageId);\n      if (volumeImageIdRequest) {\n        finalRequests.push(volumeImageIdRequest);\n      }\n    });\n  });\n\n  const requestType = Enums.RequestType.Prefetch;\n  const priority = 0;\n\n  finalRequests.forEach(({ callLoadImage, additionalDetails, imageId, imageIdIndex, options }) => {\n    const callLoadImageBound = callLoadImage.bind(null, imageId, imageIdIndex, options);\n\n    imageLoadPoolManager.addRequest(callLoadImageBound, requestType, additionalDetails, priority);\n  });\n\n  // clear the volumeIdMapsToLoad\n  volumeIdMapsToLoad.clear();\n\n  // copy the viewportIdVolumeInputArrayMap\n  const viewportIdVolumeInputArrayMapCopy = new Map(viewportIdVolumeInputArrayMap);\n\n  // reset the viewportIdVolumeInputArrayMap\n  viewportIdVolumeInputArrayMap.clear();\n\n  return viewportIdVolumeInputArrayMapCopy;\n}\n","export default function getInterleavedFrames(imageIds) {\n  const minImageIdIndex = 0;\n  const maxImageIdIndex = imageIds.length - 1;\n\n  const middleImageIdIndex = Math.floor(imageIds.length / 2);\n\n  let lowerImageIdIndex = middleImageIdIndex;\n  let upperImageIdIndex = middleImageIdIndex;\n\n  // Build up an array of images to prefetch, starting with the current image.\n  const imageIdsToPrefetch = [\n    { imageId: imageIds[middleImageIdIndex], imageIdIndex: middleImageIdIndex },\n  ];\n\n  const prefetchQueuedFilled = {\n    currentPositionDownToMinimum: false,\n    currentPositionUpToMaximum: false,\n  };\n\n  // Check if on edges and some criteria is already fulfilled\n\n  if (middleImageIdIndex === minImageIdIndex) {\n    prefetchQueuedFilled.currentPositionDownToMinimum = true;\n  } else if (middleImageIdIndex === maxImageIdIndex) {\n    prefetchQueuedFilled.currentPositionUpToMaximum = true;\n  }\n\n  while (\n    !prefetchQueuedFilled.currentPositionDownToMinimum ||\n    !prefetchQueuedFilled.currentPositionUpToMaximum\n  ) {\n    if (!prefetchQueuedFilled.currentPositionDownToMinimum) {\n      // Add imageId below\n      lowerImageIdIndex--;\n      imageIdsToPrefetch.push({\n        imageId: imageIds[lowerImageIdIndex],\n        imageIdIndex: lowerImageIdIndex,\n      });\n\n      if (lowerImageIdIndex === minImageIdIndex) {\n        prefetchQueuedFilled.currentPositionDownToMinimum = true;\n      }\n    }\n\n    if (!prefetchQueuedFilled.currentPositionUpToMaximum) {\n      // Add imageId above\n      upperImageIdIndex++;\n      imageIdsToPrefetch.push({\n        imageId: imageIds[upperImageIdIndex],\n        imageIdIndex: upperImageIdIndex,\n      });\n\n      if (upperImageIdIndex === maxImageIdIndex) {\n        prefetchQueuedFilled.currentPositionUpToMaximum = true;\n      }\n    }\n  }\n\n  return imageIdsToPrefetch;\n}\n","import { cache, imageLoadPoolManager, Enums } from '@cornerstonejs/core';\nimport getNthFrames from './getNthFrames';\nimport interleave from './interleave';\n\n// Map of volumeId and SeriesInstanceId\nconst volumeIdMapsToLoad = new Map<string, string>();\nconst viewportIdVolumeInputArrayMap = new Map<string, unknown[]>();\n\n/**\n * This function caches the volumeUIDs until all the volumes inside the\n * hanging protocol are initialized. Then it goes through the requests and\n * chooses a sub-selection starting the the first few objects, center objects\n * and last objects, and then the remaining nth images until all instances are\n * retrieved.  This causes the image to have a progressive load order and looks\n * visually much better.\n * @param {Object} props image loading properties from Cornerstone ViewportService\n */\nexport default function interleaveNthLoader({\n  data: { viewportId, volumeInputArray },\n  displaySetsMatchDetails,\n}) {\n  viewportIdVolumeInputArrayMap.set(viewportId, volumeInputArray);\n\n  // Based on the volumeInputs store the volumeIds and SeriesInstanceIds\n  // to keep track of the volumes being loaded\n  for (const volumeInput of volumeInputArray) {\n    const { volumeId } = volumeInput;\n    const volume = cache.getVolume(volumeId);\n\n    if (!volume) {\n      console.log(\"interleaveNthLoader::No volume, can't load it\");\n      return;\n    }\n\n    // if the volumeUID is not in the volumeUIDs array, add it\n    if (!volumeIdMapsToLoad.has(volumeId)) {\n      const { metadata } = volume;\n      volumeIdMapsToLoad.set(volumeId, metadata.SeriesInstanceUID);\n    }\n  }\n\n  const volumeIds = Array.from(volumeIdMapsToLoad.keys()).slice();\n  // get volumes from cache\n  const volumes = volumeIds.map(volumeId => {\n    return cache.getVolume(volumeId);\n  });\n\n  // iterate over all volumes, and get their imageIds, and interleave\n  // the imageIds and save them in AllRequests for later use\n  const originalRequests = volumes\n    .map(volume => volume.getImageLoadRequests?.() ?? [])\n    .filter(requests => requests?.[0]?.imageId);\n\n  const orderedRequests = originalRequests.map(request => getNthFrames(request));\n\n  // set the finalRequests to the imageLoadPoolManager\n  const finalRequests = interleave(orderedRequests);\n\n  const requestType = Enums.RequestType.Prefetch;\n  const priority = 0;\n\n  finalRequests.forEach(({ callLoadImage, additionalDetails, imageId, imageIdIndex, options }) => {\n    const callLoadImageBound = callLoadImage.bind(null, imageId, imageIdIndex, options);\n\n    imageLoadPoolManager.addRequest(callLoadImageBound, requestType, additionalDetails, priority);\n  });\n\n  // clear the volumeIdMapsToLoad\n  volumeIdMapsToLoad.clear();\n\n  // copy the viewportIdVolumeInputArrayMap\n  const viewportIdVolumeInputArrayMapCopy = new Map(viewportIdVolumeInputArrayMap);\n\n  // reset the viewportIdVolumeInputArrayMap\n  viewportIdVolumeInputArrayMap.clear();\n\n  return viewportIdVolumeInputArrayMapCopy;\n}\n","/**\n * Interleave the items from all the lists so that the first items are first\n * in the returned list, the second items are next etc.\n * Does this in a O(n) fashion, and return lists[0] if there is only one list.\n *\n * @param {[]} lists\n * @returns [] reordered to be breadth first traversal of lists\n */\nexport default function interleave(lists) {\n  if (!lists || !lists.length) {\n    return [];\n  }\n  if (lists.length === 1) {\n    return lists[0];\n  }\n  console.time('interleave');\n  const useLists = [...lists];\n  const ret = [];\n  for (let i = 0; useLists.length > 0; i++) {\n    for (const list of useLists) {\n      if (i >= list.length) {\n        useLists.splice(useLists.indexOf(list), 1);\n        continue;\n      }\n      ret.push(list[i]);\n    }\n  }\n  console.timeEnd('interleave');\n  return ret;\n}\n","/**\n * Returns a re-ordered array consisting of, in order:\n *    1. First few objects\n *    2. Center objects\n *    3. Last few objects\n *    4. nth Objects (n=7), set 2\n *    5. nth Objects set 5,\n *    6. Remaining objects\n * What this does is return the first/center/start objects, as those\n * are often used first, then a selection of objects scattered over the\n * instances in order to allow making requests over a set of image instances.\n *\n * @param {[]} imageIds\n * @returns [] reordered to be an nth selection\n */\nexport default function getNthFrames(imageIds) {\n  const frames = [[], [], [], [], []];\n  const centerStart = imageIds.length / 2 - 3;\n  const centerEnd = centerStart + 6;\n\n  for (let i = 0; i < imageIds.length; i++) {\n    if (i < 2 || i > imageIds.length - 4 || (i > centerStart && i < centerEnd)) {\n      frames[0].push(imageIds[i]);\n    } else if (i % 7 === 2) {\n      frames[1].push(imageIds[i]);\n    } else if (i % 7 === 5) {\n      frames[2].push(imageIds[i]);\n    } else {\n      frames[(i % 2) + 3].push(imageIds[i]);\n    }\n  }\n  const ret = [...frames[0], ...frames[1], ...frames[2], ...frames[3], ...frames[4]];\n  return ret;\n}\n","import { cache, imageLoadPoolManager, Enums } from '@cornerstonejs/core';\nimport zip from 'lodash.zip';\nimport compact from 'lodash.compact';\nimport flatten from 'lodash.flatten';\n\n// Map of volumeId and SeriesInstanceId\nconst volumeIdMapsToLoad = new Map<string, string>();\nconst viewportIdVolumeInputArrayMap = new Map<string, unknown[]>();\n\n/**\n * This function caches the volumeIds until all the volumes inside the\n * hanging protocol are initialized. Then it goes through the imageIds\n * of the volumes, and interleave them, in order for the volumes to be loaded\n * together from middle to the start and the end.\n * @param {Object} {viewportData, displaySetMatchDetails}\n * @returns\n */\nexport default function interleaveTopToBottom({\n  data: { viewportId, volumeInputArray },\n  displaySetsMatchDetails,\n  viewportMatchDetails: matchDetails,\n}) {\n  viewportIdVolumeInputArrayMap.set(viewportId, volumeInputArray);\n\n  // Based on the volumeInputs store the volumeIds and SeriesInstanceIds\n  // to keep track of the volumes being loaded\n  for (const volumeInput of volumeInputArray) {\n    const { volumeId } = volumeInput;\n    const volume = cache.getVolume(volumeId);\n\n    if (!volume) {\n      return;\n    }\n\n    // if the volumeUID is not in the volumeUIDs array, add it\n    if (!volumeIdMapsToLoad.has(volumeId)) {\n      const { metadata } = volume;\n      volumeIdMapsToLoad.set(volumeId, metadata.SeriesInstanceUID);\n    }\n  }\n\n  const filteredMatchDetails = [];\n  const displaySetsToLoad = new Set();\n\n  // Check all viewports that have a displaySet to be loaded. In some cases\n  // (eg: line chart viewports which is not a Cornerstone viewport) the\n  // displaySet is created on the client and there are no instances to be\n  // downloaded. For those viewports the displaySet may have the `skipLoading`\n  // option set to true otherwise it may block the download of all other\n  // instances resulting in blank viewports.\n  Array.from(matchDetails.values()).forEach(curMatchDetails => {\n    const { displaySetsInfo } = curMatchDetails;\n    let numDisplaySetsToLoad = 0;\n\n    displaySetsInfo.forEach(({ displaySetInstanceUID, displaySetOptions }) => {\n      if (!displaySetOptions?.options?.skipLoading) {\n        numDisplaySetsToLoad++;\n        displaySetsToLoad.add(displaySetInstanceUID);\n      }\n    });\n\n    if (numDisplaySetsToLoad) {\n      filteredMatchDetails.push(curMatchDetails);\n    }\n  });\n\n  /**\n   * The following is checking if all the viewports that were matched in the HP has been\n   * successfully created their cornerstone viewport or not. Todo: This can be\n   * improved by not checking it, and as soon as the matched DisplaySets have their\n   * volume loaded, we start the loading, but that comes at the cost of viewports\n   * not being created yet (e.g., in a 10 viewport ptCT fusion, when one ct viewport and one\n   * pt viewport are created we have a guarantee that the volumes are created in the cache\n   * but the rest of the viewports (fusion, mip etc.) are not created yet. So\n   * we can't initiate setting the volumes for those viewports. One solution can be\n   * to add an event when a viewport is created (not enabled element event) and then\n   * listen to it and as the other viewports are created we can set the volumes for them\n   * since volumes are already started loading.\n   */\n  const uniqueViewportVolumeDisplaySetUIDs = new Set();\n  viewportIdVolumeInputArrayMap.forEach((volumeInputArray, viewportId) => {\n    volumeInputArray.forEach(volumeInput => {\n      const { volumeId } = volumeInput;\n      uniqueViewportVolumeDisplaySetUIDs.add(volumeId);\n    });\n  });\n\n  const uniqueMatchedDisplaySetUIDs = new Set();\n\n  matchDetails.forEach(matchDetail => {\n    const { displaySetsInfo } = matchDetail;\n    displaySetsInfo.forEach(({ displaySetInstanceUID }) => {\n      uniqueMatchedDisplaySetUIDs.add(displaySetInstanceUID);\n    });\n  });\n\n  if (uniqueViewportVolumeDisplaySetUIDs.size !== uniqueMatchedDisplaySetUIDs.size) {\n    return;\n  }\n\n  const volumeIds = Array.from(volumeIdMapsToLoad.keys()).slice();\n  // get volumes from cache\n  const volumes = volumeIds.map(volumeId => {\n    return cache.getVolume(volumeId);\n  });\n\n  // iterate over all volumes, and get their imageIds, and interleave\n  // the imageIds and save them in AllRequests for later use\n  const AllRequests = [];\n  volumes.forEach(volume => {\n    const requests = volume.getImageLoadRequests();\n\n    if (!requests?.[0]?.imageId) {\n      return;\n    }\n\n    // reverse the requests\n    AllRequests.push(requests.reverse());\n  });\n\n  // flatten the AllRequests array, which will result in a list of all the\n  // imageIds for all the volumes but interleaved\n  const interleavedRequests = compact(flatten(zip(...AllRequests)));\n\n  // set the finalRequests to the imageLoadPoolManager\n  const finalRequests = [];\n  interleavedRequests.forEach(request => {\n    const { imageId } = request;\n\n    AllRequests.forEach(volumeRequests => {\n      const volumeImageIdRequest = volumeRequests.find(req => req.imageId === imageId);\n      if (volumeImageIdRequest) {\n        finalRequests.push(volumeImageIdRequest);\n      }\n    });\n  });\n\n  const requestType = Enums.RequestType.Prefetch;\n  const priority = 0;\n\n  finalRequests.forEach(({ callLoadImage, additionalDetails, imageId, imageIdIndex, options }) => {\n    const callLoadImageBound = callLoadImage.bind(null, imageId, imageIdIndex, options);\n\n    imageLoadPoolManager.addRequest(callLoadImageBound, requestType, additionalDetails, priority);\n  });\n\n  // clear the volumeIdMapsToLoad\n  volumeIdMapsToLoad.clear();\n\n  // copy the viewportIdVolumeInputArrayMap\n  const viewportIdVolumeInputArrayMapCopy = new Map(viewportIdVolumeInputArrayMap);\n\n  // reset the viewportIdVolumeInputArrayMap\n  viewportIdVolumeInputArrayMap.clear();\n\n  return viewportIdVolumeInputArrayMapCopy;\n}\n","/**\n * Finds tool nearby event position triggered.\n *\n * @param {Object} commandsManager mannager of commands\n * @param {Object} event that has being triggered\n * @returns cs toolData or undefined if not found.\n */\nexport const findNearbyToolData = (commandsManager, evt) => {\n  if (!evt?.detail) {\n    return;\n  }\n  const { element, currentPoints } = evt.detail;\n  return commandsManager.runCommand(\n    'getNearbyAnnotation',\n    {\n      element,\n      canvasCoordinates: currentPoints?.canvas,\n    },\n    'CORNERSTONE'\n  );\n};\n","import { eventTarget, EVENTS } from '@cornerstonejs/core';\nimport { Enums } from '@cornerstonejs/tools';\nimport { setEnabledElement } from './state';\nimport { findNearbyToolData } from './utils/findNearbyToolData';\n\nconst cs3DToolsEvents = Enums.Events;\n\n/**\n * Generates a name, consisting of:\n *    * alt when the alt key is down\n *    * ctrl when the cctrl key is down\n *    * shift when the shift key is down\n *    * 'button' followed by the button number (1 left, 3 right etc)\n */\nfunction getEventName(evt) {\n  const button = evt.detail.event.which;\n  const nameArr = [];\n  if (evt.detail.event.altKey) {\n    nameArr.push('alt');\n  }\n  if (evt.detail.event.ctrlKey) {\n    nameArr.push('ctrl');\n  }\n  if (evt.detail.event.shiftKey) {\n    nameArr.push('shift');\n  }\n  nameArr.push('button');\n  nameArr.push(button);\n  return nameArr.join('');\n}\n\nfunction initContextMenu({\n  cornerstoneViewportService,\n  customizationService,\n  commandsManager,\n}): void {\n  /*\n   * Run the commands associated with the given button press,\n   * defaults on button1 and button2\n   */\n  const cornerstoneViewportHandleEvent = (name, evt) => {\n    const customizations = customizationService.getCustomization(\n      'cornerstoneViewportClickCommands'\n    );\n\n    const toRun = customizations[name];\n\n    if (!toRun) {\n      return;\n    }\n\n    // only find nearbyToolData if required, for the click (which closes the context menu\n    // we don't need to find nearbyToolData)\n    let nearbyToolData = null;\n    if (toRun.some(command => command.commandOptions?.requireNearbyToolData)) {\n      nearbyToolData = findNearbyToolData(commandsManager, evt);\n    }\n\n    const options = {\n      nearbyToolData,\n      event: evt,\n    };\n    commandsManager.run(toRun, options);\n  };\n\n  const cornerstoneViewportHandleClick = evt => {\n    const name = getEventName(evt);\n    cornerstoneViewportHandleEvent(name, evt);\n  };\n\n  function elementEnabledHandler(evt) {\n    const { viewportId, element } = evt.detail;\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n    if (!viewportInfo) {\n      return;\n    }\n    // TODO check update upstream\n    setEnabledElement(viewportId, element);\n\n    element.addEventListener(cs3DToolsEvents.MOUSE_CLICK, cornerstoneViewportHandleClick);\n  }\n\n  function elementDisabledHandler(evt) {\n    const { element } = evt.detail;\n\n    element.removeEventListener(cs3DToolsEvents.MOUSE_CLICK, cornerstoneViewportHandleClick);\n  }\n\n  eventTarget.addEventListener(EVENTS.ELEMENT_ENABLED, elementEnabledHandler.bind(null));\n\n  eventTarget.addEventListener(EVENTS.ELEMENT_DISABLED, elementDisabledHandler.bind(null));\n}\n\nexport default initContextMenu;\n","import { eventTarget, EVENTS } from '@cornerstonejs/core';\nimport { Enums } from '@cornerstonejs/tools';\nimport { CommandsManager, CustomizationService } from '@ohif/core';\nimport { findNearbyToolData } from './utils/findNearbyToolData';\n\nconst cs3DToolsEvents = Enums.Events;\n\n/**\n * Generates a double click event name, consisting of:\n *    * alt when the alt key is down\n *    * ctrl when the cctrl key is down\n *    * shift when the shift key is down\n *    * 'doubleClick'\n */\nfunction getDoubleClickEventName(evt: CustomEvent) {\n  const nameArr = [];\n  if (evt.detail.event.altKey) {\n    nameArr.push('alt');\n  }\n  if (evt.detail.event.ctrlKey) {\n    nameArr.push('ctrl');\n  }\n  if (evt.detail.event.shiftKey) {\n    nameArr.push('shift');\n  }\n  nameArr.push('doubleClick');\n  return nameArr.join('');\n}\n\nexport type initDoubleClickArgs = {\n  customizationService: CustomizationService;\n  commandsManager: CommandsManager;\n};\n\nfunction initDoubleClick({ customizationService, commandsManager }: initDoubleClickArgs): void {\n  const cornerstoneViewportHandleDoubleClick = (evt: CustomEvent) => {\n    // Do not allow double click on a tool.\n    const nearbyToolData = findNearbyToolData(commandsManager, evt);\n    if (nearbyToolData) {\n      return;\n    }\n\n    const eventName = getDoubleClickEventName(evt);\n\n    // Allows for the customization of the double click on a viewport.\n    const customizations = customizationService.getCustomization(\n      'cornerstoneViewportClickCommands'\n    );\n\n    const toRun = customizations[eventName];\n\n    if (!toRun) {\n      return;\n    }\n\n    commandsManager.run(toRun);\n  };\n\n  function elementEnabledHandler(evt: CustomEvent) {\n    const { element } = evt.detail;\n\n    element.addEventListener(\n      cs3DToolsEvents.MOUSE_DOUBLE_CLICK,\n      cornerstoneViewportHandleDoubleClick\n    );\n  }\n\n  function elementDisabledHandler(evt: CustomEvent) {\n    const { element } = evt.detail;\n\n    element.removeEventListener(\n      cs3DToolsEvents.MOUSE_DOUBLE_CLICK,\n      cornerstoneViewportHandleDoubleClick\n    );\n  }\n\n  eventTarget.addEventListener(EVENTS.ELEMENT_ENABLED, elementEnabledHandler.bind(null));\n\n  eventTarget.addEventListener(EVENTS.ELEMENT_DISABLED, elementDisabledHandler.bind(null));\n}\n\nexport default initDoubleClick;\n","import { log, Enums } from '@ohif/core';\nimport { EVENTS } from '@cornerstonejs/core';\n\nconst IMAGE_TIMING_KEYS = [];\n\nconst imageTiming = {\n  viewportsWaiting: 0,\n};\n\n/**\n * Defines the initial view timing reporting.\n * This allows knowing how many viewports are waiting for initial views and\n * when the IMAGE_RENDERED gets sent out.\n * The first image rendered will fire the FIRST_IMAGE timeEnd logs, while\n * the last of the enabled viewport will fire the ALL_IMAGES timeEnd logs.\n *\n */\n\nexport default function initViewTiming({ element }) {\n  if (!IMAGE_TIMING_KEYS.length) {\n    // Work around a bug in WebPack that doesn't getting the enums initialized\n    // quite fast enough to be declared statically.\n    const { TimingEnum } = Enums;\n\n    IMAGE_TIMING_KEYS.push(\n      TimingEnum.DISPLAY_SETS_TO_ALL_IMAGES,\n      TimingEnum.DISPLAY_SETS_TO_FIRST_IMAGE,\n      TimingEnum.STUDY_TO_FIRST_IMAGE,\n    );\n  }\n\n  if (!IMAGE_TIMING_KEYS.find(key => log.timingKeys[key])) {\n    return;\n  }\n  imageTiming.viewportsWaiting += 1;\n  element.addEventListener(EVENTS.IMAGE_RENDERED, imageRenderedListener);\n}\n\nfunction imageRenderedListener(evt) {\n  if (evt.detail.viewportStatus === 'preRender') {\n    return;\n  }\n  const { TimingEnum } = Enums;\n  log.timeEnd(TimingEnum.DISPLAY_SETS_TO_FIRST_IMAGE);\n  log.timeEnd(TimingEnum.STUDY_TO_FIRST_IMAGE);\n  log.timeEnd(TimingEnum.SCRIPT_TO_VIEW);\n  imageTiming.viewportsWaiting -= 1;\n  evt.detail.element.removeEventListener(EVENTS.IMAGE_RENDERED, imageRenderedListener);\n  if (!imageTiming.viewportsWaiting) {\n    log.timeEnd(TimingEnum.DISPLAY_SETS_TO_ALL_IMAGES);\n  }\n}\n","const colormaps = [\n  {\n    ColorSpace: 'RGB',\n    Name: 'Grayscale',\n    NanColor: [1, 0, 0],\n    RGBPoints: [0, 0, 0, 0, 1, 1, 1, 1],\n    description: 'Grayscale',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'X Ray',\n    NanColor: [1, 0, 0],\n    RGBPoints: [0, 1, 1, 1, 1, 0, 0, 0],\n    description: 'X Ray',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'Isodose',\n    NanColor: [1, 0, 0],\n    RGBPoints: [\n      0, 0, 1, 0, 0.1, 0.5, 1, 0, 0.2, 1, 1, 0, 0.3, 1, 0.66, 0, 0.4, 1, 0.33, 0, 0.5, 1, 0, 0,\n    ],\n    description: 'Isodose',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'hsv',\n    RGBPoints: [\n      -1, 1, 0, 0, -0.666666, 1, 0, 1, -0.333333, 0, 0, 1, 0, 0, 1, 1, 0.33333, 0, 1, 0, 0.66666, 1,\n      1, 0, 1, 1, 0, 0,\n    ],\n    description: 'HSV',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'hot_iron',\n    RGBPoints: [\n      0.0, 0.0039215686, 0.0039215686, 0.0156862745, 0.00392156862745098, 0.0039215686,\n      0.0039215686, 0.0156862745, 0.00784313725490196, 0.0039215686, 0.0039215686, 0.031372549,\n      0.011764705882352941, 0.0039215686, 0.0039215686, 0.0470588235, 0.01568627450980392,\n      0.0039215686, 0.0039215686, 0.062745098, 0.0196078431372549, 0.0039215686, 0.0039215686,\n      0.0784313725, 0.023529411764705882, 0.0039215686, 0.0039215686, 0.0941176471,\n      0.027450980392156862, 0.0039215686, 0.0039215686, 0.1098039216, 0.03137254901960784,\n      0.0039215686, 0.0039215686, 0.1254901961, 0.03529411764705882, 0.0039215686, 0.0039215686,\n      0.1411764706, 0.0392156862745098, 0.0039215686, 0.0039215686, 0.1568627451,\n      0.043137254901960784, 0.0039215686, 0.0039215686, 0.1725490196, 0.047058823529411764,\n      0.0039215686, 0.0039215686, 0.1882352941, 0.050980392156862744, 0.0039215686, 0.0039215686,\n      0.2039215686, 0.054901960784313725, 0.0039215686, 0.0039215686, 0.2196078431,\n      0.05882352941176471, 0.0039215686, 0.0039215686, 0.2352941176, 0.06274509803921569,\n      0.0039215686, 0.0039215686, 0.2509803922, 0.06666666666666667, 0.0039215686, 0.0039215686,\n      0.262745098, 0.07058823529411765, 0.0039215686, 0.0039215686, 0.2784313725,\n      0.07450980392156863, 0.0039215686, 0.0039215686, 0.2941176471, 0.0784313725490196,\n      0.0039215686, 0.0039215686, 0.3098039216, 0.08235294117647059, 0.0039215686, 0.0039215686,\n      0.3254901961, 0.08627450980392157, 0.0039215686, 0.0039215686, 0.3411764706,\n      0.09019607843137255, 0.0039215686, 0.0039215686, 0.3568627451, 0.09411764705882353,\n      0.0039215686, 0.0039215686, 0.3725490196, 0.09803921568627451, 0.0039215686, 0.0039215686,\n      0.3882352941, 0.10196078431372549, 0.0039215686, 0.0039215686, 0.4039215686,\n      0.10588235294117647, 0.0039215686, 0.0039215686, 0.4196078431, 0.10980392156862745,\n      0.0039215686, 0.0039215686, 0.4352941176, 0.11372549019607843, 0.0039215686, 0.0039215686,\n      0.4509803922, 0.11764705882352942, 0.0039215686, 0.0039215686, 0.4666666667,\n      0.12156862745098039, 0.0039215686, 0.0039215686, 0.4823529412, 0.12549019607843137,\n      0.0039215686, 0.0039215686, 0.4980392157, 0.12941176470588237, 0.0039215686, 0.0039215686,\n      0.5137254902, 0.13333333333333333, 0.0039215686, 0.0039215686, 0.5294117647,\n      0.13725490196078433, 0.0039215686, 0.0039215686, 0.5450980392, 0.1411764705882353,\n      0.0039215686, 0.0039215686, 0.5607843137, 0.1450980392156863, 0.0039215686, 0.0039215686,\n      0.5764705882, 0.14901960784313725, 0.0039215686, 0.0039215686, 0.5921568627,\n      0.15294117647058825, 0.0039215686, 0.0039215686, 0.6078431373, 0.1568627450980392,\n      0.0039215686, 0.0039215686, 0.6235294118, 0.1607843137254902, 0.0039215686, 0.0039215686,\n      0.6392156863, 0.16470588235294117, 0.0039215686, 0.0039215686, 0.6549019608,\n      0.16862745098039217, 0.0039215686, 0.0039215686, 0.6705882353, 0.17254901960784313,\n      0.0039215686, 0.0039215686, 0.6862745098, 0.17647058823529413, 0.0039215686, 0.0039215686,\n      0.7019607843, 0.1803921568627451, 0.0039215686, 0.0039215686, 0.7176470588,\n      0.1843137254901961, 0.0039215686, 0.0039215686, 0.7333333333, 0.18823529411764706,\n      0.0039215686, 0.0039215686, 0.7490196078, 0.19215686274509805, 0.0039215686, 0.0039215686,\n      0.7607843137, 0.19607843137254902, 0.0039215686, 0.0039215686, 0.7764705882, 0.2,\n      0.0039215686, 0.0039215686, 0.7921568627, 0.20392156862745098, 0.0039215686, 0.0039215686,\n      0.8078431373, 0.20784313725490197, 0.0039215686, 0.0039215686, 0.8235294118,\n      0.21176470588235294, 0.0039215686, 0.0039215686, 0.8392156863, 0.21568627450980393,\n      0.0039215686, 0.0039215686, 0.8549019608, 0.2196078431372549, 0.0039215686, 0.0039215686,\n      0.8705882353, 0.2235294117647059, 0.0039215686, 0.0039215686, 0.8862745098,\n      0.22745098039215686, 0.0039215686, 0.0039215686, 0.9019607843, 0.23137254901960785,\n      0.0039215686, 0.0039215686, 0.9176470588, 0.23529411764705885, 0.0039215686, 0.0039215686,\n      0.9333333333, 0.23921568627450984, 0.0039215686, 0.0039215686, 0.9490196078,\n      0.24313725490196078, 0.0039215686, 0.0039215686, 0.9647058824, 0.24705882352941178,\n      0.0039215686, 0.0039215686, 0.9803921569, 0.25098039215686274, 0.0039215686, 0.0039215686,\n      0.9960784314, 0.2549019607843137, 0.0039215686, 0.0039215686, 0.9960784314,\n      0.25882352941176473, 0.0156862745, 0.0039215686, 0.9803921569, 0.2627450980392157,\n      0.031372549, 0.0039215686, 0.9647058824, 0.26666666666666666, 0.0470588235, 0.0039215686,\n      0.9490196078, 0.27058823529411763, 0.062745098, 0.0039215686, 0.9333333333,\n      0.27450980392156865, 0.0784313725, 0.0039215686, 0.9176470588, 0.2784313725490196,\n      0.0941176471, 0.0039215686, 0.9019607843, 0.2823529411764706, 0.1098039216, 0.0039215686,\n      0.8862745098, 0.28627450980392155, 0.1254901961, 0.0039215686, 0.8705882353,\n      0.2901960784313726, 0.1411764706, 0.0039215686, 0.8549019608, 0.29411764705882354,\n      0.1568627451, 0.0039215686, 0.8392156863, 0.2980392156862745, 0.1725490196, 0.0039215686,\n      0.8235294118, 0.30196078431372547, 0.1882352941, 0.0039215686, 0.8078431373,\n      0.3058823529411765, 0.2039215686, 0.0039215686, 0.7921568627, 0.30980392156862746,\n      0.2196078431, 0.0039215686, 0.7764705882, 0.3137254901960784, 0.2352941176, 0.0039215686,\n      0.7607843137, 0.3176470588235294, 0.2509803922, 0.0039215686, 0.7490196078,\n      0.3215686274509804, 0.262745098, 0.0039215686, 0.7333333333, 0.3254901960784314, 0.2784313725,\n      0.0039215686, 0.7176470588, 0.32941176470588235, 0.2941176471, 0.0039215686, 0.7019607843,\n      0.3333333333333333, 0.3098039216, 0.0039215686, 0.6862745098, 0.33725490196078434,\n      0.3254901961, 0.0039215686, 0.6705882353, 0.3411764705882353, 0.3411764706, 0.0039215686,\n      0.6549019608, 0.34509803921568627, 0.3568627451, 0.0039215686, 0.6392156863,\n      0.34901960784313724, 0.3725490196, 0.0039215686, 0.6235294118, 0.35294117647058826,\n      0.3882352941, 0.0039215686, 0.6078431373, 0.3568627450980392, 0.4039215686, 0.0039215686,\n      0.5921568627, 0.3607843137254902, 0.4196078431, 0.0039215686, 0.5764705882,\n      0.36470588235294116, 0.4352941176, 0.0039215686, 0.5607843137, 0.3686274509803922,\n      0.4509803922, 0.0039215686, 0.5450980392, 0.37254901960784315, 0.4666666667, 0.0039215686,\n      0.5294117647, 0.3764705882352941, 0.4823529412, 0.0039215686, 0.5137254902,\n      0.3803921568627451, 0.4980392157, 0.0039215686, 0.4980392157, 0.3843137254901961,\n      0.5137254902, 0.0039215686, 0.4823529412, 0.38823529411764707, 0.5294117647, 0.0039215686,\n      0.4666666667, 0.39215686274509803, 0.5450980392, 0.0039215686, 0.4509803922,\n      0.396078431372549, 0.5607843137, 0.0039215686, 0.4352941176, 0.4, 0.5764705882, 0.0039215686,\n      0.4196078431, 0.403921568627451, 0.5921568627, 0.0039215686, 0.4039215686,\n      0.40784313725490196, 0.6078431373, 0.0039215686, 0.3882352941, 0.4117647058823529,\n      0.6235294118, 0.0039215686, 0.3725490196, 0.41568627450980394, 0.6392156863, 0.0039215686,\n      0.3568627451, 0.4196078431372549, 0.6549019608, 0.0039215686, 0.3411764706,\n      0.4235294117647059, 0.6705882353, 0.0039215686, 0.3254901961, 0.42745098039215684,\n      0.6862745098, 0.0039215686, 0.3098039216, 0.43137254901960786, 0.7019607843, 0.0039215686,\n      0.2941176471, 0.43529411764705883, 0.7176470588, 0.0039215686, 0.2784313725,\n      0.4392156862745098, 0.7333333333, 0.0039215686, 0.262745098, 0.44313725490196076,\n      0.7490196078, 0.0039215686, 0.2509803922, 0.4470588235294118, 0.7607843137, 0.0039215686,\n      0.2352941176, 0.45098039215686275, 0.7764705882, 0.0039215686, 0.2196078431,\n      0.4549019607843137, 0.7921568627, 0.0039215686, 0.2039215686, 0.4588235294117647,\n      0.8078431373, 0.0039215686, 0.1882352941, 0.4627450980392157, 0.8235294118, 0.0039215686,\n      0.1725490196, 0.4666666666666667, 0.8392156863, 0.0039215686, 0.1568627451,\n      0.4705882352941177, 0.8549019608, 0.0039215686, 0.1411764706, 0.4745098039215686,\n      0.8705882353, 0.0039215686, 0.1254901961, 0.4784313725490197, 0.8862745098, 0.0039215686,\n      0.1098039216, 0.48235294117647065, 0.9019607843, 0.0039215686, 0.0941176471,\n      0.48627450980392156, 0.9176470588, 0.0039215686, 0.0784313725, 0.49019607843137253,\n      0.9333333333, 0.0039215686, 0.062745098, 0.49411764705882355, 0.9490196078, 0.0039215686,\n      0.0470588235, 0.4980392156862745, 0.9647058824, 0.0039215686, 0.031372549, 0.5019607843137255,\n      0.9803921569, 0.0039215686, 0.0156862745, 0.5058823529411764, 0.9960784314, 0.0039215686,\n      0.0039215686, 0.5098039215686274, 0.9960784314, 0.0156862745, 0.0039215686,\n      0.5137254901960784, 0.9960784314, 0.031372549, 0.0039215686, 0.5176470588235295, 0.9960784314,\n      0.0470588235, 0.0039215686, 0.5215686274509804, 0.9960784314, 0.062745098, 0.0039215686,\n      0.5254901960784314, 0.9960784314, 0.0784313725, 0.0039215686, 0.5294117647058824,\n      0.9960784314, 0.0941176471, 0.0039215686, 0.5333333333333333, 0.9960784314, 0.1098039216,\n      0.0039215686, 0.5372549019607843, 0.9960784314, 0.1254901961, 0.0039215686,\n      0.5411764705882353, 0.9960784314, 0.1411764706, 0.0039215686, 0.5450980392156862,\n      0.9960784314, 0.1568627451, 0.0039215686, 0.5490196078431373, 0.9960784314, 0.1725490196,\n      0.0039215686, 0.5529411764705883, 0.9960784314, 0.1882352941, 0.0039215686,\n      0.5568627450980392, 0.9960784314, 0.2039215686, 0.0039215686, 0.5607843137254902,\n      0.9960784314, 0.2196078431, 0.0039215686, 0.5647058823529412, 0.9960784314, 0.2352941176,\n      0.0039215686, 0.5686274509803921, 0.9960784314, 0.2509803922, 0.0039215686,\n      0.5725490196078431, 0.9960784314, 0.262745098, 0.0039215686, 0.5764705882352941, 0.9960784314,\n      0.2784313725, 0.0039215686, 0.5803921568627451, 0.9960784314, 0.2941176471, 0.0039215686,\n      0.5843137254901961, 0.9960784314, 0.3098039216, 0.0039215686, 0.5882352941176471,\n      0.9960784314, 0.3254901961, 0.0039215686, 0.592156862745098, 0.9960784314, 0.3411764706,\n      0.0039215686, 0.596078431372549, 0.9960784314, 0.3568627451, 0.0039215686, 0.6, 0.9960784314,\n      0.3725490196, 0.0039215686, 0.6039215686274509, 0.9960784314, 0.3882352941, 0.0039215686,\n      0.6078431372549019, 0.9960784314, 0.4039215686, 0.0039215686, 0.611764705882353, 0.9960784314,\n      0.4196078431, 0.0039215686, 0.615686274509804, 0.9960784314, 0.4352941176, 0.0039215686,\n      0.6196078431372549, 0.9960784314, 0.4509803922, 0.0039215686, 0.6235294117647059,\n      0.9960784314, 0.4666666667, 0.0039215686, 0.6274509803921569, 0.9960784314, 0.4823529412,\n      0.0039215686, 0.6313725490196078, 0.9960784314, 0.4980392157, 0.0039215686,\n      0.6352941176470588, 0.9960784314, 0.5137254902, 0.0039215686, 0.6392156862745098,\n      0.9960784314, 0.5294117647, 0.0039215686, 0.6431372549019608, 0.9960784314, 0.5450980392,\n      0.0039215686, 0.6470588235294118, 0.9960784314, 0.5607843137, 0.0039215686,\n      0.6509803921568628, 0.9960784314, 0.5764705882, 0.0039215686, 0.6549019607843137,\n      0.9960784314, 0.5921568627, 0.0039215686, 0.6588235294117647, 0.9960784314, 0.6078431373,\n      0.0039215686, 0.6627450980392157, 0.9960784314, 0.6235294118, 0.0039215686,\n      0.6666666666666666, 0.9960784314, 0.6392156863, 0.0039215686, 0.6705882352941176,\n      0.9960784314, 0.6549019608, 0.0039215686, 0.6745098039215687, 0.9960784314, 0.6705882353,\n      0.0039215686, 0.6784313725490196, 0.9960784314, 0.6862745098, 0.0039215686,\n      0.6823529411764706, 0.9960784314, 0.7019607843, 0.0039215686, 0.6862745098039216,\n      0.9960784314, 0.7176470588, 0.0039215686, 0.6901960784313725, 0.9960784314, 0.7333333333,\n      0.0039215686, 0.6941176470588235, 0.9960784314, 0.7490196078, 0.0039215686,\n      0.6980392156862745, 0.9960784314, 0.7607843137, 0.0039215686, 0.7019607843137254,\n      0.9960784314, 0.7764705882, 0.0039215686, 0.7058823529411765, 0.9960784314, 0.7921568627,\n      0.0039215686, 0.7098039215686275, 0.9960784314, 0.8078431373, 0.0039215686,\n      0.7137254901960784, 0.9960784314, 0.8235294118, 0.0039215686, 0.7176470588235294,\n      0.9960784314, 0.8392156863, 0.0039215686, 0.7215686274509804, 0.9960784314, 0.8549019608,\n      0.0039215686, 0.7254901960784313, 0.9960784314, 0.8705882353, 0.0039215686,\n      0.7294117647058823, 0.9960784314, 0.8862745098, 0.0039215686, 0.7333333333333333,\n      0.9960784314, 0.9019607843, 0.0039215686, 0.7372549019607844, 0.9960784314, 0.9176470588,\n      0.0039215686, 0.7411764705882353, 0.9960784314, 0.9333333333, 0.0039215686,\n      0.7450980392156863, 0.9960784314, 0.9490196078, 0.0039215686, 0.7490196078431373,\n      0.9960784314, 0.9647058824, 0.0039215686, 0.7529411764705882, 0.9960784314, 0.9803921569,\n      0.0039215686, 0.7568627450980392, 0.9960784314, 0.9960784314, 0.0039215686,\n      0.7607843137254902, 0.9960784314, 0.9960784314, 0.0196078431, 0.7647058823529411,\n      0.9960784314, 0.9960784314, 0.0352941176, 0.7686274509803922, 0.9960784314, 0.9960784314,\n      0.0509803922, 0.7725490196078432, 0.9960784314, 0.9960784314, 0.0666666667,\n      0.7764705882352941, 0.9960784314, 0.9960784314, 0.0823529412, 0.7803921568627451,\n      0.9960784314, 0.9960784314, 0.0980392157, 0.7843137254901961, 0.9960784314, 0.9960784314,\n      0.1137254902, 0.788235294117647, 0.9960784314, 0.9960784314, 0.1294117647, 0.792156862745098,\n      0.9960784314, 0.9960784314, 0.1450980392, 0.796078431372549, 0.9960784314, 0.9960784314,\n      0.1607843137, 0.8, 0.9960784314, 0.9960784314, 0.1764705882, 0.803921568627451, 0.9960784314,\n      0.9960784314, 0.1921568627, 0.807843137254902, 0.9960784314, 0.9960784314, 0.2078431373,\n      0.8117647058823529, 0.9960784314, 0.9960784314, 0.2235294118, 0.8156862745098039,\n      0.9960784314, 0.9960784314, 0.2392156863, 0.8196078431372549, 0.9960784314, 0.9960784314,\n      0.2509803922, 0.8235294117647058, 0.9960784314, 0.9960784314, 0.2666666667,\n      0.8274509803921568, 0.9960784314, 0.9960784314, 0.2823529412, 0.8313725490196079,\n      0.9960784314, 0.9960784314, 0.2980392157, 0.8352941176470589, 0.9960784314, 0.9960784314,\n      0.3137254902, 0.8392156862745098, 0.9960784314, 0.9960784314, 0.3333333333,\n      0.8431372549019608, 0.9960784314, 0.9960784314, 0.3490196078, 0.8470588235294118,\n      0.9960784314, 0.9960784314, 0.3647058824, 0.8509803921568627, 0.9960784314, 0.9960784314,\n      0.3803921569, 0.8549019607843137, 0.9960784314, 0.9960784314, 0.3960784314,\n      0.8588235294117647, 0.9960784314, 0.9960784314, 0.4117647059, 0.8627450980392157,\n      0.9960784314, 0.9960784314, 0.4274509804, 0.8666666666666667, 0.9960784314, 0.9960784314,\n      0.4431372549, 0.8705882352941177, 0.9960784314, 0.9960784314, 0.4588235294,\n      0.8745098039215686, 0.9960784314, 0.9960784314, 0.4745098039, 0.8784313725490196,\n      0.9960784314, 0.9960784314, 0.4901960784, 0.8823529411764706, 0.9960784314, 0.9960784314,\n      0.5058823529, 0.8862745098039215, 0.9960784314, 0.9960784314, 0.5215686275,\n      0.8901960784313725, 0.9960784314, 0.9960784314, 0.537254902, 0.8941176470588236, 0.9960784314,\n      0.9960784314, 0.5529411765, 0.8980392156862745, 0.9960784314, 0.9960784314, 0.568627451,\n      0.9019607843137255, 0.9960784314, 0.9960784314, 0.5843137255, 0.9058823529411765,\n      0.9960784314, 0.9960784314, 0.6, 0.9098039215686274, 0.9960784314, 0.9960784314, 0.6156862745,\n      0.9137254901960784, 0.9960784314, 0.9960784314, 0.631372549, 0.9176470588235294, 0.9960784314,\n      0.9960784314, 0.6470588235, 0.9215686274509803, 0.9960784314, 0.9960784314, 0.6666666667,\n      0.9254901960784314, 0.9960784314, 0.9960784314, 0.6823529412, 0.9294117647058824,\n      0.9960784314, 0.9960784314, 0.6980392157, 0.9333333333333333, 0.9960784314, 0.9960784314,\n      0.7137254902, 0.9372549019607843, 0.9960784314, 0.9960784314, 0.7294117647,\n      0.9411764705882354, 0.9960784314, 0.9960784314, 0.7450980392, 0.9450980392156864,\n      0.9960784314, 0.9960784314, 0.7568627451, 0.9490196078431372, 0.9960784314, 0.9960784314,\n      0.7725490196, 0.9529411764705882, 0.9960784314, 0.9960784314, 0.7882352941,\n      0.9568627450980394, 0.9960784314, 0.9960784314, 0.8039215686, 0.9607843137254903,\n      0.9960784314, 0.9960784314, 0.8196078431, 0.9647058823529413, 0.9960784314, 0.9960784314,\n      0.8352941176, 0.9686274509803922, 0.9960784314, 0.9960784314, 0.8509803922,\n      0.9725490196078431, 0.9960784314, 0.9960784314, 0.8666666667, 0.9764705882352941,\n      0.9960784314, 0.9960784314, 0.8823529412, 0.9803921568627451, 0.9960784314, 0.9960784314,\n      0.8980392157, 0.984313725490196, 0.9960784314, 0.9960784314, 0.9137254902, 0.9882352941176471,\n      0.9960784314, 0.9960784314, 0.9294117647, 0.9921568627450981, 0.9960784314, 0.9960784314,\n      0.9450980392, 0.996078431372549, 0.9960784314, 0.9960784314, 0.9607843137, 1.0, 0.9960784314,\n      0.9960784314, 0.9607843137,\n    ],\n    description: 'Hot Iron',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'red_hot',\n    RGBPoints: [\n      0.0, 0.0, 0.0, 0.0, 0.00392156862745098, 0.0, 0.0, 0.0, 0.00784313725490196, 0.0, 0.0, 0.0,\n      0.011764705882352941, 0.0, 0.0, 0.0, 0.01568627450980392, 0.0039215686, 0.0039215686,\n      0.0039215686, 0.0196078431372549, 0.0039215686, 0.0039215686, 0.0039215686,\n      0.023529411764705882, 0.0039215686, 0.0039215686, 0.0039215686, 0.027450980392156862,\n      0.0039215686, 0.0039215686, 0.0039215686, 0.03137254901960784, 0.0039215686, 0.0039215686,\n      0.0039215686, 0.03529411764705882, 0.0156862745, 0.0, 0.0, 0.0392156862745098, 0.0274509804,\n      0.0, 0.0, 0.043137254901960784, 0.0392156863, 0.0, 0.0, 0.047058823529411764, 0.0509803922,\n      0.0, 0.0, 0.050980392156862744, 0.062745098, 0.0, 0.0, 0.054901960784313725, 0.0784313725,\n      0.0, 0.0, 0.05882352941176471, 0.0901960784, 0.0, 0.0, 0.06274509803921569, 0.1058823529, 0.0,\n      0.0, 0.06666666666666667, 0.1176470588, 0.0, 0.0, 0.07058823529411765, 0.1294117647, 0.0, 0.0,\n      0.07450980392156863, 0.1411764706, 0.0, 0.0, 0.0784313725490196, 0.1529411765, 0.0, 0.0,\n      0.08235294117647059, 0.1647058824, 0.0, 0.0, 0.08627450980392157, 0.1764705882, 0.0, 0.0,\n      0.09019607843137255, 0.1882352941, 0.0, 0.0, 0.09411764705882353, 0.2039215686, 0.0, 0.0,\n      0.09803921568627451, 0.2156862745, 0.0, 0.0, 0.10196078431372549, 0.2274509804, 0.0, 0.0,\n      0.10588235294117647, 0.2392156863, 0.0, 0.0, 0.10980392156862745, 0.2549019608, 0.0, 0.0,\n      0.11372549019607843, 0.2666666667, 0.0, 0.0, 0.11764705882352942, 0.2784313725, 0.0, 0.0,\n      0.12156862745098039, 0.2901960784, 0.0, 0.0, 0.12549019607843137, 0.3058823529, 0.0, 0.0,\n      0.12941176470588237, 0.3176470588, 0.0, 0.0, 0.13333333333333333, 0.3294117647, 0.0, 0.0,\n      0.13725490196078433, 0.3411764706, 0.0, 0.0, 0.1411764705882353, 0.3529411765, 0.0, 0.0,\n      0.1450980392156863, 0.3647058824, 0.0, 0.0, 0.14901960784313725, 0.3764705882, 0.0, 0.0,\n      0.15294117647058825, 0.3882352941, 0.0, 0.0, 0.1568627450980392, 0.4039215686, 0.0, 0.0,\n      0.1607843137254902, 0.4156862745, 0.0, 0.0, 0.16470588235294117, 0.431372549, 0.0, 0.0,\n      0.16862745098039217, 0.4431372549, 0.0, 0.0, 0.17254901960784313, 0.4588235294, 0.0, 0.0,\n      0.17647058823529413, 0.4705882353, 0.0, 0.0, 0.1803921568627451, 0.4823529412, 0.0, 0.0,\n      0.1843137254901961, 0.4941176471, 0.0, 0.0, 0.18823529411764706, 0.5098039216, 0.0, 0.0,\n      0.19215686274509805, 0.5215686275, 0.0, 0.0, 0.19607843137254902, 0.5333333333, 0.0, 0.0, 0.2,\n      0.5450980392, 0.0, 0.0, 0.20392156862745098, 0.5568627451, 0.0, 0.0, 0.20784313725490197,\n      0.568627451, 0.0, 0.0, 0.21176470588235294, 0.5803921569, 0.0, 0.0, 0.21568627450980393,\n      0.5921568627, 0.0, 0.0, 0.2196078431372549, 0.6078431373, 0.0, 0.0, 0.2235294117647059,\n      0.6196078431, 0.0, 0.0, 0.22745098039215686, 0.631372549, 0.0, 0.0, 0.23137254901960785,\n      0.6431372549, 0.0, 0.0, 0.23529411764705885, 0.6588235294, 0.0, 0.0, 0.23921568627450984,\n      0.6705882353, 0.0, 0.0, 0.24313725490196078, 0.6823529412, 0.0, 0.0, 0.24705882352941178,\n      0.6941176471, 0.0, 0.0, 0.25098039215686274, 0.7098039216, 0.0, 0.0, 0.2549019607843137,\n      0.7215686275, 0.0, 0.0, 0.25882352941176473, 0.7333333333, 0.0, 0.0, 0.2627450980392157,\n      0.7450980392, 0.0, 0.0, 0.26666666666666666, 0.7568627451, 0.0, 0.0, 0.27058823529411763,\n      0.768627451, 0.0, 0.0, 0.27450980392156865, 0.7843137255, 0.0, 0.0, 0.2784313725490196,\n      0.7960784314, 0.0, 0.0, 0.2823529411764706, 0.8117647059, 0.0, 0.0, 0.28627450980392155,\n      0.8235294118, 0.0, 0.0, 0.2901960784313726, 0.8352941176, 0.0, 0.0, 0.29411764705882354,\n      0.8470588235, 0.0, 0.0, 0.2980392156862745, 0.862745098, 0.0, 0.0, 0.30196078431372547,\n      0.8745098039, 0.0, 0.0, 0.3058823529411765, 0.8862745098, 0.0, 0.0, 0.30980392156862746,\n      0.8980392157, 0.0, 0.0, 0.3137254901960784, 0.9137254902, 0.0, 0.0, 0.3176470588235294,\n      0.9254901961, 0.0, 0.0, 0.3215686274509804, 0.937254902, 0.0, 0.0, 0.3254901960784314,\n      0.9490196078, 0.0, 0.0, 0.32941176470588235, 0.9607843137, 0.0, 0.0, 0.3333333333333333,\n      0.968627451, 0.0, 0.0, 0.33725490196078434, 0.9803921569, 0.0039215686, 0.0,\n      0.3411764705882353, 0.9882352941, 0.0078431373, 0.0, 0.34509803921568627, 1.0, 0.0117647059,\n      0.0, 0.34901960784313724, 1.0, 0.0235294118, 0.0, 0.35294117647058826, 1.0, 0.0352941176, 0.0,\n      0.3568627450980392, 1.0, 0.0470588235, 0.0, 0.3607843137254902, 1.0, 0.062745098, 0.0,\n      0.36470588235294116, 1.0, 0.0745098039, 0.0, 0.3686274509803922, 1.0, 0.0862745098, 0.0,\n      0.37254901960784315, 1.0, 0.0980392157, 0.0, 0.3764705882352941, 1.0, 0.1137254902, 0.0,\n      0.3803921568627451, 1.0, 0.1254901961, 0.0, 0.3843137254901961, 1.0, 0.137254902, 0.0,\n      0.38823529411764707, 1.0, 0.1490196078, 0.0, 0.39215686274509803, 1.0, 0.1647058824, 0.0,\n      0.396078431372549, 1.0, 0.1764705882, 0.0, 0.4, 1.0, 0.1882352941, 0.0, 0.403921568627451,\n      1.0, 0.2, 0.0, 0.40784313725490196, 1.0, 0.2156862745, 0.0, 0.4117647058823529, 1.0,\n      0.2274509804, 0.0, 0.41568627450980394, 1.0, 0.2392156863, 0.0, 0.4196078431372549, 1.0,\n      0.2509803922, 0.0, 0.4235294117647059, 1.0, 0.2666666667, 0.0, 0.42745098039215684, 1.0,\n      0.2784313725, 0.0, 0.43137254901960786, 1.0, 0.2901960784, 0.0, 0.43529411764705883, 1.0,\n      0.3019607843, 0.0, 0.4392156862745098, 1.0, 0.3176470588, 0.0, 0.44313725490196076, 1.0,\n      0.3294117647, 0.0, 0.4470588235294118, 1.0, 0.3411764706, 0.0, 0.45098039215686275, 1.0,\n      0.3529411765, 0.0, 0.4549019607843137, 1.0, 0.368627451, 0.0, 0.4588235294117647, 1.0,\n      0.3803921569, 0.0, 0.4627450980392157, 1.0, 0.3921568627, 0.0, 0.4666666666666667, 1.0,\n      0.4039215686, 0.0, 0.4705882352941177, 1.0, 0.4156862745, 0.0, 0.4745098039215686, 1.0,\n      0.4274509804, 0.0, 0.4784313725490197, 1.0, 0.4392156863, 0.0, 0.48235294117647065, 1.0,\n      0.4509803922, 0.0, 0.48627450980392156, 1.0, 0.4666666667, 0.0, 0.49019607843137253, 1.0,\n      0.4784313725, 0.0, 0.49411764705882355, 1.0, 0.4941176471, 0.0, 0.4980392156862745, 1.0,\n      0.5058823529, 0.0, 0.5019607843137255, 1.0, 0.5215686275, 0.0, 0.5058823529411764, 1.0,\n      0.5333333333, 0.0, 0.5098039215686274, 1.0, 0.5450980392, 0.0, 0.5137254901960784, 1.0,\n      0.5568627451, 0.0, 0.5176470588235295, 1.0, 0.568627451, 0.0, 0.5215686274509804, 1.0,\n      0.5803921569, 0.0, 0.5254901960784314, 1.0, 0.5921568627, 0.0, 0.5294117647058824, 1.0,\n      0.6039215686, 0.0, 0.5333333333333333, 1.0, 0.6196078431, 0.0, 0.5372549019607843, 1.0,\n      0.631372549, 0.0, 0.5411764705882353, 1.0, 0.6431372549, 0.0, 0.5450980392156862, 1.0,\n      0.6549019608, 0.0, 0.5490196078431373, 1.0, 0.6705882353, 0.0, 0.5529411764705883, 1.0,\n      0.6823529412, 0.0, 0.5568627450980392, 1.0, 0.6941176471, 0.0, 0.5607843137254902, 1.0,\n      0.7058823529, 0.0, 0.5647058823529412, 1.0, 0.7215686275, 0.0, 0.5686274509803921, 1.0,\n      0.7333333333, 0.0, 0.5725490196078431, 1.0, 0.7450980392, 0.0, 0.5764705882352941, 1.0,\n      0.7568627451, 0.0, 0.5803921568627451, 1.0, 0.7725490196, 0.0, 0.5843137254901961, 1.0,\n      0.7843137255, 0.0, 0.5882352941176471, 1.0, 0.7960784314, 0.0, 0.592156862745098, 1.0,\n      0.8078431373, 0.0, 0.596078431372549, 1.0, 0.8196078431, 0.0, 0.6, 1.0, 0.831372549, 0.0,\n      0.6039215686274509, 1.0, 0.8470588235, 0.0, 0.6078431372549019, 1.0, 0.8588235294, 0.0,\n      0.611764705882353, 1.0, 0.8745098039, 0.0, 0.615686274509804, 1.0, 0.8862745098, 0.0,\n      0.6196078431372549, 1.0, 0.8980392157, 0.0, 0.6235294117647059, 1.0, 0.9098039216, 0.0,\n      0.6274509803921569, 1.0, 0.9254901961, 0.0, 0.6313725490196078, 1.0, 0.937254902, 0.0,\n      0.6352941176470588, 1.0, 0.9490196078, 0.0, 0.6392156862745098, 1.0, 0.9607843137, 0.0,\n      0.6431372549019608, 1.0, 0.9764705882, 0.0, 0.6470588235294118, 1.0, 0.9803921569,\n      0.0039215686, 0.6509803921568628, 1.0, 0.9882352941, 0.0117647059, 0.6549019607843137, 1.0,\n      0.9921568627, 0.0156862745, 0.6588235294117647, 1.0, 1.0, 0.0235294118, 0.6627450980392157,\n      1.0, 1.0, 0.0352941176, 0.6666666666666666, 1.0, 1.0, 0.0470588235, 0.6705882352941176, 1.0,\n      1.0, 0.0588235294, 0.6745098039215687, 1.0, 1.0, 0.0745098039, 0.6784313725490196, 1.0, 1.0,\n      0.0862745098, 0.6823529411764706, 1.0, 1.0, 0.0980392157, 0.6862745098039216, 1.0, 1.0,\n      0.1098039216, 0.6901960784313725, 1.0, 1.0, 0.1254901961, 0.6941176470588235, 1.0, 1.0,\n      0.137254902, 0.6980392156862745, 1.0, 1.0, 0.1490196078, 0.7019607843137254, 1.0, 1.0,\n      0.1607843137, 0.7058823529411765, 1.0, 1.0, 0.1764705882, 0.7098039215686275, 1.0, 1.0,\n      0.1882352941, 0.7137254901960784, 1.0, 1.0, 0.2, 0.7176470588235294, 1.0, 1.0, 0.2117647059,\n      0.7215686274509804, 1.0, 1.0, 0.2274509804, 0.7254901960784313, 1.0, 1.0, 0.2392156863,\n      0.7294117647058823, 1.0, 1.0, 0.2509803922, 0.7333333333333333, 1.0, 1.0, 0.262745098,\n      0.7372549019607844, 1.0, 1.0, 0.2784313725, 0.7411764705882353, 1.0, 1.0, 0.2901960784,\n      0.7450980392156863, 1.0, 1.0, 0.3019607843, 0.7490196078431373, 1.0, 1.0, 0.3137254902,\n      0.7529411764705882, 1.0, 1.0, 0.3294117647, 0.7568627450980392, 1.0, 1.0, 0.3411764706,\n      0.7607843137254902, 1.0, 1.0, 0.3529411765, 0.7647058823529411, 1.0, 1.0, 0.3647058824,\n      0.7686274509803922, 1.0, 1.0, 0.3803921569, 0.7725490196078432, 1.0, 1.0, 0.3921568627,\n      0.7764705882352941, 1.0, 1.0, 0.4039215686, 0.7803921568627451, 1.0, 1.0, 0.4156862745,\n      0.7843137254901961, 1.0, 1.0, 0.431372549, 0.788235294117647, 1.0, 1.0, 0.4431372549,\n      0.792156862745098, 1.0, 1.0, 0.4549019608, 0.796078431372549, 1.0, 1.0, 0.4666666667, 0.8,\n      1.0, 1.0, 0.4784313725, 0.803921568627451, 1.0, 1.0, 0.4901960784, 0.807843137254902, 1.0,\n      1.0, 0.5019607843, 0.8117647058823529, 1.0, 1.0, 0.5137254902, 0.8156862745098039, 1.0, 1.0,\n      0.5294117647, 0.8196078431372549, 1.0, 1.0, 0.5411764706, 0.8235294117647058, 1.0, 1.0,\n      0.5568627451, 0.8274509803921568, 1.0, 1.0, 0.568627451, 0.8313725490196079, 1.0, 1.0,\n      0.5843137255, 0.8352941176470589, 1.0, 1.0, 0.5960784314, 0.8392156862745098, 1.0, 1.0,\n      0.6078431373, 0.8431372549019608, 1.0, 1.0, 0.6196078431, 0.8470588235294118, 1.0, 1.0,\n      0.631372549, 0.8509803921568627, 1.0, 1.0, 0.6431372549, 0.8549019607843137, 1.0, 1.0,\n      0.6549019608, 0.8588235294117647, 1.0, 1.0, 0.6666666667, 0.8627450980392157, 1.0, 1.0,\n      0.6823529412, 0.8666666666666667, 1.0, 1.0, 0.6941176471, 0.8705882352941177, 1.0, 1.0,\n      0.7058823529, 0.8745098039215686, 1.0, 1.0, 0.7176470588, 0.8784313725490196, 1.0, 1.0,\n      0.7333333333, 0.8823529411764706, 1.0, 1.0, 0.7450980392, 0.8862745098039215, 1.0, 1.0,\n      0.7568627451, 0.8901960784313725, 1.0, 1.0, 0.768627451, 0.8941176470588236, 1.0, 1.0,\n      0.7843137255, 0.8980392156862745, 1.0, 1.0, 0.7960784314, 0.9019607843137255, 1.0, 1.0,\n      0.8078431373, 0.9058823529411765, 1.0, 1.0, 0.8196078431, 0.9098039215686274, 1.0, 1.0,\n      0.8352941176, 0.9137254901960784, 1.0, 1.0, 0.8470588235, 0.9176470588235294, 1.0, 1.0,\n      0.8588235294, 0.9215686274509803, 1.0, 1.0, 0.8705882353, 0.9254901960784314, 1.0, 1.0,\n      0.8823529412, 0.9294117647058824, 1.0, 1.0, 0.8941176471, 0.9333333333333333, 1.0, 1.0,\n      0.9098039216, 0.9372549019607843, 1.0, 1.0, 0.9215686275, 0.9411764705882354, 1.0, 1.0,\n      0.937254902, 0.9450980392156864, 1.0, 1.0, 0.9490196078, 0.9490196078431372, 1.0, 1.0,\n      0.9607843137, 0.9529411764705882, 1.0, 1.0, 0.9725490196, 0.9568627450980394, 1.0, 1.0,\n      0.9882352941, 0.9607843137254903, 1.0, 1.0, 0.9882352941, 0.9647058823529413, 1.0, 1.0,\n      0.9921568627, 0.9686274509803922, 1.0, 1.0, 0.9960784314, 0.9725490196078431, 1.0, 1.0, 1.0,\n      0.9764705882352941, 1.0, 1.0, 1.0, 0.9803921568627451, 1.0, 1.0, 1.0, 0.984313725490196, 1.0,\n      1.0, 1.0, 0.9882352941176471, 1.0, 1.0, 1.0, 0.9921568627450981, 1.0, 1.0, 1.0,\n      0.996078431372549, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n    ],\n    description: 'Red Hot',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 's_pet',\n    RGBPoints: [\n      0.0, 0.0156862745, 0.0039215686, 0.0156862745, 0.00392156862745098, 0.0156862745,\n      0.0039215686, 0.0156862745, 0.00784313725490196, 0.0274509804, 0.0039215686, 0.031372549,\n      0.011764705882352941, 0.0352941176, 0.0039215686, 0.0509803922, 0.01568627450980392,\n      0.0392156863, 0.0039215686, 0.0666666667, 0.0196078431372549, 0.0509803922, 0.0039215686,\n      0.0823529412, 0.023529411764705882, 0.062745098, 0.0039215686, 0.0980392157,\n      0.027450980392156862, 0.0705882353, 0.0039215686, 0.1176470588, 0.03137254901960784,\n      0.0745098039, 0.0039215686, 0.1333333333, 0.03529411764705882, 0.0862745098, 0.0039215686,\n      0.1490196078, 0.0392156862745098, 0.0980392157, 0.0039215686, 0.1647058824,\n      0.043137254901960784, 0.1058823529, 0.0039215686, 0.1843137255, 0.047058823529411764,\n      0.1098039216, 0.0039215686, 0.2, 0.050980392156862744, 0.1215686275, 0.0039215686,\n      0.2156862745, 0.054901960784313725, 0.1333333333, 0.0039215686, 0.231372549,\n      0.05882352941176471, 0.137254902, 0.0039215686, 0.2509803922, 0.06274509803921569,\n      0.1490196078, 0.0039215686, 0.262745098, 0.06666666666666667, 0.1607843137, 0.0039215686,\n      0.2784313725, 0.07058823529411765, 0.168627451, 0.0039215686, 0.2941176471,\n      0.07450980392156863, 0.1725490196, 0.0039215686, 0.3137254902, 0.0784313725490196,\n      0.1843137255, 0.0039215686, 0.3294117647, 0.08235294117647059, 0.1960784314, 0.0039215686,\n      0.3450980392, 0.08627450980392157, 0.2039215686, 0.0039215686, 0.3607843137,\n      0.09019607843137255, 0.2078431373, 0.0039215686, 0.3803921569, 0.09411764705882353,\n      0.2196078431, 0.0039215686, 0.3960784314, 0.09803921568627451, 0.231372549, 0.0039215686,\n      0.4117647059, 0.10196078431372549, 0.2392156863, 0.0039215686, 0.4274509804,\n      0.10588235294117647, 0.2431372549, 0.0039215686, 0.4470588235, 0.10980392156862745,\n      0.2509803922, 0.0039215686, 0.462745098, 0.11372549019607843, 0.262745098, 0.0039215686,\n      0.4784313725, 0.11764705882352942, 0.2666666667, 0.0039215686, 0.4980392157,\n      0.12156862745098039, 0.2666666667, 0.0039215686, 0.4980392157, 0.12549019607843137,\n      0.262745098, 0.0039215686, 0.5137254902, 0.12941176470588237, 0.2509803922, 0.0039215686,\n      0.5294117647, 0.13333333333333333, 0.2431372549, 0.0039215686, 0.5450980392,\n      0.13725490196078433, 0.2392156863, 0.0039215686, 0.5607843137, 0.1411764705882353,\n      0.231372549, 0.0039215686, 0.5764705882, 0.1450980392156863, 0.2196078431, 0.0039215686,\n      0.5921568627, 0.14901960784313725, 0.2078431373, 0.0039215686, 0.6078431373,\n      0.15294117647058825, 0.2039215686, 0.0039215686, 0.6235294118, 0.1568627450980392,\n      0.1960784314, 0.0039215686, 0.6392156863, 0.1607843137254902, 0.1843137255, 0.0039215686,\n      0.6549019608, 0.16470588235294117, 0.1725490196, 0.0039215686, 0.6705882353,\n      0.16862745098039217, 0.168627451, 0.0039215686, 0.6862745098, 0.17254901960784313,\n      0.1607843137, 0.0039215686, 0.7019607843, 0.17647058823529413, 0.1490196078, 0.0039215686,\n      0.7176470588, 0.1803921568627451, 0.137254902, 0.0039215686, 0.7333333333, 0.1843137254901961,\n      0.1333333333, 0.0039215686, 0.7490196078, 0.18823529411764706, 0.1215686275, 0.0039215686,\n      0.7607843137, 0.19215686274509805, 0.1098039216, 0.0039215686, 0.7764705882,\n      0.19607843137254902, 0.1058823529, 0.0039215686, 0.7921568627, 0.2, 0.0980392157,\n      0.0039215686, 0.8078431373, 0.20392156862745098, 0.0862745098, 0.0039215686, 0.8235294118,\n      0.20784313725490197, 0.0745098039, 0.0039215686, 0.8392156863, 0.21176470588235294,\n      0.0705882353, 0.0039215686, 0.8549019608, 0.21568627450980393, 0.062745098, 0.0039215686,\n      0.8705882353, 0.2196078431372549, 0.0509803922, 0.0039215686, 0.8862745098,\n      0.2235294117647059, 0.0392156863, 0.0039215686, 0.9019607843, 0.22745098039215686,\n      0.0352941176, 0.0039215686, 0.9176470588, 0.23137254901960785, 0.0274509804, 0.0039215686,\n      0.9333333333, 0.23529411764705885, 0.0156862745, 0.0039215686, 0.9490196078,\n      0.23921568627450984, 0.0078431373, 0.0039215686, 0.9647058824, 0.24313725490196078,\n      0.0039215686, 0.0039215686, 0.9960784314, 0.24705882352941178, 0.0039215686, 0.0039215686,\n      0.9960784314, 0.25098039215686274, 0.0039215686, 0.0196078431, 0.9647058824,\n      0.2549019607843137, 0.0039215686, 0.0392156863, 0.9490196078, 0.25882352941176473,\n      0.0039215686, 0.0549019608, 0.9333333333, 0.2627450980392157, 0.0039215686, 0.0745098039,\n      0.9176470588, 0.26666666666666666, 0.0039215686, 0.0901960784, 0.9019607843,\n      0.27058823529411763, 0.0039215686, 0.1098039216, 0.8862745098, 0.27450980392156865,\n      0.0039215686, 0.1254901961, 0.8705882353, 0.2784313725490196, 0.0039215686, 0.1450980392,\n      0.8549019608, 0.2823529411764706, 0.0039215686, 0.1607843137, 0.8392156863,\n      0.28627450980392155, 0.0039215686, 0.1803921569, 0.8235294118, 0.2901960784313726,\n      0.0039215686, 0.1960784314, 0.8078431373, 0.29411764705882354, 0.0039215686, 0.2156862745,\n      0.7921568627, 0.2980392156862745, 0.0039215686, 0.231372549, 0.7764705882,\n      0.30196078431372547, 0.0039215686, 0.2509803922, 0.7607843137, 0.3058823529411765,\n      0.0039215686, 0.262745098, 0.7490196078, 0.30980392156862746, 0.0039215686, 0.2823529412,\n      0.7333333333, 0.3137254901960784, 0.0039215686, 0.2980392157, 0.7176470588,\n      0.3176470588235294, 0.0039215686, 0.3176470588, 0.7019607843, 0.3215686274509804,\n      0.0039215686, 0.3333333333, 0.6862745098, 0.3254901960784314, 0.0039215686, 0.3529411765,\n      0.6705882353, 0.32941176470588235, 0.0039215686, 0.368627451, 0.6549019608,\n      0.3333333333333333, 0.0039215686, 0.3882352941, 0.6392156863, 0.33725490196078434,\n      0.0039215686, 0.4039215686, 0.6235294118, 0.3411764705882353, 0.0039215686, 0.4235294118,\n      0.6078431373, 0.34509803921568627, 0.0039215686, 0.4392156863, 0.5921568627,\n      0.34901960784313724, 0.0039215686, 0.4588235294, 0.5764705882, 0.35294117647058826,\n      0.0039215686, 0.4745098039, 0.5607843137, 0.3568627450980392, 0.0039215686, 0.4941176471,\n      0.5450980392, 0.3607843137254902, 0.0039215686, 0.5098039216, 0.5294117647,\n      0.36470588235294116, 0.0039215686, 0.5294117647, 0.5137254902, 0.3686274509803922,\n      0.0039215686, 0.5450980392, 0.4980392157, 0.37254901960784315, 0.0039215686, 0.5647058824,\n      0.4784313725, 0.3764705882352941, 0.0039215686, 0.5803921569, 0.462745098, 0.3803921568627451,\n      0.0039215686, 0.6, 0.4470588235, 0.3843137254901961, 0.0039215686, 0.6156862745, 0.4274509804,\n      0.38823529411764707, 0.0039215686, 0.6352941176, 0.4117647059, 0.39215686274509803,\n      0.0039215686, 0.6509803922, 0.3960784314, 0.396078431372549, 0.0039215686, 0.6705882353,\n      0.3803921569, 0.4, 0.0039215686, 0.6862745098, 0.3607843137, 0.403921568627451, 0.0039215686,\n      0.7058823529, 0.3450980392, 0.40784313725490196, 0.0039215686, 0.7215686275, 0.3294117647,\n      0.4117647058823529, 0.0039215686, 0.7411764706, 0.3137254902, 0.41568627450980394,\n      0.0039215686, 0.7529411765, 0.2941176471, 0.4196078431372549, 0.0039215686, 0.7960784314,\n      0.2784313725, 0.4235294117647059, 0.0039215686, 0.7960784314, 0.262745098,\n      0.42745098039215684, 0.0392156863, 0.8039215686, 0.2509803922, 0.43137254901960786,\n      0.0745098039, 0.8117647059, 0.231372549, 0.43529411764705883, 0.1098039216, 0.8196078431,\n      0.2156862745, 0.4392156862745098, 0.1450980392, 0.8274509804, 0.2, 0.44313725490196076,\n      0.1803921569, 0.8352941176, 0.1843137255, 0.4470588235294118, 0.2156862745, 0.8431372549,\n      0.1647058824, 0.45098039215686275, 0.2509803922, 0.8509803922, 0.1490196078,\n      0.4549019607843137, 0.2823529412, 0.8588235294, 0.1333333333, 0.4588235294117647,\n      0.3176470588, 0.8666666667, 0.1176470588, 0.4627450980392157, 0.3529411765, 0.8745098039,\n      0.0980392157, 0.4666666666666667, 0.3882352941, 0.8823529412, 0.0823529412,\n      0.4705882352941177, 0.4235294118, 0.8901960784, 0.0666666667, 0.4745098039215686,\n      0.4588235294, 0.8980392157, 0.0509803922, 0.4784313725490197, 0.4941176471, 0.9058823529,\n      0.0431372549, 0.48235294117647065, 0.5294117647, 0.9137254902, 0.031372549,\n      0.48627450980392156, 0.5647058824, 0.9215686275, 0.0196078431, 0.49019607843137253, 0.6,\n      0.9294117647, 0.0078431373, 0.49411764705882355, 0.6352941176, 0.937254902, 0.0039215686,\n      0.4980392156862745, 0.6705882353, 0.9450980392, 0.0039215686, 0.5019607843137255,\n      0.7058823529, 0.9490196078, 0.0039215686, 0.5058823529411764, 0.7411764706, 0.9568627451,\n      0.0039215686, 0.5098039215686274, 0.7725490196, 0.9607843137, 0.0039215686,\n      0.5137254901960784, 0.8078431373, 0.968627451, 0.0039215686, 0.5176470588235295, 0.8431372549,\n      0.9725490196, 0.0039215686, 0.5215686274509804, 0.8784313725, 0.9803921569, 0.0039215686,\n      0.5254901960784314, 0.9137254902, 0.9843137255, 0.0039215686, 0.5294117647058824,\n      0.9490196078, 0.9921568627, 0.0039215686, 0.5333333333333333, 0.9960784314, 0.9960784314,\n      0.0039215686, 0.5372549019607843, 0.9960784314, 0.9960784314, 0.0039215686,\n      0.5411764705882353, 0.9960784314, 0.9921568627, 0.0039215686, 0.5450980392156862,\n      0.9960784314, 0.9843137255, 0.0039215686, 0.5490196078431373, 0.9960784314, 0.9764705882,\n      0.0039215686, 0.5529411764705883, 0.9960784314, 0.968627451, 0.0039215686, 0.5568627450980392,\n      0.9960784314, 0.9607843137, 0.0039215686, 0.5607843137254902, 0.9960784314, 0.9529411765,\n      0.0039215686, 0.5647058823529412, 0.9960784314, 0.9450980392, 0.0039215686,\n      0.5686274509803921, 0.9960784314, 0.937254902, 0.0039215686, 0.5725490196078431, 0.9960784314,\n      0.9294117647, 0.0039215686, 0.5764705882352941, 0.9960784314, 0.9215686275, 0.0039215686,\n      0.5803921568627451, 0.9960784314, 0.9137254902, 0.0039215686, 0.5843137254901961,\n      0.9960784314, 0.9058823529, 0.0039215686, 0.5882352941176471, 0.9960784314, 0.8980392157,\n      0.0039215686, 0.592156862745098, 0.9960784314, 0.8901960784, 0.0039215686, 0.596078431372549,\n      0.9960784314, 0.8823529412, 0.0039215686, 0.6, 0.9960784314, 0.8745098039, 0.0039215686,\n      0.6039215686274509, 0.9960784314, 0.8666666667, 0.0039215686, 0.6078431372549019,\n      0.9960784314, 0.8588235294, 0.0039215686, 0.611764705882353, 0.9960784314, 0.8509803922,\n      0.0039215686, 0.615686274509804, 0.9960784314, 0.8431372549, 0.0039215686, 0.6196078431372549,\n      0.9960784314, 0.8352941176, 0.0039215686, 0.6235294117647059, 0.9960784314, 0.8274509804,\n      0.0039215686, 0.6274509803921569, 0.9960784314, 0.8196078431, 0.0039215686,\n      0.6313725490196078, 0.9960784314, 0.8117647059, 0.0039215686, 0.6352941176470588,\n      0.9960784314, 0.8039215686, 0.0039215686, 0.6392156862745098, 0.9960784314, 0.7960784314,\n      0.0039215686, 0.6431372549019608, 0.9960784314, 0.7882352941, 0.0039215686,\n      0.6470588235294118, 0.9960784314, 0.7803921569, 0.0039215686, 0.6509803921568628,\n      0.9960784314, 0.7725490196, 0.0039215686, 0.6549019607843137, 0.9960784314, 0.7647058824,\n      0.0039215686, 0.6588235294117647, 0.9960784314, 0.7568627451, 0.0039215686,\n      0.6627450980392157, 0.9960784314, 0.7490196078, 0.0039215686, 0.6666666666666666,\n      0.9960784314, 0.7450980392, 0.0039215686, 0.6705882352941176, 0.9960784314, 0.737254902,\n      0.0039215686, 0.6745098039215687, 0.9960784314, 0.7294117647, 0.0039215686,\n      0.6784313725490196, 0.9960784314, 0.7215686275, 0.0039215686, 0.6823529411764706,\n      0.9960784314, 0.7137254902, 0.0039215686, 0.6862745098039216, 0.9960784314, 0.7058823529,\n      0.0039215686, 0.6901960784313725, 0.9960784314, 0.6980392157, 0.0039215686,\n      0.6941176470588235, 0.9960784314, 0.6901960784, 0.0039215686, 0.6980392156862745,\n      0.9960784314, 0.6823529412, 0.0039215686, 0.7019607843137254, 0.9960784314, 0.6745098039,\n      0.0039215686, 0.7058823529411765, 0.9960784314, 0.6666666667, 0.0039215686,\n      0.7098039215686275, 0.9960784314, 0.6588235294, 0.0039215686, 0.7137254901960784,\n      0.9960784314, 0.6509803922, 0.0039215686, 0.7176470588235294, 0.9960784314, 0.6431372549,\n      0.0039215686, 0.7215686274509804, 0.9960784314, 0.6352941176, 0.0039215686,\n      0.7254901960784313, 0.9960784314, 0.6274509804, 0.0039215686, 0.7294117647058823,\n      0.9960784314, 0.6196078431, 0.0039215686, 0.7333333333333333, 0.9960784314, 0.6117647059,\n      0.0039215686, 0.7372549019607844, 0.9960784314, 0.6039215686, 0.0039215686,\n      0.7411764705882353, 0.9960784314, 0.5960784314, 0.0039215686, 0.7450980392156863,\n      0.9960784314, 0.5882352941, 0.0039215686, 0.7490196078431373, 0.9960784314, 0.5803921569,\n      0.0039215686, 0.7529411764705882, 0.9960784314, 0.5725490196, 0.0039215686,\n      0.7568627450980392, 0.9960784314, 0.5647058824, 0.0039215686, 0.7607843137254902,\n      0.9960784314, 0.5568627451, 0.0039215686, 0.7647058823529411, 0.9960784314, 0.5490196078,\n      0.0039215686, 0.7686274509803922, 0.9960784314, 0.5411764706, 0.0039215686,\n      0.7725490196078432, 0.9960784314, 0.5333333333, 0.0039215686, 0.7764705882352941,\n      0.9960784314, 0.5254901961, 0.0039215686, 0.7803921568627451, 0.9960784314, 0.5176470588,\n      0.0039215686, 0.7843137254901961, 0.9960784314, 0.5098039216, 0.0039215686, 0.788235294117647,\n      0.9960784314, 0.5019607843, 0.0039215686, 0.792156862745098, 0.9960784314, 0.4941176471,\n      0.0039215686, 0.796078431372549, 0.9960784314, 0.4862745098, 0.0039215686, 0.8, 0.9960784314,\n      0.4784313725, 0.0039215686, 0.803921568627451, 0.9960784314, 0.4705882353, 0.0039215686,\n      0.807843137254902, 0.9960784314, 0.462745098, 0.0039215686, 0.8117647058823529, 0.9960784314,\n      0.4549019608, 0.0039215686, 0.8156862745098039, 0.9960784314, 0.4470588235, 0.0039215686,\n      0.8196078431372549, 0.9960784314, 0.4392156863, 0.0039215686, 0.8235294117647058,\n      0.9960784314, 0.431372549, 0.0039215686, 0.8274509803921568, 0.9960784314, 0.4235294118,\n      0.0039215686, 0.8313725490196079, 0.9960784314, 0.4156862745, 0.0039215686,\n      0.8352941176470589, 0.9960784314, 0.4078431373, 0.0039215686, 0.8392156862745098,\n      0.9960784314, 0.4, 0.0039215686, 0.8431372549019608, 0.9960784314, 0.3921568627, 0.0039215686,\n      0.8470588235294118, 0.9960784314, 0.3843137255, 0.0039215686, 0.8509803921568627,\n      0.9960784314, 0.3764705882, 0.0039215686, 0.8549019607843137, 0.9960784314, 0.368627451,\n      0.0039215686, 0.8588235294117647, 0.9960784314, 0.3607843137, 0.0039215686,\n      0.8627450980392157, 0.9960784314, 0.3529411765, 0.0039215686, 0.8666666666666667,\n      0.9960784314, 0.3450980392, 0.0039215686, 0.8705882352941177, 0.9960784314, 0.337254902,\n      0.0039215686, 0.8745098039215686, 0.9960784314, 0.3294117647, 0.0039215686,\n      0.8784313725490196, 0.9960784314, 0.3215686275, 0.0039215686, 0.8823529411764706,\n      0.9960784314, 0.3137254902, 0.0039215686, 0.8862745098039215, 0.9960784314, 0.3058823529,\n      0.0039215686, 0.8901960784313725, 0.9960784314, 0.2980392157, 0.0039215686,\n      0.8941176470588236, 0.9960784314, 0.2901960784, 0.0039215686, 0.8980392156862745,\n      0.9960784314, 0.2823529412, 0.0039215686, 0.9019607843137255, 0.9960784314, 0.2705882353,\n      0.0039215686, 0.9058823529411765, 0.9960784314, 0.2588235294, 0.0039215686,\n      0.9098039215686274, 0.9960784314, 0.2509803922, 0.0039215686, 0.9137254901960784,\n      0.9960784314, 0.2431372549, 0.0039215686, 0.9176470588235294, 0.9960784314, 0.231372549,\n      0.0039215686, 0.9215686274509803, 0.9960784314, 0.2196078431, 0.0039215686,\n      0.9254901960784314, 0.9960784314, 0.2117647059, 0.0039215686, 0.9294117647058824,\n      0.9960784314, 0.2, 0.0039215686, 0.9333333333333333, 0.9960784314, 0.1882352941, 0.0039215686,\n      0.9372549019607843, 0.9960784314, 0.1764705882, 0.0039215686, 0.9411764705882354,\n      0.9960784314, 0.168627451, 0.0039215686, 0.9450980392156864, 0.9960784314, 0.1568627451,\n      0.0039215686, 0.9490196078431372, 0.9960784314, 0.1450980392, 0.0039215686,\n      0.9529411764705882, 0.9960784314, 0.1333333333, 0.0039215686, 0.9568627450980394,\n      0.9960784314, 0.1254901961, 0.0039215686, 0.9607843137254903, 0.9960784314, 0.1137254902,\n      0.0039215686, 0.9647058823529413, 0.9960784314, 0.1019607843, 0.0039215686,\n      0.9686274509803922, 0.9960784314, 0.0901960784, 0.0039215686, 0.9725490196078431,\n      0.9960784314, 0.0823529412, 0.0039215686, 0.9764705882352941, 0.9960784314, 0.0705882353,\n      0.0039215686, 0.9803921568627451, 0.9960784314, 0.0588235294, 0.0039215686, 0.984313725490196,\n      0.9960784314, 0.0470588235, 0.0039215686, 0.9882352941176471, 0.9960784314, 0.0392156863,\n      0.0039215686, 0.9921568627450981, 0.9960784314, 0.0274509804, 0.0039215686, 0.996078431372549,\n      0.9960784314, 0.0156862745, 0.0039215686, 1.0, 0.9960784314, 0.0156862745, 0.0039215686,\n    ],\n    description: 'S PET',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'perfusion',\n    RGBPoints: [\n      0.0, 0.0, 0.0, 0.0, 0.00392156862745098, 0.0078431373, 0.0235294118, 0.0235294118,\n      0.00784313725490196, 0.0078431373, 0.031372549, 0.0470588235, 0.011764705882352941,\n      0.0078431373, 0.0392156863, 0.062745098, 0.01568627450980392, 0.0078431373, 0.0470588235,\n      0.0862745098, 0.0196078431372549, 0.0078431373, 0.0549019608, 0.1019607843,\n      0.023529411764705882, 0.0078431373, 0.0549019608, 0.1254901961, 0.027450980392156862,\n      0.0078431373, 0.062745098, 0.1411764706, 0.03137254901960784, 0.0078431373, 0.0705882353,\n      0.1647058824, 0.03529411764705882, 0.0078431373, 0.0784313725, 0.1803921569,\n      0.0392156862745098, 0.0078431373, 0.0862745098, 0.2039215686, 0.043137254901960784,\n      0.0078431373, 0.0862745098, 0.2196078431, 0.047058823529411764, 0.0078431373, 0.0941176471,\n      0.2431372549, 0.050980392156862744, 0.0078431373, 0.1019607843, 0.2666666667,\n      0.054901960784313725, 0.0078431373, 0.1098039216, 0.2823529412, 0.05882352941176471,\n      0.0078431373, 0.1176470588, 0.3058823529, 0.06274509803921569, 0.0078431373, 0.1176470588,\n      0.3215686275, 0.06666666666666667, 0.0078431373, 0.1254901961, 0.3450980392,\n      0.07058823529411765, 0.0078431373, 0.1333333333, 0.3607843137, 0.07450980392156863,\n      0.0078431373, 0.1411764706, 0.3843137255, 0.0784313725490196, 0.0078431373, 0.1490196078, 0.4,\n      0.08235294117647059, 0.0078431373, 0.1490196078, 0.4235294118, 0.08627450980392157,\n      0.0078431373, 0.1568627451, 0.4392156863, 0.09019607843137255, 0.0078431373, 0.1647058824,\n      0.462745098, 0.09411764705882353, 0.0078431373, 0.1725490196, 0.4784313725,\n      0.09803921568627451, 0.0078431373, 0.1803921569, 0.5019607843, 0.10196078431372549,\n      0.0078431373, 0.1803921569, 0.5254901961, 0.10588235294117647, 0.0078431373, 0.1882352941,\n      0.5411764706, 0.10980392156862745, 0.0078431373, 0.1960784314, 0.5647058824,\n      0.11372549019607843, 0.0078431373, 0.2039215686, 0.5803921569, 0.11764705882352942,\n      0.0078431373, 0.2117647059, 0.6039215686, 0.12156862745098039, 0.0078431373, 0.2117647059,\n      0.6196078431, 0.12549019607843137, 0.0078431373, 0.2196078431, 0.6431372549,\n      0.12941176470588237, 0.0078431373, 0.2274509804, 0.6588235294, 0.13333333333333333,\n      0.0078431373, 0.2352941176, 0.6823529412, 0.13725490196078433, 0.0078431373, 0.2431372549,\n      0.6980392157, 0.1411764705882353, 0.0078431373, 0.2431372549, 0.7215686275,\n      0.1450980392156863, 0.0078431373, 0.2509803922, 0.737254902, 0.14901960784313725,\n      0.0078431373, 0.2588235294, 0.7607843137, 0.15294117647058825, 0.0078431373, 0.2666666667,\n      0.7843137255, 0.1568627450980392, 0.0078431373, 0.2745098039, 0.8, 0.1607843137254902,\n      0.0078431373, 0.2745098039, 0.8235294118, 0.16470588235294117, 0.0078431373, 0.2823529412,\n      0.8392156863, 0.16862745098039217, 0.0078431373, 0.2901960784, 0.862745098,\n      0.17254901960784313, 0.0078431373, 0.2980392157, 0.8784313725, 0.17647058823529413,\n      0.0078431373, 0.3058823529, 0.9019607843, 0.1803921568627451, 0.0078431373, 0.3058823529,\n      0.9176470588, 0.1843137254901961, 0.0078431373, 0.2980392157, 0.9411764706,\n      0.18823529411764706, 0.0078431373, 0.3058823529, 0.9568627451, 0.19215686274509805,\n      0.0078431373, 0.2980392157, 0.9803921569, 0.19607843137254902, 0.0078431373, 0.2980392157,\n      0.9882352941, 0.2, 0.0078431373, 0.2901960784, 0.9803921569, 0.20392156862745098,\n      0.0078431373, 0.2901960784, 0.9647058824, 0.20784313725490197, 0.0078431373, 0.2823529412,\n      0.9568627451, 0.21176470588235294, 0.0078431373, 0.2823529412, 0.9411764706,\n      0.21568627450980393, 0.0078431373, 0.2745098039, 0.9333333333, 0.2196078431372549,\n      0.0078431373, 0.2666666667, 0.9176470588, 0.2235294117647059, 0.0078431373, 0.2666666667,\n      0.9098039216, 0.22745098039215686, 0.0078431373, 0.2588235294, 0.9019607843,\n      0.23137254901960785, 0.0078431373, 0.2588235294, 0.8862745098, 0.23529411764705885,\n      0.0078431373, 0.2509803922, 0.8784313725, 0.23921568627450984, 0.0078431373, 0.2509803922,\n      0.862745098, 0.24313725490196078, 0.0078431373, 0.2431372549, 0.8549019608,\n      0.24705882352941178, 0.0078431373, 0.2352941176, 0.8392156863, 0.25098039215686274,\n      0.0078431373, 0.2352941176, 0.831372549, 0.2549019607843137, 0.0078431373, 0.2274509804,\n      0.8235294118, 0.25882352941176473, 0.0078431373, 0.2274509804, 0.8078431373,\n      0.2627450980392157, 0.0078431373, 0.2196078431, 0.8, 0.26666666666666666, 0.0078431373,\n      0.2196078431, 0.7843137255, 0.27058823529411763, 0.0078431373, 0.2117647059, 0.7764705882,\n      0.27450980392156865, 0.0078431373, 0.2039215686, 0.7607843137, 0.2784313725490196,\n      0.0078431373, 0.2039215686, 0.7529411765, 0.2823529411764706, 0.0078431373, 0.1960784314,\n      0.7450980392, 0.28627450980392155, 0.0078431373, 0.1960784314, 0.7294117647,\n      0.2901960784313726, 0.0078431373, 0.1882352941, 0.7215686275, 0.29411764705882354,\n      0.0078431373, 0.1882352941, 0.7058823529, 0.2980392156862745, 0.0078431373, 0.1803921569,\n      0.6980392157, 0.30196078431372547, 0.0078431373, 0.1803921569, 0.6823529412,\n      0.3058823529411765, 0.0078431373, 0.1725490196, 0.6745098039, 0.30980392156862746,\n      0.0078431373, 0.1647058824, 0.6666666667, 0.3137254901960784, 0.0078431373, 0.1647058824,\n      0.6509803922, 0.3176470588235294, 0.0078431373, 0.1568627451, 0.6431372549,\n      0.3215686274509804, 0.0078431373, 0.1568627451, 0.6274509804, 0.3254901960784314,\n      0.0078431373, 0.1490196078, 0.6196078431, 0.32941176470588235, 0.0078431373, 0.1490196078,\n      0.6039215686, 0.3333333333333333, 0.0078431373, 0.1411764706, 0.5960784314,\n      0.33725490196078434, 0.0078431373, 0.1333333333, 0.5882352941, 0.3411764705882353,\n      0.0078431373, 0.1333333333, 0.5725490196, 0.34509803921568627, 0.0078431373, 0.1254901961,\n      0.5647058824, 0.34901960784313724, 0.0078431373, 0.1254901961, 0.5490196078,\n      0.35294117647058826, 0.0078431373, 0.1176470588, 0.5411764706, 0.3568627450980392,\n      0.0078431373, 0.1176470588, 0.5254901961, 0.3607843137254902, 0.0078431373, 0.1098039216,\n      0.5176470588, 0.36470588235294116, 0.0078431373, 0.1019607843, 0.5098039216,\n      0.3686274509803922, 0.0078431373, 0.1019607843, 0.4941176471, 0.37254901960784315,\n      0.0078431373, 0.0941176471, 0.4862745098, 0.3764705882352941, 0.0078431373, 0.0941176471,\n      0.4705882353, 0.3803921568627451, 0.0078431373, 0.0862745098, 0.462745098, 0.3843137254901961,\n      0.0078431373, 0.0862745098, 0.4470588235, 0.38823529411764707, 0.0078431373, 0.0784313725,\n      0.4392156863, 0.39215686274509803, 0.0078431373, 0.0705882353, 0.431372549, 0.396078431372549,\n      0.0078431373, 0.0705882353, 0.4156862745, 0.4, 0.0078431373, 0.062745098, 0.4078431373,\n      0.403921568627451, 0.0078431373, 0.062745098, 0.3921568627, 0.40784313725490196, 0.0078431373,\n      0.0549019608, 0.3843137255, 0.4117647058823529, 0.0078431373, 0.0549019608, 0.368627451,\n      0.41568627450980394, 0.0078431373, 0.0470588235, 0.3607843137, 0.4196078431372549,\n      0.0078431373, 0.0470588235, 0.3529411765, 0.4235294117647059, 0.0078431373, 0.0392156863,\n      0.337254902, 0.42745098039215684, 0.0078431373, 0.031372549, 0.3294117647,\n      0.43137254901960786, 0.0078431373, 0.031372549, 0.3137254902, 0.43529411764705883,\n      0.0078431373, 0.0235294118, 0.3058823529, 0.4392156862745098, 0.0078431373, 0.0235294118,\n      0.2901960784, 0.44313725490196076, 0.0078431373, 0.0156862745, 0.2823529412,\n      0.4470588235294118, 0.0078431373, 0.0156862745, 0.2745098039, 0.45098039215686275,\n      0.0078431373, 0.0078431373, 0.2588235294, 0.4549019607843137, 0.0235294118, 0.0078431373,\n      0.2509803922, 0.4588235294117647, 0.0078431373, 0.0078431373, 0.2352941176,\n      0.4627450980392157, 0.0078431373, 0.0078431373, 0.2274509804, 0.4666666666666667,\n      0.0078431373, 0.0078431373, 0.2117647059, 0.4705882352941177, 0.0078431373, 0.0078431373,\n      0.2039215686, 0.4745098039215686, 0.0078431373, 0.0078431373, 0.1960784314,\n      0.4784313725490197, 0.0078431373, 0.0078431373, 0.1803921569, 0.48235294117647065,\n      0.0078431373, 0.0078431373, 0.1725490196, 0.48627450980392156, 0.0078431373, 0.0078431373,\n      0.1568627451, 0.49019607843137253, 0.0078431373, 0.0078431373, 0.1490196078,\n      0.49411764705882355, 0.0078431373, 0.0078431373, 0.1333333333, 0.4980392156862745,\n      0.0078431373, 0.0078431373, 0.1254901961, 0.5019607843137255, 0.0078431373, 0.0078431373,\n      0.1176470588, 0.5058823529411764, 0.0078431373, 0.0078431373, 0.1019607843,\n      0.5098039215686274, 0.0078431373, 0.0078431373, 0.0941176471, 0.5137254901960784,\n      0.0078431373, 0.0078431373, 0.0784313725, 0.5176470588235295, 0.0078431373, 0.0078431373,\n      0.0705882353, 0.5215686274509804, 0.0078431373, 0.0078431373, 0.0549019608,\n      0.5254901960784314, 0.0078431373, 0.0078431373, 0.0470588235, 0.5294117647058824,\n      0.0235294118, 0.0078431373, 0.0392156863, 0.5333333333333333, 0.031372549, 0.0078431373,\n      0.0235294118, 0.5372549019607843, 0.0392156863, 0.0078431373, 0.0156862745,\n      0.5411764705882353, 0.0549019608, 0.0078431373, 0.0, 0.5450980392156862, 0.062745098,\n      0.0078431373, 0.0, 0.5490196078431373, 0.0705882353, 0.0078431373, 0.0, 0.5529411764705883,\n      0.0862745098, 0.0078431373, 0.0, 0.5568627450980392, 0.0941176471, 0.0078431373, 0.0,\n      0.5607843137254902, 0.1019607843, 0.0078431373, 0.0, 0.5647058823529412, 0.1098039216,\n      0.0078431373, 0.0, 0.5686274509803921, 0.1254901961, 0.0078431373, 0.0, 0.5725490196078431,\n      0.1333333333, 0.0078431373, 0.0, 0.5764705882352941, 0.1411764706, 0.0078431373, 0.0,\n      0.5803921568627451, 0.1568627451, 0.0078431373, 0.0, 0.5843137254901961, 0.1647058824,\n      0.0078431373, 0.0, 0.5882352941176471, 0.1725490196, 0.0078431373, 0.0, 0.592156862745098,\n      0.1882352941, 0.0078431373, 0.0, 0.596078431372549, 0.1960784314, 0.0078431373, 0.0, 0.6,\n      0.2039215686, 0.0078431373, 0.0, 0.6039215686274509, 0.2117647059, 0.0078431373, 0.0,\n      0.6078431372549019, 0.2274509804, 0.0078431373, 0.0, 0.611764705882353, 0.2352941176,\n      0.0078431373, 0.0, 0.615686274509804, 0.2431372549, 0.0078431373, 0.0, 0.6196078431372549,\n      0.2588235294, 0.0078431373, 0.0, 0.6235294117647059, 0.2666666667, 0.0078431373, 0.0,\n      0.6274509803921569, 0.2745098039, 0.0, 0.0, 0.6313725490196078, 0.2901960784, 0.0156862745,\n      0.0, 0.6352941176470588, 0.2980392157, 0.0235294118, 0.0, 0.6392156862745098, 0.3058823529,\n      0.0392156863, 0.0, 0.6431372549019608, 0.3137254902, 0.0470588235, 0.0, 0.6470588235294118,\n      0.3294117647, 0.0549019608, 0.0, 0.6509803921568628, 0.337254902, 0.0705882353, 0.0,\n      0.6549019607843137, 0.3450980392, 0.0784313725, 0.0, 0.6588235294117647, 0.3607843137,\n      0.0862745098, 0.0, 0.6627450980392157, 0.368627451, 0.1019607843, 0.0, 0.6666666666666666,\n      0.3764705882, 0.1098039216, 0.0, 0.6705882352941176, 0.3843137255, 0.1176470588, 0.0,\n      0.6745098039215687, 0.4, 0.1333333333, 0.0, 0.6784313725490196, 0.4078431373, 0.1411764706,\n      0.0, 0.6823529411764706, 0.4156862745, 0.1490196078, 0.0, 0.6862745098039216, 0.431372549,\n      0.1647058824, 0.0, 0.6901960784313725, 0.4392156863, 0.1725490196, 0.0, 0.6941176470588235,\n      0.4470588235, 0.1803921569, 0.0, 0.6980392156862745, 0.462745098, 0.1960784314, 0.0,\n      0.7019607843137254, 0.4705882353, 0.2039215686, 0.0, 0.7058823529411765, 0.4784313725,\n      0.2117647059, 0.0, 0.7098039215686275, 0.4862745098, 0.2274509804, 0.0, 0.7137254901960784,\n      0.5019607843, 0.2352941176, 0.0, 0.7176470588235294, 0.5098039216, 0.2431372549, 0.0,\n      0.7215686274509804, 0.5176470588, 0.2588235294, 0.0, 0.7254901960784313, 0.5333333333,\n      0.2666666667, 0.0, 0.7294117647058823, 0.5411764706, 0.2745098039, 0.0, 0.7333333333333333,\n      0.5490196078, 0.2901960784, 0.0, 0.7372549019607844, 0.5647058824, 0.2980392157, 0.0,\n      0.7411764705882353, 0.5725490196, 0.3058823529, 0.0, 0.7450980392156863, 0.5803921569,\n      0.3215686275, 0.0, 0.7490196078431373, 0.5882352941, 0.3294117647, 0.0, 0.7529411764705882,\n      0.6039215686, 0.337254902, 0.0, 0.7568627450980392, 0.6117647059, 0.3529411765, 0.0,\n      0.7607843137254902, 0.6196078431, 0.3607843137, 0.0, 0.7647058823529411, 0.6352941176,\n      0.368627451, 0.0, 0.7686274509803922, 0.6431372549, 0.3843137255, 0.0, 0.7725490196078432,\n      0.6509803922, 0.3921568627, 0.0, 0.7764705882352941, 0.6588235294, 0.4, 0.0,\n      0.7803921568627451, 0.6745098039, 0.4156862745, 0.0, 0.7843137254901961, 0.6823529412,\n      0.4235294118, 0.0, 0.788235294117647, 0.6901960784, 0.431372549, 0.0, 0.792156862745098,\n      0.7058823529, 0.4470588235, 0.0, 0.796078431372549, 0.7137254902, 0.4549019608, 0.0, 0.8,\n      0.7215686275, 0.462745098, 0.0, 0.803921568627451, 0.737254902, 0.4784313725, 0.0,\n      0.807843137254902, 0.7450980392, 0.4862745098, 0.0, 0.8117647058823529, 0.7529411765,\n      0.4941176471, 0.0, 0.8156862745098039, 0.7607843137, 0.5098039216, 0.0, 0.8196078431372549,\n      0.7764705882, 0.5176470588, 0.0, 0.8235294117647058, 0.7843137255, 0.5254901961, 0.0,\n      0.8274509803921568, 0.7921568627, 0.5411764706, 0.0, 0.8313725490196079, 0.8078431373,\n      0.5490196078, 0.0, 0.8352941176470589, 0.8156862745, 0.5568627451, 0.0, 0.8392156862745098,\n      0.8235294118, 0.5725490196, 0.0, 0.8431372549019608, 0.8392156863, 0.5803921569, 0.0,\n      0.8470588235294118, 0.8470588235, 0.5882352941, 0.0, 0.8509803921568627, 0.8549019608,\n      0.6039215686, 0.0, 0.8549019607843137, 0.862745098, 0.6117647059, 0.0, 0.8588235294117647,\n      0.8784313725, 0.6196078431, 0.0, 0.8627450980392157, 0.8862745098, 0.6352941176, 0.0,\n      0.8666666666666667, 0.8941176471, 0.6431372549, 0.0, 0.8705882352941177, 0.9098039216,\n      0.6509803922, 0.0, 0.8745098039215686, 0.9176470588, 0.6666666667, 0.0, 0.8784313725490196,\n      0.9254901961, 0.6745098039, 0.0, 0.8823529411764706, 0.9411764706, 0.6823529412, 0.0,\n      0.8862745098039215, 0.9490196078, 0.6980392157, 0.0, 0.8901960784313725, 0.9568627451,\n      0.7058823529, 0.0, 0.8941176470588236, 0.9647058824, 0.7137254902, 0.0, 0.8980392156862745,\n      0.9803921569, 0.7294117647, 0.0, 0.9019607843137255, 0.9882352941, 0.737254902, 0.0,\n      0.9058823529411765, 0.9960784314, 0.7450980392, 0.0, 0.9098039215686274, 0.9960784314,\n      0.7607843137, 0.0, 0.9137254901960784, 0.9960784314, 0.768627451, 0.0, 0.9176470588235294,\n      0.9960784314, 0.7764705882, 0.0, 0.9215686274509803, 0.9960784314, 0.7921568627, 0.0,\n      0.9254901960784314, 0.9960784314, 0.8, 0.0, 0.9294117647058824, 0.9960784314, 0.8078431373,\n      0.0, 0.9333333333333333, 0.9960784314, 0.8235294118, 0.0, 0.9372549019607843, 0.9960784314,\n      0.831372549, 0.0, 0.9411764705882354, 0.9960784314, 0.8392156863, 0.0, 0.9450980392156864,\n      0.9960784314, 0.8549019608, 0.0, 0.9490196078431372, 0.9960784314, 0.862745098, 0.0549019608,\n      0.9529411764705882, 0.9960784314, 0.8705882353, 0.1098039216, 0.9568627450980394,\n      0.9960784314, 0.8862745098, 0.1647058824, 0.9607843137254903, 0.9960784314, 0.8941176471,\n      0.2196078431, 0.9647058823529413, 0.9960784314, 0.9019607843, 0.2666666667,\n      0.9686274509803922, 0.9960784314, 0.9176470588, 0.3215686275, 0.9725490196078431,\n      0.9960784314, 0.9254901961, 0.3764705882, 0.9764705882352941, 0.9960784314, 0.9333333333,\n      0.431372549, 0.9803921568627451, 0.9960784314, 0.9490196078, 0.4862745098, 0.984313725490196,\n      0.9960784314, 0.9568627451, 0.5333333333, 0.9882352941176471, 0.9960784314, 0.9647058824,\n      0.5882352941, 0.9921568627450981, 0.9960784314, 0.9803921569, 0.6431372549, 0.996078431372549,\n      0.9960784314, 0.9882352941, 0.6980392157, 1.0, 0.9960784314, 0.9960784314, 0.7450980392,\n    ],\n    description: 'Perfusion',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'rainbow_2',\n    RGBPoints: [\n      0.0, 0.0, 0.0, 0.0, 0.00392156862745098, 0.0156862745, 0.0, 0.0117647059, 0.00784313725490196,\n      0.0352941176, 0.0, 0.0274509804, 0.011764705882352941, 0.0509803922, 0.0, 0.0392156863,\n      0.01568627450980392, 0.0705882353, 0.0, 0.0549019608, 0.0196078431372549, 0.0862745098, 0.0,\n      0.0745098039, 0.023529411764705882, 0.1058823529, 0.0, 0.0901960784, 0.027450980392156862,\n      0.1215686275, 0.0, 0.1098039216, 0.03137254901960784, 0.1411764706, 0.0, 0.1254901961,\n      0.03529411764705882, 0.1568627451, 0.0, 0.1490196078, 0.0392156862745098, 0.1764705882, 0.0,\n      0.168627451, 0.043137254901960784, 0.1960784314, 0.0, 0.1882352941, 0.047058823529411764,\n      0.2117647059, 0.0, 0.2078431373, 0.050980392156862744, 0.2274509804, 0.0, 0.231372549,\n      0.054901960784313725, 0.2392156863, 0.0, 0.2470588235, 0.05882352941176471, 0.2509803922, 0.0,\n      0.2666666667, 0.06274509803921569, 0.2666666667, 0.0, 0.2823529412, 0.06666666666666667,\n      0.2705882353, 0.0, 0.3019607843, 0.07058823529411765, 0.2823529412, 0.0, 0.3176470588,\n      0.07450980392156863, 0.2901960784, 0.0, 0.337254902, 0.0784313725490196, 0.3019607843, 0.0,\n      0.3568627451, 0.08235294117647059, 0.3098039216, 0.0, 0.3725490196, 0.08627450980392157,\n      0.3137254902, 0.0, 0.3921568627, 0.09019607843137255, 0.3215686275, 0.0, 0.4078431373,\n      0.09411764705882353, 0.3254901961, 0.0, 0.4274509804, 0.09803921568627451, 0.3333333333, 0.0,\n      0.4431372549, 0.10196078431372549, 0.3294117647, 0.0, 0.462745098, 0.10588235294117647,\n      0.337254902, 0.0, 0.4784313725, 0.10980392156862745, 0.3411764706, 0.0, 0.4980392157,\n      0.11372549019607843, 0.3450980392, 0.0, 0.5176470588, 0.11764705882352942, 0.337254902, 0.0,\n      0.5333333333, 0.12156862745098039, 0.3411764706, 0.0, 0.5529411765, 0.12549019607843137,\n      0.3411764706, 0.0, 0.568627451, 0.12941176470588237, 0.3411764706, 0.0, 0.5882352941,\n      0.13333333333333333, 0.3333333333, 0.0, 0.6039215686, 0.13725490196078433, 0.3294117647, 0.0,\n      0.6235294118, 0.1411764705882353, 0.3294117647, 0.0, 0.6392156863, 0.1450980392156863,\n      0.3294117647, 0.0, 0.6588235294, 0.14901960784313725, 0.3254901961, 0.0, 0.6784313725,\n      0.15294117647058825, 0.3098039216, 0.0, 0.6941176471, 0.1568627450980392, 0.3058823529, 0.0,\n      0.7137254902, 0.1607843137254902, 0.3019607843, 0.0, 0.7294117647, 0.16470588235294117,\n      0.2980392157, 0.0, 0.7490196078, 0.16862745098039217, 0.2784313725, 0.0, 0.7647058824,\n      0.17254901960784313, 0.2745098039, 0.0, 0.7843137255, 0.17647058823529413, 0.2666666667, 0.0,\n      0.8, 0.1803921568627451, 0.2588235294, 0.0, 0.8196078431, 0.1843137254901961, 0.2352941176,\n      0.0, 0.8392156863, 0.18823529411764706, 0.2274509804, 0.0, 0.8549019608, 0.19215686274509805,\n      0.2156862745, 0.0, 0.8745098039, 0.19607843137254902, 0.2078431373, 0.0, 0.8901960784, 0.2,\n      0.1803921569, 0.0, 0.9098039216, 0.20392156862745098, 0.168627451, 0.0, 0.9254901961,\n      0.20784313725490197, 0.1568627451, 0.0, 0.9450980392, 0.21176470588235294, 0.1411764706, 0.0,\n      0.9607843137, 0.21568627450980393, 0.1294117647, 0.0, 0.9803921569, 0.2196078431372549,\n      0.0980392157, 0.0, 1.0, 0.2235294117647059, 0.0823529412, 0.0, 1.0, 0.22745098039215686,\n      0.062745098, 0.0, 1.0, 0.23137254901960785, 0.0470588235, 0.0, 1.0, 0.23529411764705885,\n      0.0156862745, 0.0, 1.0, 0.23921568627450984, 0.0, 0.0, 1.0, 0.24313725490196078, 0.0,\n      0.0156862745, 1.0, 0.24705882352941178, 0.0, 0.031372549, 1.0, 0.25098039215686274, 0.0,\n      0.062745098, 1.0, 0.2549019607843137, 0.0, 0.0823529412, 1.0, 0.25882352941176473, 0.0,\n      0.0980392157, 1.0, 0.2627450980392157, 0.0, 0.1137254902, 1.0, 0.26666666666666666, 0.0,\n      0.1490196078, 1.0, 0.27058823529411763, 0.0, 0.1647058824, 1.0, 0.27450980392156865, 0.0,\n      0.1803921569, 1.0, 0.2784313725490196, 0.0, 0.2, 1.0, 0.2823529411764706, 0.0, 0.2156862745,\n      1.0, 0.28627450980392155, 0.0, 0.2470588235, 1.0, 0.2901960784313726, 0.0, 0.262745098, 1.0,\n      0.29411764705882354, 0.0, 0.2823529412, 1.0, 0.2980392156862745, 0.0, 0.2980392157, 1.0,\n      0.30196078431372547, 0.0, 0.3294117647, 1.0, 0.3058823529411765, 0.0, 0.3490196078, 1.0,\n      0.30980392156862746, 0.0, 0.3647058824, 1.0, 0.3137254901960784, 0.0, 0.3803921569, 1.0,\n      0.3176470588235294, 0.0, 0.4156862745, 1.0, 0.3215686274509804, 0.0, 0.431372549, 1.0,\n      0.3254901960784314, 0.0, 0.4470588235, 1.0, 0.32941176470588235, 0.0, 0.4666666667, 1.0,\n      0.3333333333333333, 0.0, 0.4980392157, 1.0, 0.33725490196078434, 0.0, 0.5137254902, 1.0,\n      0.3411764705882353, 0.0, 0.5294117647, 1.0, 0.34509803921568627, 0.0, 0.5490196078, 1.0,\n      0.34901960784313724, 0.0, 0.5647058824, 1.0, 0.35294117647058826, 0.0, 0.5960784314, 1.0,\n      0.3568627450980392, 0.0, 0.6156862745, 1.0, 0.3607843137254902, 0.0, 0.631372549, 1.0,\n      0.36470588235294116, 0.0, 0.6470588235, 1.0, 0.3686274509803922, 0.0, 0.6823529412, 1.0,\n      0.37254901960784315, 0.0, 0.6980392157, 1.0, 0.3764705882352941, 0.0, 0.7137254902, 1.0,\n      0.3803921568627451, 0.0, 0.7333333333, 1.0, 0.3843137254901961, 0.0, 0.7647058824, 1.0,\n      0.38823529411764707, 0.0, 0.7803921569, 1.0, 0.39215686274509803, 0.0, 0.7960784314, 1.0,\n      0.396078431372549, 0.0, 0.8156862745, 1.0, 0.4, 0.0, 0.8470588235, 1.0, 0.403921568627451,\n      0.0, 0.862745098, 1.0, 0.40784313725490196, 0.0, 0.8823529412, 1.0, 0.4117647058823529, 0.0,\n      0.8980392157, 1.0, 0.41568627450980394, 0.0, 0.9137254902, 1.0, 0.4196078431372549, 0.0,\n      0.9490196078, 1.0, 0.4235294117647059, 0.0, 0.9647058824, 1.0, 0.42745098039215684, 0.0,\n      0.9803921569, 1.0, 0.43137254901960786, 0.0, 1.0, 1.0, 0.43529411764705883, 0.0, 1.0,\n      0.9647058824, 0.4392156862745098, 0.0, 1.0, 0.9490196078, 0.44313725490196076, 0.0, 1.0,\n      0.9333333333, 0.4470588235294118, 0.0, 1.0, 0.9137254902, 0.45098039215686275, 0.0, 1.0,\n      0.8823529412, 0.4549019607843137, 0.0, 1.0, 0.862745098, 0.4588235294117647, 0.0, 1.0,\n      0.8470588235, 0.4627450980392157, 0.0, 1.0, 0.831372549, 0.4666666666666667, 0.0, 1.0,\n      0.7960784314, 0.4705882352941177, 0.0, 1.0, 0.7803921569, 0.4745098039215686, 0.0, 1.0,\n      0.7647058824, 0.4784313725490197, 0.0, 1.0, 0.7490196078, 0.48235294117647065, 0.0, 1.0,\n      0.7333333333, 0.48627450980392156, 0.0, 1.0, 0.6980392157, 0.49019607843137253, 0.0, 1.0,\n      0.6823529412, 0.49411764705882355, 0.0, 1.0, 0.6666666667, 0.4980392156862745, 0.0, 1.0,\n      0.6470588235, 0.5019607843137255, 0.0, 1.0, 0.6156862745, 0.5058823529411764, 0.0, 1.0,\n      0.5960784314, 0.5098039215686274, 0.0, 1.0, 0.5803921569, 0.5137254901960784, 0.0, 1.0,\n      0.5647058824, 0.5176470588235295, 0.0, 1.0, 0.5294117647, 0.5215686274509804, 0.0, 1.0,\n      0.5137254902, 0.5254901960784314, 0.0, 1.0, 0.4980392157, 0.5294117647058824, 0.0, 1.0,\n      0.4823529412, 0.5333333333333333, 0.0, 1.0, 0.4470588235, 0.5372549019607843, 0.0, 1.0,\n      0.431372549, 0.5411764705882353, 0.0, 1.0, 0.4156862745, 0.5450980392156862, 0.0, 1.0, 0.4,\n      0.5490196078431373, 0.0, 1.0, 0.3803921569, 0.5529411764705883, 0.0, 1.0, 0.3490196078,\n      0.5568627450980392, 0.0, 1.0, 0.3294117647, 0.5607843137254902, 0.0, 1.0, 0.3137254902,\n      0.5647058823529412, 0.0, 1.0, 0.2980392157, 0.5686274509803921, 0.0, 1.0, 0.262745098,\n      0.5725490196078431, 0.0, 1.0, 0.2470588235, 0.5764705882352941, 0.0, 1.0, 0.231372549,\n      0.5803921568627451, 0.0, 1.0, 0.2156862745, 0.5843137254901961, 0.0, 1.0, 0.1803921569,\n      0.5882352941176471, 0.0, 1.0, 0.1647058824, 0.592156862745098, 0.0, 1.0, 0.1490196078,\n      0.596078431372549, 0.0, 1.0, 0.1333333333, 0.6, 0.0, 1.0, 0.0980392157, 0.6039215686274509,\n      0.0, 1.0, 0.0823529412, 0.6078431372549019, 0.0, 1.0, 0.062745098, 0.611764705882353, 0.0,\n      1.0, 0.0470588235, 0.615686274509804, 0.0, 1.0, 0.031372549, 0.6196078431372549, 0.0, 1.0,\n      0.0, 0.6235294117647059, 0.0156862745, 1.0, 0.0, 0.6274509803921569, 0.031372549, 1.0, 0.0,\n      0.6313725490196078, 0.0470588235, 1.0, 0.0, 0.6352941176470588, 0.0823529412, 1.0, 0.0,\n      0.6392156862745098, 0.0980392157, 1.0, 0.0, 0.6431372549019608, 0.1137254902, 1.0, 0.0,\n      0.6470588235294118, 0.1294117647, 1.0, 0.0, 0.6509803921568628, 0.1647058824, 1.0, 0.0,\n      0.6549019607843137, 0.1803921569, 1.0, 0.0, 0.6588235294117647, 0.2, 1.0, 0.0,\n      0.6627450980392157, 0.2156862745, 1.0, 0.0, 0.6666666666666666, 0.2470588235, 1.0, 0.0,\n      0.6705882352941176, 0.262745098, 1.0, 0.0, 0.6745098039215687, 0.2823529412, 1.0, 0.0,\n      0.6784313725490196, 0.2980392157, 1.0, 0.0, 0.6823529411764706, 0.3137254902, 1.0, 0.0,\n      0.6862745098039216, 0.3490196078, 1.0, 0.0, 0.6901960784313725, 0.3647058824, 1.0, 0.0,\n      0.6941176470588235, 0.3803921569, 1.0, 0.0, 0.6980392156862745, 0.3960784314, 1.0, 0.0,\n      0.7019607843137254, 0.431372549, 1.0, 0.0, 0.7058823529411765, 0.4470588235, 1.0, 0.0,\n      0.7098039215686275, 0.4666666667, 1.0, 0.0, 0.7137254901960784, 0.4823529412, 1.0, 0.0,\n      0.7176470588235294, 0.5137254902, 1.0, 0.0, 0.7215686274509804, 0.5294117647, 1.0, 0.0,\n      0.7254901960784313, 0.5490196078, 1.0, 0.0, 0.7294117647058823, 0.5647058824, 1.0, 0.0,\n      0.7333333333333333, 0.6, 1.0, 0.0, 0.7372549019607844, 0.6156862745, 1.0, 0.0,\n      0.7411764705882353, 0.631372549, 1.0, 0.0, 0.7450980392156863, 0.6470588235, 1.0, 0.0,\n      0.7490196078431373, 0.662745098, 1.0, 0.0, 0.7529411764705882, 0.6980392157, 1.0, 0.0,\n      0.7568627450980392, 0.7137254902, 1.0, 0.0, 0.7607843137254902, 0.7333333333, 1.0, 0.0,\n      0.7647058823529411, 0.7490196078, 1.0, 0.0, 0.7686274509803922, 0.7803921569, 1.0, 0.0,\n      0.7725490196078432, 0.7960784314, 1.0, 0.0, 0.7764705882352941, 0.8156862745, 1.0, 0.0,\n      0.7803921568627451, 0.831372549, 1.0, 0.0, 0.7843137254901961, 0.8666666667, 1.0, 0.0,\n      0.788235294117647, 0.8823529412, 1.0, 0.0, 0.792156862745098, 0.8980392157, 1.0, 0.0,\n      0.796078431372549, 0.9137254902, 1.0, 0.0, 0.8, 0.9490196078, 1.0, 0.0, 0.803921568627451,\n      0.9647058824, 1.0, 0.0, 0.807843137254902, 0.9803921569, 1.0, 0.0, 0.8117647058823529, 1.0,\n      1.0, 0.0, 0.8156862745098039, 1.0, 0.9803921569, 0.0, 0.8196078431372549, 1.0, 0.9490196078,\n      0.0, 0.8235294117647058, 1.0, 0.9333333333, 0.0, 0.8274509803921568, 1.0, 0.9137254902, 0.0,\n      0.8313725490196079, 1.0, 0.8980392157, 0.0, 0.8352941176470589, 1.0, 0.8666666667, 0.0,\n      0.8392156862745098, 1.0, 0.8470588235, 0.0, 0.8431372549019608, 1.0, 0.831372549, 0.0,\n      0.8470588235294118, 1.0, 0.8156862745, 0.0, 0.8509803921568627, 1.0, 0.7803921569, 0.0,\n      0.8549019607843137, 1.0, 0.7647058824, 0.0, 0.8588235294117647, 1.0, 0.7490196078, 0.0,\n      0.8627450980392157, 1.0, 0.7333333333, 0.0, 0.8666666666666667, 1.0, 0.6980392157, 0.0,\n      0.8705882352941177, 1.0, 0.6823529412, 0.0, 0.8745098039215686, 1.0, 0.6666666667, 0.0,\n      0.8784313725490196, 1.0, 0.6470588235, 0.0, 0.8823529411764706, 1.0, 0.631372549, 0.0,\n      0.8862745098039215, 1.0, 0.6, 0.0, 0.8901960784313725, 1.0, 0.5803921569, 0.0,\n      0.8941176470588236, 1.0, 0.5647058824, 0.0, 0.8980392156862745, 1.0, 0.5490196078, 0.0,\n      0.9019607843137255, 1.0, 0.5137254902, 0.0, 0.9058823529411765, 1.0, 0.4980392157, 0.0,\n      0.9098039215686274, 1.0, 0.4823529412, 0.0, 0.9137254901960784, 1.0, 0.4666666667, 0.0,\n      0.9176470588235294, 1.0, 0.431372549, 0.0, 0.9215686274509803, 1.0, 0.4156862745, 0.0,\n      0.9254901960784314, 1.0, 0.4, 0.0, 0.9294117647058824, 1.0, 0.3803921569, 0.0,\n      0.9333333333333333, 1.0, 0.3490196078, 0.0, 0.9372549019607843, 1.0, 0.3333333333, 0.0,\n      0.9411764705882354, 1.0, 0.3137254902, 0.0, 0.9450980392156864, 1.0, 0.2980392157, 0.0,\n      0.9490196078431372, 1.0, 0.2823529412, 0.0, 0.9529411764705882, 1.0, 0.2470588235, 0.0,\n      0.9568627450980394, 1.0, 0.231372549, 0.0, 0.9607843137254903, 1.0, 0.2156862745, 0.0,\n      0.9647058823529413, 1.0, 0.2, 0.0, 0.9686274509803922, 1.0, 0.1647058824, 0.0,\n      0.9725490196078431, 1.0, 0.1490196078, 0.0, 0.9764705882352941, 1.0, 0.1333333333, 0.0,\n      0.9803921568627451, 1.0, 0.1137254902, 0.0, 0.984313725490196, 1.0, 0.0823529412, 0.0,\n      0.9882352941176471, 1.0, 0.0666666667, 0.0, 0.9921568627450981, 1.0, 0.0470588235, 0.0,\n      0.996078431372549, 1.0, 0.031372549, 0.0, 1.0, 1.0, 0.0, 0.0,\n    ],\n    description: 'Rainbow',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'suv',\n    RGBPoints: [\n      0.0, 1.0, 1.0, 1.0, 0.00392156862745098, 1.0, 1.0, 1.0, 0.00784313725490196, 1.0, 1.0, 1.0,\n      0.011764705882352941, 1.0, 1.0, 1.0, 0.01568627450980392, 1.0, 1.0, 1.0, 0.0196078431372549,\n      1.0, 1.0, 1.0, 0.023529411764705882, 1.0, 1.0, 1.0, 0.027450980392156862, 1.0, 1.0, 1.0,\n      0.03137254901960784, 1.0, 1.0, 1.0, 0.03529411764705882, 1.0, 1.0, 1.0, 0.0392156862745098,\n      1.0, 1.0, 1.0, 0.043137254901960784, 1.0, 1.0, 1.0, 0.047058823529411764, 1.0, 1.0, 1.0,\n      0.050980392156862744, 1.0, 1.0, 1.0, 0.054901960784313725, 1.0, 1.0, 1.0, 0.05882352941176471,\n      1.0, 1.0, 1.0, 0.06274509803921569, 1.0, 1.0, 1.0, 0.06666666666666667, 1.0, 1.0, 1.0,\n      0.07058823529411765, 1.0, 1.0, 1.0, 0.07450980392156863, 1.0, 1.0, 1.0, 0.0784313725490196,\n      1.0, 1.0, 1.0, 0.08235294117647059, 1.0, 1.0, 1.0, 0.08627450980392157, 1.0, 1.0, 1.0,\n      0.09019607843137255, 1.0, 1.0, 1.0, 0.09411764705882353, 1.0, 1.0, 1.0, 0.09803921568627451,\n      1.0, 1.0, 1.0, 0.10196078431372549, 0.737254902, 0.737254902, 0.737254902,\n      0.10588235294117647, 0.737254902, 0.737254902, 0.737254902, 0.10980392156862745, 0.737254902,\n      0.737254902, 0.737254902, 0.11372549019607843, 0.737254902, 0.737254902, 0.737254902,\n      0.11764705882352942, 0.737254902, 0.737254902, 0.737254902, 0.12156862745098039, 0.737254902,\n      0.737254902, 0.737254902, 0.12549019607843137, 0.737254902, 0.737254902, 0.737254902,\n      0.12941176470588237, 0.737254902, 0.737254902, 0.737254902, 0.13333333333333333, 0.737254902,\n      0.737254902, 0.737254902, 0.13725490196078433, 0.737254902, 0.737254902, 0.737254902,\n      0.1411764705882353, 0.737254902, 0.737254902, 0.737254902, 0.1450980392156863, 0.737254902,\n      0.737254902, 0.737254902, 0.14901960784313725, 0.737254902, 0.737254902, 0.737254902,\n      0.15294117647058825, 0.737254902, 0.737254902, 0.737254902, 0.1568627450980392, 0.737254902,\n      0.737254902, 0.737254902, 0.1607843137254902, 0.737254902, 0.737254902, 0.737254902,\n      0.16470588235294117, 0.737254902, 0.737254902, 0.737254902, 0.16862745098039217, 0.737254902,\n      0.737254902, 0.737254902, 0.17254901960784313, 0.737254902, 0.737254902, 0.737254902,\n      0.17647058823529413, 0.737254902, 0.737254902, 0.737254902, 0.1803921568627451, 0.737254902,\n      0.737254902, 0.737254902, 0.1843137254901961, 0.737254902, 0.737254902, 0.737254902,\n      0.18823529411764706, 0.737254902, 0.737254902, 0.737254902, 0.19215686274509805, 0.737254902,\n      0.737254902, 0.737254902, 0.19607843137254902, 0.737254902, 0.737254902, 0.737254902, 0.2,\n      0.737254902, 0.737254902, 0.737254902, 0.20392156862745098, 0.431372549, 0.0, 0.568627451,\n      0.20784313725490197, 0.431372549, 0.0, 0.568627451, 0.21176470588235294, 0.431372549, 0.0,\n      0.568627451, 0.21568627450980393, 0.431372549, 0.0, 0.568627451, 0.2196078431372549,\n      0.431372549, 0.0, 0.568627451, 0.2235294117647059, 0.431372549, 0.0, 0.568627451,\n      0.22745098039215686, 0.431372549, 0.0, 0.568627451, 0.23137254901960785, 0.431372549, 0.0,\n      0.568627451, 0.23529411764705885, 0.431372549, 0.0, 0.568627451, 0.23921568627450984,\n      0.431372549, 0.0, 0.568627451, 0.24313725490196078, 0.431372549, 0.0, 0.568627451,\n      0.24705882352941178, 0.431372549, 0.0, 0.568627451, 0.25098039215686274, 0.431372549, 0.0,\n      0.568627451, 0.2549019607843137, 0.431372549, 0.0, 0.568627451, 0.25882352941176473,\n      0.431372549, 0.0, 0.568627451, 0.2627450980392157, 0.431372549, 0.0, 0.568627451,\n      0.26666666666666666, 0.431372549, 0.0, 0.568627451, 0.27058823529411763, 0.431372549, 0.0,\n      0.568627451, 0.27450980392156865, 0.431372549, 0.0, 0.568627451, 0.2784313725490196,\n      0.431372549, 0.0, 0.568627451, 0.2823529411764706, 0.431372549, 0.0, 0.568627451,\n      0.28627450980392155, 0.431372549, 0.0, 0.568627451, 0.2901960784313726, 0.431372549, 0.0,\n      0.568627451, 0.29411764705882354, 0.431372549, 0.0, 0.568627451, 0.2980392156862745,\n      0.431372549, 0.0, 0.568627451, 0.30196078431372547, 0.431372549, 0.0, 0.568627451,\n      0.3058823529411765, 0.2509803922, 0.3333333333, 0.6509803922, 0.30980392156862746,\n      0.2509803922, 0.3333333333, 0.6509803922, 0.3137254901960784, 0.2509803922, 0.3333333333,\n      0.6509803922, 0.3176470588235294, 0.2509803922, 0.3333333333, 0.6509803922,\n      0.3215686274509804, 0.2509803922, 0.3333333333, 0.6509803922, 0.3254901960784314,\n      0.2509803922, 0.3333333333, 0.6509803922, 0.32941176470588235, 0.2509803922, 0.3333333333,\n      0.6509803922, 0.3333333333333333, 0.2509803922, 0.3333333333, 0.6509803922,\n      0.33725490196078434, 0.2509803922, 0.3333333333, 0.6509803922, 0.3411764705882353,\n      0.2509803922, 0.3333333333, 0.6509803922, 0.34509803921568627, 0.2509803922, 0.3333333333,\n      0.6509803922, 0.34901960784313724, 0.2509803922, 0.3333333333, 0.6509803922,\n      0.35294117647058826, 0.2509803922, 0.3333333333, 0.6509803922, 0.3568627450980392,\n      0.2509803922, 0.3333333333, 0.6509803922, 0.3607843137254902, 0.2509803922, 0.3333333333,\n      0.6509803922, 0.36470588235294116, 0.2509803922, 0.3333333333, 0.6509803922,\n      0.3686274509803922, 0.2509803922, 0.3333333333, 0.6509803922, 0.37254901960784315,\n      0.2509803922, 0.3333333333, 0.6509803922, 0.3764705882352941, 0.2509803922, 0.3333333333,\n      0.6509803922, 0.3803921568627451, 0.2509803922, 0.3333333333, 0.6509803922,\n      0.3843137254901961, 0.2509803922, 0.3333333333, 0.6509803922, 0.38823529411764707,\n      0.2509803922, 0.3333333333, 0.6509803922, 0.39215686274509803, 0.2509803922, 0.3333333333,\n      0.6509803922, 0.396078431372549, 0.2509803922, 0.3333333333, 0.6509803922, 0.4, 0.2509803922,\n      0.3333333333, 0.6509803922, 0.403921568627451, 0.2509803922, 0.3333333333, 0.6509803922,\n      0.40784313725490196, 0.0, 0.8, 1.0, 0.4117647058823529, 0.0, 0.8, 1.0, 0.41568627450980394,\n      0.0, 0.8, 1.0, 0.4196078431372549, 0.0, 0.8, 1.0, 0.4235294117647059, 0.0, 0.8, 1.0,\n      0.42745098039215684, 0.0, 0.8, 1.0, 0.43137254901960786, 0.0, 0.8, 1.0, 0.43529411764705883,\n      0.0, 0.8, 1.0, 0.4392156862745098, 0.0, 0.8, 1.0, 0.44313725490196076, 0.0, 0.8, 1.0,\n      0.4470588235294118, 0.0, 0.8, 1.0, 0.45098039215686275, 0.0, 0.8, 1.0, 0.4549019607843137,\n      0.0, 0.8, 1.0, 0.4588235294117647, 0.0, 0.8, 1.0, 0.4627450980392157, 0.0, 0.8, 1.0,\n      0.4666666666666667, 0.0, 0.8, 1.0, 0.4705882352941177, 0.0, 0.8, 1.0, 0.4745098039215686, 0.0,\n      0.8, 1.0, 0.4784313725490197, 0.0, 0.8, 1.0, 0.48235294117647065, 0.0, 0.8, 1.0,\n      0.48627450980392156, 0.0, 0.8, 1.0, 0.49019607843137253, 0.0, 0.8, 1.0, 0.49411764705882355,\n      0.0, 0.8, 1.0, 0.4980392156862745, 0.0, 0.8, 1.0, 0.5019607843137255, 0.0, 0.8, 1.0,\n      0.5058823529411764, 0.0, 0.6666666667, 0.5333333333, 0.5098039215686274, 0.0, 0.6666666667,\n      0.5333333333, 0.5137254901960784, 0.0, 0.6666666667, 0.5333333333, 0.5176470588235295, 0.0,\n      0.6666666667, 0.5333333333, 0.5215686274509804, 0.0, 0.6666666667, 0.5333333333,\n      0.5254901960784314, 0.0, 0.6666666667, 0.5333333333, 0.5294117647058824, 0.0, 0.6666666667,\n      0.5333333333, 0.5333333333333333, 0.0, 0.6666666667, 0.5333333333, 0.5372549019607843, 0.0,\n      0.6666666667, 0.5333333333, 0.5411764705882353, 0.0, 0.6666666667, 0.5333333333,\n      0.5450980392156862, 0.0, 0.6666666667, 0.5333333333, 0.5490196078431373, 0.0, 0.6666666667,\n      0.5333333333, 0.5529411764705883, 0.0, 0.6666666667, 0.5333333333, 0.5568627450980392, 0.0,\n      0.6666666667, 0.5333333333, 0.5607843137254902, 0.0, 0.6666666667, 0.5333333333,\n      0.5647058823529412, 0.0, 0.6666666667, 0.5333333333, 0.5686274509803921, 0.0, 0.6666666667,\n      0.5333333333, 0.5725490196078431, 0.0, 0.6666666667, 0.5333333333, 0.5764705882352941, 0.0,\n      0.6666666667, 0.5333333333, 0.5803921568627451, 0.0, 0.6666666667, 0.5333333333,\n      0.5843137254901961, 0.0, 0.6666666667, 0.5333333333, 0.5882352941176471, 0.0, 0.6666666667,\n      0.5333333333, 0.592156862745098, 0.0, 0.6666666667, 0.5333333333, 0.596078431372549, 0.0,\n      0.6666666667, 0.5333333333, 0.6, 0.0, 0.6666666667, 0.5333333333, 0.6039215686274509, 0.0,\n      0.6666666667, 0.5333333333, 0.6078431372549019, 0.4, 1.0, 0.4, 0.611764705882353, 0.4, 1.0,\n      0.4, 0.615686274509804, 0.4, 1.0, 0.4, 0.6196078431372549, 0.4, 1.0, 0.4, 0.6235294117647059,\n      0.4, 1.0, 0.4, 0.6274509803921569, 0.4, 1.0, 0.4, 0.6313725490196078, 0.4, 1.0, 0.4,\n      0.6352941176470588, 0.4, 1.0, 0.4, 0.6392156862745098, 0.4, 1.0, 0.4, 0.6431372549019608, 0.4,\n      1.0, 0.4, 0.6470588235294118, 0.4, 1.0, 0.4, 0.6509803921568628, 0.4, 1.0, 0.4,\n      0.6549019607843137, 0.4, 1.0, 0.4, 0.6588235294117647, 0.4, 1.0, 0.4, 0.6627450980392157, 0.4,\n      1.0, 0.4, 0.6666666666666666, 0.4, 1.0, 0.4, 0.6705882352941176, 0.4, 1.0, 0.4,\n      0.6745098039215687, 0.4, 1.0, 0.4, 0.6784313725490196, 0.4, 1.0, 0.4, 0.6823529411764706, 0.4,\n      1.0, 0.4, 0.6862745098039216, 0.4, 1.0, 0.4, 0.6901960784313725, 0.4, 1.0, 0.4,\n      0.6941176470588235, 0.4, 1.0, 0.4, 0.6980392156862745, 0.4, 1.0, 0.4, 0.7019607843137254, 0.4,\n      1.0, 0.4, 0.7058823529411765, 1.0, 0.9490196078, 0.0, 0.7098039215686275, 1.0, 0.9490196078,\n      0.0, 0.7137254901960784, 1.0, 0.9490196078, 0.0, 0.7176470588235294, 1.0, 0.9490196078, 0.0,\n      0.7215686274509804, 1.0, 0.9490196078, 0.0, 0.7254901960784313, 1.0, 0.9490196078, 0.0,\n      0.7294117647058823, 1.0, 0.9490196078, 0.0, 0.7333333333333333, 1.0, 0.9490196078, 0.0,\n      0.7372549019607844, 1.0, 0.9490196078, 0.0, 0.7411764705882353, 1.0, 0.9490196078, 0.0,\n      0.7450980392156863, 1.0, 0.9490196078, 0.0, 0.7490196078431373, 1.0, 0.9490196078, 0.0,\n      0.7529411764705882, 1.0, 0.9490196078, 0.0, 0.7568627450980392, 1.0, 0.9490196078, 0.0,\n      0.7607843137254902, 1.0, 0.9490196078, 0.0, 0.7647058823529411, 1.0, 0.9490196078, 0.0,\n      0.7686274509803922, 1.0, 0.9490196078, 0.0, 0.7725490196078432, 1.0, 0.9490196078, 0.0,\n      0.7764705882352941, 1.0, 0.9490196078, 0.0, 0.7803921568627451, 1.0, 0.9490196078, 0.0,\n      0.7843137254901961, 1.0, 0.9490196078, 0.0, 0.788235294117647, 1.0, 0.9490196078, 0.0,\n      0.792156862745098, 1.0, 0.9490196078, 0.0, 0.796078431372549, 1.0, 0.9490196078, 0.0, 0.8,\n      1.0, 0.9490196078, 0.0, 0.803921568627451, 1.0, 0.9490196078, 0.0, 0.807843137254902,\n      0.9490196078, 0.6509803922, 0.2509803922, 0.8117647058823529, 0.9490196078, 0.6509803922,\n      0.2509803922, 0.8156862745098039, 0.9490196078, 0.6509803922, 0.2509803922,\n      0.8196078431372549, 0.9490196078, 0.6509803922, 0.2509803922, 0.8235294117647058,\n      0.9490196078, 0.6509803922, 0.2509803922, 0.8274509803921568, 0.9490196078, 0.6509803922,\n      0.2509803922, 0.8313725490196079, 0.9490196078, 0.6509803922, 0.2509803922,\n      0.8352941176470589, 0.9490196078, 0.6509803922, 0.2509803922, 0.8392156862745098,\n      0.9490196078, 0.6509803922, 0.2509803922, 0.8431372549019608, 0.9490196078, 0.6509803922,\n      0.2509803922, 0.8470588235294118, 0.9490196078, 0.6509803922, 0.2509803922,\n      0.8509803921568627, 0.9490196078, 0.6509803922, 0.2509803922, 0.8549019607843137,\n      0.9490196078, 0.6509803922, 0.2509803922, 0.8588235294117647, 0.9490196078, 0.6509803922,\n      0.2509803922, 0.8627450980392157, 0.9490196078, 0.6509803922, 0.2509803922,\n      0.8666666666666667, 0.9490196078, 0.6509803922, 0.2509803922, 0.8705882352941177,\n      0.9490196078, 0.6509803922, 0.2509803922, 0.8745098039215686, 0.9490196078, 0.6509803922,\n      0.2509803922, 0.8784313725490196, 0.9490196078, 0.6509803922, 0.2509803922,\n      0.8823529411764706, 0.9490196078, 0.6509803922, 0.2509803922, 0.8862745098039215,\n      0.9490196078, 0.6509803922, 0.2509803922, 0.8901960784313725, 0.9490196078, 0.6509803922,\n      0.2509803922, 0.8941176470588236, 0.9490196078, 0.6509803922, 0.2509803922,\n      0.8980392156862745, 0.9490196078, 0.6509803922, 0.2509803922, 0.9019607843137255,\n      0.9490196078, 0.6509803922, 0.2509803922, 0.9058823529411765, 0.9490196078, 0.6509803922,\n      0.2509803922, 0.9098039215686274, 1.0, 0.0, 0.0, 0.9137254901960784, 1.0, 0.0, 0.0,\n      0.9176470588235294, 1.0, 0.0, 0.0, 0.9215686274509803, 1.0, 0.0, 0.0, 0.9254901960784314, 1.0,\n      0.0, 0.0, 0.9294117647058824, 1.0, 0.0, 0.0, 0.9333333333333333, 1.0, 0.0, 0.0,\n      0.9372549019607843, 1.0, 0.0, 0.0, 0.9411764705882354, 1.0, 0.0, 0.0, 0.9450980392156864, 1.0,\n      0.0, 0.0, 0.9490196078431372, 1.0, 0.0, 0.0, 0.9529411764705882, 1.0, 0.0, 0.0,\n      0.9568627450980394, 1.0, 0.0, 0.0, 0.9607843137254903, 1.0, 0.0, 0.0, 0.9647058823529413, 1.0,\n      0.0, 0.0, 0.9686274509803922, 1.0, 0.0, 0.0, 0.9725490196078431, 1.0, 0.0, 0.0,\n      0.9764705882352941, 1.0, 0.0, 0.0, 0.9803921568627451, 1.0, 0.0, 0.0, 0.984313725490196, 1.0,\n      0.0, 0.0, 0.9882352941176471, 1.0, 0.0, 0.0, 0.9921568627450981, 1.0, 0.0, 0.0,\n      0.996078431372549, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0,\n    ],\n    description: 'SUV',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'ge_256',\n    RGBPoints: [\n      0.0, 0.0039215686, 0.0078431373, 0.0078431373, 0.00392156862745098, 0.0039215686,\n      0.0078431373, 0.0078431373, 0.00784313725490196, 0.0039215686, 0.0078431373, 0.0117647059,\n      0.011764705882352941, 0.0039215686, 0.0117647059, 0.0156862745, 0.01568627450980392,\n      0.0039215686, 0.0117647059, 0.0196078431, 0.0196078431372549, 0.0039215686, 0.0156862745,\n      0.0235294118, 0.023529411764705882, 0.0039215686, 0.0156862745, 0.0274509804,\n      0.027450980392156862, 0.0039215686, 0.0196078431, 0.031372549, 0.03137254901960784,\n      0.0039215686, 0.0196078431, 0.0352941176, 0.03529411764705882, 0.0039215686, 0.0235294118,\n      0.0392156863, 0.0392156862745098, 0.0039215686, 0.0235294118, 0.0431372549,\n      0.043137254901960784, 0.0039215686, 0.0274509804, 0.0470588235, 0.047058823529411764,\n      0.0039215686, 0.0274509804, 0.0509803922, 0.050980392156862744, 0.0039215686, 0.031372549,\n      0.0549019608, 0.054901960784313725, 0.0039215686, 0.031372549, 0.0588235294,\n      0.05882352941176471, 0.0039215686, 0.0352941176, 0.062745098, 0.06274509803921569,\n      0.0039215686, 0.0352941176, 0.0666666667, 0.06666666666666667, 0.0039215686, 0.0392156863,\n      0.0705882353, 0.07058823529411765, 0.0039215686, 0.0392156863, 0.0745098039,\n      0.07450980392156863, 0.0039215686, 0.0431372549, 0.0784313725, 0.0784313725490196,\n      0.0039215686, 0.0431372549, 0.0823529412, 0.08235294117647059, 0.0039215686, 0.0470588235,\n      0.0862745098, 0.08627450980392157, 0.0039215686, 0.0470588235, 0.0901960784,\n      0.09019607843137255, 0.0039215686, 0.0509803922, 0.0941176471, 0.09411764705882353,\n      0.0039215686, 0.0509803922, 0.0980392157, 0.09803921568627451, 0.0039215686, 0.0549019608,\n      0.1019607843, 0.10196078431372549, 0.0039215686, 0.0549019608, 0.1058823529,\n      0.10588235294117647, 0.0039215686, 0.0588235294, 0.1098039216, 0.10980392156862745,\n      0.0039215686, 0.0588235294, 0.1137254902, 0.11372549019607843, 0.0039215686, 0.062745098,\n      0.1176470588, 0.11764705882352942, 0.0039215686, 0.062745098, 0.1215686275,\n      0.12156862745098039, 0.0039215686, 0.0666666667, 0.1254901961, 0.12549019607843137,\n      0.0039215686, 0.0666666667, 0.1294117647, 0.12941176470588237, 0.0039215686, 0.0705882353,\n      0.1333333333, 0.13333333333333333, 0.0039215686, 0.0705882353, 0.137254902,\n      0.13725490196078433, 0.0039215686, 0.0745098039, 0.1411764706, 0.1411764705882353,\n      0.0039215686, 0.0745098039, 0.1450980392, 0.1450980392156863, 0.0039215686, 0.0784313725,\n      0.1490196078, 0.14901960784313725, 0.0039215686, 0.0784313725, 0.1529411765,\n      0.15294117647058825, 0.0039215686, 0.0823529412, 0.1568627451, 0.1568627450980392,\n      0.0039215686, 0.0823529412, 0.1607843137, 0.1607843137254902, 0.0039215686, 0.0862745098,\n      0.1647058824, 0.16470588235294117, 0.0039215686, 0.0862745098, 0.168627451,\n      0.16862745098039217, 0.0039215686, 0.0901960784, 0.1725490196, 0.17254901960784313,\n      0.0039215686, 0.0901960784, 0.1764705882, 0.17647058823529413, 0.0039215686, 0.0941176471,\n      0.1803921569, 0.1803921568627451, 0.0039215686, 0.0941176471, 0.1843137255,\n      0.1843137254901961, 0.0039215686, 0.0980392157, 0.1882352941, 0.18823529411764706,\n      0.0039215686, 0.0980392157, 0.1921568627, 0.19215686274509805, 0.0039215686, 0.1019607843,\n      0.1960784314, 0.19607843137254902, 0.0039215686, 0.1019607843, 0.2, 0.2, 0.0039215686,\n      0.1058823529, 0.2039215686, 0.20392156862745098, 0.0039215686, 0.1058823529, 0.2078431373,\n      0.20784313725490197, 0.0039215686, 0.1098039216, 0.2117647059, 0.21176470588235294,\n      0.0039215686, 0.1098039216, 0.2156862745, 0.21568627450980393, 0.0039215686, 0.1137254902,\n      0.2196078431, 0.2196078431372549, 0.0039215686, 0.1137254902, 0.2235294118,\n      0.2235294117647059, 0.0039215686, 0.1176470588, 0.2274509804, 0.22745098039215686,\n      0.0039215686, 0.1176470588, 0.231372549, 0.23137254901960785, 0.0039215686, 0.1215686275,\n      0.2352941176, 0.23529411764705885, 0.0039215686, 0.1215686275, 0.2392156863,\n      0.23921568627450984, 0.0039215686, 0.1254901961, 0.2431372549, 0.24313725490196078,\n      0.0039215686, 0.1254901961, 0.2470588235, 0.24705882352941178, 0.0039215686, 0.1294117647,\n      0.2509803922, 0.25098039215686274, 0.0039215686, 0.1294117647, 0.2509803922,\n      0.2549019607843137, 0.0078431373, 0.1254901961, 0.2549019608, 0.25882352941176473,\n      0.0156862745, 0.1254901961, 0.2588235294, 0.2627450980392157, 0.0235294118, 0.1215686275,\n      0.262745098, 0.26666666666666666, 0.031372549, 0.1215686275, 0.2666666667,\n      0.27058823529411763, 0.0392156863, 0.1176470588, 0.2705882353, 0.27450980392156865,\n      0.0470588235, 0.1176470588, 0.2745098039, 0.2784313725490196, 0.0549019608, 0.1137254902,\n      0.2784313725, 0.2823529411764706, 0.062745098, 0.1137254902, 0.2823529412,\n      0.28627450980392155, 0.0705882353, 0.1098039216, 0.2862745098, 0.2901960784313726,\n      0.0784313725, 0.1098039216, 0.2901960784, 0.29411764705882354, 0.0862745098, 0.1058823529,\n      0.2941176471, 0.2980392156862745, 0.0941176471, 0.1058823529, 0.2980392157,\n      0.30196078431372547, 0.1019607843, 0.1019607843, 0.3019607843, 0.3058823529411765,\n      0.1098039216, 0.1019607843, 0.3058823529, 0.30980392156862746, 0.1176470588, 0.0980392157,\n      0.3098039216, 0.3137254901960784, 0.1254901961, 0.0980392157, 0.3137254902,\n      0.3176470588235294, 0.1333333333, 0.0941176471, 0.3176470588, 0.3215686274509804,\n      0.1411764706, 0.0941176471, 0.3215686275, 0.3254901960784314, 0.1490196078, 0.0901960784,\n      0.3254901961, 0.32941176470588235, 0.1568627451, 0.0901960784, 0.3294117647,\n      0.3333333333333333, 0.1647058824, 0.0862745098, 0.3333333333, 0.33725490196078434,\n      0.1725490196, 0.0862745098, 0.337254902, 0.3411764705882353, 0.1803921569, 0.0823529412,\n      0.3411764706, 0.34509803921568627, 0.1882352941, 0.0823529412, 0.3450980392,\n      0.34901960784313724, 0.1960784314, 0.0784313725, 0.3490196078, 0.35294117647058826,\n      0.2039215686, 0.0784313725, 0.3529411765, 0.3568627450980392, 0.2117647059, 0.0745098039,\n      0.3568627451, 0.3607843137254902, 0.2196078431, 0.0745098039, 0.3607843137,\n      0.36470588235294116, 0.2274509804, 0.0705882353, 0.3647058824, 0.3686274509803922,\n      0.2352941176, 0.0705882353, 0.368627451, 0.37254901960784315, 0.2431372549, 0.0666666667,\n      0.3725490196, 0.3764705882352941, 0.2509803922, 0.0666666667, 0.3764705882,\n      0.3803921568627451, 0.2549019608, 0.062745098, 0.3803921569, 0.3843137254901961, 0.262745098,\n      0.062745098, 0.3843137255, 0.38823529411764707, 0.2705882353, 0.0588235294, 0.3882352941,\n      0.39215686274509803, 0.2784313725, 0.0588235294, 0.3921568627, 0.396078431372549,\n      0.2862745098, 0.0549019608, 0.3960784314, 0.4, 0.2941176471, 0.0549019608, 0.4,\n      0.403921568627451, 0.3019607843, 0.0509803922, 0.4039215686, 0.40784313725490196,\n      0.3098039216, 0.0509803922, 0.4078431373, 0.4117647058823529, 0.3176470588, 0.0470588235,\n      0.4117647059, 0.41568627450980394, 0.3254901961, 0.0470588235, 0.4156862745,\n      0.4196078431372549, 0.3333333333, 0.0431372549, 0.4196078431, 0.4235294117647059,\n      0.3411764706, 0.0431372549, 0.4235294118, 0.42745098039215684, 0.3490196078, 0.0392156863,\n      0.4274509804, 0.43137254901960786, 0.3568627451, 0.0392156863, 0.431372549,\n      0.43529411764705883, 0.3647058824, 0.0352941176, 0.4352941176, 0.4392156862745098,\n      0.3725490196, 0.0352941176, 0.4392156863, 0.44313725490196076, 0.3803921569, 0.031372549,\n      0.4431372549, 0.4470588235294118, 0.3882352941, 0.031372549, 0.4470588235,\n      0.45098039215686275, 0.3960784314, 0.0274509804, 0.4509803922, 0.4549019607843137,\n      0.4039215686, 0.0274509804, 0.4549019608, 0.4588235294117647, 0.4117647059, 0.0235294118,\n      0.4588235294, 0.4627450980392157, 0.4196078431, 0.0235294118, 0.462745098, 0.4666666666666667,\n      0.4274509804, 0.0196078431, 0.4666666667, 0.4705882352941177, 0.4352941176, 0.0196078431,\n      0.4705882353, 0.4745098039215686, 0.4431372549, 0.0156862745, 0.4745098039,\n      0.4784313725490197, 0.4509803922, 0.0156862745, 0.4784313725, 0.48235294117647065,\n      0.4588235294, 0.0117647059, 0.4823529412, 0.48627450980392156, 0.4666666667, 0.0117647059,\n      0.4862745098, 0.49019607843137253, 0.4745098039, 0.0078431373, 0.4901960784,\n      0.49411764705882355, 0.4823529412, 0.0078431373, 0.4941176471, 0.4980392156862745,\n      0.4901960784, 0.0039215686, 0.4980392157, 0.5019607843137255, 0.4980392157, 0.0117647059,\n      0.4980392157, 0.5058823529411764, 0.5058823529, 0.0156862745, 0.4901960784,\n      0.5098039215686274, 0.5137254902, 0.0235294118, 0.4823529412, 0.5137254901960784,\n      0.5215686275, 0.0274509804, 0.4745098039, 0.5176470588235295, 0.5294117647, 0.0352941176,\n      0.4666666667, 0.5215686274509804, 0.537254902, 0.0392156863, 0.4588235294, 0.5254901960784314,\n      0.5450980392, 0.0470588235, 0.4509803922, 0.5294117647058824, 0.5529411765, 0.0509803922,\n      0.4431372549, 0.5333333333333333, 0.5607843137, 0.0588235294, 0.4352941176,\n      0.5372549019607843, 0.568627451, 0.062745098, 0.4274509804, 0.5411764705882353, 0.5764705882,\n      0.0705882353, 0.4196078431, 0.5450980392156862, 0.5843137255, 0.0745098039, 0.4117647059,\n      0.5490196078431373, 0.5921568627, 0.0823529412, 0.4039215686, 0.5529411764705883, 0.6,\n      0.0862745098, 0.3960784314, 0.5568627450980392, 0.6078431373, 0.0941176471, 0.3882352941,\n      0.5607843137254902, 0.6156862745, 0.0980392157, 0.3803921569, 0.5647058823529412,\n      0.6235294118, 0.1058823529, 0.3725490196, 0.5686274509803921, 0.631372549, 0.1098039216,\n      0.3647058824, 0.5725490196078431, 0.6392156863, 0.1176470588, 0.3568627451,\n      0.5764705882352941, 0.6470588235, 0.1215686275, 0.3490196078, 0.5803921568627451,\n      0.6549019608, 0.1294117647, 0.3411764706, 0.5843137254901961, 0.662745098, 0.1333333333,\n      0.3333333333, 0.5882352941176471, 0.6705882353, 0.1411764706, 0.3254901961, 0.592156862745098,\n      0.6784313725, 0.1450980392, 0.3176470588, 0.596078431372549, 0.6862745098, 0.1529411765,\n      0.3098039216, 0.6, 0.6941176471, 0.1568627451, 0.3019607843, 0.6039215686274509, 0.7019607843,\n      0.1647058824, 0.2941176471, 0.6078431372549019, 0.7098039216, 0.168627451, 0.2862745098,\n      0.611764705882353, 0.7176470588, 0.1764705882, 0.2784313725, 0.615686274509804, 0.7254901961,\n      0.1803921569, 0.2705882353, 0.6196078431372549, 0.7333333333, 0.1882352941, 0.262745098,\n      0.6235294117647059, 0.7411764706, 0.1921568627, 0.2549019608, 0.6274509803921569,\n      0.7490196078, 0.2, 0.2509803922, 0.6313725490196078, 0.7529411765, 0.2039215686, 0.2431372549,\n      0.6352941176470588, 0.7607843137, 0.2117647059, 0.2352941176, 0.6392156862745098, 0.768627451,\n      0.2156862745, 0.2274509804, 0.6431372549019608, 0.7764705882, 0.2235294118, 0.2196078431,\n      0.6470588235294118, 0.7843137255, 0.2274509804, 0.2117647059, 0.6509803921568628,\n      0.7921568627, 0.2352941176, 0.2039215686, 0.6549019607843137, 0.8, 0.2392156863, 0.1960784314,\n      0.6588235294117647, 0.8078431373, 0.2470588235, 0.1882352941, 0.6627450980392157,\n      0.8156862745, 0.2509803922, 0.1803921569, 0.6666666666666666, 0.8235294118, 0.2549019608,\n      0.1725490196, 0.6705882352941176, 0.831372549, 0.2588235294, 0.1647058824, 0.6745098039215687,\n      0.8392156863, 0.2666666667, 0.1568627451, 0.6784313725490196, 0.8470588235, 0.2705882353,\n      0.1490196078, 0.6823529411764706, 0.8549019608, 0.2784313725, 0.1411764706,\n      0.6862745098039216, 0.862745098, 0.2823529412, 0.1333333333, 0.6901960784313725, 0.8705882353,\n      0.2901960784, 0.1254901961, 0.6941176470588235, 0.8784313725, 0.2941176471, 0.1176470588,\n      0.6980392156862745, 0.8862745098, 0.3019607843, 0.1098039216, 0.7019607843137254,\n      0.8941176471, 0.3058823529, 0.1019607843, 0.7058823529411765, 0.9019607843, 0.3137254902,\n      0.0941176471, 0.7098039215686275, 0.9098039216, 0.3176470588, 0.0862745098,\n      0.7137254901960784, 0.9176470588, 0.3254901961, 0.0784313725, 0.7176470588235294,\n      0.9254901961, 0.3294117647, 0.0705882353, 0.7215686274509804, 0.9333333333, 0.337254902,\n      0.062745098, 0.7254901960784313, 0.9411764706, 0.3411764706, 0.0549019608, 0.7294117647058823,\n      0.9490196078, 0.3490196078, 0.0470588235, 0.7333333333333333, 0.9568627451, 0.3529411765,\n      0.0392156863, 0.7372549019607844, 0.9647058824, 0.3607843137, 0.031372549, 0.7411764705882353,\n      0.9725490196, 0.3647058824, 0.0235294118, 0.7450980392156863, 0.9803921569, 0.3725490196,\n      0.0156862745, 0.7490196078431373, 0.9882352941, 0.3725490196, 0.0039215686,\n      0.7529411764705882, 0.9960784314, 0.3843137255, 0.0156862745, 0.7568627450980392,\n      0.9960784314, 0.3921568627, 0.031372549, 0.7607843137254902, 0.9960784314, 0.4039215686,\n      0.0470588235, 0.7647058823529411, 0.9960784314, 0.4117647059, 0.062745098, 0.7686274509803922,\n      0.9960784314, 0.4235294118, 0.0784313725, 0.7725490196078432, 0.9960784314, 0.431372549,\n      0.0941176471, 0.7764705882352941, 0.9960784314, 0.4431372549, 0.1098039216,\n      0.7803921568627451, 0.9960784314, 0.4509803922, 0.1254901961, 0.7843137254901961,\n      0.9960784314, 0.462745098, 0.1411764706, 0.788235294117647, 0.9960784314, 0.4705882353,\n      0.1568627451, 0.792156862745098, 0.9960784314, 0.4823529412, 0.1725490196, 0.796078431372549,\n      0.9960784314, 0.4901960784, 0.1882352941, 0.8, 0.9960784314, 0.5019607843, 0.2039215686,\n      0.803921568627451, 0.9960784314, 0.5098039216, 0.2196078431, 0.807843137254902, 0.9960784314,\n      0.5215686275, 0.2352941176, 0.8117647058823529, 0.9960784314, 0.5294117647, 0.2509803922,\n      0.8156862745098039, 0.9960784314, 0.5411764706, 0.262745098, 0.8196078431372549, 0.9960784314,\n      0.5490196078, 0.2784313725, 0.8235294117647058, 0.9960784314, 0.5607843137, 0.2941176471,\n      0.8274509803921568, 0.9960784314, 0.568627451, 0.3098039216, 0.8313725490196079, 0.9960784314,\n      0.5803921569, 0.3254901961, 0.8352941176470589, 0.9960784314, 0.5882352941, 0.3411764706,\n      0.8392156862745098, 0.9960784314, 0.6, 0.3568627451, 0.8431372549019608, 0.9960784314,\n      0.6078431373, 0.3725490196, 0.8470588235294118, 0.9960784314, 0.6196078431, 0.3882352941,\n      0.8509803921568627, 0.9960784314, 0.6274509804, 0.4039215686, 0.8549019607843137,\n      0.9960784314, 0.6392156863, 0.4196078431, 0.8588235294117647, 0.9960784314, 0.6470588235,\n      0.4352941176, 0.8627450980392157, 0.9960784314, 0.6588235294, 0.4509803922,\n      0.8666666666666667, 0.9960784314, 0.6666666667, 0.4666666667, 0.8705882352941177,\n      0.9960784314, 0.6784313725, 0.4823529412, 0.8745098039215686, 0.9960784314, 0.6862745098,\n      0.4980392157, 0.8784313725490196, 0.9960784314, 0.6980392157, 0.5137254902,\n      0.8823529411764706, 0.9960784314, 0.7058823529, 0.5294117647, 0.8862745098039215,\n      0.9960784314, 0.7176470588, 0.5450980392, 0.8901960784313725, 0.9960784314, 0.7254901961,\n      0.5607843137, 0.8941176470588236, 0.9960784314, 0.737254902, 0.5764705882, 0.8980392156862745,\n      0.9960784314, 0.7450980392, 0.5921568627, 0.9019607843137255, 0.9960784314, 0.7529411765,\n      0.6078431373, 0.9058823529411765, 0.9960784314, 0.7607843137, 0.6235294118,\n      0.9098039215686274, 0.9960784314, 0.7725490196, 0.6392156863, 0.9137254901960784,\n      0.9960784314, 0.7803921569, 0.6549019608, 0.9176470588235294, 0.9960784314, 0.7921568627,\n      0.6705882353, 0.9215686274509803, 0.9960784314, 0.8, 0.6862745098, 0.9254901960784314,\n      0.9960784314, 0.8117647059, 0.7019607843, 0.9294117647058824, 0.9960784314, 0.8196078431,\n      0.7176470588, 0.9333333333333333, 0.9960784314, 0.831372549, 0.7333333333, 0.9372549019607843,\n      0.9960784314, 0.8392156863, 0.7490196078, 0.9411764705882354, 0.9960784314, 0.8509803922,\n      0.7607843137, 0.9450980392156864, 0.9960784314, 0.8588235294, 0.7764705882,\n      0.9490196078431372, 0.9960784314, 0.8705882353, 0.7921568627, 0.9529411764705882,\n      0.9960784314, 0.8784313725, 0.8078431373, 0.9568627450980394, 0.9960784314, 0.8901960784,\n      0.8235294118, 0.9607843137254903, 0.9960784314, 0.8980392157, 0.8392156863,\n      0.9647058823529413, 0.9960784314, 0.9098039216, 0.8549019608, 0.9686274509803922,\n      0.9960784314, 0.9176470588, 0.8705882353, 0.9725490196078431, 0.9960784314, 0.9294117647,\n      0.8862745098, 0.9764705882352941, 0.9960784314, 0.937254902, 0.9019607843, 0.9803921568627451,\n      0.9960784314, 0.9490196078, 0.9176470588, 0.984313725490196, 0.9960784314, 0.9568627451,\n      0.9333333333, 0.9882352941176471, 0.9960784314, 0.968627451, 0.9490196078, 0.9921568627450981,\n      0.9960784314, 0.9764705882, 0.9647058824, 0.996078431372549, 0.9960784314, 0.9882352941,\n      0.9803921569, 1.0, 0.9960784314, 0.9882352941, 0.9803921569,\n    ],\n    description: 'GE 256',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'ge',\n    RGBPoints: [\n      0.0, 0.0078431373, 0.0078431373, 0.0078431373, 0.00392156862745098, 0.0078431373,\n      0.0078431373, 0.0078431373, 0.00784313725490196, 0.0078431373, 0.0078431373, 0.0078431373,\n      0.011764705882352941, 0.0078431373, 0.0078431373, 0.0078431373, 0.01568627450980392,\n      0.0078431373, 0.0078431373, 0.0078431373, 0.0196078431372549, 0.0078431373, 0.0078431373,\n      0.0078431373, 0.023529411764705882, 0.0078431373, 0.0078431373, 0.0078431373,\n      0.027450980392156862, 0.0078431373, 0.0078431373, 0.0078431373, 0.03137254901960784,\n      0.0078431373, 0.0078431373, 0.0078431373, 0.03529411764705882, 0.0078431373, 0.0078431373,\n      0.0078431373, 0.0392156862745098, 0.0078431373, 0.0078431373, 0.0078431373,\n      0.043137254901960784, 0.0078431373, 0.0078431373, 0.0078431373, 0.047058823529411764,\n      0.0078431373, 0.0078431373, 0.0078431373, 0.050980392156862744, 0.0078431373, 0.0078431373,\n      0.0078431373, 0.054901960784313725, 0.0078431373, 0.0078431373, 0.0078431373,\n      0.05882352941176471, 0.0117647059, 0.0078431373, 0.0078431373, 0.06274509803921569,\n      0.0078431373, 0.0156862745, 0.0156862745, 0.06666666666666667, 0.0078431373, 0.0235294118,\n      0.0235294118, 0.07058823529411765, 0.0078431373, 0.031372549, 0.031372549,\n      0.07450980392156863, 0.0078431373, 0.0392156863, 0.0392156863, 0.0784313725490196,\n      0.0078431373, 0.0470588235, 0.0470588235, 0.08235294117647059, 0.0078431373, 0.0549019608,\n      0.0549019608, 0.08627450980392157, 0.0078431373, 0.062745098, 0.062745098,\n      0.09019607843137255, 0.0078431373, 0.0705882353, 0.0705882353, 0.09411764705882353,\n      0.0078431373, 0.0784313725, 0.0784313725, 0.09803921568627451, 0.0078431373, 0.0901960784,\n      0.0862745098, 0.10196078431372549, 0.0078431373, 0.0980392157, 0.0941176471,\n      0.10588235294117647, 0.0078431373, 0.1058823529, 0.1019607843, 0.10980392156862745,\n      0.0078431373, 0.1137254902, 0.1098039216, 0.11372549019607843, 0.0078431373, 0.1215686275,\n      0.1176470588, 0.11764705882352942, 0.0078431373, 0.1294117647, 0.1254901961,\n      0.12156862745098039, 0.0078431373, 0.137254902, 0.1333333333, 0.12549019607843137,\n      0.0078431373, 0.1450980392, 0.1411764706, 0.12941176470588237, 0.0078431373, 0.1529411765,\n      0.1490196078, 0.13333333333333333, 0.0078431373, 0.1647058824, 0.1568627451,\n      0.13725490196078433, 0.0078431373, 0.1725490196, 0.1647058824, 0.1411764705882353,\n      0.0078431373, 0.1803921569, 0.1725490196, 0.1450980392156863, 0.0078431373, 0.1882352941,\n      0.1803921569, 0.14901960784313725, 0.0078431373, 0.1960784314, 0.1882352941,\n      0.15294117647058825, 0.0078431373, 0.2039215686, 0.1960784314, 0.1568627450980392,\n      0.0078431373, 0.2117647059, 0.2039215686, 0.1607843137254902, 0.0078431373, 0.2196078431,\n      0.2117647059, 0.16470588235294117, 0.0078431373, 0.2274509804, 0.2196078431,\n      0.16862745098039217, 0.0078431373, 0.2352941176, 0.2274509804, 0.17254901960784313,\n      0.0078431373, 0.2470588235, 0.2352941176, 0.17647058823529413, 0.0078431373, 0.2509803922,\n      0.2431372549, 0.1803921568627451, 0.0078431373, 0.2549019608, 0.2509803922,\n      0.1843137254901961, 0.0078431373, 0.262745098, 0.2509803922, 0.18823529411764706,\n      0.0078431373, 0.2705882353, 0.2588235294, 0.19215686274509805, 0.0078431373, 0.2784313725,\n      0.2666666667, 0.19607843137254902, 0.0078431373, 0.2862745098, 0.2745098039, 0.2,\n      0.0078431373, 0.2941176471, 0.2823529412, 0.20392156862745098, 0.0078431373, 0.3019607843,\n      0.2901960784, 0.20784313725490197, 0.0078431373, 0.3137254902, 0.2980392157,\n      0.21176470588235294, 0.0078431373, 0.3215686275, 0.3058823529, 0.21568627450980393,\n      0.0078431373, 0.3294117647, 0.3137254902, 0.2196078431372549, 0.0078431373, 0.337254902,\n      0.3215686275, 0.2235294117647059, 0.0078431373, 0.3450980392, 0.3294117647,\n      0.22745098039215686, 0.0078431373, 0.3529411765, 0.337254902, 0.23137254901960785,\n      0.0078431373, 0.3607843137, 0.3450980392, 0.23529411764705885, 0.0078431373, 0.368627451,\n      0.3529411765, 0.23921568627450984, 0.0078431373, 0.3764705882, 0.3607843137,\n      0.24313725490196078, 0.0078431373, 0.3843137255, 0.368627451, 0.24705882352941178,\n      0.0078431373, 0.3960784314, 0.3764705882, 0.25098039215686274, 0.0078431373, 0.4039215686,\n      0.3843137255, 0.2549019607843137, 0.0078431373, 0.4117647059, 0.3921568627,\n      0.25882352941176473, 0.0078431373, 0.4196078431, 0.4, 0.2627450980392157, 0.0078431373,\n      0.4274509804, 0.4078431373, 0.26666666666666666, 0.0078431373, 0.4352941176, 0.4156862745,\n      0.27058823529411763, 0.0078431373, 0.4431372549, 0.4235294118, 0.27450980392156865,\n      0.0078431373, 0.4509803922, 0.431372549, 0.2784313725490196, 0.0078431373, 0.4588235294,\n      0.4392156863, 0.2823529411764706, 0.0078431373, 0.4705882353, 0.4470588235,\n      0.28627450980392155, 0.0078431373, 0.4784313725, 0.4549019608, 0.2901960784313726,\n      0.0078431373, 0.4862745098, 0.462745098, 0.29411764705882354, 0.0078431373, 0.4941176471,\n      0.4705882353, 0.2980392156862745, 0.0078431373, 0.5019607843, 0.4784313725,\n      0.30196078431372547, 0.0117647059, 0.5098039216, 0.4862745098, 0.3058823529411765,\n      0.0196078431, 0.5019607843, 0.4941176471, 0.30980392156862746, 0.0274509804, 0.4941176471,\n      0.5058823529, 0.3137254901960784, 0.0352941176, 0.4862745098, 0.5137254902,\n      0.3176470588235294, 0.0431372549, 0.4784313725, 0.5215686275, 0.3215686274509804,\n      0.0509803922, 0.4705882353, 0.5294117647, 0.3254901960784314, 0.0588235294, 0.462745098,\n      0.537254902, 0.32941176470588235, 0.0666666667, 0.4549019608, 0.5450980392,\n      0.3333333333333333, 0.0745098039, 0.4470588235, 0.5529411765, 0.33725490196078434,\n      0.0823529412, 0.4392156863, 0.5607843137, 0.3411764705882353, 0.0901960784, 0.431372549,\n      0.568627451, 0.34509803921568627, 0.0980392157, 0.4235294118, 0.5764705882,\n      0.34901960784313724, 0.1058823529, 0.4156862745, 0.5843137255, 0.35294117647058826,\n      0.1137254902, 0.4078431373, 0.5921568627, 0.3568627450980392, 0.1215686275, 0.4, 0.6,\n      0.3607843137254902, 0.1294117647, 0.3921568627, 0.6078431373, 0.36470588235294116,\n      0.137254902, 0.3843137255, 0.6156862745, 0.3686274509803922, 0.1450980392, 0.3764705882,\n      0.6235294118, 0.37254901960784315, 0.1529411765, 0.368627451, 0.631372549, 0.3764705882352941,\n      0.1607843137, 0.3607843137, 0.6392156863, 0.3803921568627451, 0.168627451, 0.3529411765,\n      0.6470588235, 0.3843137254901961, 0.1764705882, 0.3450980392, 0.6549019608,\n      0.38823529411764707, 0.1843137255, 0.337254902, 0.662745098, 0.39215686274509803,\n      0.1921568627, 0.3294117647, 0.6705882353, 0.396078431372549, 0.2, 0.3215686275, 0.6784313725,\n      0.4, 0.2078431373, 0.3137254902, 0.6862745098, 0.403921568627451, 0.2156862745, 0.3058823529,\n      0.6941176471, 0.40784313725490196, 0.2235294118, 0.2980392157, 0.7019607843,\n      0.4117647058823529, 0.231372549, 0.2901960784, 0.7098039216, 0.41568627450980394,\n      0.2392156863, 0.2823529412, 0.7176470588, 0.4196078431372549, 0.2470588235, 0.2745098039,\n      0.7254901961, 0.4235294117647059, 0.2509803922, 0.2666666667, 0.7333333333,\n      0.42745098039215684, 0.2509803922, 0.2588235294, 0.7411764706, 0.43137254901960786,\n      0.2588235294, 0.2509803922, 0.7490196078, 0.43529411764705883, 0.2666666667, 0.2509803922,\n      0.7490196078, 0.4392156862745098, 0.2745098039, 0.2431372549, 0.7568627451,\n      0.44313725490196076, 0.2823529412, 0.2352941176, 0.7647058824, 0.4470588235294118,\n      0.2901960784, 0.2274509804, 0.7725490196, 0.45098039215686275, 0.2980392157, 0.2196078431,\n      0.7803921569, 0.4549019607843137, 0.3058823529, 0.2117647059, 0.7882352941,\n      0.4588235294117647, 0.3137254902, 0.2039215686, 0.7960784314, 0.4627450980392157,\n      0.3215686275, 0.1960784314, 0.8039215686, 0.4666666666666667, 0.3294117647, 0.1882352941,\n      0.8117647059, 0.4705882352941177, 0.337254902, 0.1803921569, 0.8196078431, 0.4745098039215686,\n      0.3450980392, 0.1725490196, 0.8274509804, 0.4784313725490197, 0.3529411765, 0.1647058824,\n      0.8352941176, 0.48235294117647065, 0.3607843137, 0.1568627451, 0.8431372549,\n      0.48627450980392156, 0.368627451, 0.1490196078, 0.8509803922, 0.49019607843137253,\n      0.3764705882, 0.1411764706, 0.8588235294, 0.49411764705882355, 0.3843137255, 0.1333333333,\n      0.8666666667, 0.4980392156862745, 0.3921568627, 0.1254901961, 0.8745098039,\n      0.5019607843137255, 0.4, 0.1176470588, 0.8823529412, 0.5058823529411764, 0.4078431373,\n      0.1098039216, 0.8901960784, 0.5098039215686274, 0.4156862745, 0.1019607843, 0.8980392157,\n      0.5137254901960784, 0.4235294118, 0.0941176471, 0.9058823529, 0.5176470588235295, 0.431372549,\n      0.0862745098, 0.9137254902, 0.5215686274509804, 0.4392156863, 0.0784313725, 0.9215686275,\n      0.5254901960784314, 0.4470588235, 0.0705882353, 0.9294117647, 0.5294117647058824,\n      0.4549019608, 0.062745098, 0.937254902, 0.5333333333333333, 0.462745098, 0.0549019608,\n      0.9450980392, 0.5372549019607843, 0.4705882353, 0.0470588235, 0.9529411765,\n      0.5411764705882353, 0.4784313725, 0.0392156863, 0.9607843137, 0.5450980392156862,\n      0.4862745098, 0.031372549, 0.968627451, 0.5490196078431373, 0.4941176471, 0.0235294118,\n      0.9764705882, 0.5529411764705883, 0.4980392157, 0.0156862745, 0.9843137255,\n      0.5568627450980392, 0.5058823529, 0.0078431373, 0.9921568627, 0.5607843137254902,\n      0.5137254902, 0.0156862745, 0.9803921569, 0.5647058823529412, 0.5215686275, 0.0235294118,\n      0.9647058824, 0.5686274509803921, 0.5294117647, 0.0352941176, 0.9490196078,\n      0.5725490196078431, 0.537254902, 0.0431372549, 0.9333333333, 0.5764705882352941, 0.5450980392,\n      0.0509803922, 0.9176470588, 0.5803921568627451, 0.5529411765, 0.062745098, 0.9019607843,\n      0.5843137254901961, 0.5607843137, 0.0705882353, 0.8862745098, 0.5882352941176471, 0.568627451,\n      0.0784313725, 0.8705882353, 0.592156862745098, 0.5764705882, 0.0901960784, 0.8549019608,\n      0.596078431372549, 0.5843137255, 0.0980392157, 0.8392156863, 0.6, 0.5921568627, 0.1098039216,\n      0.8235294118, 0.6039215686274509, 0.6, 0.1176470588, 0.8078431373, 0.6078431372549019,\n      0.6078431373, 0.1254901961, 0.7921568627, 0.611764705882353, 0.6156862745, 0.137254902,\n      0.7764705882, 0.615686274509804, 0.6235294118, 0.1450980392, 0.7607843137, 0.6196078431372549,\n      0.631372549, 0.1529411765, 0.7490196078, 0.6235294117647059, 0.6392156863, 0.1647058824,\n      0.737254902, 0.6274509803921569, 0.6470588235, 0.1725490196, 0.7215686275, 0.6313725490196078,\n      0.6549019608, 0.1843137255, 0.7058823529, 0.6352941176470588, 0.662745098, 0.1921568627,\n      0.6901960784, 0.6392156862745098, 0.6705882353, 0.2, 0.6745098039, 0.6431372549019608,\n      0.6784313725, 0.2117647059, 0.6588235294, 0.6470588235294118, 0.6862745098, 0.2196078431,\n      0.6431372549, 0.6509803921568628, 0.6941176471, 0.2274509804, 0.6274509804,\n      0.6549019607843137, 0.7019607843, 0.2392156863, 0.6117647059, 0.6588235294117647,\n      0.7098039216, 0.2470588235, 0.5960784314, 0.6627450980392157, 0.7176470588, 0.2509803922,\n      0.5803921569, 0.6666666666666666, 0.7254901961, 0.2588235294, 0.5647058824,\n      0.6705882352941176, 0.7333333333, 0.2666666667, 0.5490196078, 0.6745098039215687,\n      0.7411764706, 0.2784313725, 0.5333333333, 0.6784313725490196, 0.7490196078, 0.2862745098,\n      0.5176470588, 0.6823529411764706, 0.7490196078, 0.2941176471, 0.5019607843,\n      0.6862745098039216, 0.7529411765, 0.3058823529, 0.4862745098, 0.6901960784313725,\n      0.7607843137, 0.3137254902, 0.4705882353, 0.6941176470588235, 0.768627451, 0.3215686275,\n      0.4549019608, 0.6980392156862745, 0.7764705882, 0.3333333333, 0.4392156863,\n      0.7019607843137254, 0.7843137255, 0.3411764706, 0.4235294118, 0.7058823529411765,\n      0.7921568627, 0.3529411765, 0.4078431373, 0.7098039215686275, 0.8, 0.3607843137, 0.3921568627,\n      0.7137254901960784, 0.8078431373, 0.368627451, 0.3764705882, 0.7176470588235294, 0.8156862745,\n      0.3803921569, 0.3607843137, 0.7215686274509804, 0.8235294118, 0.3882352941, 0.3450980392,\n      0.7254901960784313, 0.831372549, 0.3960784314, 0.3294117647, 0.7294117647058823, 0.8392156863,\n      0.4078431373, 0.3137254902, 0.7333333333333333, 0.8470588235, 0.4156862745, 0.2980392157,\n      0.7372549019607844, 0.8549019608, 0.4274509804, 0.2823529412, 0.7411764705882353, 0.862745098,\n      0.4352941176, 0.2666666667, 0.7450980392156863, 0.8705882353, 0.4431372549, 0.2509803922,\n      0.7490196078431373, 0.8784313725, 0.4549019608, 0.2431372549, 0.7529411764705882,\n      0.8862745098, 0.462745098, 0.2274509804, 0.7568627450980392, 0.8941176471, 0.4705882353,\n      0.2117647059, 0.7607843137254902, 0.9019607843, 0.4823529412, 0.1960784314,\n      0.7647058823529411, 0.9098039216, 0.4901960784, 0.1803921569, 0.7686274509803922,\n      0.9176470588, 0.4980392157, 0.1647058824, 0.7725490196078432, 0.9254901961, 0.5098039216,\n      0.1490196078, 0.7764705882352941, 0.9333333333, 0.5176470588, 0.1333333333,\n      0.7803921568627451, 0.9411764706, 0.5294117647, 0.1176470588, 0.7843137254901961,\n      0.9490196078, 0.537254902, 0.1019607843, 0.788235294117647, 0.9568627451, 0.5450980392,\n      0.0862745098, 0.792156862745098, 0.9647058824, 0.5568627451, 0.0705882353, 0.796078431372549,\n      0.9725490196, 0.5647058824, 0.0549019608, 0.8, 0.9803921569, 0.5725490196, 0.0392156863,\n      0.803921568627451, 0.9882352941, 0.5843137255, 0.0235294118, 0.807843137254902, 0.9921568627,\n      0.5921568627, 0.0078431373, 0.8117647058823529, 0.9921568627, 0.6039215686, 0.0274509804,\n      0.8156862745098039, 0.9921568627, 0.6117647059, 0.0509803922, 0.8196078431372549,\n      0.9921568627, 0.6196078431, 0.0745098039, 0.8235294117647058, 0.9921568627, 0.631372549,\n      0.0980392157, 0.8274509803921568, 0.9921568627, 0.6392156863, 0.1215686275,\n      0.8313725490196079, 0.9921568627, 0.6470588235, 0.1411764706, 0.8352941176470589,\n      0.9921568627, 0.6588235294, 0.1647058824, 0.8392156862745098, 0.9921568627, 0.6666666667,\n      0.1882352941, 0.8431372549019608, 0.9921568627, 0.6784313725, 0.2117647059,\n      0.8470588235294118, 0.9921568627, 0.6862745098, 0.2352941176, 0.8509803921568627,\n      0.9921568627, 0.6941176471, 0.2509803922, 0.8549019607843137, 0.9921568627, 0.7058823529,\n      0.2705882353, 0.8588235294117647, 0.9921568627, 0.7137254902, 0.2941176471,\n      0.8627450980392157, 0.9921568627, 0.7215686275, 0.3176470588, 0.8666666666666667,\n      0.9921568627, 0.7333333333, 0.3411764706, 0.8705882352941177, 0.9921568627, 0.7411764706,\n      0.3647058824, 0.8745098039215686, 0.9921568627, 0.7490196078, 0.3843137255,\n      0.8784313725490196, 0.9921568627, 0.7529411765, 0.4078431373, 0.8823529411764706,\n      0.9921568627, 0.7607843137, 0.431372549, 0.8862745098039215, 0.9921568627, 0.7725490196,\n      0.4549019608, 0.8901960784313725, 0.9921568627, 0.7803921569, 0.4784313725,\n      0.8941176470588236, 0.9921568627, 0.7882352941, 0.4980392157, 0.8980392156862745,\n      0.9921568627, 0.8, 0.5215686275, 0.9019607843137255, 0.9921568627, 0.8078431373, 0.5450980392,\n      0.9058823529411765, 0.9921568627, 0.8156862745, 0.568627451, 0.9098039215686274, 0.9921568627,\n      0.8274509804, 0.5921568627, 0.9137254901960784, 0.9921568627, 0.8352941176, 0.6156862745,\n      0.9176470588235294, 0.9921568627, 0.8470588235, 0.6352941176, 0.9215686274509803,\n      0.9921568627, 0.8549019608, 0.6588235294, 0.9254901960784314, 0.9921568627, 0.862745098,\n      0.6823529412, 0.9294117647058824, 0.9921568627, 0.8745098039, 0.7058823529,\n      0.9333333333333333, 0.9921568627, 0.8823529412, 0.7294117647, 0.9372549019607843,\n      0.9921568627, 0.8901960784, 0.7490196078, 0.9411764705882354, 0.9921568627, 0.9019607843,\n      0.7647058824, 0.9450980392156864, 0.9921568627, 0.9098039216, 0.7882352941,\n      0.9490196078431372, 0.9921568627, 0.9215686275, 0.8117647059, 0.9529411764705882,\n      0.9921568627, 0.9294117647, 0.8352941176, 0.9568627450980394, 0.9921568627, 0.937254902,\n      0.8588235294, 0.9607843137254903, 0.9921568627, 0.9490196078, 0.8784313725,\n      0.9647058823529413, 0.9921568627, 0.9568627451, 0.9019607843, 0.9686274509803922,\n      0.9921568627, 0.9647058824, 0.9254901961, 0.9725490196078431, 0.9921568627, 0.9764705882,\n      0.9490196078, 0.9764705882352941, 0.9921568627, 0.9843137255, 0.9725490196,\n      0.9803921568627451, 0.9921568627, 0.9921568627, 0.9921568627, 0.984313725490196, 0.9921568627,\n      0.9921568627, 0.9921568627, 0.9882352941176471, 0.9921568627, 0.9921568627, 0.9921568627,\n      0.9921568627450981, 0.9921568627, 0.9921568627, 0.9921568627, 0.996078431372549, 0.9921568627,\n      0.9921568627, 0.9921568627, 1.0, 0.9921568627, 0.9921568627, 0.9921568627,\n    ],\n    description: 'GE',\n  },\n  {\n    ColorSpace: 'RGB',\n    Name: 'siemens',\n    RGBPoints: [\n      0.0, 0.0078431373, 0.0039215686, 0.1254901961, 0.00392156862745098, 0.0078431373,\n      0.0039215686, 0.1254901961, 0.00784313725490196, 0.0078431373, 0.0039215686, 0.1882352941,\n      0.011764705882352941, 0.0117647059, 0.0039215686, 0.2509803922, 0.01568627450980392,\n      0.0117647059, 0.0039215686, 0.3098039216, 0.0196078431372549, 0.0156862745, 0.0039215686,\n      0.3725490196, 0.023529411764705882, 0.0156862745, 0.0039215686, 0.3725490196,\n      0.027450980392156862, 0.0156862745, 0.0039215686, 0.3725490196, 0.03137254901960784,\n      0.0156862745, 0.0039215686, 0.3725490196, 0.03529411764705882, 0.0156862745, 0.0039215686,\n      0.3725490196, 0.0392156862745098, 0.0156862745, 0.0039215686, 0.3725490196,\n      0.043137254901960784, 0.0156862745, 0.0039215686, 0.3725490196, 0.047058823529411764,\n      0.0156862745, 0.0039215686, 0.3725490196, 0.050980392156862744, 0.0156862745, 0.0039215686,\n      0.3725490196, 0.054901960784313725, 0.0156862745, 0.0039215686, 0.3725490196,\n      0.05882352941176471, 0.0156862745, 0.0039215686, 0.3725490196, 0.06274509803921569,\n      0.0156862745, 0.0039215686, 0.3882352941, 0.06666666666666667, 0.0156862745, 0.0039215686,\n      0.4078431373, 0.07058823529411765, 0.0156862745, 0.0039215686, 0.4235294118,\n      0.07450980392156863, 0.0156862745, 0.0039215686, 0.4431372549, 0.0784313725490196,\n      0.0156862745, 0.0039215686, 0.462745098, 0.08235294117647059, 0.0156862745, 0.0039215686,\n      0.4784313725, 0.08627450980392157, 0.0156862745, 0.0039215686, 0.4980392157,\n      0.09019607843137255, 0.0196078431, 0.0039215686, 0.5137254902, 0.09411764705882353,\n      0.0196078431, 0.0039215686, 0.5333333333, 0.09803921568627451, 0.0196078431, 0.0039215686,\n      0.5529411765, 0.10196078431372549, 0.0196078431, 0.0039215686, 0.568627451,\n      0.10588235294117647, 0.0196078431, 0.0039215686, 0.5882352941, 0.10980392156862745,\n      0.0196078431, 0.0039215686, 0.6039215686, 0.11372549019607843, 0.0196078431, 0.0039215686,\n      0.6235294118, 0.11764705882352942, 0.0196078431, 0.0039215686, 0.6431372549,\n      0.12156862745098039, 0.0235294118, 0.0039215686, 0.6588235294, 0.12549019607843137,\n      0.0235294118, 0.0039215686, 0.6784313725, 0.12941176470588237, 0.0235294118, 0.0039215686,\n      0.6980392157, 0.13333333333333333, 0.0235294118, 0.0039215686, 0.7137254902,\n      0.13725490196078433, 0.0235294118, 0.0039215686, 0.7333333333, 0.1411764705882353,\n      0.0235294118, 0.0039215686, 0.7490196078, 0.1450980392156863, 0.0235294118, 0.0039215686,\n      0.7647058824, 0.14901960784313725, 0.0235294118, 0.0039215686, 0.7843137255,\n      0.15294117647058825, 0.0274509804, 0.0039215686, 0.8, 0.1568627450980392, 0.0274509804,\n      0.0039215686, 0.8196078431, 0.1607843137254902, 0.0274509804, 0.0039215686, 0.8352941176,\n      0.16470588235294117, 0.0274509804, 0.0039215686, 0.8549019608, 0.16862745098039217,\n      0.0274509804, 0.0039215686, 0.8745098039, 0.17254901960784313, 0.0274509804, 0.0039215686,\n      0.8901960784, 0.17647058823529413, 0.0274509804, 0.0039215686, 0.9098039216,\n      0.1803921568627451, 0.031372549, 0.0039215686, 0.9294117647, 0.1843137254901961, 0.031372549,\n      0.0039215686, 0.9254901961, 0.18823529411764706, 0.0509803922, 0.0039215686, 0.9098039216,\n      0.19215686274509805, 0.0705882353, 0.0039215686, 0.8901960784, 0.19607843137254902,\n      0.0901960784, 0.0039215686, 0.8705882353, 0.2, 0.1137254902, 0.0039215686, 0.8509803922,\n      0.20392156862745098, 0.1333333333, 0.0039215686, 0.831372549, 0.20784313725490197,\n      0.1529411765, 0.0039215686, 0.8117647059, 0.21176470588235294, 0.1725490196, 0.0039215686,\n      0.7921568627, 0.21568627450980393, 0.1960784314, 0.0039215686, 0.7725490196,\n      0.2196078431372549, 0.2156862745, 0.0039215686, 0.7529411765, 0.2235294117647059,\n      0.2352941176, 0.0039215686, 0.737254902, 0.22745098039215686, 0.2509803922, 0.0039215686,\n      0.7176470588, 0.23137254901960785, 0.2745098039, 0.0039215686, 0.6980392157,\n      0.23529411764705885, 0.2941176471, 0.0039215686, 0.6784313725, 0.23921568627450984,\n      0.3137254902, 0.0039215686, 0.6588235294, 0.24313725490196078, 0.3333333333, 0.0039215686,\n      0.6392156863, 0.24705882352941178, 0.3568627451, 0.0039215686, 0.6196078431,\n      0.25098039215686274, 0.3764705882, 0.0039215686, 0.6, 0.2549019607843137, 0.3960784314,\n      0.0039215686, 0.5803921569, 0.25882352941176473, 0.4156862745, 0.0039215686, 0.5607843137,\n      0.2627450980392157, 0.4392156863, 0.0039215686, 0.5411764706, 0.26666666666666666,\n      0.4588235294, 0.0039215686, 0.5215686275, 0.27058823529411763, 0.4784313725, 0.0039215686,\n      0.5019607843, 0.27450980392156865, 0.4980392157, 0.0039215686, 0.4823529412,\n      0.2784313725490196, 0.5215686275, 0.0039215686, 0.4666666667, 0.2823529411764706,\n      0.5411764706, 0.0039215686, 0.4470588235, 0.28627450980392155, 0.5607843137, 0.0039215686,\n      0.4274509804, 0.2901960784313726, 0.5803921569, 0.0039215686, 0.4078431373,\n      0.29411764705882354, 0.6039215686, 0.0039215686, 0.3882352941, 0.2980392156862745,\n      0.6235294118, 0.0039215686, 0.368627451, 0.30196078431372547, 0.6431372549, 0.0039215686,\n      0.3490196078, 0.3058823529411765, 0.662745098, 0.0039215686, 0.3294117647,\n      0.30980392156862746, 0.6862745098, 0.0039215686, 0.3098039216, 0.3137254901960784,\n      0.7058823529, 0.0039215686, 0.2901960784, 0.3176470588235294, 0.7254901961, 0.0039215686,\n      0.2705882353, 0.3215686274509804, 0.7450980392, 0.0039215686, 0.2509803922,\n      0.3254901960784314, 0.7647058824, 0.0039215686, 0.2352941176, 0.32941176470588235,\n      0.7843137255, 0.0039215686, 0.2156862745, 0.3333333333333333, 0.8039215686, 0.0039215686,\n      0.1960784314, 0.33725490196078434, 0.8235294118, 0.0039215686, 0.1764705882,\n      0.3411764705882353, 0.8470588235, 0.0039215686, 0.1568627451, 0.34509803921568627,\n      0.8666666667, 0.0039215686, 0.137254902, 0.34901960784313724, 0.8862745098, 0.0039215686,\n      0.1176470588, 0.35294117647058826, 0.9058823529, 0.0039215686, 0.0980392157,\n      0.3568627450980392, 0.9294117647, 0.0039215686, 0.0784313725, 0.3607843137254902,\n      0.9490196078, 0.0039215686, 0.0588235294, 0.36470588235294116, 0.968627451, 0.0039215686,\n      0.0392156863, 0.3686274509803922, 0.9921568627, 0.0039215686, 0.0235294118,\n      0.37254901960784315, 0.9529411765, 0.0039215686, 0.0588235294, 0.3764705882352941,\n      0.9529411765, 0.0078431373, 0.0549019608, 0.3803921568627451, 0.9529411765, 0.0156862745,\n      0.0549019608, 0.3843137254901961, 0.9529411765, 0.0235294118, 0.0549019608,\n      0.38823529411764707, 0.9529411765, 0.031372549, 0.0549019608, 0.39215686274509803,\n      0.9529411765, 0.0352941176, 0.0549019608, 0.396078431372549, 0.9529411765, 0.0431372549,\n      0.0549019608, 0.4, 0.9529411765, 0.0509803922, 0.0549019608, 0.403921568627451, 0.9529411765,\n      0.0588235294, 0.0549019608, 0.40784313725490196, 0.9529411765, 0.062745098, 0.0549019608,\n      0.4117647058823529, 0.9529411765, 0.0705882353, 0.0549019608, 0.41568627450980394,\n      0.9529411765, 0.0784313725, 0.0509803922, 0.4196078431372549, 0.9529411765, 0.0862745098,\n      0.0509803922, 0.4235294117647059, 0.9568627451, 0.0941176471, 0.0509803922,\n      0.42745098039215684, 0.9568627451, 0.0980392157, 0.0509803922, 0.43137254901960786,\n      0.9568627451, 0.1058823529, 0.0509803922, 0.43529411764705883, 0.9568627451, 0.1137254902,\n      0.0509803922, 0.4392156862745098, 0.9568627451, 0.1215686275, 0.0509803922,\n      0.44313725490196076, 0.9568627451, 0.1254901961, 0.0509803922, 0.4470588235294118,\n      0.9568627451, 0.1333333333, 0.0509803922, 0.45098039215686275, 0.9568627451, 0.1411764706,\n      0.0509803922, 0.4549019607843137, 0.9568627451, 0.1490196078, 0.0470588235,\n      0.4588235294117647, 0.9568627451, 0.1568627451, 0.0470588235, 0.4627450980392157,\n      0.9568627451, 0.1607843137, 0.0470588235, 0.4666666666666667, 0.9568627451, 0.168627451,\n      0.0470588235, 0.4705882352941177, 0.9607843137, 0.1764705882, 0.0470588235,\n      0.4745098039215686, 0.9607843137, 0.1843137255, 0.0470588235, 0.4784313725490197,\n      0.9607843137, 0.1882352941, 0.0470588235, 0.48235294117647065, 0.9607843137, 0.1960784314,\n      0.0470588235, 0.48627450980392156, 0.9607843137, 0.2039215686, 0.0470588235,\n      0.49019607843137253, 0.9607843137, 0.2117647059, 0.0470588235, 0.49411764705882355,\n      0.9607843137, 0.2196078431, 0.0431372549, 0.4980392156862745, 0.9607843137, 0.2235294118,\n      0.0431372549, 0.5019607843137255, 0.9607843137, 0.231372549, 0.0431372549, 0.5058823529411764,\n      0.9607843137, 0.2392156863, 0.0431372549, 0.5098039215686274, 0.9607843137, 0.2470588235,\n      0.0431372549, 0.5137254901960784, 0.9607843137, 0.2509803922, 0.0431372549,\n      0.5176470588235295, 0.9647058824, 0.2549019608, 0.0431372549, 0.5215686274509804,\n      0.9647058824, 0.262745098, 0.0431372549, 0.5254901960784314, 0.9647058824, 0.2705882353,\n      0.0431372549, 0.5294117647058824, 0.9647058824, 0.2745098039, 0.0431372549,\n      0.5333333333333333, 0.9647058824, 0.2823529412, 0.0392156863, 0.5372549019607843,\n      0.9647058824, 0.2901960784, 0.0392156863, 0.5411764705882353, 0.9647058824, 0.2980392157,\n      0.0392156863, 0.5450980392156862, 0.9647058824, 0.3058823529, 0.0392156863,\n      0.5490196078431373, 0.9647058824, 0.3098039216, 0.0392156863, 0.5529411764705883,\n      0.9647058824, 0.3176470588, 0.0392156863, 0.5568627450980392, 0.9647058824, 0.3254901961,\n      0.0392156863, 0.5607843137254902, 0.9647058824, 0.3333333333, 0.0392156863,\n      0.5647058823529412, 0.9647058824, 0.337254902, 0.0392156863, 0.5686274509803921, 0.968627451,\n      0.3450980392, 0.0392156863, 0.5725490196078431, 0.968627451, 0.3529411765, 0.0352941176,\n      0.5764705882352941, 0.968627451, 0.3607843137, 0.0352941176, 0.5803921568627451, 0.968627451,\n      0.368627451, 0.0352941176, 0.5843137254901961, 0.968627451, 0.3725490196, 0.0352941176,\n      0.5882352941176471, 0.968627451, 0.3803921569, 0.0352941176, 0.592156862745098, 0.968627451,\n      0.3882352941, 0.0352941176, 0.596078431372549, 0.968627451, 0.3960784314, 0.0352941176, 0.6,\n      0.968627451, 0.4, 0.0352941176, 0.6039215686274509, 0.968627451, 0.4078431373, 0.0352941176,\n      0.6078431372549019, 0.968627451, 0.4156862745, 0.0352941176, 0.611764705882353, 0.968627451,\n      0.4235294118, 0.031372549, 0.615686274509804, 0.9725490196, 0.431372549, 0.031372549,\n      0.6196078431372549, 0.9725490196, 0.4352941176, 0.031372549, 0.6235294117647059, 0.9725490196,\n      0.4431372549, 0.031372549, 0.6274509803921569, 0.9725490196, 0.4509803922, 0.031372549,\n      0.6313725490196078, 0.9725490196, 0.4588235294, 0.031372549, 0.6352941176470588, 0.9725490196,\n      0.462745098, 0.031372549, 0.6392156862745098, 0.9725490196, 0.4705882353, 0.031372549,\n      0.6431372549019608, 0.9725490196, 0.4784313725, 0.031372549, 0.6470588235294118, 0.9725490196,\n      0.4862745098, 0.031372549, 0.6509803921568628, 0.9725490196, 0.4941176471, 0.0274509804,\n      0.6549019607843137, 0.9725490196, 0.4980392157, 0.0274509804, 0.6588235294117647,\n      0.9725490196, 0.5058823529, 0.0274509804, 0.6627450980392157, 0.9764705882, 0.5137254902,\n      0.0274509804, 0.6666666666666666, 0.9764705882, 0.5215686275, 0.0274509804,\n      0.6705882352941176, 0.9764705882, 0.5254901961, 0.0274509804, 0.6745098039215687,\n      0.9764705882, 0.5333333333, 0.0274509804, 0.6784313725490196, 0.9764705882, 0.5411764706,\n      0.0274509804, 0.6823529411764706, 0.9764705882, 0.5490196078, 0.0274509804,\n      0.6862745098039216, 0.9764705882, 0.5529411765, 0.0274509804, 0.6901960784313725,\n      0.9764705882, 0.5607843137, 0.0235294118, 0.6941176470588235, 0.9764705882, 0.568627451,\n      0.0235294118, 0.6980392156862745, 0.9764705882, 0.5764705882, 0.0235294118,\n      0.7019607843137254, 0.9764705882, 0.5843137255, 0.0235294118, 0.7058823529411765,\n      0.9764705882, 0.5882352941, 0.0235294118, 0.7098039215686275, 0.9764705882, 0.5960784314,\n      0.0235294118, 0.7137254901960784, 0.9803921569, 0.6039215686, 0.0235294118,\n      0.7176470588235294, 0.9803921569, 0.6117647059, 0.0235294118, 0.7215686274509804,\n      0.9803921569, 0.6156862745, 0.0235294118, 0.7254901960784313, 0.9803921569, 0.6235294118,\n      0.0235294118, 0.7294117647058823, 0.9803921569, 0.631372549, 0.0196078431, 0.7333333333333333,\n      0.9803921569, 0.6392156863, 0.0196078431, 0.7372549019607844, 0.9803921569, 0.6470588235,\n      0.0196078431, 0.7411764705882353, 0.9803921569, 0.6509803922, 0.0196078431,\n      0.7450980392156863, 0.9803921569, 0.6588235294, 0.0196078431, 0.7490196078431373,\n      0.9803921569, 0.6666666667, 0.0196078431, 0.7529411764705882, 0.9803921569, 0.6745098039,\n      0.0196078431, 0.7568627450980392, 0.9803921569, 0.6784313725, 0.0196078431,\n      0.7607843137254902, 0.9843137255, 0.6862745098, 0.0196078431, 0.7647058823529411,\n      0.9843137255, 0.6941176471, 0.0196078431, 0.7686274509803922, 0.9843137255, 0.7019607843,\n      0.0156862745, 0.7725490196078432, 0.9843137255, 0.7098039216, 0.0156862745,\n      0.7764705882352941, 0.9843137255, 0.7137254902, 0.0156862745, 0.7803921568627451,\n      0.9843137255, 0.7215686275, 0.0156862745, 0.7843137254901961, 0.9843137255, 0.7294117647,\n      0.0156862745, 0.788235294117647, 0.9843137255, 0.737254902, 0.0156862745, 0.792156862745098,\n      0.9843137255, 0.7411764706, 0.0156862745, 0.796078431372549, 0.9843137255, 0.7490196078,\n      0.0156862745, 0.8, 0.9843137255, 0.7529411765, 0.0156862745, 0.803921568627451, 0.9843137255,\n      0.7607843137, 0.0156862745, 0.807843137254902, 0.9882352941, 0.768627451, 0.0156862745,\n      0.8117647058823529, 0.9882352941, 0.768627451, 0.0156862745, 0.8156862745098039, 0.9843137255,\n      0.7843137255, 0.0117647059, 0.8196078431372549, 0.9843137255, 0.8, 0.0117647059,\n      0.8235294117647058, 0.9843137255, 0.8156862745, 0.0117647059, 0.8274509803921568,\n      0.9803921569, 0.831372549, 0.0117647059, 0.8313725490196079, 0.9803921569, 0.8431372549,\n      0.0117647059, 0.8352941176470589, 0.9803921569, 0.8588235294, 0.0078431373,\n      0.8392156862745098, 0.9803921569, 0.8745098039, 0.0078431373, 0.8431372549019608,\n      0.9764705882, 0.8901960784, 0.0078431373, 0.8470588235294118, 0.9764705882, 0.9058823529,\n      0.0078431373, 0.8509803921568627, 0.9764705882, 0.9176470588, 0.0078431373,\n      0.8549019607843137, 0.9764705882, 0.9333333333, 0.0039215686, 0.8588235294117647,\n      0.9725490196, 0.9490196078, 0.0039215686, 0.8627450980392157, 0.9725490196, 0.9647058824,\n      0.0039215686, 0.8666666666666667, 0.9725490196, 0.9803921569, 0.0039215686,\n      0.8705882352941177, 0.9725490196, 0.9960784314, 0.0039215686, 0.8745098039215686,\n      0.9725490196, 0.9960784314, 0.0039215686, 0.8784313725490196, 0.9725490196, 0.9960784314,\n      0.0352941176, 0.8823529411764706, 0.9725490196, 0.9960784314, 0.0666666667,\n      0.8862745098039215, 0.9725490196, 0.9960784314, 0.0980392157, 0.8901960784313725,\n      0.9725490196, 0.9960784314, 0.1294117647, 0.8941176470588236, 0.9725490196, 0.9960784314,\n      0.1647058824, 0.8980392156862745, 0.9764705882, 0.9960784314, 0.1960784314,\n      0.9019607843137255, 0.9764705882, 0.9960784314, 0.2274509804, 0.9058823529411765,\n      0.9764705882, 0.9960784314, 0.2549019608, 0.9098039215686274, 0.9764705882, 0.9960784314,\n      0.2901960784, 0.9137254901960784, 0.9764705882, 0.9960784314, 0.3215686275,\n      0.9176470588235294, 0.9803921569, 0.9960784314, 0.3529411765, 0.9215686274509803,\n      0.9803921569, 0.9960784314, 0.3843137255, 0.9254901960784314, 0.9803921569, 0.9960784314,\n      0.4156862745, 0.9294117647058824, 0.9803921569, 0.9960784314, 0.4509803922,\n      0.9333333333333333, 0.9803921569, 0.9960784314, 0.4823529412, 0.9372549019607843,\n      0.9843137255, 0.9960784314, 0.5137254902, 0.9411764705882354, 0.9843137255, 0.9960784314,\n      0.5450980392, 0.9450980392156864, 0.9843137255, 0.9960784314, 0.5803921569,\n      0.9490196078431372, 0.9843137255, 0.9960784314, 0.6117647059, 0.9529411764705882,\n      0.9843137255, 0.9960784314, 0.6431372549, 0.9568627450980394, 0.9882352941, 0.9960784314,\n      0.6745098039, 0.9607843137254903, 0.9882352941, 0.9960784314, 0.7058823529,\n      0.9647058823529413, 0.9882352941, 0.9960784314, 0.7411764706, 0.9686274509803922,\n      0.9882352941, 0.9960784314, 0.768627451, 0.9725490196078431, 0.9882352941, 0.9960784314, 0.8,\n      0.9764705882352941, 0.9921568627, 0.9960784314, 0.831372549, 0.9803921568627451, 0.9921568627,\n      0.9960784314, 0.8666666667, 0.984313725490196, 0.9921568627, 0.9960784314, 0.8980392157,\n      0.9882352941176471, 0.9921568627, 0.9960784314, 0.9294117647, 0.9921568627450981,\n      0.9921568627, 0.9960784314, 0.9607843137, 0.996078431372549, 0.9960784314, 0.9960784314,\n      0.9607843137, 1.0, 0.9960784314, 0.9960784314, 0.9607843137,\n    ],\n    description: 'Siemens',\n  },\n];\n\nexport { colormaps };\n","import OHIF, { errorHandler } from '@ohif/core';\nimport React from 'react';\n\nimport * as cornerstone from '@cornerstonejs/core';\nimport * as cornerstoneTools from '@cornerstonejs/tools';\nimport {\n  init as cs3DInit,\n  eventTarget,\n  EVENTS,\n  metaData,\n  volumeLoader,\n  imageLoadPoolManager,\n  getEnabledElement,\n  Settings,\n  utilities as csUtilities,\n} from '@cornerstonejs/core';\nimport {\n  cornerstoneStreamingImageVolumeLoader,\n  cornerstoneStreamingDynamicImageVolumeLoader,\n} from '@cornerstonejs/core/loaders';\n\nimport RequestTypes from '@cornerstonejs/core/enums/RequestType';\n\nimport initWADOImageLoader from './initWADOImageLoader';\nimport initCornerstoneTools from './initCornerstoneTools';\n\nimport { connectToolsToMeasurementService } from './initMeasurementService';\nimport initCineService from './initCineService';\nimport initStudyPrefetcherService from './initStudyPrefetcherService';\nimport interleaveCenterLoader from './utils/interleaveCenterLoader';\nimport nthLoader from './utils/nthLoader';\nimport interleaveTopToBottom from './utils/interleaveTopToBottom';\nimport initContextMenu from './initContextMenu';\nimport initDoubleClick from './initDoubleClick';\nimport initViewTiming from './utils/initViewTiming';\nimport { colormaps } from './utils/colormaps';\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\nimport { useLutPresentationStore } from './stores/useLutPresentationStore';\nimport { usePositionPresentationStore } from './stores/usePositionPresentationStore';\nimport { useSegmentationPresentationStore } from './stores/useSegmentationPresentationStore';\nimport { imageRetrieveMetadataProvider } from '@cornerstonejs/core/utilities';\nimport { initializeWebWorkerProgressHandler } from './utils/initWebWorkerProgressHandler';\n\nconst { registerColormap } = csUtilities.colormap;\n\n// TODO: Cypress tests are currently grabbing this from the window?\n(window as any).cornerstone = cornerstone;\n(window as any).cornerstoneTools = cornerstoneTools;\n/**\n *\n */\nexport default async function init({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  appConfig,\n}: withAppTypes): Promise<void> {\n  // Use a public library path of PUBLIC_URL plus the component name\n  // This safely separates components that are loaded as-is.\n  window.PUBLIC_LIB_URL ||= './${component}/';\n\n  // Note: this should run first before initializing the cornerstone\n  // DO NOT CHANGE THE ORDER\n\n  await cs3DInit({\n    peerImport: appConfig.peerImport,\n  });\n\n  // For debugging e2e tests that are failing on CI\n  cornerstone.setUseCPURendering(Boolean(appConfig.useCPURendering));\n\n  cornerstone.setConfiguration({\n    ...cornerstone.getConfiguration(),\n    rendering: {\n      ...cornerstone.getConfiguration().rendering,\n      strictZSpacingForVolumeViewport: appConfig.strictZSpacingForVolumeViewport,\n    },\n  });\n\n  // For debugging large datasets, otherwise prefer the defaults\n  const { maxCacheSize } = appConfig;\n  if (maxCacheSize) {\n    cornerstone.cache.setMaxCacheSize(maxCacheSize);\n  }\n\n  initCornerstoneTools();\n\n  Settings.getRuntimeSettings().set('useCursors', Boolean(appConfig.useCursors));\n\n  const {\n    userAuthenticationService,\n    customizationService,\n    uiModalService,\n    uiNotificationService,\n    cornerstoneViewportService,\n    hangingProtocolService,\n    viewportGridService,\n    segmentationService,\n    measurementService,\n    colorbarService,\n    displaySetService,\n    toolbarService,\n  } = servicesManager.services;\n\n  toolbarService.registerEventForToolbarUpdate(colorbarService, [\n    colorbarService.EVENTS.STATE_CHANGED,\n  ]);\n\n  window.services = servicesManager.services;\n  window.extensionManager = extensionManager;\n  window.commandsManager = commandsManager;\n\n  if (appConfig.showCPUFallbackMessage && cornerstone.getShouldUseCPURendering()) {\n    _showCPURenderingModal(uiModalService, hangingProtocolService);\n  }\n  const { getPresentationId: getLutPresentationId } = useLutPresentationStore.getState();\n\n  const { getPresentationId: getSegmentationPresentationId } =\n    useSegmentationPresentationStore.getState();\n\n  const { getPresentationId: getPositionPresentationId } = usePositionPresentationStore.getState();\n\n  // register presentation id providers\n  viewportGridService.addPresentationIdProvider(\n    'positionPresentationId',\n    getPositionPresentationId\n  );\n  viewportGridService.addPresentationIdProvider('lutPresentationId', getLutPresentationId);\n  viewportGridService.addPresentationIdProvider(\n    'segmentationPresentationId',\n    getSegmentationPresentationId\n  );\n\n  cornerstoneTools.segmentation.config.style.setStyle(\n    { type: SegmentationRepresentations.Contour },\n    {\n      renderFill: false,\n    }\n  );\n\n  const metadataProvider = OHIF.classes.MetadataProvider;\n\n  volumeLoader.registerVolumeLoader(\n    'cornerstoneStreamingImageVolume',\n    cornerstoneStreamingImageVolumeLoader\n  );\n\n  volumeLoader.registerVolumeLoader(\n    'cornerstoneStreamingDynamicImageVolume',\n    cornerstoneStreamingDynamicImageVolumeLoader\n  );\n\n  // Register strategies using the wrapper\n  const imageLoadStrategies = {\n    interleaveCenter: interleaveCenterLoader,\n    interleaveTopToBottom: interleaveTopToBottom,\n    nth: nthLoader,\n  };\n\n  Object.entries(imageLoadStrategies).forEach(([name, strategyFn]) => {\n    hangingProtocolService.registerImageLoadStrategy(\n      name,\n      createMetadataWrappedStrategy(strategyFn)\n    );\n  });\n\n  // add metadata providers\n  metaData.addProvider(\n    csUtilities.calibratedPixelSpacingMetadataProvider.get.bind(\n      csUtilities.calibratedPixelSpacingMetadataProvider\n    )\n  ); // this provider is required for Calibration tool\n  metaData.addProvider(metadataProvider.get.bind(metadataProvider), 9999);\n\n  // These are set reasonably low to allow for interleaved retrieves and slower\n  // connections.\n  imageLoadPoolManager.maxNumRequests = {\n    [RequestTypes.Interaction]: appConfig?.maxNumRequests?.interaction || 10,\n    [RequestTypes.Thumbnail]: appConfig?.maxNumRequests?.thumbnail || 5,\n    [RequestTypes.Prefetch]: appConfig?.maxNumRequests?.prefetch || 5,\n    [RequestTypes.Compute]: appConfig?.maxNumRequests?.compute || 10,\n  };\n\n  initWADOImageLoader(userAuthenticationService, appConfig, extensionManager);\n\n  /* Measurement Service */\n  this.measurementServiceSource = connectToolsToMeasurementService({\n    servicesManager,\n    commandsManager,\n    extensionManager,\n  });\n\n  initCineService(servicesManager);\n  initStudyPrefetcherService(servicesManager);\n\n  measurementService.subscribe(measurementService.EVENTS.JUMP_TO_MEASUREMENT, evt => {\n    const { measurement } = evt;\n    const { uid: annotationUID } = measurement;\n    commandsManager.runCommand('jumpToMeasurementViewport', { measurement, annotationUID, evt });\n  });\n\n  // When a custom image load is performed, update the relevant viewports\n  hangingProtocolService.subscribe(\n    hangingProtocolService.EVENTS.CUSTOM_IMAGE_LOAD_PERFORMED,\n    volumeInputArrayMap => {\n      const { lutPresentationStore } = useLutPresentationStore.getState();\n      const { segmentationPresentationStore } = useSegmentationPresentationStore.getState();\n      const { positionPresentationStore } = usePositionPresentationStore.getState();\n\n      for (const entry of volumeInputArrayMap.entries()) {\n        const [viewportId, volumeInputArray] = entry;\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\n\n        const { presentationIds } = ohifViewport.getViewportOptions();\n\n        const presentations = {\n          positionPresentation: positionPresentationStore[presentationIds?.positionPresentationId],\n          lutPresentation: lutPresentationStore[presentationIds?.lutPresentationId],\n          segmentationPresentation:\n            segmentationPresentationStore[presentationIds?.segmentationPresentationId],\n        };\n\n        cornerstoneViewportService.setVolumesForViewport(viewport, volumeInputArray, presentations);\n      }\n    }\n  );\n\n  initContextMenu({\n    cornerstoneViewportService,\n    customizationService,\n    commandsManager,\n  });\n\n  initDoubleClick({\n    customizationService,\n    commandsManager,\n  });\n\n  /**\n   * Runs error handler for failed requests.\n   * @param event\n   */\n  const imageLoadFailedHandler = ({ detail }) => {\n    const handler = errorHandler.getHTTPErrorHandler();\n    handler(detail.error);\n  };\n\n  eventTarget.addEventListener(EVENTS.IMAGE_LOAD_FAILED, imageLoadFailedHandler);\n  eventTarget.addEventListener(EVENTS.IMAGE_LOAD_ERROR, imageLoadFailedHandler);\n\n  const getDisplaySetFromVolumeId = (volumeId: string) => {\n    const allDisplaySets = displaySetService.getActiveDisplaySets();\n    const volume = cornerstone.cache.getVolume(volumeId);\n    const imageIds = volume.imageIds;\n    return allDisplaySets.find(ds => ds.imageIds?.some(id => imageIds.includes(id)));\n  };\n\n  function elementEnabledHandler(evt) {\n    const { element } = evt.detail;\n    const { viewport } = getEnabledElement(element);\n    initViewTiming({ element });\n\n    element.addEventListener(EVENTS.CAMERA_RESET, evt => {\n      const { element } = evt.detail;\n      const enabledElement = getEnabledElement(element);\n      if (!enabledElement) {\n        return;\n      }\n      const { viewportId } = enabledElement;\n      commandsManager.runCommand('resetCrosshairs', { viewportId });\n    });\n\n    // limitation: currently supporting only volume viewports with fusion\n    if (viewport.type !== cornerstone.Enums.ViewportType.ORTHOGRAPHIC) {\n      return;\n    }\n  }\n\n  eventTarget.addEventListener(EVENTS.ELEMENT_ENABLED, elementEnabledHandler.bind(null));\n\n  colormaps.forEach(registerColormap);\n\n  // Event listener\n  eventTarget.addEventListenerDebounced(\n    EVENTS.ERROR_EVENT,\n    ({ detail }) => {\n      // Create a stable ID for deduplication based on error type and message\n      const errorId = `cornerstone-error-${detail.type}-${detail.message.substring(0, 50)}`;\n\n      uiNotificationService.show({\n        title: detail.type,\n        message: detail.message,\n        type: 'error',\n        id: errorId,\n        allowDuplicates: false, // Prevent duplicate error notifications\n        deduplicationInterval: 30000, // 30 seconds deduplication window\n      });\n    },\n    100\n  );\n\n  // Subscribe to actor events to dynamically update colorbars\n\n  // Call this function when initializing\n  initializeWebWorkerProgressHandler(servicesManager.services.uiNotificationService);\n}\n\n/**\n * Creates a wrapped image load strategy with metadata handling\n * @param strategyFn - The image loading strategy function to wrap\n * @returns A wrapped strategy function that handles metadata configuration\n */\nconst createMetadataWrappedStrategy = (strategyFn: (args: any) => any) => {\n  return (args: any) => {\n    const clonedConfig = imageRetrieveMetadataProvider.clone();\n    imageRetrieveMetadataProvider.clear();\n\n    try {\n      const result = strategyFn(args);\n      return result;\n    } finally {\n      // Ensure metadata is always restored, even if there's an error\n      setTimeout(() => {\n        imageRetrieveMetadataProvider.restore(clonedConfig);\n      }, 10);\n    }\n  };\n};\n\nfunction CPUModal() {\n  return (\n    <div>\n      <p>\n        Your computer does not have enough GPU power to support the default GPU rendering mode. OHIF\n        has switched to CPU rendering mode. Please note that CPU rendering does not support all\n        features such as Volume Rendering, Multiplanar Reconstruction, and Segmentation Overlays.\n      </p>\n    </div>\n  );\n}\n\nfunction _showCPURenderingModal(uiModalService, hangingProtocolService) {\n  const callback = progress => {\n    if (progress === 100) {\n      uiModalService.show({\n        content: CPUModal,\n        title: 'OHIF Fell Back to CPU Rendering',\n      });\n\n      return true;\n    }\n  };\n\n  const { unsubscribe } = hangingProtocolService.subscribe(\n    hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n    () => {\n      const done = callback(100);\n\n      if (done) {\n        unsubscribe();\n      }\n    }\n  );\n}\n","import { eventTarget, EVENTS } from '@cornerstonejs/core';\nimport * as cornerstoneTools from '@cornerstonejs/tools';\n\n/**\n * Initializes a handler for web worker progress events.\n * Tracks active worker tasks and shows notifications for their progress.\n *\n * @param uiNotificationService - The UI notification service for showing progress notifications\n */\nexport function initializeWebWorkerProgressHandler(uiNotificationService: any) {\n  // Use a single map to track all active worker tasks\n  const activeWorkerTasks = new Map();\n\n  // Create a normalized task key that doesn't include the random ID\n  // This helps us identify and deduplicate the same type of task\n  const getNormalizedTaskKey = (type: string) => {\n    return `worker-task-${type.toLowerCase().replace(/\\s+/g, '-')}`;\n  };\n\n  eventTarget.addEventListener(EVENTS.WEB_WORKER_PROGRESS, ({ detail }) => {\n    let normalizedKey: string | undefined;\n    let shouldCleanup = false;\n\n    try {\n      const { progress, type, id } = detail;\n\n      // Skip notifications for compute statistics\n      if (type === cornerstoneTools.Enums.WorkerTypes.COMPUTE_STATISTICS) {\n        return;\n      }\n\n      normalizedKey = getNormalizedTaskKey(type);\n\n      if (progress === 0) {\n        // Check if we're already tracking a task of this type\n        if (!activeWorkerTasks.has(normalizedKey)) {\n          const progressPromise = new Promise((resolve, reject) => {\n            try {\n              activeWorkerTasks.set(normalizedKey, {\n                resolve,\n                reject,\n                originalId: id,\n                type,\n              });\n            } catch (error) {\n              console.error(`Error setting active worker task for type \"${type}\":`, error);\n              reject(error);\n              throw error; // Re-throw to trigger outer catch and cleanup\n            }\n          });\n\n          try {\n            uiNotificationService.show({\n              id: normalizedKey, // Use the normalized key as ID for better deduplication\n              title: `${type}`,\n              message: `Computing...`,\n              autoClose: false,\n              allowDuplicates: false,\n              deduplicationInterval: 60000, // 60 seconds - prevent frequent notifications of same type\n              promise: progressPromise,\n              promiseMessages: {\n                loading: `Computing...`,\n                success: `Completed successfully`,\n                error: 'Web Worker failed',\n              },\n            });\n          } catch (error) {\n            console.error(`Error showing web worker notification for type \"${type}\":`, error);\n            shouldCleanup = true;\n            throw error;\n          }\n        } else {\n          // Already tracking this type of task, just let it continue\n          console.debug(`Already tracking a \"${type}\" task, skipping duplicate notification`);\n        }\n      }\n      // Task completed\n      else if (progress === 100) {\n        // Check if we have this task type in our tracking map\n        const taskData = activeWorkerTasks.get(normalizedKey);\n\n        if (taskData) {\n          // Resolve the promise to update the notification\n          const { resolve } = taskData;\n          resolve({ progress, type });\n\n          // Mark for cleanup\n          shouldCleanup = true;\n\n          console.debug(`Worker task \"${type}\" completed successfully`);\n        }\n      }\n    } catch (error) {\n      console.error(`Error in web worker progress handler for type \"${detail?.type}\":`, error);\n      shouldCleanup = true;\n    } finally {\n      // Clean up if needed\n      if (shouldCleanup && normalizedKey) {\n        try {\n          activeWorkerTasks.delete(normalizedKey);\n        } catch (cleanupError) {\n          console.error(\n            `Error cleaning up active worker task for type \"${detail?.type}\":`,\n            cleanupError\n          );\n        }\n      }\n    }\n  });\n}\n","export default {\n  'viewportOverlay.topLeft': [\n    {\n      id: 'StudyDate',\n      inheritsFrom: 'ohif.overlayItem',\n      label: '',\n      title: 'Study date',\n      condition: ({ referenceInstance }) => referenceInstance?.StudyDate,\n      contentF: ({ referenceInstance, formatters: { formatDate } }) =>\n        formatDate(referenceInstance.StudyDate),\n    },\n    {\n      id: 'SeriesDescription',\n      inheritsFrom: 'ohif.overlayItem',\n      label: '',\n      title: 'Series description',\n      condition: ({ referenceInstance }) => {\n        return referenceInstance && referenceInstance.SeriesDescription;\n      },\n      contentF: ({ referenceInstance }) => referenceInstance.SeriesDescription,\n    },\n  ],\n  'viewportOverlay.topRight': [],\n  'viewportOverlay.bottomLeft': [\n    {\n      id: 'WindowLevel',\n      inheritsFrom: 'ohif.overlayItem.windowLevel',\n    },\n    {\n      id: 'ZoomLevel',\n      inheritsFrom: 'ohif.overlayItem.zoomLevel',\n      condition: props => {\n        const activeToolName = props.toolGroupService.getActiveToolForViewport(props.viewportId);\n        return activeToolName === 'Zoom';\n      },\n    },\n  ],\n  'viewportOverlay.bottomRight': [\n    {\n      id: 'InstanceNumber',\n      inheritsFrom: 'ohif.overlayItem.instanceNumber',\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  Icons,\n  useSegmentationTableContext,\n  useSegmentationExpanded,\n} from '@ohif/ui-next';\nimport { useTranslation } from 'react-i18next';\nimport { useSystem } from '@ohif/core/src';\n\n/**\n * Custom dropdown menu component for segmentation panel that uses context for data\n */\nexport const CustomDropdownMenuContent = () => {\n  const { commandsManager } = useSystem();\n  const { t } = useTranslation('SegmentationTable');\n  const {\n    onSegmentationAdd,\n    onSegmentationRemoveFromViewport,\n    onSegmentationEdit,\n    onSegmentationDelete,\n    exportOptions,\n    activeSegmentation,\n    activeSegmentationId,\n  } = useSegmentationTableContext('CustomDropdownMenu');\n\n  // Try to get segmentation data from expanded context first, fall back to table context\n  let segmentation;\n  let segmentationId;\n  let allowExport = false;\n\n  try {\n    // Try to get from expanded context\n    const context = useSegmentationExpanded();\n    segmentation = context.segmentation;\n    segmentationId = segmentation.segmentationId;\n  } catch (e) {\n    // If not in expanded context, fallback to active segmentation from table context\n    segmentation = activeSegmentation;\n    segmentationId = activeSegmentationId;\n  }\n\n  // Determine if export is allowed for this segmentation\n  if (exportOptions && segmentationId) {\n    const exportOption = exportOptions.find(opt => opt.segmentationId === segmentationId);\n    allowExport = exportOption?.isExportable || false;\n  }\n\n  if (!segmentation || !segmentationId) {\n    return null;\n  }\n\n  const actions = {\n    storeSegmentation: async segmentationId => {\n      commandsManager.run({\n        commandName: 'storeSegmentation',\n        commandOptions: { segmentationId },\n        context: 'CORNERSTONE',\n      });\n    },\n    onSegmentationDownloadRTSS: segmentationId => {\n      commandsManager.run('downloadRTSS', { segmentationId });\n    },\n    onSegmentationDownload: segmentationId => {\n      commandsManager.run('downloadSegmentation', { segmentationId });\n    },\n    downloadCSVSegmentationReport: segmentationId => {\n      commandsManager.run('downloadCSVSegmentationReport', { segmentationId });\n    },\n  };\n\n  return (\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem onClick={() => onSegmentationAdd(segmentationId)}>\n        <Icons.Add className=\"text-foreground\" />\n        <span className=\"pl-2\">{t('Create New Segmentation')}</span>\n      </DropdownMenuItem>\n      <DropdownMenuSeparator />\n      <DropdownMenuLabel>{t('Manage Current Segmentation')}</DropdownMenuLabel>\n      <DropdownMenuItem onClick={() => onSegmentationRemoveFromViewport(segmentationId)}>\n        <Icons.Series className=\"text-foreground\" />\n        <span className=\"pl-2\">{t('Remove from Viewport')}</span>\n      </DropdownMenuItem>\n      <DropdownMenuItem onClick={() => onSegmentationEdit(segmentationId)}>\n        <Icons.Rename className=\"text-foreground\" />\n        <span className=\"pl-2\">{t('Rename')}</span>\n      </DropdownMenuItem>\n      <DropdownMenuSub>\n        <DropdownMenuSubTrigger className=\"pl-1\">\n          <Icons.Export className=\"text-foreground\" />\n          <span className=\"pl-2\">{t('Download & Export')}</span>\n        </DropdownMenuSubTrigger>\n        <DropdownMenuPortal>\n          <DropdownMenuSubContent>\n            <DropdownMenuLabel className=\"flex items-center pl-0\">\n              <Icons.Download className=\"h-5 w-5\" />\n              <span className=\"pl-1\">{t('Download')}</span>\n            </DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={e => {\n                e.preventDefault();\n                actions.downloadCSVSegmentationReport(segmentationId);\n              }}\n              disabled={!allowExport}\n            >\n              {t('CSV Report')}\n            </DropdownMenuItem>\n            <DropdownMenuItem\n              onClick={e => {\n                e.preventDefault();\n                actions.onSegmentationDownload(segmentationId);\n              }}\n              disabled={!allowExport}\n            >\n              {t('DICOM SEG')}\n            </DropdownMenuItem>\n            <DropdownMenuItem\n              onClick={e => {\n                e.preventDefault();\n                actions.onSegmentationDownloadRTSS(segmentationId);\n              }}\n              disabled={!allowExport}\n            >\n              {t('DICOM RTSS')}\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuLabel className=\"flex items-center pl-0\">\n              <Icons.Export className=\"h-5 w-5\" />\n              <span className=\"pl-1 pt-1\">{t('Export')}</span>\n            </DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={e => {\n                e.preventDefault();\n                actions.storeSegmentation(segmentationId);\n              }}\n              disabled={!allowExport}\n            >\n              {t('DICOM SEG')}\n            </DropdownMenuItem>\n          </DropdownMenuSubContent>\n        </DropdownMenuPortal>\n      </DropdownMenuSub>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem onClick={() => onSegmentationDelete(segmentationId)}>\n        <Icons.Delete className=\"text-red-600\" />\n        <span className=\"pl-2 text-red-600\">{t('Delete')}</span>\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  );\n};\n","import * as cornerstoneTools from '@cornerstonejs/tools';\nimport React from 'react';\nimport { Separator, Button, Tooltip, TooltipTrigger, TooltipContent, Icons } from '@ohif/ui-next';\nimport { useTranslation } from 'react-i18next';\nimport { roundNumber } from '@ohif/core/src/utils';\nimport { useSystem } from '@ohif/core/src';\n\ninterface CustomSegmentStatisticsHeaderProps {\n  segmentationId: string;\n  segmentIndex: number;\n}\n\n/**\n * Custom header component for segment statistics\n */\nexport const CustomSegmentStatisticsHeader = ({\n  segmentationId,\n  segmentIndex,\n}: CustomSegmentStatisticsHeaderProps) => {\n  const { servicesManager, commandsManager } = useSystem();\n  const { segmentationService } = servicesManager.services;\n  const { t } = useTranslation('SegmentationTable');\n\n  const segmentation = segmentationService.getSegmentation(segmentationId);\n  const segment = segmentation.segments[segmentIndex];\n  const cachedStats = segment.cachedStats;\n  const namedStats = cachedStats.namedStats;\n\n  if (!namedStats) {\n    return null;\n  }\n\n  const bidirectional = namedStats.bidirectional;\n\n  if (!bidirectional) {\n    return (\n      <div className=\"-mt-2 space-y-2\">\n        <div className=\"flex\">\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-primary flex items-center gap-2\"\n                onClick={() => {\n                  commandsManager.run('runSegmentBidirectional', {\n                    segmentationId,\n                    segmentIndex,\n                  });\n                }}\n              >\n                <Icons.ToolBidirectionalSegment className=\"h-5 w-5\" />\n                <span>{t('Compute Largest Bidirectional')}</span>\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"bottom\">{t('Add bidirectional measurement')}</TooltipContent>\n          </Tooltip>\n        </div>\n        <Separator className=\"bg-input\" />\n      </div>\n    );\n  }\n\n  const { value, unit } = bidirectional;\n  const maxMajor = value.maxMajor;\n  const maxMinor = value.maxMinor;\n\n  const max = Math.max(maxMajor, maxMinor);\n  const min = Math.min(maxMajor, maxMinor);\n\n  const isVisible = cornerstoneTools.annotation.visibility.isAnnotationVisible(\n    bidirectional.annotationUID\n  );\n\n  return (\n    <div className=\"-mt-2 space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-foreground\">\n          <div>\n            L: {roundNumber(max)} {unit}\n          </div>\n          <div>\n            W: {roundNumber(min)} {unit}\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className={`h-6 w-6 transition-opacity`}\n                onClick={e => {\n                  e.stopPropagation();\n                  cornerstoneTools.annotation.visibility.setAnnotationVisibility(\n                    bidirectional.annotationUID,\n                    !isVisible\n                  );\n\n                  segmentationService.addOrUpdateSegmentation({\n                    segmentationId,\n                    segmentIndex,\n                  });\n                }}\n              >\n                {isVisible ? (\n                  <Icons.Hide className=\"h-6 w-6\" />\n                ) : (\n                  <Icons.Show className=\"h-6 w-6\" />\n                )}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"bottom\">{t('Toggle visibility')}</TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => {\n                  if (bidirectional.annotationUID) {\n                    commandsManager.run('jumpToMeasurement', {\n                      uid: bidirectional.annotationUID,\n                    });\n                  }\n                }}\n              >\n                <Icons.JumpToSlice />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"bottom\">{t('Jump to measurement')}</TooltipContent>\n          </Tooltip>\n        </div>\n      </div>\n      <Separator className=\"bg-input\" />\n    </div>\n  );\n};\n","import { CustomDropdownMenuContent } from './CustomDropdownMenuContent';\nimport { CustomSegmentStatisticsHeader } from './CustomSegmentStatisticsHeader';\nimport React, { useState } from 'react';\nimport { Switch } from '@ohif/ui-next';\n\nexport default function getSegmentationPanelCustomization({ commandsManager, servicesManager }) {\n  return {\n    'panelSegmentation.customDropdownMenuContent': CustomDropdownMenuContent,\n    'panelSegmentation.customSegmentStatisticsHeader': CustomSegmentStatisticsHeader,\n    'panelSegmentation.disableEditing': false,\n    'panelSegmentation.showAddSegment': true,\n    'panelSegmentation.onSegmentationAdd': () => {\n      const { viewportGridService } = servicesManager.services;\n      const viewportId = viewportGridService.getState().activeViewportId;\n      commandsManager.run('createLabelmapForViewport', { viewportId });\n    },\n    'panelSegmentation.tableMode': 'collapsed',\n    'panelSegmentation.readableText': {\n      // the values will appear in this order\n      min: 'Min Value',\n      minLPS: 'Min Coord',\n      max: 'Max Value',\n      maxLPS: 'Max Coord',\n      mean: 'Mean Value',\n      stdDev: 'Standard Deviation',\n      count: 'Voxel Count',\n      median: 'Median',\n      skewness: 'Skewness',\n      kurtosis: 'Kurtosis',\n      peakValue: 'Peak Value',\n      peakLPS: 'Peak Coord',\n      volume: 'Volume',\n      lesionGlycolysis: 'Lesion Glycolysis',\n      center: 'Center',\n    },\n    'segmentationToolbox.config': () => {\n      // Get initial states based on current configuration\n      const [previewEdits, setPreviewEdits] = useState(false);\n      const [toggleSegmentEnabled, setToggleSegmentEnabled] = useState(false);\n      const [useCenterAsSegmentIndex, setUseCenterAsSegmentIndex] = useState(false);\n      const handlePreviewEditsChange = checked => {\n        setPreviewEdits(checked);\n        commandsManager.run('toggleSegmentPreviewEdit', { toggle: checked });\n      };\n\n      const handleToggleSegmentEnabledChange = checked => {\n        setToggleSegmentEnabled(checked);\n        commandsManager.run('toggleSegmentSelect', { toggle: checked });\n      };\n\n      const handleUseCenterAsSegmentIndexChange = checked => {\n        setUseCenterAsSegmentIndex(checked);\n        commandsManager.run('toggleUseCenterSegmentIndex', { toggle: checked });\n      };\n\n      return (\n        <div className=\"bg-muted flex flex-col gap-4 border-b border-b-[2px] border-black px-2 py-3\">\n          <div className=\"flex items-center gap-2\">\n            <Switch\n              checked={previewEdits}\n              onCheckedChange={handlePreviewEditsChange}\n            />\n            <span className=\"text-base text-white\">Preview edits before creating</span>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Switch\n              checked={useCenterAsSegmentIndex}\n              onCheckedChange={handleUseCenterAsSegmentIndexChange}\n            />\n            <span className=\"text-base text-white\">Use center as segment index</span>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Switch\n              checked={toggleSegmentEnabled}\n              onCheckedChange={handleToggleSegmentEnabledChange}\n            />\n            <span className=\"text-base text-white\">Hover on segment border to activate</span>\n          </div>\n        </div>\n      );\n    },\n  };\n}\n","export default {\n  'layoutSelector.advancedPresetGenerator': ({\n    servicesManager,\n  }: {\n    servicesManager: AppTypes.ServicesManager;\n  }) => {\n    const _areSelectorsValid = (\n      hp: AppTypes.HangingProtocol.Protocol,\n      displaySets: AppTypes.DisplaySet[],\n      hangingProtocolService: AppTypes.HangingProtocolService\n    ) => {\n      if (!hp.displaySetSelectors || Object.values(hp.displaySetSelectors).length === 0) {\n        return true;\n      }\n\n      return hangingProtocolService.areRequiredSelectorsValid(\n        Object.values(hp.displaySetSelectors),\n        displaySets[0]\n      );\n    };\n\n    const generateAdvancedPresets = ({\n      servicesManager,\n    }: {\n      servicesManager: AppTypes.ServicesManager;\n    }) => {\n      const { hangingProtocolService, viewportGridService, displaySetService } =\n        servicesManager.services;\n\n      const hangingProtocols = Array.from(hangingProtocolService.protocols.values());\n\n      const viewportId = viewportGridService.getActiveViewportId();\n\n      if (!viewportId) {\n        return [];\n      }\n      const displaySetInstanceUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n      if (!displaySetInstanceUIDs) {\n        return [];\n      }\n\n      const displaySets = displaySetInstanceUIDs.map(uid => {\n        const displaySet = displaySetService.getDisplaySetByUID(uid);\n        const referencedDisplaySetUID = displaySet?.measurements?.[0]?.displaySetInstanceUID;\n        if (displaySet.Modality === 'SR' && referencedDisplaySetUID) {\n          return displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\n        }\n        return displaySet;\n      });\n\n      return hangingProtocols\n        .map(hp => {\n          if (!hp.isPreset) {\n            return null;\n          }\n\n          const areValid = _areSelectorsValid(hp, displaySets, hangingProtocolService);\n\n          return {\n            icon: hp.icon,\n            title: hp.name,\n            commandOptions: {\n              protocolId: hp.id,\n            },\n            disabled: !areValid,\n          };\n        })\n        .filter(preset => preset !== null);\n    };\n\n    return generateAdvancedPresets({ servicesManager });\n  },\n  'layoutSelector.commonPresets': [\n    {\n      icon: 'layout-common-1x1',\n      commandOptions: {\n        numRows: 1,\n        numCols: 1,\n      },\n    },\n    {\n      icon: 'layout-common-1x2',\n      commandOptions: {\n        numRows: 1,\n        numCols: 2,\n      },\n    },\n    {\n      icon: 'layout-common-2x2',\n      commandOptions: {\n        numRows: 2,\n        numCols: 2,\n      },\n    },\n    {\n      icon: 'layout-common-2x3',\n      commandOptions: {\n        numRows: 2,\n        numCols: 3,\n      },\n    },\n  ],\n};\n","import { Enums } from '@cornerstonejs/tools';\nimport { toolNames } from '../initCornerstoneTools';\n\nexport default {\n  'cornerstone.overlayViewportTools': {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }, { numTouchPoints: 2 }],\n      },\n      {\n        toolName: toolNames.StackScroll,\n        bindings: [{ mouseButton: Enums.MouseBindings.Wheel }, { numTouchPoints: 3 }],\n      },\n    ],\n    enabled: [\n      {\n        toolName: toolNames.PlanarFreehandContourSegmentation,\n        configuration: {\n          displayOnePointAsCrosshairs: true,\n        },\n      },\n    ],\n  },\n};\n","export default {\n  cornerstoneViewportClickCommands: {\n    doubleClick: ['toggleOneUp'],\n    button1: ['closeContextMenu'],\n    button3: [\n      {\n        commandName: 'showCornerstoneContextMenu',\n        commandOptions: {\n          requireNearbyToolData: true,\n          menuId: 'measurementsContextMenu',\n        },\n      },\n    ],\n  },\n};\n","export default {\n  'cornerstone.measurements': {\n    Angle: {\n      displayText: [],\n      report: [],\n    },\n    CobbAngle: {\n      displayText: [],\n      report: [],\n    },\n    ArrowAnnotate: {\n      displayText: [],\n      report: [],\n    },\n    RectangleROi: {\n      displayText: [],\n      report: [],\n    },\n    CircleROI: {\n      displayText: [],\n      report: [],\n    },\n    EllipticalROI: {\n      displayText: [],\n      report: [],\n    },\n    Bidirectional: {\n      displayText: [],\n      report: [],\n    },\n    Length: {\n      displayText: [],\n      report: [],\n    },\n    LivewireContour: {\n      displayText: [],\n      report: [],\n    },\n    SplineROI: {\n      displayText: [\n        {\n          displayName: 'Areas',\n          value: 'area',\n          type: 'value',\n        },\n        {\n          value: 'areaUnits',\n          for: ['area'],\n          type: 'unit',\n        },\n      ],\n      report: [\n        {\n          displayName: 'Area',\n          value: 'area',\n          type: 'value',\n        },\n        {\n          displayName: 'Unit',\n          value: 'areaUnits',\n          type: 'value',\n        },\n      ],\n    },\n    PlanarFreehandROI: {\n      displayTextOpen: [\n        {\n          displayName: 'Length',\n          value: 'length',\n          type: 'value',\n        },\n      ],\n      displayText: [\n        {\n          displayName: 'Mean',\n          value: 'mean',\n          type: 'value',\n        },\n        {\n          displayName: 'Max',\n          value: 'max',\n          type: 'value',\n        },\n        {\n          displayName: 'Area',\n          value: 'area',\n          type: 'value',\n        },\n        {\n          value: 'pixelValueUnits',\n          for: ['mean', 'max'],\n          type: 'unit',\n        },\n        {\n          value: 'areaUnits',\n          for: ['area'],\n          type: 'unit',\n        },\n      ],\n      report: [\n        {\n          displayName: 'Mean',\n          value: 'mean',\n          type: 'value',\n        },\n        {\n          displayName: 'Max',\n          value: 'max',\n          type: 'value',\n        },\n        {\n          displayName: 'Area',\n          value: 'area',\n          type: 'value',\n        },\n        {\n          displayName: 'Unit',\n          value: 'unit',\n          type: 'value',\n        },\n      ],\n    },\n  },\n};\n","import { CONSTANTS } from '@cornerstonejs/core';\n\nconst { VIEWPORT_PRESETS } = CONSTANTS;\n\nexport default {\n  'cornerstone.3dVolumeRendering': {\n    volumeRenderingPresets: VIEWPORT_PRESETS,\n    volumeRenderingQualityRange: {\n      min: 1,\n      max: 4,\n      step: 1,\n    },\n  },\n};\n","import { colormaps } from '../utils/colormaps';\nimport {\n  ColorbarPositionType,\n  TickPositionType,\n  PositionStylesMapType,\n  PositionTickStylesMapType,\n  ContainerStyleType,\n  TickStyleType,\n  ColorbarProperties,\n} from '../types/Colorbar';\nimport { ColorMapPreset } from '../types/Colormap';\n\nconst defaultPosition: ColorbarPositionType = 'bottom';\nconst DefaultColormap = 'Grayscale';\n\nconst positionStyles: PositionStylesMapType = {\n  left: { width: '15px' },\n  right: { width: '15px' },\n  bottom: { height: '15px' },\n};\n\n// Typed position-specific tick styles\nconst positionTickStyles: PositionTickStylesMapType = {\n  bottom: {\n    position: 'top',\n    style: {\n      labelOffset: 5,\n      labelMargin: 13,\n    },\n  },\n  right: {\n    position: 'left',\n    style: {\n      labelMargin: 5,\n    },\n  },\n  left: {\n    position: 'right',\n    style: {\n      labelMargin: 5,\n    },\n  },\n  top: {\n    position: 'bottom',\n    style: {\n      labelMargin: 5,\n    },\n  },\n};\n\n// Get recommended tick position for a given colorbar position\nconst getTickPositionForPosition = (position: ColorbarPositionType): TickPositionType => {\n  if (position === 'bottom') {\n    return 'top';\n  } else if (position === 'top') {\n    return 'bottom';\n  } else if (position === 'left') {\n    return 'right';\n  } else if (position === 'right') {\n    return 'left';\n  }\n\n  return positionTickStyles[position]?.position || 'top';\n};\n\n// Container styles for colorbar\nconst containerStyles: ContainerStyleType = {\n  cursor: 'initial',\n};\n\n// Tick styling\nconst tickStyles: TickStyleType = {\n  font: '12px Arial',\n  color: '#fff',\n  maxNumTicks: 6,\n  tickSize: 5,\n  tickWidth: 1,\n};\n\nconst colorbarConfig: Partial<ColorbarProperties> = {\n  colorbarTickPosition: getTickPositionForPosition(defaultPosition),\n  colormaps: colormaps as unknown as Record<string, ColorMapPreset>,\n  colorbarContainerPosition: defaultPosition,\n  colorbarInitialColormap: DefaultColormap,\n  positionStyles,\n  positionTickStyles,\n  containerStyles,\n  tickStyles,\n};\n\nexport default {\n  'cornerstone.colorbar': colorbarConfig,\n};\n","export default {\n  'cornerstone.modalityOverlayDefaultColorMaps': {\n    defaultSettings: {\n      PT: {\n        colormap: 'hsv',\n        // Note: Right now, there is a nonlinear relationship between the opacity value\n        // below and how it will get applied to the image. The limitation is in rendering.\n        // We are working on this and will remove this note when it's fixed.\n        // But don't expect 0.5 to be 50% opacity, but rather close to that.\n        opacity: 0.5,\n      },\n      RTDOSE: {\n        colormap: 'Isodose',\n        // Note: Right now, there is a nonlinear relationship between the opacity value\n        // below and how it will get applied to the image. The limitation is in rendering.\n        // We are working on this and will remove this note when it's fixed.\n        // But don't expect 0.5 to be 50% opacity, but rather close to that.\n\n        opacity: 0.5,\n      },\n    },\n  },\n};\n","import defaultWindowLevelPresets from '../components/WindowLevelActionMenu/defaultWindowLevelPresets';\n\nexport default {\n  'cornerstone.windowLevelPresets': defaultWindowLevelPresets,\n};\n","// The following are the default window level presets and can be further\n// configured via the customization service.\nconst defaultWindowLevelPresets = {\n  CT: [\n    { id: 'ct-soft-tissue', description: 'Soft tissue', window: '400', level: '40' },\n    { id: 'ct-lung', description: 'Lung', window: '1500', level: '-600' },\n    { id: 'ct-liver', description: 'Liver', window: '150', level: '90' },\n    { id: 'ct-bone', description: 'Bone', window: '2500', level: '480' },\n    { id: 'ct-brain', description: 'Brain', window: '80', level: '40' },\n  ],\n\n  PT: [\n    { id: 'pt-default', description: 'Default', window: '5', level: '2.5' },\n    { id: 'pt-suv-3', description: 'SUV', window: '0', level: '3' },\n    { id: 'pt-suv-5', description: 'SUV', window: '0', level: '5' },\n    { id: 'pt-suv-7', description: 'SUV', window: '0', level: '7' },\n    { id: 'pt-suv-8', description: 'SUV', window: '0', level: '8' },\n    { id: 'pt-suv-10', description: 'SUV', window: '0', level: '10' },\n    { id: 'pt-suv-15', description: 'SUV', window: '0', level: '15' },\n  ],\n};\n\nexport default defaultWindowLevelPresets;\n","import dicomImageLoader from '@cornerstonejs/dicom-image-loader';\n\nimport { PubSubService } from '@ohif/core';\n\nexport const EVENTS = {\n  PROGRESS: 'event:DicomFileUploader:progress',\n};\n\nexport interface DicomFileUploaderEvent {\n  fileId: number;\n}\n\nexport interface DicomFileUploaderProgressEvent extends DicomFileUploaderEvent {\n  percentComplete: number;\n}\n\nexport enum UploadStatus {\n  NotStarted,\n  InProgress,\n  Success,\n  Failed,\n  Cancelled,\n}\n\ntype CancelOrFailed = UploadStatus.Cancelled | UploadStatus.Failed;\n\nexport class UploadRejection {\n  message: string;\n  status: CancelOrFailed;\n\n  constructor(status: CancelOrFailed, message: string) {\n    this.message = message;\n    this.status = status;\n  }\n}\n\nexport default class DicomFileUploader extends PubSubService {\n  private _file;\n  private _fileId;\n  private _dataSource;\n  private _loadPromise;\n  private _abortController = new AbortController();\n  private _status: UploadStatus = UploadStatus.NotStarted;\n  private _percentComplete = 0;\n\n  constructor(file, dataSource) {\n    super(EVENTS);\n    this._file = file;\n    this._fileId = dicomImageLoader.wadouri.fileManager.add(file);\n    this._dataSource = dataSource;\n  }\n\n  getFileId(): string {\n    return this._fileId;\n  }\n\n  getFileName(): string {\n    return this._file.name;\n  }\n\n  getFileSize(): number {\n    return this._file.size;\n  }\n\n  cancel(): void {\n    this._abortController.abort();\n  }\n\n  getStatus(): UploadStatus {\n    return this._status;\n  }\n\n  getPercentComplete(): number {\n    return this._percentComplete;\n  }\n\n  async load(): Promise<void> {\n    if (this._loadPromise) {\n      // Already started loading, return the load promise.\n      return this._loadPromise;\n    }\n\n    this._loadPromise = new Promise<void>((resolve, reject) => {\n      // The upload listeners: fire progress events and/or settle the promise.\n      const uploadCallbacks = {\n        progress: evt => {\n          if (!evt.lengthComputable) {\n            // Progress computation is not possible.\n            return;\n          }\n\n          this._status = UploadStatus.InProgress;\n\n          this._percentComplete = Math.round((100 * evt.loaded) / evt.total);\n          this._broadcastEvent(EVENTS.PROGRESS, {\n            fileId: this._fileId,\n            percentComplete: this._percentComplete,\n          });\n        },\n        timeout: () => {\n          this._reject(reject, new UploadRejection(UploadStatus.Failed, 'The request timed out.'));\n        },\n        abort: () => {\n          this._reject(reject, new UploadRejection(UploadStatus.Cancelled, 'Cancelled'));\n        },\n        error: () => {\n          this._reject(reject, new UploadRejection(UploadStatus.Failed, 'The request failed.'));\n        },\n      };\n\n      // First try to load the file.\n      dicomImageLoader.wadouri\n        .loadFileRequest(this._fileId)\n        .then(dicomFile => {\n          if (this._abortController.signal.aborted) {\n            this._reject(reject, new UploadRejection(UploadStatus.Cancelled, 'Cancelled'));\n            return;\n          }\n\n          if (!this._checkDicomFile(dicomFile)) {\n            // The file is not DICOM\n            this._reject(\n              reject,\n              new UploadRejection(UploadStatus.Failed, 'Not a valid DICOM file.')\n            );\n            return;\n          }\n\n          const request = new XMLHttpRequest();\n          this._addRequestCallbacks(request, uploadCallbacks);\n\n          // Do the actual upload by supplying the DICOM file and upload callbacks/listeners.\n          return this._dataSource.store\n            .dicom(dicomFile, request)\n            .then(() => {\n              this._status = UploadStatus.Success;\n              resolve();\n            })\n            .catch(reason => {\n              this._reject(reject, reason);\n            });\n        })\n        .catch(reason => {\n          this._reject(reject, reason);\n        });\n    });\n\n    return this._loadPromise;\n  }\n\n  private _isRejected(): boolean {\n    return this._status === UploadStatus.Failed || this._status === UploadStatus.Cancelled;\n  }\n\n  private _reject(reject: (reason?: any) => void, reason: any) {\n    if (this._isRejected()) {\n      return;\n    }\n\n    if (reason instanceof UploadRejection) {\n      this._status = reason.status;\n      reject(reason);\n      return;\n    }\n\n    this._status = UploadStatus.Failed;\n\n    if (reason.message) {\n      reject(new UploadRejection(UploadStatus.Failed, reason.message));\n      return;\n    }\n\n    reject(new UploadRejection(UploadStatus.Failed, reason));\n  }\n\n  private _addRequestCallbacks(request: XMLHttpRequest, uploadCallbacks) {\n    const abortCallback = () => request.abort();\n    this._abortController.signal.addEventListener('abort', abortCallback);\n\n    for (const [eventName, callback] of Object.entries(uploadCallbacks)) {\n      request.upload.addEventListener(eventName, callback);\n    }\n\n    const cleanUpCallback = () => {\n      this._abortController.signal.removeEventListener('abort', abortCallback);\n\n      for (const [eventName, callback] of Object.entries(uploadCallbacks)) {\n        request.upload.removeEventListener(eventName, callback);\n      }\n\n      request.removeEventListener('loadend', cleanUpCallback);\n    };\n    request.addEventListener('loadend', cleanUpCallback);\n  }\n\n  private _checkDicomFile(arrayBuffer: ArrayBuffer) {\n    if (arrayBuffer.length <= 132) {\n      return false;\n    }\n    const arr = new Uint8Array(arrayBuffer.slice(128, 132));\n    // bytes from 128 to 132 must be \"DICM\"\n    return Array.from('DICM').every((char, i) => char.charCodeAt(0) === arr[i]);\n  }\n}\n","import React, { ReactElement, memo, useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DicomFileUploader, {\n  DicomFileUploaderProgressEvent,\n  EVENTS,\n  UploadRejection,\n  UploadStatus,\n} from '../../utils/DicomFileUploader';\nimport { Icons } from '@ohif/ui-next';\n\ntype DicomUploadProgressItemProps = {\n  dicomFileUploader: DicomFileUploader;\n};\n\n// eslint-disable-next-line react/display-name\nconst DicomUploadProgressItem = memo(\n  ({ dicomFileUploader }: DicomUploadProgressItemProps): ReactElement => {\n    const [percentComplete, setPercentComplete] = useState(dicomFileUploader.getPercentComplete());\n    const [failedReason, setFailedReason] = useState('');\n    const [status, setStatus] = useState(dicomFileUploader.getStatus());\n\n    const isComplete = useCallback(() => {\n      return (\n        status === UploadStatus.Failed ||\n        status === UploadStatus.Cancelled ||\n        status === UploadStatus.Success\n      );\n    }, [status]);\n\n    useEffect(() => {\n      const progressSubscription = dicomFileUploader.subscribe(\n        EVENTS.PROGRESS,\n        (dicomFileUploaderProgressEvent: DicomFileUploaderProgressEvent) => {\n          setPercentComplete(dicomFileUploaderProgressEvent.percentComplete);\n        }\n      );\n\n      dicomFileUploader\n        .load()\n        .catch((reason: UploadRejection) => {\n          setStatus(reason.status);\n          setFailedReason(reason.message ?? '');\n        })\n        .finally(() => setStatus(dicomFileUploader.getStatus()));\n\n      return () => progressSubscription.unsubscribe();\n    }, []);\n\n    const cancelUpload = useCallback(() => {\n      dicomFileUploader.cancel();\n    }, []);\n\n    const getStatusIcon = (): ReactElement => {\n      switch (dicomFileUploader.getStatus()) {\n        case UploadStatus.Success:\n          return (\n            <Icons.ByName\n              name=\"status-tracked\"\n              className=\"text-primary-light\"\n            />\n          );\n        case UploadStatus.InProgress:\n          return <Icons.ByName name=\"icon-transferring\" />;\n        case UploadStatus.Failed:\n          return <Icons.ByName name=\"icon-alert-small\" />;\n        case UploadStatus.Cancelled:\n          return <Icons.ByName name=\"icon-alert-outline\" />;\n        default:\n          return <></>;\n      }\n    };\n\n    return (\n      <div className=\"min-h-14 border-secondary-light flex w-full items-center overflow-hidden border-b p-2.5 text-lg\">\n        <div className=\"self-top flex w-0 shrink grow flex-col gap-1\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex w-6 shrink-0 items-center justify-center\">{getStatusIcon()}</div>\n            <div className=\"overflow-hidden text-ellipsis whitespace-nowrap text-white\">\n              {dicomFileUploader.getFileName()}\n            </div>\n          </div>\n          {failedReason && <div className=\"pl-10\">{failedReason}</div>}\n        </div>\n        <div className=\"flex w-24 items-center\">\n          {!isComplete() && (\n            <>\n              {dicomFileUploader.getStatus() === UploadStatus.InProgress && (\n                <div className=\"w-10 text-right\">{percentComplete}%</div>\n              )}\n              <div className=\"ml-auto flex cursor-pointer\">\n                <Icons.Close\n                  className=\"text-primary self-center\"\n                  onClick={cancelUpload}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nDicomUploadProgressItem.propTypes = {\n  dicomFileUploader: PropTypes.instanceOf(DicomFileUploader).isRequired,\n};\n\nexport default DicomUploadProgressItem;\n","import React, { useCallback, useEffect, useRef, useState, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSystem } from '@ohif/core';\nimport { Button } from '@ohif/ui';\nimport { Icons } from '@ohif/ui-next';\nimport DicomFileUploader, {\n  EVENTS,\n  UploadStatus,\n  DicomFileUploaderProgressEvent,\n  UploadRejection,\n} from '../../utils/DicomFileUploader';\nimport DicomUploadProgressItem from './DicomUploadProgressItem';\nimport classNames from 'classnames';\n\ntype DicomUploadProgressProps = {\n  dicomFileUploaderArr: DicomFileUploader[];\n  onComplete: () => void;\n};\n\nconst ONE_SECOND = 1000;\nconst ONE_MINUTE = ONE_SECOND * 60;\nconst ONE_HOUR = ONE_MINUTE * 60;\n\n// The base/initial interval time length used to calculate the\n// rate of the upload and in turn estimate the\n// the amount of time remaining for the upload. This is the length\n// of the very first interval to get a reasonable estimate on screen in\n// a reasonable amount of time. The length of each interval after the first\n// is based on the upload rate calculated. Faster rates use this base interval\n// length. Slower rates below UPLOAD_RATE_THRESHOLD get longer interval times\n// to obtain more accurate upload rates.\nconst BASE_INTERVAL_TIME = 15000;\n\n// The upload rate threshold to determine the length of the interval to\n// calculate the upload rate.\nconst UPLOAD_RATE_THRESHOLD = 75;\n\nconst NO_WRAP_ELLIPSIS_CLASS_NAMES = 'text-ellipsis whitespace-nowrap overflow-hidden';\n\nfunction DicomUploadProgress({\n  dicomFileUploaderArr,\n  onComplete,\n}: DicomUploadProgressProps): ReactElement {\n  const { servicesManager } = useSystem();\n\n  const ProgressLoadingBar =\n    servicesManager.services.customizationService.getCustomization('ui.progressLoadingBar');\n\n  const [totalUploadSize] = useState(\n    dicomFileUploaderArr.reduce((acc, fileUploader) => acc + fileUploader.getFileSize(), 0)\n  );\n\n  const currentUploadSizeRef = useRef<number>(0);\n\n  const uploadRateRef = useRef(0);\n\n  const [timeRemaining, setTimeRemaining] = useState<number>(null);\n\n  const [percentComplete, setPercentComplete] = useState(0);\n\n  const [numFilesCompleted, setNumFilesCompleted] = useState(0);\n\n  const [numFails, setNumFails] = useState(0);\n\n  const [showFailedOnly, setShowFailedOnly] = useState(false);\n\n  const progressBarContainerRef = useRef<HTMLElement>();\n\n  /**\n   * The effect for measuring and setting the current upload rate. This is\n   * done by measuring the amount of data uploaded in a set interval time.\n   */\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n\n    // The amount of data already uploaded at the start of the interval.\n    let intervalStartUploadSize = 0;\n\n    // The starting time of the interval.\n    let intervalStartTime = Date.now();\n\n    const setUploadRateRef = () => {\n      const uploadSizeFromStartOfInterval = currentUploadSizeRef.current - intervalStartUploadSize;\n\n      const now = Date.now();\n      const timeSinceStartOfInterval = now - intervalStartTime;\n\n      // Calculate and set the upload rate (ref)\n      uploadRateRef.current = uploadSizeFromStartOfInterval / timeSinceStartOfInterval;\n\n      // Reset the interval starting values.\n      intervalStartUploadSize = currentUploadSizeRef.current;\n      intervalStartTime = now;\n\n      // Only start a new interval if there is more to upload.\n      if (totalUploadSize - currentUploadSizeRef.current > 0) {\n        if (uploadRateRef.current >= UPLOAD_RATE_THRESHOLD) {\n          timeoutId = setTimeout(setUploadRateRef, BASE_INTERVAL_TIME);\n        } else {\n          // The current upload rate is relatively slow, so use a larger\n          // time interval to get a better upload rate estimate.\n          timeoutId = setTimeout(setUploadRateRef, BASE_INTERVAL_TIME * 2);\n        }\n      }\n    };\n\n    // The very first interval is just the base time interval length.\n    timeoutId = setTimeout(setUploadRateRef, BASE_INTERVAL_TIME);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  /**\n   * The effect for: updating the overall percentage complete; setting the\n   * estimated time remaining; updating the number of files uploaded; and\n   * detecting if any error has occurred.\n   */\n  useEffect(() => {\n    let currentTimeRemaining = null;\n\n    // For each uploader, listen for the progress percentage complete and\n    // add promise catch/finally callbacks to detect errors and count number\n    // of uploads complete.\n    const subscriptions = dicomFileUploaderArr.map(fileUploader => {\n      let currentFileUploadSize = 0;\n\n      const updateProgress = (percentComplete: number) => {\n        const previousFileUploadSize = currentFileUploadSize;\n\n        currentFileUploadSize = Math.round((percentComplete / 100) * fileUploader.getFileSize());\n\n        currentUploadSizeRef.current = Math.min(\n          totalUploadSize,\n          currentUploadSizeRef.current - previousFileUploadSize + currentFileUploadSize\n        );\n\n        setPercentComplete((currentUploadSizeRef.current / totalUploadSize) * 100);\n\n        if (uploadRateRef.current !== 0) {\n          const uploadSizeRemaining = totalUploadSize - currentUploadSizeRef.current;\n\n          const timeRemaining = Math.round(uploadSizeRemaining / uploadRateRef.current);\n\n          if (currentTimeRemaining === null) {\n            currentTimeRemaining = timeRemaining;\n            setTimeRemaining(currentTimeRemaining);\n            return;\n          }\n\n          // Do not show an increase in the time remaining by two seconds or minutes\n          // so as to prevent jumping the time remaining up and down constantly\n          // due to rounding, inaccuracies in the estimate and slight variations\n          // in upload rates over time.\n          if (timeRemaining < ONE_MINUTE) {\n            const currentSecondsRemaining = Math.ceil(currentTimeRemaining / ONE_SECOND);\n            const secondsRemaining = Math.ceil(timeRemaining / ONE_SECOND);\n            const delta = secondsRemaining - currentSecondsRemaining;\n            if (delta < 0 || delta > 2) {\n              currentTimeRemaining = timeRemaining;\n              setTimeRemaining(currentTimeRemaining);\n            }\n            return;\n          }\n\n          if (timeRemaining < ONE_HOUR) {\n            const currentMinutesRemaining = Math.ceil(currentTimeRemaining / ONE_MINUTE);\n            const minutesRemaining = Math.ceil(timeRemaining / ONE_MINUTE);\n            const delta = minutesRemaining - currentMinutesRemaining;\n            if (delta < 0 || delta > 2) {\n              currentTimeRemaining = timeRemaining;\n              setTimeRemaining(currentTimeRemaining);\n            }\n            return;\n          }\n\n          // Hours remaining...\n          currentTimeRemaining = timeRemaining;\n          setTimeRemaining(currentTimeRemaining);\n        }\n      };\n\n      const progressCallback = (progressEvent: DicomFileUploaderProgressEvent) => {\n        updateProgress(progressEvent.percentComplete);\n      };\n\n      // Use the uploader promise to flag any error and count the number of\n      // uploads completed.\n      fileUploader\n        .load()\n        .catch((rejection: UploadRejection) => {\n          if (rejection.status === UploadStatus.Failed) {\n            setNumFails(numFails => numFails + 1);\n          }\n        })\n        .finally(() => {\n          // If any error occurred, the percent complete progress stops firing\n          // but this call to updateProgress nicely puts all finished uploads at 100%.\n          updateProgress(100);\n          setNumFilesCompleted(numCompleted => numCompleted + 1);\n        });\n\n      return fileUploader.subscribe(EVENTS.PROGRESS, progressCallback);\n    });\n    return () => {\n      subscriptions.forEach(subscription => subscription.unsubscribe());\n    };\n  }, []);\n\n  const cancelAllUploads = useCallback(async () => {\n    for (const dicomFileUploader of dicomFileUploaderArr) {\n      // Important: we need a non-blocking way to cancel every upload,\n      // otherwise the UI will freeze and the user will not be able\n      // to interact with the app and progress will not be updated.\n      const promise = new Promise<void>((resolve, reject) => {\n        setTimeout(() => {\n          dicomFileUploader.cancel();\n          resolve();\n        }, 0);\n      });\n    }\n  }, []);\n\n  const getFormattedTimeRemaining = useCallback((): string => {\n    if (timeRemaining == null) {\n      return '';\n    }\n\n    if (timeRemaining < ONE_MINUTE) {\n      const secondsRemaining = Math.ceil(timeRemaining / ONE_SECOND);\n      return `${secondsRemaining} ${secondsRemaining === 1 ? 'second' : 'seconds'}`;\n    }\n\n    if (timeRemaining < ONE_HOUR) {\n      const minutesRemaining = Math.ceil(timeRemaining / ONE_MINUTE);\n      return `${minutesRemaining} ${minutesRemaining === 1 ? 'minute' : 'minutes'}`;\n    }\n\n    const hoursRemaining = Math.ceil(timeRemaining / ONE_HOUR);\n    return `${hoursRemaining} ${hoursRemaining === 1 ? 'hour' : 'hours'}`;\n  }, [timeRemaining]);\n\n  const getPercentCompleteRounded = useCallback(\n    () => Math.min(100, Math.round(percentComplete)),\n    [percentComplete]\n  );\n\n  /**\n   * Determines if the progress bar should show the infinite animation or not.\n   * Show the infinite animation for progress less than 1% AND if less than\n   * one pixel of the progress bar would be displayed.\n   */\n  const showInfiniteProgressBar = useCallback((): boolean => {\n    return (\n      getPercentCompleteRounded() < 1 &&\n      (progressBarContainerRef?.current?.offsetWidth ?? 0) * (percentComplete / 100) < 1\n    );\n  }, [getPercentCompleteRounded, percentComplete]);\n\n  /**\n   * Gets the CSS style for the 'n of m' (files completed) text.\n   * The width changes according to numFilesCompleted and can vary,\n   * e.g. \"1 of 200\", \"10 of 200\", \"100 of 200\" all have differents width.\n   */\n  const getNofMFilesStyle = useCallback(() => {\n    // the number of digits accounts for the digits being on each side of the ' of '\n    const numDigits =\n      numFilesCompleted.toString().length + dicomFileUploaderArr.length.toString().length;\n    // The number of digits + 3 additional characters (accounts for ' of ').\n    // Even though intuitively 4 should be better, this is the most accurate width.\n    // The font may play a part in this discrepancy.\n    const numChars = numDigits + 3;\n    return { width: `${numChars}ch` };\n  }, [numFilesCompleted]);\n\n  const getNumCompletedAndTimeRemainingComponent = (): ReactElement => {\n    return (\n      <div className=\"bg-primary-dark flex h-14 items-center px-1 pb-4 text-lg text-white\">\n        {numFilesCompleted === dicomFileUploaderArr.length ? (\n          <>\n            <span className={NO_WRAP_ELLIPSIS_CLASS_NAMES}>{`${dicomFileUploaderArr.length} ${\n              dicomFileUploaderArr.length > 1 ? 'files' : 'file'\n            } completed.`}</span>\n            <Button\n              disabled={false}\n              className=\"ml-auto\"\n              onClick={onComplete}\n            >\n              {'Close'}\n            </Button>\n          </>\n        ) : (\n          <>\n            <div className=\"flex flex-wrap\">\n              <span\n                style={getNofMFilesStyle()}\n                className={classNames(NO_WRAP_ELLIPSIS_CLASS_NAMES, 'text-right')}\n              >\n                {`${numFilesCompleted} of ${dicomFileUploaderArr.length}`}&nbsp;\n              </span>\n              <span className={NO_WRAP_ELLIPSIS_CLASS_NAMES}>{' files completed.'}</span>\n              <br />\n              <span>\n                {timeRemaining ? `Less than ${getFormattedTimeRemaining()} remaining. ` : ''}\n              </span>\n            </div>\n\n            <span\n              className={\n                'text-primary hover:text-primary-lightactive:text-aqua-pale ml-auto cursor-pointer whitespace-nowrap'\n              }\n              onClick={cancelAllUploads}\n            >\n              Cancel All Uploads\n            </span>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const getShowFailedOnlyIconComponent = (): ReactElement => {\n    return (\n      <div className=\"ml-auto flex w-6 justify-center\">\n        {numFails > 0 && (\n          <div onClick={() => setShowFailedOnly(currentShowFailedOnly => !currentShowFailedOnly)}>\n            <Icons.ByName\n              className=\"cursor-pointer\"\n              name=\"icon-status-alert\"\n            ></Icons.ByName>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const getPercentCompleteComponent = (): ReactElement => {\n    return (\n      <div className=\"ohif-scrollbar border-secondary-light overflow-y-scroll border-b px-2\">\n        <div className=\"min-h-14 flex w-full items-center p-2.5\">\n          {numFilesCompleted === dicomFileUploaderArr.length ? (\n            <>\n              <div className=\"text-primary-light text-xl\">\n                {numFails > 0\n                  ? `Completed with ${numFails} ${numFails > 1 ? 'errors' : 'error'}!`\n                  : 'Completed!'}\n              </div>\n              {getShowFailedOnlyIconComponent()}\n            </>\n          ) : (\n            <>\n              <div\n                ref={progressBarContainerRef}\n                className=\"flex-grow\"\n              >\n                <ProgressLoadingBar\n                  progress={showInfiniteProgressBar() ? undefined : Math.min(100, percentComplete)}\n                ></ProgressLoadingBar>\n              </div>\n              <div className=\"ml-1 flex w-24 items-center\">\n                <div className=\"w-10 text-right text-foreground\">{`${getPercentCompleteRounded()}%`}</div>\n                {getShowFailedOnlyIconComponent()}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex grow flex-col\">\n      {getNumCompletedAndTimeRemainingComponent()}\n      <div className=\"flex grow flex-col overflow-hidden bg-black text-lg\">\n        {getPercentCompleteComponent()}\n        <div className=\"ohif-scrollbar h-1 grow overflow-y-scroll px-2\">\n          {dicomFileUploaderArr\n            .filter(\n              dicomFileUploader =>\n                !showFailedOnly || dicomFileUploader.getStatus() === UploadStatus.Failed\n            )\n            .map(dicomFileUploader => (\n              <DicomUploadProgressItem\n                key={dicomFileUploader.getFileId()}\n                dicomFileUploader={dicomFileUploader}\n              />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nDicomUploadProgress.propTypes = {\n  dicomFileUploaderArr: PropTypes.arrayOf(PropTypes.instanceOf(DicomFileUploader)).isRequired,\n  onComplete: PropTypes.func.isRequired,\n};\n\nexport default DicomUploadProgress;\n","import React, { useCallback, useState } from 'react';\nimport { ReactElement } from 'react';\nimport Dropzone from 'react-dropzone';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DicomFileUploader from '../../utils/DicomFileUploader';\nimport DicomUploadProgress from './DicomUploadProgress';\nimport { Button, ButtonEnums } from '@ohif/ui';\nimport './DicomUpload.css';\n\ntype DicomUploadProps = {\n  dataSource;\n  onComplete: () => void;\n  onStarted: () => void;\n};\n\nfunction DicomUpload({ dataSource, onComplete, onStarted }: DicomUploadProps): ReactElement {\n  const baseClassNames = 'min-h-[480px] flex flex-col bg-black select-none';\n  const [dicomFileUploaderArr, setDicomFileUploaderArr] = useState([]);\n\n  const onDrop = useCallback(async acceptedFiles => {\n    onStarted();\n    setDicomFileUploaderArr(acceptedFiles.map(file => new DicomFileUploader(file, dataSource)));\n  }, []);\n\n  const getDropZoneComponent = (): ReactElement => {\n    return (\n      <Dropzone\n        onDrop={acceptedFiles => {\n          onDrop(acceptedFiles);\n        }}\n        noClick\n      >\n        {({ getRootProps }) => (\n          <div\n            {...getRootProps()}\n            className=\"dicom-upload-drop-area-border-dash m-5 flex h-full flex-col items-center justify-center\"\n          >\n            <div className=\"flex gap-3\">\n              <Dropzone\n                onDrop={onDrop}\n                noDrag\n              >\n                {({ getRootProps, getInputProps }) => (\n                  <div {...getRootProps()}>\n                    <Button\n                      disabled={false}\n                      onClick={() => {}}\n                    >\n                      {'Add files'}\n                      <input {...getInputProps()} />\n                    </Button>\n                  </div>\n                )}\n              </Dropzone>\n              <Dropzone\n                onDrop={onDrop}\n                noDrag\n              >\n                {({ getRootProps, getInputProps }) => (\n                  <div {...getRootProps()}>\n                    <Button\n                      type={ButtonEnums.type.secondary}\n                      disabled={false}\n                      onClick={() => {}}\n                    >\n                      {'Add folder'}\n                      <input\n                        {...getInputProps()}\n                        webkitdirectory=\"true\"\n                        mozdirectory=\"true\"\n                      />\n                    </Button>\n                  </div>\n                )}\n              </Dropzone>\n            </div>\n            <div className=\"pt-5\">or drag images or folders here</div>\n            <div className=\"text-aqua-pale pt-3 text-lg\">(DICOM files supported)</div>\n          </div>\n        )}\n      </Dropzone>\n    );\n  };\n\n  return (\n    <>\n      {dicomFileUploaderArr.length ? (\n        <div className={classNames('h-[calc(100vh-300px)]', baseClassNames)}>\n          <DicomUploadProgress\n            dicomFileUploaderArr={Array.from(dicomFileUploaderArr)}\n            onComplete={onComplete}\n          />\n        </div>\n      ) : (\n        <div className={classNames('h-[480px]', baseClassNames)}>{getDropZoneComponent()}</div>\n      )}\n    </>\n  );\n}\n\nDicomUpload.propTypes = {\n  dataSource: PropTypes.object.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onStarted: PropTypes.func.isRequired,\n};\n\nexport default DicomUpload;\n","import { CinePlayer } from '@ohif/ui-next';\nimport DicomUpload from '../components/DicomUpload/DicomUpload';\n\nexport default {\n  cinePlayer: CinePlayer,\n  autoCineModalities: ['OT', 'US'],\n  'panelMeasurement.disableEditing': false,\n  onBeforeSRAddMeasurement: ({ measurement, StudyInstanceUID, SeriesInstanceUID }) => {\n    return measurement;\n  },\n  onBeforeDicomStore: ({ dicomDict, measurementData, naturalizedReport }) => {\n    return dicomDict;\n  },\n  dicomUploadComponent: DicomUpload,\n  codingValues: {},\n};\n","import React, { useState, useEffect } from 'react';\nimport { ImageModal, FooterAction } from '@ohif/ui-next';\n\nconst MAX_TEXTURE_SIZE = 10000;\nconst DEFAULT_FILENAME = 'image';\n\ninterface ViewportDownloadFormNewProps {\n  onClose: () => void;\n  defaultSize: number;\n  fileTypeOptions: Array<{ value: string; label: string }>;\n  viewportId: string;\n  showAnnotations: boolean;\n  onAnnotationsChange: (show: boolean) => void;\n  dimensions: { width: number; height: number };\n  onDimensionsChange: (dimensions: { width: number; height: number }) => void;\n  onEnableViewport: (element: HTMLElement) => void;\n  onDisableViewport: () => void;\n  onDownload: (filename: string, fileType: string) => void;\n  warningState: { enabled: boolean; value: string };\n}\n\nfunction ViewportDownloadFormNew({\n  onClose,\n  defaultSize,\n  fileTypeOptions,\n  viewportId,\n  showAnnotations,\n  onAnnotationsChange,\n  dimensions,\n  warningState,\n  onDimensionsChange,\n  onEnableViewport,\n  onDisableViewport,\n  onDownload,\n}: ViewportDownloadFormNewProps) {\n  const [viewportElement, setViewportElement] = useState<HTMLElement | null>(null);\n  const [showWarningMessage, setShowWarningMessage] = useState(true);\n  const [filename, setFilename] = useState(DEFAULT_FILENAME);\n  const [fileType, setFileType] = useState('jpg');\n\n  useEffect(() => {\n    if (!viewportElement) {\n      return;\n    }\n\n    onEnableViewport(viewportElement);\n\n    return () => {\n      onDisableViewport();\n    };\n  }, [onDisableViewport, onEnableViewport, viewportElement]);\n\n  return (\n    <ImageModal>\n      <ImageModal.Body>\n        <ImageModal.ImageVisual>\n          <div\n            style={{\n              height: dimensions.height,\n              width: dimensions.width,\n              position: 'relative',\n            }}\n            data-viewport-uid={viewportId}\n            ref={setViewportElement}\n          >\n            {warningState.enabled && showWarningMessage && (\n              <div\n                className=\"text-foreground absolute left-1/2 bottom-[5px] z-[1000] -translate-x-1/2 whitespace-nowrap rounded bg-black p-3 text-xs font-bold\"\n                style={{\n                  fontSize: '12px',\n                }}\n              >\n                {warningState.value}\n              </div>\n            )}\n          </div>\n        </ImageModal.ImageVisual>\n\n        <ImageModal.ImageOptions>\n          <div className=\"flex items-end space-x-2\">\n            <ImageModal.Filename\n              value={filename}\n              onChange={e => setFilename(e.target.value)}\n            >\n              File name\n            </ImageModal.Filename>\n            <ImageModal.Filetype\n              selected={fileType}\n              onSelect={setFileType}\n              options={fileTypeOptions}\n            />\n          </div>\n\n          <ImageModal.ImageSize\n            width={dimensions.width.toString()}\n            height={dimensions.height.toString()}\n            onWidthChange={e => {\n              onDimensionsChange({\n                ...dimensions,\n                width: parseInt(e.target.value) || defaultSize,\n              });\n            }}\n            onHeightChange={e => {\n              onDimensionsChange({\n                ...dimensions,\n                height: parseInt(e.target.value) || defaultSize,\n              });\n            }}\n            maxWidth={MAX_TEXTURE_SIZE.toString()}\n            maxHeight={MAX_TEXTURE_SIZE.toString()}\n          >\n            Image size <span className=\"text-muted-foreground\">px</span>\n          </ImageModal.ImageSize>\n\n          <ImageModal.SwitchOption\n            defaultChecked={showAnnotations}\n            checked={showAnnotations}\n            onCheckedChange={onAnnotationsChange}\n          >\n            Include annotations\n          </ImageModal.SwitchOption>\n          {warningState.enabled && (\n            <ImageModal.SwitchOption\n              defaultChecked={showWarningMessage}\n              checked={showWarningMessage}\n              onCheckedChange={setShowWarningMessage}\n            >\n              Include warning message\n            </ImageModal.SwitchOption>\n          )}\n          <FooterAction className=\"mt-2\">\n            <FooterAction.Right>\n              <FooterAction.Secondary onClick={onClose}>Cancel</FooterAction.Secondary>\n              <FooterAction.Primary\n                onClick={() => {\n                  onDownload(filename || DEFAULT_FILENAME, fileType);\n                  onClose();\n                }}\n              >\n                Save\n              </FooterAction.Primary>\n            </FooterAction.Right>\n          </FooterAction>\n        </ImageModal.ImageOptions>\n      </ImageModal.Body>\n    </ImageModal>\n  );\n}\n\nexport default {\n  'ohif.captureViewportModal': ViewportDownloadFormNew,\n};\n","export default {\n  'viewportDownload.warningMessage': {\n    enabled: true,\n    value: 'Not For Diagnostic Use',\n  },\n};\n","import viewportOverlayCustomization from './customizations/viewportOverlayCustomization';\nimport getSegmentationPanelCustomization from './customizations/segmentationPanelCustomization';\nimport layoutSelectorCustomization from './customizations/layoutSelectorCustomization';\nimport viewportToolsCustomization from './customizations/viewportToolsCustomization';\nimport viewportClickCommandsCustomization from './customizations/viewportClickCommandsCustomization';\nimport measurementsCustomization from './customizations/measurementsCustomization';\nimport volumeRenderingCustomization from './customizations/volumeRenderingCustomization';\nimport colorbarCustomization from './customizations/colorbarCustomization';\nimport modalityColorMapCustomization from './customizations/modalityColorMapCustomization';\nimport windowLevelPresetsCustomization from './customizations/windowLevelPresetsCustomization';\nimport miscCustomization from './customizations/miscCustomization';\nimport captureViewportModalCustomization from './customizations/captureViewportModalCustomization';\nimport viewportDownloadWarningCustomization from './customizations/viewportDownloadWarningCustomization';\n\nfunction getCustomizationModule({ commandsManager, servicesManager, extensionManager }) {\n  return [\n    {\n      name: 'default',\n      value: {\n        ...viewportOverlayCustomization,\n        ...getSegmentationPanelCustomization({\n          commandsManager,\n          servicesManager,\n          extensionManager,\n        }),\n        ...layoutSelectorCustomization,\n        ...viewportToolsCustomization,\n        ...viewportClickCommandsCustomization,\n        ...measurementsCustomization,\n        ...volumeRenderingCustomization,\n        ...colorbarCustomization,\n        ...modalityColorMapCustomization,\n        ...windowLevelPresetsCustomization,\n        ...miscCustomization,\n        ...captureViewportModalCustomization,\n        ...viewportDownloadWarningCustomization,\n      },\n    },\n  ];\n}\n\nexport default getCustomizationModule;\n","import { DisplaySetService, ViewportGridService } from '@ohif/core';\n\nconst IMAGE_SLICE_SYNC_NAME = 'IMAGE_SLICE_SYNC';\n\nexport default function toggleImageSliceSync({\n  servicesManager,\n  viewports: providedViewports,\n  syncId,\n}: withAppTypes) {\n  const { syncGroupService, viewportGridService, displaySetService, cornerstoneViewportService } =\n    servicesManager.services;\n\n  syncId ||= IMAGE_SLICE_SYNC_NAME;\n\n  const viewports =\n    providedViewports || getReconstructableStackViewports(viewportGridService, displaySetService);\n\n  // Todo: right now we don't have a proper way to define specific\n  // viewports to add to synchronizers, and right now it is global or not\n  // after we do that, we should do fine grained control of the synchronizers\n  const someViewportHasSync = viewports.some(viewport => {\n    const syncStates = syncGroupService.getSynchronizersForViewport(\n      viewport.viewportOptions.viewportId\n    );\n\n    const imageSync = syncStates.find(syncState => syncState.id === syncId);\n\n    return !!imageSync;\n  });\n\n  if (someViewportHasSync) {\n    return disableSync(syncId, servicesManager);\n  }\n\n  // create synchronization group and add the viewports to it.\n  viewports.forEach(gridViewport => {\n    const { viewportId } = gridViewport.viewportOptions;\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (!viewport) {\n      return;\n    }\n    syncGroupService.addViewportToSyncGroup(viewportId, viewport.getRenderingEngine().id, {\n      type: 'imageSlice',\n      id: syncId,\n      source: true,\n      target: true,\n    });\n  });\n}\n\nfunction disableSync(syncName, servicesManager: AppTypes.ServicesManager) {\n  const { syncGroupService, viewportGridService, displaySetService, cornerstoneViewportService } =\n    servicesManager.services;\n  const viewports = getReconstructableStackViewports(viewportGridService, displaySetService);\n  viewports.forEach(gridViewport => {\n    const { viewportId } = gridViewport.viewportOptions;\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (!viewport) {\n      return;\n    }\n    syncGroupService.removeViewportFromSyncGroup(\n      viewport.id,\n      viewport.getRenderingEngine().id,\n      syncName\n    );\n  });\n}\n\n/**\n * Gets the consistent spacing stack viewport types, which are the ones which\n * can be navigated using the stack image sync right now.\n */\nfunction getReconstructableStackViewports(\n  viewportGridService: ViewportGridService,\n  displaySetService: DisplaySetService\n) {\n  let { viewports } = viewportGridService.getState();\n\n  viewports = [...viewports.values()];\n  // filter empty viewports\n  viewports = viewports.filter(\n    viewport => viewport.displaySetInstanceUIDs && viewport.displaySetInstanceUIDs.length\n  );\n\n  // filter reconstructable viewports\n  viewports = viewports.filter(viewport => {\n    const { displaySetInstanceUIDs } = viewport;\n\n    for (const displaySetInstanceUID of displaySetInstanceUIDs) {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      // TODO - add a better test than isReconstructable\n      if (displaySet && displaySet.isReconstructable) {\n        return true;\n      }\n\n      return false;\n    }\n  });\n  return viewports;\n}\n","import { DisplaySetService, ViewportGridService } from '@ohif/core';\n\nconst VOI_SYNC_NAME = 'VOI_SYNC';\n\nconst getSyncId = modality => `${VOI_SYNC_NAME}_${modality}`;\n\nexport default function toggleVOISliceSync({\n  servicesManager,\n  viewports: providedViewports,\n  syncId,\n}: withAppTypes) {\n  const { syncGroupService, viewportGridService, displaySetService, cornerstoneViewportService } =\n    servicesManager.services;\n\n  const viewports =\n    providedViewports || groupViewportsByModality(viewportGridService, displaySetService);\n\n  // Todo: right now we don't have a proper way to define specific\n  // viewports to add to synchronizers, and right now it is global or not\n  // after we do that, we should do fine grained control of the synchronizers\n\n  // we can apply voi sync within each modality group\n  for (const [modality, modalityViewports] of Object.entries(viewports)) {\n    const syncIdToUse = syncId || getSyncId(modality);\n\n    const someViewportHasSync = modalityViewports.some(viewport => {\n      const syncStates = syncGroupService.getSynchronizersForViewport(\n        viewport.viewportOptions.viewportId\n      );\n\n      const imageSync = syncStates.find(syncState => syncState.id === syncIdToUse);\n\n      return !!imageSync;\n    });\n\n    if (someViewportHasSync) {\n      return disableSync(modalityViewports, syncIdToUse, servicesManager);\n    }\n\n    // create synchronization group and add the modalityViewports to it.\n    modalityViewports.forEach(gridViewport => {\n      const { viewportId } = gridViewport.viewportOptions;\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      if (!viewport) {\n        return;\n      }\n      syncGroupService.addViewportToSyncGroup(viewportId, viewport.getRenderingEngine().id, {\n        type: 'voi',\n        id: syncIdToUse,\n        source: true,\n        target: true,\n      });\n    });\n  }\n}\n\nfunction disableSync(modalityViewports, syncId, servicesManager: AppTypes.ServicesManager) {\n  const { syncGroupService, cornerstoneViewportService } = servicesManager.services;\n\n  const viewports = modalityViewports;\n  viewports.forEach(gridViewport => {\n    const { viewportId } = gridViewport.viewportOptions;\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (!viewport) {\n      return;\n    }\n    syncGroupService.removeViewportFromSyncGroup(\n      viewport.id,\n      viewport.getRenderingEngine().id,\n      syncId\n    );\n  });\n}\n\nfunction groupViewportsByModality(\n  viewportGridService: ViewportGridService,\n  displaySetService: DisplaySetService\n) {\n  let { viewports } = viewportGridService.getState();\n\n  viewports = [...viewports.values()];\n\n  // group the viewports by modality\n  return viewports.reduce((acc, viewport) => {\n    const { displaySetInstanceUIDs } = viewport;\n    // Todo: add proper fusion support\n    const displaySetInstanceUID = displaySetInstanceUIDs[0];\n    const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n    const modality = displaySet.Modality;\n    if (!acc[modality]) {\n      acc[modality] = [];\n    }\n\n    acc[modality].push(viewport);\n\n    return acc;\n  }, {});\n}\n","import React, { useEffect, useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport { getEnabledElement, StackViewport, BaseVolumeViewport } from '@cornerstonejs/core';\nimport { ToolGroupManager, segmentation, Enums } from '@cornerstonejs/tools';\nimport { getEnabledElement as OHIFgetEnabledElement } from '../state';\nimport { useSystem } from '@ohif/core/src';\n\nconst DEFAULT_SIZE = 512;\nconst MAX_TEXTURE_SIZE = 10000;\nconst VIEWPORT_ID = 'cornerstone-viewport-download-form';\n\nconst FILE_TYPE_OPTIONS = [\n  {\n    value: 'jpg',\n    label: 'JPG',\n  },\n  {\n    value: 'png',\n    label: 'PNG',\n  },\n];\n\ntype ViewportDownloadFormProps = {\n  hide: () => void;\n  activeViewportId: string;\n};\n\nconst CornerstoneViewportDownloadForm = ({\n  hide,\n  activeViewportId: activeViewportIdProp,\n}: ViewportDownloadFormProps) => {\n  const { servicesManager } = useSystem();\n  const { customizationService, cornerstoneViewportService } = servicesManager.services;\n  const [showAnnotations, setShowAnnotations] = useState(true);\n  const [viewportDimensions, setViewportDimensions] = useState({\n    width: DEFAULT_SIZE,\n    height: DEFAULT_SIZE,\n  });\n\n  const warningState = customizationService.getCustomization('viewportDownload.warningMessage') as {\n    enabled: boolean;\n    value: string;\n  };\n\n  const refViewportEnabledElementOHIF = OHIFgetEnabledElement(activeViewportIdProp);\n  const activeViewportElement = refViewportEnabledElementOHIF?.element;\n  const { viewportId: activeViewportId, renderingEngineId } =\n    getEnabledElement(activeViewportElement);\n\n  const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(activeViewportId, renderingEngineId);\n\n  useEffect(() => {\n    const toolModeAndBindings = Object.keys(toolGroup.toolOptions).reduce((acc, toolName) => {\n      const tool = toolGroup.toolOptions[toolName];\n      const { mode, bindings } = tool;\n\n      return {\n        ...acc,\n        [toolName]: { mode, bindings },\n      };\n    }, {});\n\n    return () => {\n      Object.keys(toolModeAndBindings).forEach(toolName => {\n        const { mode, bindings } = toolModeAndBindings[toolName];\n        toolGroup.setToolMode(toolName, mode, { bindings });\n      });\n    };\n  }, []);\n\n  const handleEnableViewport = (viewportElement: HTMLElement) => {\n    if (!viewportElement) {\n      return;\n    }\n\n    const { viewport } = getEnabledElement(activeViewportElement);\n\n    const viewportInput = {\n      viewportId: VIEWPORT_ID,\n      element: viewportElement,\n      type: viewport.type,\n      defaultOptions: {\n        background: viewport.defaultOptions.background,\n        orientation: viewport.defaultOptions.orientation,\n      },\n    };\n\n    renderingEngine.enableElement(viewportInput);\n  };\n\n  const handleDisableViewport = async () => {\n    renderingEngine.disableElement(VIEWPORT_ID);\n  };\n\n  const handleLoadImage = async (width: number, height: number) => {\n    if (!activeViewportElement) {\n      return;\n    }\n\n    const activeViewportEnabledElement = getEnabledElement(activeViewportElement);\n    if (!activeViewportEnabledElement) {\n      return;\n    }\n\n    const segmentationRepresentations =\n      segmentation.state.getViewportSegmentationRepresentations(activeViewportId);\n\n    const { viewport } = activeViewportEnabledElement;\n    const downloadViewport = renderingEngine.getViewport(VIEWPORT_ID);\n\n    try {\n      if (downloadViewport instanceof StackViewport) {\n        const imageId = viewport.getCurrentImageId();\n        const properties = viewport.getProperties();\n\n        await downloadViewport.setStack([imageId]);\n        downloadViewport.setProperties(properties);\n      } else if (downloadViewport instanceof BaseVolumeViewport) {\n        const volumeIds = viewport.getAllVolumeIds();\n        downloadViewport.setVolumes([{ volumeId: volumeIds[0] }]);\n      }\n\n      if (segmentationRepresentations.length > 0) {\n        segmentationRepresentations.forEach(segRepresentation => {\n          const { segmentationId, colorLUTIndex, type } = segRepresentation;\n          if (type === Enums.SegmentationRepresentations.Labelmap) {\n            segmentation.addLabelmapRepresentationToViewportMap({\n              [downloadViewport.id]: [\n                {\n                  segmentationId,\n                  type: Enums.SegmentationRepresentations.Labelmap,\n                  config: {\n                    colorLUTOrIndex: colorLUTIndex,\n                  },\n                },\n              ],\n            });\n          }\n\n          if (type === Enums.SegmentationRepresentations.Contour) {\n            segmentation.addContourRepresentationToViewportMap({\n              [downloadViewport.id]: [\n                {\n                  segmentationId,\n                  type: Enums.SegmentationRepresentations.Contour,\n                  config: {\n                    colorLUTOrIndex: colorLUTIndex,\n                  },\n                },\n              ],\n            });\n          }\n        });\n      }\n\n      return {\n        width: Math.min(width || DEFAULT_SIZE, MAX_TEXTURE_SIZE),\n        height: Math.min(height || DEFAULT_SIZE, MAX_TEXTURE_SIZE),\n      };\n    } catch (error) {\n      console.error('Error loading image:', error);\n    }\n  };\n\n  const handleToggleAnnotations = (show: boolean) => {\n    const activeViewportEnabledElement = getEnabledElement(activeViewportElement);\n    if (!activeViewportEnabledElement) {\n      return;\n    }\n\n    const downloadViewport = renderingEngine.getViewport(VIEWPORT_ID);\n    if (!downloadViewport) {\n      return;\n    }\n\n    const { viewportId: activeViewportId, renderingEngineId } = activeViewportEnabledElement;\n    const { id: downloadViewportId } = downloadViewport;\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(activeViewportId, renderingEngineId);\n    toolGroup.addViewport(downloadViewportId, renderingEngineId);\n\n    const toolInstances = toolGroup.getToolInstances();\n    const toolInstancesArray = Object.values(toolInstances);\n\n    toolInstancesArray.forEach(toolInstance => {\n      if (toolInstance.constructor.isAnnotation !== false) {\n        if (show) {\n          toolGroup.setToolEnabled(toolInstance.toolName);\n        } else {\n          toolGroup.setToolDisabled(toolInstance.toolName);\n        }\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (viewportDimensions.width && viewportDimensions.height) {\n      setTimeout(() => {\n        handleLoadImage(viewportDimensions.width, viewportDimensions.height);\n        handleToggleAnnotations(showAnnotations);\n        // we need a resize here to make suer annotations world to canvas\n        // are properly calculated\n        renderingEngine.resize();\n        renderingEngine.render();\n      }, 100);\n    }\n  }, [viewportDimensions, showAnnotations]);\n\n  const handleDownload = async (filename: string, fileType: string) => {\n    const divForDownloadViewport = document.querySelector(\n      `div[data-viewport-uid=\"${VIEWPORT_ID}\"]`\n    );\n\n    if (!divForDownloadViewport) {\n      console.debug('No viewport found for download');\n      return;\n    }\n\n    const canvas = await html2canvas(divForDownloadViewport as HTMLElement);\n    const link = document.createElement('a');\n    link.download = `${filename}.${fileType}`;\n    link.href = canvas.toDataURL(`image/${fileType}`, 1.0);\n    link.click();\n  };\n\n  const ViewportDownloadFormNew = customizationService.getCustomization(\n    'ohif.captureViewportModal'\n  );\n\n  return (\n    <ViewportDownloadFormNew\n      onClose={hide}\n      defaultSize={DEFAULT_SIZE}\n      fileTypeOptions={FILE_TYPE_OPTIONS}\n      viewportId={VIEWPORT_ID}\n      showAnnotations={showAnnotations}\n      onAnnotationsChange={setShowAnnotations}\n      dimensions={viewportDimensions}\n      onDimensionsChange={setViewportDimensions}\n      onEnableViewport={handleEnableViewport}\n      onDisableViewport={handleDisableViewport}\n      onDownload={handleDownload}\n      warningState={warningState}\n    />\n  );\n};\n\nexport default CornerstoneViewportDownloadForm;\n","function getUpdatedViewportsForSegmentation({\n  viewportId,\n  servicesManager,\n  displaySetInstanceUIDs,\n}: withAppTypes) {\n  const { hangingProtocolService, viewportGridService } = servicesManager.services;\n\n  const { isHangingProtocolLayout } = viewportGridService.getState();\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    displaySetInstanceUIDs[0],\n    isHangingProtocolLayout\n  );\n\n  return updatedViewports.filter(v => v.viewportOptions?.viewportType !== 'volume3d');\n}\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\nexport { getUpdatedViewportsForSegmentation };\n","/**\n * Calculates the center point and bounding box extent of a measurement based on its points.\n * @param {Object} measurement - The measurement object containing points\n * @param {Array<Array<number>>} measurement.points - Array of 3D points [x, y, z]\n * @returns {Object} Object containing center and extent\n * @returns {Array<number>} returns.center - The center point [x, y, z]\n * @returns {Object} returns.extent - The bounding box extent with min and max points\n */\nexport const getCenterExtent = (measurement: { points?: number[][] }) => {\n  const { points } = measurement;\n\n  if (!points || !Array.isArray(points) || points.length === 0) {\n    // Return default values if no points are available\n    const defaultCenter: [number, number, number] = [0, 0, 0];\n    const defaultExtent = {\n      min: [0, 0, 0] as [number, number, number],\n      max: [0, 0, 0] as [number, number, number],\n    };\n    return { center: defaultCenter, extent: defaultExtent };\n  }\n\n  // Initialize min and max with the first point\n  const min: [number, number, number] = [...points[0]] as [number, number, number];\n  const max: [number, number, number] = [...points[0]] as [number, number, number];\n\n  // Find the bounding box by iterating through all points\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    for (let j = 0; j < 3; j++) {\n      min[j] = Math.min(min[j], point[j]);\n      max[j] = Math.max(max[j], point[j]);\n    }\n  }\n\n  // Calculate the center point\n  const center: [number, number, number] = [\n    (min[0] + max[0]) / 2,\n    (min[1] + max[1]) / 2,\n    (min[2] + max[2]) / 2,\n  ];\n\n  return {\n    center,\n    extent: { min, max },\n  };\n};\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n  Enums as CoreEnums,\n  Types as CoreTypes,\n  BaseVolumeViewport,\n  getRenderingEngines,\n} from '@cornerstonejs/core';\nimport {\n  ToolGroupManager,\n  Enums,\n  utilities as cstUtils,\n  annotation,\n  Types as ToolTypes,\n} from '@cornerstonejs/tools';\nimport * as cornerstoneTools from '@cornerstonejs/tools';\nimport * as labelmapInterpolation from '@cornerstonejs/labelmap-interpolation';\nimport { ONNXSegmentationController } from '@cornerstonejs/ai';\n\nimport { Types as OhifTypes, utils } from '@ohif/core';\nimport i18n from '@ohif/i18n';\nimport {\n  callInputDialogAutoComplete,\n  createReportAsync,\n  colorPickerDialog,\n  callInputDialog,\n} from '@ohif/extension-default';\nimport { vec3, mat4 } from 'gl-matrix';\nimport toggleImageSliceSync from './utils/imageSliceSync/toggleImageSliceSync';\nimport { getFirstAnnotationSelected } from './utils/measurementServiceMappings/utils/selection';\nimport { getViewportEnabledElement } from './utils/getViewportEnabledElement';\nimport getActiveViewportEnabledElement from './utils/getActiveViewportEnabledElement';\nimport toggleVOISliceSync from './utils/toggleVOISliceSync';\nimport { usePositionPresentationStore, useSegmentationPresentationStore } from './stores';\nimport { toolNames } from './initCornerstoneTools';\nimport CornerstoneViewportDownloadForm from './utils/CornerstoneViewportDownloadForm';\nimport { updateSegmentBidirectionalStats } from './utils/updateSegmentationStats';\nimport { generateSegmentationCSVReport } from './utils/generateSegmentationCSVReport';\nimport { getUpdatedViewportsForSegmentation } from './utils/hydrationUtils';\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\nimport { isMeasurementWithinViewport } from './utils/isMeasurementWithinViewport';\nimport { getCenterExtent } from './utils/getCenterExtent';\n\nconst { DefaultHistoryMemo } = csUtils.HistoryMemo;\nconst toggleSyncFunctions = {\n  imageSlice: toggleImageSliceSync,\n  voi: toggleVOISliceSync,\n};\n\nconst { segmentation: segmentationUtils } = cstUtils;\n\nconst getLabelmapTools = ({ toolGroupService }) => {\n  const labelmapTools = [];\n  const toolGroupIds = toolGroupService.getToolGroupIds();\n  toolGroupIds.forEach(toolGroupId => {\n    const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroup(toolGroupId);\n    const tools = toolGroup.getToolInstances();\n    // tools is an object with toolName as the key and tool as the value\n    Object.keys(tools).forEach(toolName => {\n      const tool = tools[toolName];\n      if (\n        tool instanceof cornerstoneTools.LabelmapBaseTool &&\n        tool.shouldResolvePreviewRequests()\n      ) {\n        labelmapTools.push(tool);\n      }\n    });\n  });\n  return labelmapTools;\n};\n\nconst getPreviewTools = ({ toolGroupService }) => {\n  const labelmapTools = getLabelmapTools({ toolGroupService });\n\n  const previewTools = labelmapTools.filter(tool => tool.acceptPreview || tool.rejectPreview);\n\n  return previewTools;\n};\n\nconst segmentAI = new ONNXSegmentationController({\n  autoSegmentMode: true,\n  models: {\n    sam_b: [\n      {\n        name: 'sam-b-encoder',\n        url: 'https://huggingface.co/schmuell/sam-b-fp16/resolve/main/sam_vit_b_01ec64.encoder-fp16.onnx',\n        size: 180,\n        key: 'encoder',\n      },\n      {\n        name: 'sam-b-decoder',\n        url: 'https://huggingface.co/schmuell/sam-b-fp16/resolve/main/sam_vit_b_01ec64.decoder.onnx',\n        size: 17,\n        key: 'decoder',\n      },\n    ],\n  },\n  modelName: 'sam_b',\n});\nlet segmentAIEnabled = false;\n\nfunction commandsModule({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}: OhifTypes.Extensions.ExtensionParams): OhifTypes.Extensions.CommandsModule {\n  const {\n    viewportGridService,\n    toolGroupService,\n    cineService,\n    uiDialogService,\n    cornerstoneViewportService,\n    uiNotificationService,\n    measurementService,\n    customizationService,\n    colorbarService,\n    hangingProtocolService,\n    syncGroupService,\n    segmentationService,\n    displaySetService,\n  } = servicesManager.services as AppTypes.Services;\n\n  function _getActiveViewportEnabledElement() {\n    return getActiveViewportEnabledElement(viewportGridService);\n  }\n\n  function _getViewportEnabledElement(viewportId: string) {\n    return getViewportEnabledElement(viewportId);\n  }\n\n  function _getActiveViewportToolGroupId() {\n    const viewport = _getActiveViewportEnabledElement();\n    return toolGroupService.getToolGroupForViewport(viewport.id);\n  }\n\n  function _getActiveSegmentationInfo() {\n    const viewportId = viewportGridService.getActiveViewportId();\n    const activeSegmentation = segmentationService.getActiveSegmentation(viewportId);\n    const segmentationId = activeSegmentation?.segmentationId;\n    const activeSegmentIndex = segmentationService.getActiveSegment(viewportId).segmentIndex;\n\n    return {\n      segmentationId,\n      segmentIndex: activeSegmentIndex,\n    };\n  }\n\n  const actions = {\n    jumpToMeasurementViewport: ({ annotationUID, measurement }) => {\n      cornerstoneTools.annotation.selection.setAnnotationSelected(annotationUID, true);\n      const { metadata } = measurement;\n\n      const activeViewportId = viewportGridService.getActiveViewportId();\n      // Finds the best viewport to jump to for showing the annotation view reference\n      // This may be different from active if there is a viewport already showing the display set.\n      const viewportId = cornerstoneViewportService.findNavigationCompatibleViewportId(\n        activeViewportId,\n        metadata\n      );\n      if (viewportId) {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n        viewport.setViewReference(metadata);\n        viewport.render();\n\n        /**\n         * If the measurement is not visible inside the current viewport,\n         * we need to move the camera to the measurement.\n         */\n        if (!isMeasurementWithinViewport(viewport, measurement)) {\n          const camera = viewport.getCamera();\n          const { focalPoint: cameraFocalPoint, position: cameraPosition } = camera;\n          const { center, extent } = getCenterExtent(measurement);\n          const position = vec3.sub(vec3.create(), cameraPosition, cameraFocalPoint);\n          vec3.add(position, position, center);\n          viewport.setCamera({ focalPoint: center, position: position as any });\n          /** Zoom out if the measurement is too large */\n          const measurementSize = vec3.dist(extent.min, extent.max);\n          if (measurementSize > camera.parallelScale) {\n            const scaleFactor = measurementSize / camera.parallelScale;\n            viewport.setZoom(viewport.getZoom() / scaleFactor);\n          }\n          viewport.render();\n        }\n\n        return;\n      }\n\n      const { displaySetInstanceUID: referencedDisplaySetInstanceUID } = measurement;\n      if (!referencedDisplaySetInstanceUID) {\n        console.warn('ViewportGrid::No display set found in', measurement);\n        return;\n      }\n\n      // Finds the viewport to update to show the given displayset/orientation.\n      // This will choose a view already containing the measurement display set\n      // if possible, otherwise will fallback to the active.\n      const viewportToUpdate = cornerstoneViewportService.findUpdateableViewportConfiguration(\n        activeViewportId,\n        measurement\n      );\n\n      if (!viewportToUpdate) {\n        console.warn('Unable to find a viewport to show this in');\n        return;\n      }\n      const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n        viewportToUpdate.viewportId,\n        referencedDisplaySetInstanceUID\n      );\n\n      if (!updatedViewports?.[0]) {\n        console.warn(\n          'ViewportGrid::Unable to navigate to viewport containing',\n          referencedDisplaySetInstanceUID\n        );\n        return;\n      }\n\n      updatedViewports[0].viewportOptions = viewportToUpdate.viewportOptions;\n\n      // Update stored position presentation\n      commandsManager.run('updateStoredPositionPresentation', {\n        viewportId: viewportToUpdate.viewportId,\n        displaySetInstanceUIDs: [referencedDisplaySetInstanceUID],\n        referencedImageId: measurement.referencedImageId,\n        options: {\n          ...measurement.metadata,\n        },\n      });\n\n      commandsManager.run('setDisplaySetsForViewports', { viewportsToUpdate: updatedViewports });\n    },\n\n    hydrateSecondaryDisplaySet: async ({ displaySet, viewportId }) => {\n      if (!displaySet) {\n        return;\n      }\n\n      if (displaySet.isOverlayDisplaySet) {\n        // update the previously stored segmentationPresentation with the new viewportId\n        // presentation so that when we put the referencedDisplaySet back in the viewport\n        // it will have the correct segmentation representation hydrated\n        commandsManager.runCommand('updateStoredSegmentationPresentation', {\n          displaySet,\n          type:\n            displaySet.Modality === 'SEG'\n              ? SegmentationRepresentations.Labelmap\n              : SegmentationRepresentations.Contour,\n        });\n      }\n\n      const referencedDisplaySetInstanceUID = displaySet.referencedDisplaySetInstanceUID;\n\n      const storePositionPresentation = refDisplaySet => {\n        // update the previously stored positionPresentation with the new viewportId\n        // presentation so that when we put the referencedDisplaySet back in the viewport\n        // it will be in the correct position zoom and pan\n        commandsManager.runCommand('updateStoredPositionPresentation', {\n          viewportId,\n          displaySetInstanceUIDs: [refDisplaySet.displaySetInstanceUID],\n        });\n      };\n\n      if (displaySet.Modality === 'SEG' || displaySet.Modality === 'RTSTRUCT') {\n        const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n          referencedDisplaySetInstanceUID\n        );\n        storePositionPresentation(referencedDisplaySet);\n        return commandsManager.runCommand('loadSegmentationDisplaySetsForViewport', {\n          viewportId,\n          displaySetInstanceUIDs: [referencedDisplaySet.displaySetInstanceUID],\n        });\n      } else if (displaySet.Modality === 'SR') {\n        const results = commandsManager.runCommand('hydrateStructuredReport', {\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\n        });\n        const { SeriesInstanceUIDs } = results;\n        const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n          SeriesInstanceUIDs[0]\n        );\n        referencedDisplaySets.forEach(storePositionPresentation);\n\n        if (referencedDisplaySets.length) {\n          actions.setDisplaySetsForViewports({\n            viewportsToUpdate: [\n              {\n                viewportId: viewportGridService.getActiveViewportId(),\n                displaySetInstanceUIDs: [referencedDisplaySets[0].displaySetInstanceUID],\n              },\n            ],\n          });\n        }\n        return results;\n      }\n    },\n    runSegmentBidirectional: async ({ segmentationId, segmentIndex } = {}) => {\n      // Get active segmentation if not specified\n      const targetSegmentation =\n        segmentationId && segmentIndex\n          ? { segmentationId, segmentIndex }\n          : _getActiveSegmentationInfo();\n\n      const { segmentationId: targetId, segmentIndex: targetIndex } = targetSegmentation;\n\n      // Get bidirectional measurement data\n      const bidirectionalData = await cstUtils.segmentation.getSegmentLargestBidirectional({\n        segmentationId: targetId,\n        segmentIndices: [targetIndex],\n      });\n\n      const activeViewportId = viewportGridService.getActiveViewportId();\n\n      // Process each bidirectional measurement\n      bidirectionalData.forEach(measurement => {\n        const { segmentIndex, majorAxis, minorAxis } = measurement;\n\n        // Create annotation\n        const annotation = cornerstoneTools.SegmentBidirectionalTool.hydrate(\n          activeViewportId,\n          [majorAxis, minorAxis],\n          {\n            segmentIndex,\n            segmentationId: targetId,\n          }\n        );\n\n        measurement.annotationUID = annotation.annotationUID;\n\n        // Update segmentation stats\n        const updatedSegmentation = updateSegmentBidirectionalStats({\n          segmentationId: targetId,\n          segmentIndex: targetIndex,\n          bidirectionalData: measurement,\n          segmentationService,\n          annotation,\n        });\n\n        // Save changes if needed\n        if (updatedSegmentation) {\n          segmentationService.addOrUpdateSegmentation({\n            segmentationId: targetId,\n            segments: updatedSegmentation.segments,\n          });\n        }\n      });\n\n      // get the active segmentIndex bidirectional annotation and jump to it\n      const activeBidirectional = bidirectionalData.find(\n        measurement => measurement.segmentIndex === targetIndex\n      );\n      commandsManager.run('jumpToMeasurement', {\n        uid: activeBidirectional.annotationUID,\n      });\n    },\n    interpolateLabelmap: () => {\n      const { segmentationId, segmentIndex } = _getActiveSegmentationInfo();\n      labelmapInterpolation.interpolate({\n        segmentationId,\n        segmentIndex,\n      });\n    },\n    /**\n     * Generates the selector props for the context menu, specific to\n     * the cornerstone viewport, and then runs the context menu.\n     */\n    showCornerstoneContextMenu: options => {\n      const element = _getActiveViewportEnabledElement()?.viewport?.element;\n\n      const optionsToUse = { ...options, element };\n      const { useSelectedAnnotation, nearbyToolData, event } = optionsToUse;\n\n      // This code is used to invoke the context menu via keyboard shortcuts\n      if (useSelectedAnnotation && !nearbyToolData) {\n        const firstAnnotationSelected = getFirstAnnotationSelected(element);\n        // filter by allowed selected tools from config property (if there is any)\n        const isToolAllowed =\n          !optionsToUse.allowedSelectedTools ||\n          optionsToUse.allowedSelectedTools.includes(firstAnnotationSelected?.metadata?.toolName);\n        if (isToolAllowed) {\n          optionsToUse.nearbyToolData = firstAnnotationSelected;\n        } else {\n          return;\n        }\n      }\n\n      optionsToUse.defaultPointsPosition = [];\n      // if (optionsToUse.nearbyToolData) {\n      //   optionsToUse.defaultPointsPosition = commandsManager.runCommand(\n      //     'getToolDataActiveCanvasPoints',\n      //     { toolData: optionsToUse.nearbyToolData }\n      //   );\n      // }\n\n      // TODO - make the selectorProps richer by including the study metadata and display set.\n      optionsToUse.selectorProps = {\n        toolName: optionsToUse.nearbyToolData?.metadata?.toolName,\n        value: optionsToUse.nearbyToolData,\n        uid: optionsToUse.nearbyToolData?.annotationUID,\n        nearbyToolData: optionsToUse.nearbyToolData,\n        event,\n        ...optionsToUse.selectorProps,\n      };\n\n      commandsManager.run(options, optionsToUse);\n    },\n    updateStoredSegmentationPresentation: ({ displaySet, type }) => {\n      const { addSegmentationPresentationItem } = useSegmentationPresentationStore.getState();\n\n      const referencedDisplaySetInstanceUID = displaySet.referencedDisplaySetInstanceUID;\n      addSegmentationPresentationItem(referencedDisplaySetInstanceUID, {\n        segmentationId: displaySet.displaySetInstanceUID,\n        hydrated: true,\n        type,\n      });\n    },\n\n    /** Stores the changed position presentation */\n    updateStoredPositionPresentation: ({\n      viewportId,\n      displaySetInstanceUIDs,\n      referencedImageId,\n      options,\n    }) => {\n      const presentations = cornerstoneViewportService.getPresentations(viewportId);\n      const { positionPresentationStore, setPositionPresentation, getPositionPresentationId } =\n        usePositionPresentationStore.getState();\n\n      // Look inside positionPresentationStore and find the key that includes ALL the displaySetInstanceUIDs\n      // and the value has viewportId as activeViewportId.\n      let previousReferencedDisplaySetStoreKey;\n\n      if (\n        displaySetInstanceUIDs &&\n        Array.isArray(displaySetInstanceUIDs) &&\n        displaySetInstanceUIDs.length > 0\n      ) {\n        previousReferencedDisplaySetStoreKey = Object.entries(positionPresentationStore).find(\n          ([key, value]) => {\n            return (\n              displaySetInstanceUIDs.every(uid => key.includes(uid)) &&\n              value?.viewportId === viewportId\n            );\n          }\n        )?.[0];\n      }\n\n      // Create presentation data with referencedImageId and options if provided\n      const presentationData =\n        referencedImageId || options?.FrameOfReferenceUID\n          ? {\n              ...presentations.positionPresentation,\n              viewReference: {\n                referencedImageId,\n                ...options,\n              },\n            }\n          : presentations.positionPresentation;\n\n      if (previousReferencedDisplaySetStoreKey) {\n        setPositionPresentation(previousReferencedDisplaySetStoreKey, presentationData);\n        return;\n      }\n\n      // if not found means we have not visited that referencedDisplaySetInstanceUID before\n      // so we need to grab the positionPresentationId directly from the store,\n      // Todo: this is really hacky, we should have a better way for this\n      const positionPresentationId = getPositionPresentationId({\n        displaySetInstanceUIDs,\n        viewportId,\n      });\n\n      setPositionPresentation(positionPresentationId, presentationData);\n    },\n    getNearbyToolData({ nearbyToolData, element, canvasCoordinates }) {\n      return nearbyToolData ?? cstUtils.getAnnotationNearPoint(element, canvasCoordinates);\n    },\n    getNearbyAnnotation({ element, canvasCoordinates }) {\n      const nearbyToolData = actions.getNearbyToolData({\n        nearbyToolData: null,\n        element,\n        canvasCoordinates,\n      });\n\n      const isAnnotation = toolName => {\n        const enabledElement = getEnabledElement(element);\n\n        if (!enabledElement) {\n          return;\n        }\n\n        const { renderingEngineId, viewportId } = enabledElement;\n        const toolGroup = ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);\n\n        const toolInstance = toolGroup.getToolInstance(toolName);\n\n        return toolInstance?.constructor?.isAnnotation ?? true;\n      };\n\n      return nearbyToolData?.metadata?.toolName && isAnnotation(nearbyToolData.metadata.toolName)\n        ? nearbyToolData\n        : null;\n    },\n    /**\n     * Common logic for handling measurement label updates through dialog\n     * @param uid - measurement uid\n     * @returns Promise that resolves when the label is updated\n     */\n    _handleMeasurementLabelDialog: async uid => {\n      const labelConfig = customizationService.getCustomization('measurementLabels');\n      const renderContent = customizationService.getCustomization('ui.labellingComponent');\n      const measurement = measurementService.getMeasurement(uid);\n\n      if (!measurement) {\n        console.debug('No measurement found for label editing');\n        return;\n      }\n\n      if (!labelConfig) {\n        const label = await callInputDialog({\n          uiDialogService,\n          title: 'Edit Measurement Label',\n          placeholder: measurement.label || 'Enter new label',\n          defaultValue: measurement.label,\n        });\n\n        if (label !== undefined && label !== null) {\n          measurementService.update(uid, { ...measurement, label }, true);\n        }\n        return;\n      }\n\n      const val = await callInputDialogAutoComplete({\n        measurement,\n        uiDialogService,\n        labelConfig,\n        renderContent,\n      });\n\n      if (val !== undefined && val !== null) {\n        measurementService.update(uid, { ...measurement, label: val }, true);\n      }\n    },\n    /**\n     * Show the measurement labelling input dialog and update the label\n     * on the measurement with a response if not cancelled.\n     */\n    setMeasurementLabel: async ({ uid }) => {\n      await actions._handleMeasurementLabelDialog(uid);\n    },\n    renameMeasurement: async ({ uid }) => {\n      await actions._handleMeasurementLabelDialog(uid);\n    },\n    /**\n     *\n     * @param props - containing the updates to apply\n     * @param props.measurementKey - chooses the measurement key to apply the\n     *        code to.  This will typically be finding or site to apply a\n     *        finding code or a findingSites code.\n     * @param props.code - A coding scheme value from DICOM, including:\n     *       * CodeValue - the language independent code, for example '1234'\n     *       * CodingSchemeDesignator - the issue of the code value\n     *       * CodeMeaning - the text value shown to the user\n     *       * ref - a string reference in the form `<designator>:<codeValue>`\n     *       * type - defaulting to 'finding'.  Will replace other codes of same type\n     *       * style - a styling object to use\n     *       * Other fields\n     *     Note it is a valid option to remove the finding or site values by\n     *     supplying null for the code.\n     * @param props.uid - the measurement UID to find it with\n     * @param props.label - the text value for the code.  Has NOTHING to do with\n     *        the measurement label, which can be set with textLabel\n     * @param props.textLabel is the measurement label to apply.  Set to null to\n     *            delete.\n     *\n     * If the measurementKey is `site`, then the code will also be added/replace\n     * the 0 element of findingSites.  This behaviour is expected to be enhanced\n     * in the future with ability to set other site information.\n     */\n    updateMeasurement: props => {\n      const { code, uid, textLabel, label } = props;\n      let { style } = props;\n      const measurement = measurementService.getMeasurement(uid);\n      if (!measurement) {\n        console.warn('No measurement found to update', uid);\n        return;\n      }\n      const updatedMeasurement = {\n        ...measurement,\n      };\n      // Call it textLabel as the label value\n      // TODO - remove the label setting when direct rendering of findingSites is enabled\n      if (textLabel !== undefined) {\n        updatedMeasurement.label = textLabel;\n      }\n      if (code !== undefined) {\n        const measurementKey = code.type || 'finding';\n\n        if (code.ref && !code.CodeValue) {\n          const split = code.ref.indexOf(':');\n          code.CodeValue = code.ref.substring(split + 1);\n          code.CodeMeaning = code.text || label;\n          code.CodingSchemeDesignator = code.ref.substring(0, split);\n        }\n        updatedMeasurement[measurementKey] = code;\n        if (measurementKey !== 'finding') {\n          if (updatedMeasurement.findingSites) {\n            updatedMeasurement.findingSites = updatedMeasurement.findingSites.filter(\n              it => it.type !== measurementKey\n            );\n            updatedMeasurement.findingSites.push(code);\n          } else {\n            updatedMeasurement.findingSites = [code];\n          }\n        }\n      }\n\n      style ||= updatedMeasurement.finding?.style;\n      style ||= updatedMeasurement.findingSites?.find(site => site?.style)?.style;\n\n      if (style) {\n        // Reset the selected values to preserve appearance on selection\n        style.lineDashSelected ||= style.lineDash;\n        annotation.config.style.setAnnotationStyles(measurement.uid, style);\n\n        // this is a bit ugly, but given the underlying behavior, this is how it needs to work.\n        switch (measurement.toolName) {\n          case toolNames.PlanarFreehandROI: {\n            const targetAnnotation = annotation.state.getAnnotation(measurement.uid);\n            targetAnnotation.data.isOpenUShapeContour = !!style.isOpenUShapeContour;\n            break;\n          }\n          default:\n            break;\n        }\n      }\n      measurementService.update(updatedMeasurement.uid, updatedMeasurement, true);\n    },\n\n    /**\n     * Jumps to the specified (by uid) measurement in the active viewport.\n     * Also marks any provided display measurements isActive value\n     */\n    jumpToMeasurement: ({ uid, displayMeasurements = [] }) => {\n      measurementService.jumpToMeasurement(viewportGridService.getActiveViewportId(), uid);\n      for (const measurement of displayMeasurements) {\n        measurement.isActive = measurement.uid === uid;\n      }\n    },\n\n    removeMeasurement: ({ uid }) => {\n      if (Array.isArray(uid)) {\n        measurementService.removeMany(uid);\n      } else {\n        measurementService.remove(uid);\n      }\n    },\n\n    toggleLockMeasurement: ({ uid }) => {\n      measurementService.toggleLockMeasurement(uid);\n    },\n\n    toggleVisibilityMeasurement: ({ uid, items, visibility }) => {\n      if (visibility === undefined && items?.length) {\n        visibility = !items[0].isVisible;\n      }\n      if (Array.isArray(uid)) {\n        measurementService.toggleVisibilityMeasurementMany(uid, visibility);\n      } else {\n        measurementService.toggleVisibilityMeasurement(uid, visibility);\n      }\n    },\n\n    /**\n     * Download the CSV report for the measurements.\n     */\n    downloadCSVMeasurementsReport: ({ measurementFilter }) => {\n      utils.downloadCSVReport(measurementService.getMeasurements(measurementFilter));\n    },\n\n    downloadCSVSegmentationReport: ({ segmentationId }) => {\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      const { representationData } = segmentation;\n      const { Labelmap } = representationData;\n      const { referencedImageIds } = Labelmap;\n\n      const firstImageId = referencedImageIds[0];\n\n      // find displaySet for firstImageId\n      const displaySet = displaySetService\n        .getActiveDisplaySets()\n        .find(ds => ds.imageIds?.some(i => i === firstImageId));\n\n      const {\n        SeriesNumber,\n        SeriesInstanceUID,\n        StudyInstanceUID,\n        SeriesDate,\n        SeriesTime,\n        SeriesDescription,\n      } = displaySet;\n\n      const additionalInfo = {\n        reference: {\n          SeriesNumber,\n          SeriesInstanceUID,\n          StudyInstanceUID,\n          SeriesDate,\n          SeriesTime,\n          SeriesDescription,\n        },\n      };\n\n      generateSegmentationCSVReport(segmentation, additionalInfo);\n    },\n\n    // Retrieve value commands\n    getActiveViewportEnabledElement: _getActiveViewportEnabledElement,\n\n    setViewportActive: ({ viewportId }) => {\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n      if (!viewportInfo) {\n        console.warn('No viewport found for viewportId:', viewportId);\n        return;\n      }\n\n      viewportGridService.setActiveViewportId(viewportId);\n    },\n    arrowTextCallback: async ({ callback, data }) => {\n      const labelConfig = customizationService.getCustomization('measurementLabels');\n      const renderContent = customizationService.getCustomization('ui.labellingComponent');\n\n      if (!labelConfig) {\n        const label = await callInputDialog({\n          uiDialogService,\n          title: 'Edit Arrow Text',\n          placeholder: data?.data?.label || 'Enter new text',\n          defaultValue: data?.data?.label || '',\n        });\n\n        callback?.(label);\n        return;\n      }\n\n      const value = await callInputDialogAutoComplete({\n        uiDialogService,\n        labelConfig,\n        renderContent,\n      });\n      callback?.(value);\n    },\n\n    toggleCine: () => {\n      const { viewports } = viewportGridService.getState();\n      const { isCineEnabled } = cineService.getState();\n      cineService.setIsCineEnabled(!isCineEnabled);\n      viewports.forEach((_, index) => cineService.setCine({ id: index, isPlaying: false }));\n    },\n\n    setViewportWindowLevel({\n      viewportId,\n      windowWidth,\n      windowCenter,\n      displaySetInstanceUID,\n    }: {\n      viewportId: string;\n      windowWidth: number;\n      windowCenter: number;\n      displaySetInstanceUID?: string;\n    }) {\n      // convert to numbers\n      const windowWidthNum = Number(windowWidth);\n      const windowCenterNum = Number(windowCenter);\n\n      // get actor from the viewport\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      const viewport = renderingEngine.getViewport(viewportId);\n\n      const { lower, upper } = csUtils.windowLevel.toLowHighRange(windowWidthNum, windowCenterNum);\n\n      if (viewport instanceof BaseVolumeViewport) {\n        const volumeId = actions.getVolumeIdForDisplaySet({\n          viewportId,\n          displaySetInstanceUID,\n        });\n        viewport.setProperties(\n          {\n            voiRange: {\n              upper,\n              lower,\n            },\n          },\n          volumeId\n        );\n      } else {\n        viewport.setProperties({\n          voiRange: {\n            upper,\n            lower,\n          },\n        });\n      }\n      viewport.render();\n    },\n    toggleViewportColorbar: ({ viewportId, displaySetInstanceUIDs, options = {} }) => {\n      const hasColorbar = colorbarService.hasColorbar(viewportId);\n      if (hasColorbar) {\n        colorbarService.removeColorbar(viewportId);\n        return;\n      }\n      colorbarService.addColorbar(viewportId, displaySetInstanceUIDs, options);\n    },\n    setWindowLevel(props) {\n      const { toolGroupId } = props;\n      const { viewportId } = _getActiveViewportEnabledElement();\n      const viewportToolGroupId = toolGroupService.getToolGroupForViewport(viewportId);\n\n      if (toolGroupId && toolGroupId !== viewportToolGroupId) {\n        return;\n      }\n\n      actions.setViewportWindowLevel({ ...props, viewportId });\n    },\n    setWindowLevelPreset: ({ presetName, presetIndex }) => {\n      const windowLevelPresets = customizationService.getCustomization(\n        'cornerstone.windowLevelPresets'\n      );\n\n      const activeViewport = viewportGridService.getActiveViewportId();\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewport);\n      const metadata = viewport.getImageData().metadata;\n\n      const modality = metadata.Modality;\n\n      if (!modality) {\n        return;\n      }\n\n      const windowLevelPresetForModality = windowLevelPresets[modality];\n\n      if (!windowLevelPresetForModality) {\n        return;\n      }\n\n      const windowLevelPreset =\n        windowLevelPresetForModality[presetName] ??\n        Object.values(windowLevelPresetForModality)[presetIndex];\n\n      actions.setViewportWindowLevel({\n        viewportId: activeViewport,\n        windowWidth: windowLevelPreset.window,\n        windowCenter: windowLevelPreset.level,\n      });\n    },\n    getVolumeIdForDisplaySet: ({ viewportId, displaySetInstanceUID }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      if (viewport instanceof BaseVolumeViewport) {\n        const volumeIds = viewport.getAllVolumeIds();\n        const volumeId = volumeIds.find(id => id.includes(displaySetInstanceUID));\n        return volumeId;\n      }\n      return null;\n    },\n    setToolEnabled: ({ toolName, toggle, toolGroupId }) => {\n      const { viewports } = viewportGridService.getState();\n\n      if (!viewports.size) {\n        return;\n      }\n\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId ?? null);\n\n      if (!toolGroup || !toolGroup.hasTool(toolName)) {\n        return;\n      }\n\n      const toolIsEnabled = toolGroup.getToolOptions(toolName).mode === Enums.ToolModes.Enabled;\n\n      // Toggle the tool's state only if the toggle is true\n      if (toggle) {\n        toolIsEnabled ? toolGroup.setToolDisabled(toolName) : toolGroup.setToolEnabled(toolName);\n      } else {\n        toolGroup.setToolEnabled(toolName);\n      }\n\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      renderingEngine.render();\n    },\n    toggleEnabledDisabledToolbar({ value, itemId, toolGroupId }) {\n      const toolName = itemId || value;\n      toolGroupId = toolGroupId ?? _getActiveViewportToolGroupId();\n\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n      if (!toolGroup || !toolGroup.hasTool(toolName)) {\n        return;\n      }\n\n      const toolIsEnabled = toolGroup.getToolOptions(toolName).mode === Enums.ToolModes.Enabled;\n\n      toolIsEnabled ? toolGroup.setToolDisabled(toolName) : toolGroup.setToolEnabled(toolName);\n    },\n    toggleActiveDisabledToolbar({ value, itemId, toolGroupId }) {\n      const toolName = itemId || value;\n      toolGroupId = toolGroupId ?? _getActiveViewportToolGroupId();\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n      if (!toolGroup || !toolGroup.hasTool(toolName)) {\n        return;\n      }\n\n      const toolIsActive = [\n        Enums.ToolModes.Active,\n        Enums.ToolModes.Enabled,\n        Enums.ToolModes.Passive,\n      ].includes(toolGroup.getToolOptions(toolName).mode);\n\n      toolIsActive\n        ? toolGroup.setToolDisabled(toolName)\n        : actions.setToolActive({ toolName, toolGroupId });\n\n      // we should set the previously active tool to active after we set the\n      // current tool disabled\n      if (toolIsActive) {\n        const prevToolName = toolGroup.getPrevActivePrimaryToolName();\n        if (prevToolName !== toolName) {\n          actions.setToolActive({ toolName: prevToolName, toolGroupId });\n        }\n      }\n    },\n    setToolActiveToolbar: ({ value, itemId, toolName, toolGroupIds = [] }) => {\n      // Sometimes it is passed as value (tools with options), sometimes as itemId (toolbar buttons)\n      toolName = toolName || itemId || value;\n\n      toolGroupIds = toolGroupIds.length ? toolGroupIds : toolGroupService.getToolGroupIds();\n\n      toolGroupIds.forEach(toolGroupId => {\n        actions.setToolActive({ toolName, toolGroupId });\n      });\n    },\n    setToolActive: ({ toolName, toolGroupId = null }) => {\n      const { viewports } = viewportGridService.getState();\n\n      if (!viewports.size) {\n        return;\n      }\n\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n      if (!toolGroup) {\n        return;\n      }\n\n      if (!toolGroup?.hasTool(toolName)) {\n        return;\n      }\n\n      const activeToolName = toolGroup.getActivePrimaryMouseButtonTool();\n\n      if (activeToolName) {\n        const activeToolOptions = toolGroup.getToolConfiguration(activeToolName);\n        activeToolOptions?.disableOnPassive\n          ? toolGroup.setToolDisabled(activeToolName)\n          : toolGroup.setToolPassive(activeToolName);\n      }\n\n      // Set the new toolName to be active\n      toolGroup.setToolActive(toolName, {\n        bindings: [\n          {\n            mouseButton: Enums.MouseBindings.Primary,\n          },\n        ],\n      });\n    },\n    // capture viewport\n    showDownloadViewportModal: () => {\n      const { activeViewportId } = viewportGridService.getState();\n\n      if (!cornerstoneViewportService.getCornerstoneViewport(activeViewportId)) {\n        // Cannot download a non-cornerstone viewport (image).\n        uiNotificationService.show({\n          title: 'Download Image',\n          message: 'Image cannot be downloaded',\n          type: 'error',\n        });\n        return;\n      }\n\n      const { uiModalService } = servicesManager.services;\n\n      if (uiModalService) {\n        uiModalService.show({\n          content: CornerstoneViewportDownloadForm,\n          title: 'Download High Quality Image',\n          contentProps: {\n            activeViewportId,\n            cornerstoneViewportService,\n          },\n          containerClassName: 'max-w-4xl p-4',\n        });\n      }\n    },\n    /**\n     * Rotates the viewport by `rotation` relative to its current rotation.\n     */\n    rotateViewportBy: ({ rotation, viewportId }: { rotation: number; viewportId?: string }) => {\n      actions._rotateViewport({ rotation, viewportId, rotationMode: 'apply' });\n    },\n    /**\n     * Sets the viewport rotation to an absolute value `rotation`.\n     */\n    setViewportRotation: ({ rotation, viewportId }: { rotation: number; viewportId?: string }) => {\n      actions._rotateViewport({ rotation, viewportId, rotationMode: 'set' });\n    },\n    flipViewportHorizontal: ({\n      viewportId,\n      newValue = 'toggle',\n    }: {\n      viewportId?: string;\n      newValue?: 'toggle' | boolean;\n    }) => {\n      const enabledElement = viewportId\n        ? _getViewportEnabledElement(viewportId)\n        : _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      let flipHorizontal: boolean;\n      if (newValue === 'toggle') {\n        const { flipHorizontal: currentHorizontalFlip } = viewport.getCamera();\n        flipHorizontal = !currentHorizontalFlip;\n      } else {\n        flipHorizontal = newValue;\n      }\n\n      viewport.setCamera({ flipHorizontal });\n      viewport.render();\n    },\n    flipViewportVertical: ({\n      viewportId,\n      newValue = 'toggle',\n    }: {\n      viewportId?: string;\n      newValue?: 'toggle' | boolean;\n    }) => {\n      const enabledElement = viewportId\n        ? _getViewportEnabledElement(viewportId)\n        : _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      let flipVertical: boolean;\n      if (newValue === 'toggle') {\n        const { flipVertical: currentVerticalFlip } = viewport.getCamera();\n        flipVertical = !currentVerticalFlip;\n      } else {\n        flipVertical = newValue;\n      }\n      viewport.setCamera({ flipVertical });\n      viewport.render();\n    },\n    invertViewport: ({ element }) => {\n      let enabledElement;\n\n      if (element === undefined) {\n        enabledElement = _getActiveViewportEnabledElement();\n      } else {\n        enabledElement = element;\n      }\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      const { invert } = viewport.getProperties();\n      viewport.setProperties({ invert: !invert });\n      viewport.render();\n    },\n    resetViewport: () => {\n      const enabledElement = _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      viewport.resetProperties?.();\n      viewport.resetCamera();\n\n      viewport.render();\n    },\n    scaleViewport: ({ direction }) => {\n      const enabledElement = _getActiveViewportEnabledElement();\n      const scaleFactor = direction > 0 ? 0.9 : 1.1;\n\n      if (!enabledElement) {\n        return;\n      }\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof StackViewport) {\n        if (direction) {\n          const { parallelScale } = viewport.getCamera();\n          viewport.setCamera({ parallelScale: parallelScale * scaleFactor });\n          viewport.render();\n        } else {\n          viewport.resetCamera();\n          viewport.render();\n        }\n      }\n    },\n\n    /** Jumps the active viewport or the specified one to the given slice index */\n    jumpToImage: ({ imageIndex, viewport: gridViewport }): void => {\n      // Get current active viewport (return if none active)\n      let viewport;\n      if (!gridViewport) {\n        const enabledElement = _getActiveViewportEnabledElement();\n        if (!enabledElement) {\n          return;\n        }\n        viewport = enabledElement.viewport;\n      } else {\n        viewport = cornerstoneViewportService.getCornerstoneViewport(gridViewport.id);\n      }\n\n      // Get number of slices\n      // -> Copied from cornerstone3D jumpToSlice\\_getImageSliceData()\n      let numberOfSlices = 0;\n\n      if (viewport instanceof StackViewport) {\n        numberOfSlices = viewport.getImageIds().length;\n      } else if (viewport instanceof VolumeViewport) {\n        numberOfSlices = csUtils.getImageSliceDataForVolumeViewport(viewport).numberOfSlices;\n      } else {\n        throw new Error('Unsupported viewport type');\n      }\n\n      const jumpIndex = imageIndex < 0 ? numberOfSlices + imageIndex : imageIndex;\n      if (jumpIndex >= numberOfSlices || jumpIndex < 0) {\n        throw new Error(`Can't jump to ${imageIndex}`);\n      }\n\n      // Set slice to last slice\n      const options = { imageIndex: jumpIndex };\n      csUtils.jumpToSlice(viewport.element, options);\n    },\n    scroll: (options: ToolTypes.ScrollOptions) => {\n      const enabledElement = _getActiveViewportEnabledElement();\n      // Allow either or direction for consistency in scroll implementation\n      options.delta ??= options.direction || 1;\n      options.direction ??= options.delta;\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      csUtils.scroll(viewport, options);\n    },\n    setViewportColormap: ({\n      viewportId,\n      displaySetInstanceUID,\n      colormap,\n      opacity = 1,\n      immediate = false,\n    }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n      let hpOpacity;\n      // Retrieve active protocol's viewport match details\n      const { viewportMatchDetails } = hangingProtocolService.getActiveProtocol();\n      // Get display set options for the specified viewport ID\n      const displaySetsInfo = viewportMatchDetails.get(viewportId)?.displaySetsInfo;\n\n      if (displaySetsInfo) {\n        // Find the display set that matches the given UID\n        const matchingDisplaySet = displaySetsInfo.find(\n          displaySet => displaySet.displaySetInstanceUID === displaySetInstanceUID\n        );\n        // If a matching display set is found, update the opacity with its value\n        hpOpacity = matchingDisplaySet?.displaySetOptions?.options?.colormap?.opacity;\n      }\n\n      // HP takes priority over the default opacity\n      colormap = { ...colormap, opacity: hpOpacity || opacity };\n\n      if (viewport instanceof StackViewport) {\n        viewport.setProperties({ colormap });\n      }\n\n      if (viewport instanceof VolumeViewport) {\n        if (!displaySetInstanceUID) {\n          const { viewports } = viewportGridService.getState();\n          displaySetInstanceUID = viewports.get(viewportId)?.displaySetInstanceUIDs[0];\n        }\n\n        // ToDo: Find a better way of obtaining the volumeId that corresponds to the displaySetInstanceUID\n        const volumeId =\n          viewport\n            .getAllVolumeIds()\n            .find((_volumeId: string) => _volumeId.includes(displaySetInstanceUID)) ??\n          viewport.getVolumeId();\n        viewport.setProperties({ colormap }, volumeId);\n      }\n\n      if (immediate) {\n        viewport.render();\n      }\n    },\n    changeActiveViewport: ({ direction = 1 }) => {\n      const { activeViewportId, viewports } = viewportGridService.getState();\n      const viewportIds = Array.from(viewports.keys());\n      const currentIndex = viewportIds.indexOf(activeViewportId);\n      const nextViewportIndex =\n        (currentIndex + direction + viewportIds.length) % viewportIds.length;\n      viewportGridService.setActiveViewportId(viewportIds[nextViewportIndex] as string);\n    },\n    /**\n     * If the syncId is given and a synchronizer with that ID already exists, it will\n     * toggle it on/off for the provided viewports. If not, it will attempt to create\n     * a new synchronizer using the given syncId and type for the specified viewports.\n     * If no viewports are provided, you may notice some default behavior.\n     * - 'voi' type, we will aim to synchronize all viewports with the same modality\n     * -'imageSlice' type, we will aim to synchronize all viewports with the same orientation.\n     *\n     * @param options\n     * @param options.viewports - The viewports to synchronize\n     * @param options.syncId - The synchronization group ID\n     * @param options.type - The type of synchronization to perform\n     */\n    toggleSynchronizer: ({ type, viewports, syncId }) => {\n      const synchronizer = syncGroupService.getSynchronizer(syncId);\n\n      if (synchronizer) {\n        synchronizer.isDisabled() ? synchronizer.setEnabled(true) : synchronizer.setEnabled(false);\n        return;\n      }\n\n      const fn = toggleSyncFunctions[type];\n\n      if (fn) {\n        fn({\n          servicesManager,\n          viewports,\n          syncId,\n        });\n      }\n    },\n    setViewportForToolConfiguration: ({ viewportId, toolName }) => {\n      if (!viewportId) {\n        const { activeViewportId } = viewportGridService.getState();\n        viewportId = activeViewportId ?? 'default';\n      }\n\n      const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n      if (!toolGroup?.hasTool(toolName)) {\n        return;\n      }\n\n      const prevConfig = toolGroup?.getToolConfiguration(toolName);\n      toolGroup?.setToolConfiguration(\n        toolName,\n        {\n          ...prevConfig,\n          sourceViewportId: viewportId,\n        },\n        true // overwrite\n      );\n\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      renderingEngine.render();\n    },\n    storePresentation: ({ viewportId }) => {\n      cornerstoneViewportService.storePresentation({ viewportId });\n    },\n    updateVolumeData: ({ volume }) => {\n      // update vtkOpenGLTexture and imageData of computed volume\n      const { imageData, vtkOpenGLTexture } = volume;\n      const numSlices = imageData.getDimensions()[2];\n      const slicesToUpdate = [...Array(numSlices).keys()];\n      slicesToUpdate.forEach(i => {\n        vtkOpenGLTexture.setUpdatedFrame(i);\n      });\n      imageData.modified();\n    },\n\n    attachProtocolViewportDataListener: ({ protocol, stageIndex }) => {\n      const EVENT = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\n      const command = protocol.callbacks.onViewportDataInitialized;\n      const numPanes = protocol.stages?.[stageIndex]?.viewports.length ?? 1;\n      let numPanesWithData = 0;\n      const { unsubscribe } = cornerstoneViewportService.subscribe(EVENT, evt => {\n        numPanesWithData++;\n\n        if (numPanesWithData === numPanes) {\n          commandsManager.run(...command);\n\n          // Unsubscribe from the event\n          unsubscribe(EVENT);\n        }\n      });\n    },\n\n    setViewportPreset: ({ viewportId, preset }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      if (!viewport) {\n        return;\n      }\n      viewport.setProperties({\n        preset,\n      });\n      viewport.render();\n    },\n\n    /**\n     * Sets the volume quality for a given viewport.\n     * @param {string} viewportId - The ID of the viewport to set the volume quality.\n     * @param {number} volumeQuality - The desired quality level of the volume rendering.\n     */\n\n    setVolumeRenderingQulaity: ({ viewportId, volumeQuality }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      const { actor } = viewport.getActors()[0];\n      const mapper = actor.getMapper();\n      const image = mapper.getInputData();\n      const dims = image.getDimensions();\n      const spacing = image.getSpacing();\n      const spatialDiagonal = vec3.length(\n        vec3.fromValues(dims[0] * spacing[0], dims[1] * spacing[1], dims[2] * spacing[2])\n      );\n\n      let sampleDistance = spacing.reduce((a, b) => a + b) / 3.0;\n      sampleDistance /= volumeQuality > 1 ? 0.5 * volumeQuality ** 2 : 1.0;\n      const samplesPerRay = spatialDiagonal / sampleDistance + 1;\n      mapper.setMaximumSamplesPerRay(samplesPerRay);\n      mapper.setSampleDistance(sampleDistance);\n      viewport.render();\n    },\n\n    /**\n     * Shifts opacity points for a given viewport id.\n     * @param {string} viewportId - The ID of the viewport to set the mapping range.\n     * @param {number} shift - The shift value to shift the points by.\n     */\n    shiftVolumeOpacityPoints: ({ viewportId, shift }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      const { actor } = viewport.getActors()[0];\n      const ofun = actor.getProperty().getScalarOpacity(0);\n\n      const opacityPointValues = []; // Array to hold values\n      // Gather Existing Values\n      const size = ofun.getSize();\n      for (let pointIdx = 0; pointIdx < size; pointIdx++) {\n        const opacityPointValue = [0, 0, 0, 0];\n        ofun.getNodeValue(pointIdx, opacityPointValue);\n        // opacityPointValue now holds [xLocation, opacity, midpoint, sharpness]\n        opacityPointValues.push(opacityPointValue);\n      }\n      // Add offset\n      opacityPointValues.forEach(opacityPointValue => {\n        opacityPointValue[0] += shift; // Change the location value\n      });\n      // Set new values\n      ofun.removeAllPoints();\n      opacityPointValues.forEach(opacityPointValue => {\n        ofun.addPoint(...opacityPointValue);\n      });\n      viewport.render();\n    },\n\n    /**\n     * Sets the volume lighting settings for a given viewport.\n     * @param {string} viewportId - The ID of the viewport to set the lighting settings.\n     * @param {Object} options - The lighting settings to be set.\n     * @param {boolean} options.shade - The shade setting for the lighting.\n     * @param {number} options.ambient - The ambient setting for the lighting.\n     * @param {number} options.diffuse - The diffuse setting for the lighting.\n     * @param {number} options.specular - The specular setting for the lighting.\n     **/\n\n    setVolumeLighting: ({ viewportId, options }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      const { actor } = viewport.getActors()[0];\n      const property = actor.getProperty();\n\n      if (options.shade !== undefined) {\n        property.setShade(options.shade);\n      }\n\n      if (options.ambient !== undefined) {\n        property.setAmbient(options.ambient);\n      }\n\n      if (options.diffuse !== undefined) {\n        property.setDiffuse(options.diffuse);\n      }\n\n      if (options.specular !== undefined) {\n        property.setSpecular(options.specular);\n      }\n\n      viewport.render();\n    },\n    resetCrosshairs: ({ viewportId }) => {\n      const crosshairInstances = [];\n\n      const getCrosshairInstances = toolGroupId => {\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n        crosshairInstances.push(toolGroup.getToolInstance('Crosshairs'));\n      };\n\n      if (!viewportId) {\n        const toolGroupIds = toolGroupService.getToolGroupIds();\n        toolGroupIds.forEach(getCrosshairInstances);\n      } else {\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n        getCrosshairInstances(toolGroup.id);\n      }\n\n      crosshairInstances.forEach(ins => {\n        ins?.computeToolCenter();\n      });\n    },\n    /**\n     * Creates a labelmap for the active viewport\n     *\n     * The created labelmap will be registered as a display set and also added\n     * as a segmentation representation to the viewport.\n     */\n    createLabelmapForViewport: async ({ viewportId, options = {} }) => {\n      const { viewportGridService, displaySetService, segmentationService } =\n        servicesManager.services;\n      const { viewports } = viewportGridService.getState();\n      const targetViewportId = viewportId;\n\n      const viewport = viewports.get(targetViewportId);\n\n      // Todo: add support for multiple display sets\n      const displaySetInstanceUID =\n        options.displaySetInstanceUID || viewport.displaySetInstanceUIDs[0];\n\n      const segs = segmentationService.getSegmentations();\n\n      const label = options.label || `Segmentation ${segs.length + 1}`;\n      const segmentationId = options.segmentationId || `${csUtils.uuidv4()}`;\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      // This will create the segmentation and register it as a display set\n      const generatedSegmentationId = await segmentationService.createLabelmapForDisplaySet(\n        displaySet,\n        {\n          label,\n          segmentationId,\n          segments: options.createInitialSegment\n            ? {\n                1: {\n                  label: `${i18n.t('Segment')} 1`,\n                  active: true,\n                },\n              }\n            : {},\n        }\n      );\n\n      // Also add the segmentation representation to the viewport\n      await segmentationService.addSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: Enums.SegmentationRepresentations.Labelmap,\n      });\n\n      return generatedSegmentationId;\n    },\n\n    /**\n     * Sets the active segmentation for a viewport\n     * @param props.segmentationId - The ID of the segmentation to set as active\n     */\n    setActiveSegmentation: ({ segmentationId }) => {\n      const { viewportGridService, segmentationService } = servicesManager.services;\n      segmentationService.setActiveSegmentation(\n        viewportGridService.getActiveViewportId(),\n        segmentationId\n      );\n    },\n\n    /**\n     * Adds a new segment to a segmentation\n     * @param props.segmentationId - The ID of the segmentation to add the segment to\n     */\n    addSegmentCommand: ({ segmentationId }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.addSegment(segmentationId);\n    },\n\n    /**\n     * Sets the active segment and jumps to its center\n     * @param props.segmentationId - The ID of the segmentation\n     * @param props.segmentIndex - The index of the segment to activate\n     */\n    setActiveSegmentAndCenterCommand: ({ segmentationId, segmentIndex }) => {\n      const { segmentationService, viewportGridService } = servicesManager.services;\n      // set both active segmentation and active segment\n      segmentationService.setActiveSegmentation(\n        viewportGridService.getActiveViewportId(),\n        segmentationId\n      );\n      segmentationService.setActiveSegment(segmentationId, segmentIndex);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex);\n    },\n\n    /**\n     * Toggles the visibility of a segment\n     * @param props.segmentationId - The ID of the segmentation\n     * @param props.segmentIndex - The index of the segment\n     * @param props.type - The type of visibility to toggle\n     */\n    toggleSegmentVisibilityCommand: ({ segmentationId, segmentIndex, type }) => {\n      const { segmentationService, viewportGridService } = servicesManager.services;\n      segmentationService.toggleSegmentVisibility(\n        viewportGridService.getActiveViewportId(),\n        segmentationId,\n        segmentIndex,\n        type\n      );\n    },\n\n    /**\n     * Toggles the lock state of a segment\n     * @param props.segmentationId - The ID of the segmentation\n     * @param props.segmentIndex - The index of the segment\n     */\n    toggleSegmentLockCommand: ({ segmentationId, segmentIndex }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\n    },\n\n    /**\n     * Toggles the visibility of a segmentation representation\n     * @param props.segmentationId - The ID of the segmentation\n     * @param props.type - The type of representation\n     */\n    toggleSegmentationVisibilityCommand: ({ segmentationId, type }) => {\n      const { segmentationService, viewportGridService } = servicesManager.services;\n      segmentationService.toggleSegmentationRepresentationVisibility(\n        viewportGridService.getActiveViewportId(),\n        { segmentationId, type }\n      );\n    },\n\n    /**\n     * Downloads a segmentation\n     * @param props.segmentationId - The ID of the segmentation to download\n     */\n    downloadSegmentationCommand: ({ segmentationId }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.downloadSegmentation(segmentationId);\n    },\n\n    /**\n     * Stores a segmentation and shows it in the viewport\n     * @param props.segmentationId - The ID of the segmentation to store\n     */\n    storeSegmentationCommand: async ({ segmentationId }) => {\n      const { segmentationService, viewportGridService } = servicesManager.services;\n\n      const displaySetInstanceUIDs = await createReportAsync({\n        servicesManager,\n        getReport: () =>\n          commandsManager.runCommand('storeSegmentation', {\n            segmentationId,\n          }),\n        reportType: 'Segmentation',\n      });\n\n      if (displaySetInstanceUIDs) {\n        segmentationService.remove(segmentationId);\n        viewportGridService.setDisplaySetsForViewport({\n          viewportId: viewportGridService.getActiveViewportId(),\n          displaySetInstanceUIDs,\n        });\n      }\n    },\n\n    /**\n     * Downloads a segmentation as RTSS\n     * @param props.segmentationId - The ID of the segmentation\n     */\n    downloadRTSSCommand: ({ segmentationId }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.downloadRTSS(segmentationId);\n    },\n\n    /**\n     * Sets the style for a segmentation\n     * @param props.segmentationId - The ID of the segmentation\n     * @param props.type - The type of style\n     * @param props.key - The style key to set\n     * @param props.value - The style value\n     */\n    setSegmentationStyleCommand: ({ type, key, value }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.setStyle({ type }, { [key]: value });\n    },\n\n    /**\n     * Deletes a segment from a segmentation\n     * @param props.segmentationId - The ID of the segmentation\n     * @param props.segmentIndex - The index of the segment to delete\n     */\n    deleteSegmentCommand: ({ segmentationId, segmentIndex }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.removeSegment(segmentationId, segmentIndex);\n    },\n\n    /**\n     * Deletes an entire segmentation\n     * @param props.segmentationId - The ID of the segmentation to delete\n     */\n    deleteSegmentationCommand: ({ segmentationId }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.remove(segmentationId);\n    },\n\n    /**\n     * Removes a segmentation from the viewport\n     * @param props.segmentationId - The ID of the segmentation to remove\n     */\n    removeSegmentationFromViewportCommand: ({ segmentationId }) => {\n      const { segmentationService, viewportGridService } = servicesManager.services;\n      segmentationService.removeSegmentationRepresentations(\n        viewportGridService.getActiveViewportId(),\n        { segmentationId }\n      );\n    },\n\n    /**\n     * Toggles rendering of inactive segmentations\n     */\n    toggleRenderInactiveSegmentationsCommand: () => {\n      const { segmentationService, viewportGridService } = servicesManager.services;\n      const viewportId = viewportGridService.getActiveViewportId();\n      const renderInactive = segmentationService.getRenderInactiveSegmentations(viewportId);\n      segmentationService.setRenderInactiveSegmentations(viewportId, !renderInactive);\n    },\n\n    /**\n     * Sets the fill alpha value for a segmentation type\n     * @param props.type - The type of segmentation\n     * @param props.value - The alpha value to set\n     */\n    setFillAlphaCommand: ({ type, value }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.setStyle({ type }, { fillAlpha: value });\n    },\n\n    /**\n     * Sets the outline width for a segmentation type\n     * @param props.type - The type of segmentation\n     * @param props.value - The width value to set\n     */\n    setOutlineWidthCommand: ({ type, value }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.setStyle({ type }, { outlineWidth: value });\n    },\n\n    /**\n     * Sets whether to render fill for a segmentation type\n     * @param props.type - The type of segmentation\n     * @param props.value - Whether to render fill\n     */\n    setRenderFillCommand: ({ type, value }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.setStyle({ type }, { renderFill: value });\n    },\n\n    /**\n     * Sets whether to render outline for a segmentation type\n     * @param props.type - The type of segmentation\n     * @param props.value - Whether to render outline\n     */\n    setRenderOutlineCommand: ({ type, value }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.setStyle({ type }, { renderOutline: value });\n    },\n\n    /**\n     * Sets the fill alpha for inactive segmentations\n     * @param props.type - The type of segmentation\n     * @param props.value - The alpha value to set\n     */\n    setFillAlphaInactiveCommand: ({ type, value }) => {\n      const { segmentationService } = servicesManager.services;\n      segmentationService.setStyle({ type }, { fillAlphaInactive: value });\n    },\n\n    editSegmentLabel: async ({ segmentationId, segmentIndex }) => {\n      const { segmentationService, uiDialogService } = servicesManager.services;\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        return;\n      }\n\n      const segment = segmentation.segments[segmentIndex];\n\n      callInputDialog({\n        uiDialogService,\n        title: 'Edit Segment Label',\n        placeholder: 'Enter new label',\n        defaultValue: segment.label,\n      }).then(label => {\n        segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\n      });\n    },\n\n    editSegmentationLabel: ({ segmentationId }) => {\n      const { segmentationService, uiDialogService } = servicesManager.services;\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        return;\n      }\n\n      const { label } = segmentation;\n\n      callInputDialog({\n        uiDialogService,\n        title: 'Edit Segmentation Label',\n        placeholder: 'Enter new label',\n        defaultValue: label,\n      }).then(label => {\n        segmentationService.addOrUpdateSegmentation({ segmentationId, label });\n      });\n    },\n\n    editSegmentColor: ({ segmentationId, segmentIndex }) => {\n      const { segmentationService, uiDialogService, viewportGridService } =\n        servicesManager.services;\n      const viewportId = viewportGridService.getActiveViewportId();\n      const color = segmentationService.getSegmentColor(viewportId, segmentationId, segmentIndex);\n\n      const rgbaColor = {\n        r: color[0],\n        g: color[1],\n        b: color[2],\n        a: color[3] / 255.0,\n      };\n\n      uiDialogService.show({\n        content: colorPickerDialog,\n        title: 'Segment Color',\n        contentProps: {\n          value: rgbaColor,\n          onSave: newRgbaColor => {\n            const color = [newRgbaColor.r, newRgbaColor.g, newRgbaColor.b, newRgbaColor.a * 255.0];\n            segmentationService.setSegmentColor(viewportId, segmentationId, segmentIndex, color);\n          },\n        },\n      });\n    },\n\n    getRenderInactiveSegmentations: () => {\n      const { segmentationService, viewportGridService } = servicesManager.services;\n      return segmentationService.getRenderInactiveSegmentations(\n        viewportGridService.getActiveViewportId()\n      );\n    },\n\n    deleteActiveAnnotation: () => {\n      const activeAnnotationsUID = cornerstoneTools.annotation.selection.getAnnotationsSelected();\n      activeAnnotationsUID.forEach(activeAnnotationUID => {\n        measurementService.remove(activeAnnotationUID);\n      });\n    },\n    setDisplaySetsForViewports: ({ viewportsToUpdate }) => {\n      const { cineService, viewportGridService } = servicesManager.services;\n      // Stopping the cine of modified viewports before changing the viewports to\n      // avoid inconsistent state and lost references\n      viewportsToUpdate.forEach(viewport => {\n        const state = cineService.getState();\n        const currentCineState = state.cines?.[viewport.viewportId];\n        cineService.setCine({\n          id: viewport.viewportId,\n          frameRate: currentCineState?.frameRate ?? state.default?.frameRate ?? 24,\n          isPlaying: false,\n        });\n      });\n\n      viewportGridService.setDisplaySetsForViewports(viewportsToUpdate);\n    },\n    undo: () => {\n      DefaultHistoryMemo.undo();\n    },\n    redo: () => {\n      DefaultHistoryMemo.redo();\n    },\n    toggleSegmentPreviewEdit: ({ toggle }) => {\n      let labelmapTools = getLabelmapTools({ toolGroupService });\n      labelmapTools = labelmapTools.filter(tool => !tool.toolName.includes('Eraser'));\n      labelmapTools.forEach(tool => {\n        tool.configuration = {\n          ...tool.configuration,\n          preview: {\n            ...tool.configuration.preview,\n            enabled: toggle,\n          },\n        };\n      });\n    },\n    toggleSegmentSelect: ({ toggle }) => {\n      const toolGroupIds = toolGroupService.getToolGroupIds();\n      toolGroupIds.forEach(toolGroupId => {\n        const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroup(toolGroupId);\n        if (toggle) {\n          toolGroup.setToolActive(cornerstoneTools.SegmentSelectTool.toolName);\n        } else {\n          toolGroup.setToolDisabled(cornerstoneTools.SegmentSelectTool.toolName);\n        }\n      });\n    },\n    toggleSegmentLabel: () => {\n      const toolName = cornerstoneTools.SegmentLabelTool.toolName;\n      const toolGroupIds = toolGroupService.getToolGroupIds();\n\n      const isOn = toolGroupIds.some(toolGroupId => {\n        const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroup(toolGroupId);\n        const mode = toolGroup.getToolInstance(toolName)?.mode;\n        return mode === 'Active';\n      });\n\n      toolGroupIds.forEach(toolGroupId => {\n        const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroup(toolGroupId);\n        if (isOn) {\n          toolGroup.setToolDisabled(toolName);\n        } else {\n          toolGroup.setToolActive(toolName);\n        }\n      });\n    },\n    /**\n     * Used to sync the apps initial state with the config file settings.\n     *\n     * Will mutate the tools object of the given tool group and add the segmentLabelTool to the proper place.\n     *\n     * Use it before initializing the toolGroup with the tools.\n     */\n    initializeSegmentLabelTool: ({ tools }) => {\n      const appConfig = extensionManager.appConfig;\n      const segmentLabelConfig = appConfig.segmentation?.segmentLabel;\n\n      if (segmentLabelConfig?.enabledByDefault) {\n        const activeTools = tools?.active ?? [];\n        activeTools.push({\n          toolName: toolNames.SegmentLabel,\n          configuration: {\n            hoverTimeout: segmentLabelConfig?.hoverTimeout ?? 1,\n            color: segmentLabelConfig?.labelColor,\n            background: segmentLabelConfig?.background,\n          },\n        });\n\n        tools.active = activeTools;\n        return tools;\n      }\n\n      const disabledTools = tools?.disabled ?? [];\n      disabledTools.push({\n        toolName: toolNames.SegmentLabel,\n        configuration: {\n          hoverTimeout: segmentLabelConfig?.hoverTimeout ?? 1,\n          color: segmentLabelConfig?.labelColor,\n        },\n      });\n      tools.disabled = disabledTools;\n      return tools;\n    },\n    toggleUseCenterSegmentIndex: ({ toggle }) => {\n      let labelmapTools = getLabelmapTools({ toolGroupService });\n      labelmapTools = labelmapTools.filter(tool => !tool.toolName.includes('Eraser'));\n      labelmapTools.forEach(tool => {\n        tool.configuration = {\n          ...tool.configuration,\n          useCenterSegmentIndex: toggle,\n        };\n      });\n    },\n    _handlePreviewAction: action => {\n      const { viewport } = _getActiveViewportEnabledElement();\n      const previewTools = getPreviewTools({ toolGroupService });\n\n      previewTools.forEach(tool => {\n        try {\n          tool[`${action}Preview`]();\n        } catch (error) {\n          console.debug('Error accepting preview for tool', tool.toolName);\n        }\n      });\n\n      if (segmentAI.enabled) {\n        segmentAI[`${action}Preview`](viewport.element);\n      }\n    },\n    acceptPreview: () => {\n      actions._handlePreviewAction('accept');\n    },\n    rejectPreview: () => {\n      actions._handlePreviewAction('reject');\n    },\n    clearMarkersForMarkerLabelmap: () => {\n      const { viewport } = _getActiveViewportEnabledElement();\n      const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroupForViewport(viewport.id);\n      const toolInstance = toolGroup.getToolInstance('MarkerLabelmap');\n\n      if (!toolInstance) {\n        return;\n      }\n\n      toolInstance.clearMarkers(viewport);\n    },\n    interpolateScrollForMarkerLabelmap: () => {\n      const { viewport } = _getActiveViewportEnabledElement();\n      const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroupForViewport(viewport.id);\n      const toolInstance = toolGroup.getToolInstance('MarkerLabelmap');\n\n      if (!toolInstance) {\n        return;\n      }\n\n      toolInstance.interpolateScroll(viewport, 1);\n    },\n    toggleLabelmapAssist: async () => {\n      const { viewport } = _getActiveViewportEnabledElement();\n      const newState = !segmentAI.enabled;\n      segmentAI.enabled = newState;\n\n      if (!segmentAIEnabled) {\n        await segmentAI.initModel();\n        segmentAIEnabled = true;\n      }\n\n      // set the brush tool to active\n      const toolGroupIds = toolGroupService.getToolGroupIds();\n      if (newState) {\n        actions.setToolActiveToolbar({\n          toolName: 'CircularBrushForAutoSegmentAI',\n          toolGroupIds: toolGroupIds,\n        });\n      } else {\n        toolGroupIds.forEach(toolGroupId => {\n          const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroup(toolGroupId);\n          toolGroup.setToolPassive('CircularBrushForAutoSegmentAI');\n        });\n      }\n\n      if (segmentAI.enabled) {\n        segmentAI.initViewport(viewport);\n      }\n    },\n    setBrushSize: ({ value, toolNames }) => {\n      const brushSize = Number(value);\n\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        if (toolNames?.length === 0) {\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\n        } else {\n          toolNames?.forEach(toolName => {\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n          });\n        }\n      });\n    },\n    setThresholdRange: ({\n      value,\n      toolNames = [\n        'ThresholdCircularBrush',\n        'ThresholdSphereBrush',\n        'ThresholdCircularBrushDynamic',\n        'ThresholdSphereBrushDynamic',\n      ],\n    }) => {\n      const toolGroupIds = toolGroupService.getToolGroupIds();\n      if (!toolGroupIds?.length) {\n        return;\n      }\n\n      for (const toolGroupId of toolGroupIds) {\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n        toolNames?.forEach(toolName => {\n          toolGroup.setToolConfiguration(toolName, {\n            threshold: {\n              range: value,\n            },\n          });\n        });\n      }\n    },\n    increaseBrushSize: () => {\n      const toolGroupIds = toolGroupService.getToolGroupIds();\n      if (!toolGroupIds?.length) {\n        return;\n      }\n\n      for (const toolGroupId of toolGroupIds) {\n        const brushSize = segmentationUtils.getBrushSizeForToolGroup(toolGroupId);\n        segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize + 3);\n      }\n    },\n    decreaseBrushSize: () => {\n      const toolGroupIds = toolGroupService.getToolGroupIds();\n      if (!toolGroupIds?.length) {\n        return;\n      }\n\n      for (const toolGroupId of toolGroupIds) {\n        const brushSize = segmentationUtils.getBrushSizeForToolGroup(toolGroupId);\n        segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize - 3);\n      }\n    },\n    addNewSegment: () => {\n      const { segmentationService } = servicesManager.services;\n      const { activeViewportId } = viewportGridService.getState();\n      const activeSegmentation = segmentationService.getActiveSegmentation(activeViewportId);\n      if (!activeSegmentation) {\n        return;\n      }\n      segmentationService.addSegment(activeSegmentation.segmentationId);\n    },\n    loadSegmentationDisplaySetsForViewport: ({ viewportId, displaySetInstanceUIDs }) => {\n      const updatedViewports = getUpdatedViewportsForSegmentation({\n        viewportId,\n        servicesManager,\n        displaySetInstanceUIDs,\n      });\n\n      actions.setDisplaySetsForViewports({\n        viewportsToUpdate: updatedViewports.map(viewport => ({\n          viewportId: viewport.viewportId,\n          displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        })),\n      });\n    },\n    setViewportOrientation: ({ viewportId, orientation }) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n      if (!viewport || viewport.type !== CoreEnums.ViewportType.ORTHOGRAPHIC) {\n        console.warn('Orientation can only be set on volume viewports');\n        return;\n      }\n\n      // Get display sets for this viewport to verify at least one is reconstructable\n      const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n      const displaySets = displaySetUIDs.map(uid => displaySetService.getDisplaySetByUID(uid));\n\n      if (!displaySets.some(ds => ds.isReconstructable)) {\n        console.warn('Cannot change orientation: No reconstructable display sets in viewport');\n        return;\n      }\n\n      viewport.setOrientation(orientation);\n      viewport.render();\n\n      // update the orientation in the viewport info\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n      viewportInfo.setOrientation(orientation);\n    },\n    /**\n     * Toggles the horizontal flip state of the viewport.\n     */\n    toggleViewportHorizontalFlip: ({ viewportId }: { viewportId?: string } = {}) => {\n      actions.flipViewportHorizontal({ viewportId, newValue: 'toggle' });\n    },\n\n    /**\n     * Explicitly sets the horizontal flip state of the viewport.\n     */\n    setViewportHorizontalFlip: ({\n      flipped,\n      viewportId,\n    }: {\n      flipped: boolean;\n      viewportId?: string;\n    }) => {\n      actions.flipViewportHorizontal({ viewportId, newValue: flipped });\n    },\n\n    /**\n     * Toggles the vertical flip state of the viewport.\n     */\n    toggleViewportVerticalFlip: ({ viewportId }: { viewportId?: string } = {}) => {\n      actions.flipViewportVertical({ viewportId, newValue: 'toggle' });\n    },\n\n    /**\n     * Explicitly sets the vertical flip state of the viewport.\n     */\n    setViewportVerticalFlip: ({\n      flipped,\n      viewportId,\n    }: {\n      flipped: boolean;\n      viewportId?: string;\n    }) => {\n      actions.flipViewportVertical({ viewportId, newValue: flipped });\n    },\n    /**\n     * Internal helper to rotate or set absolute rotation for a viewport.\n     */\n    _rotateViewport: ({\n      rotation,\n      viewportId,\n      rotationMode = 'apply',\n    }: {\n      rotation: number;\n      viewportId?: string;\n      rotationMode?: 'apply' | 'set';\n    }) => {\n      const enabledElement = viewportId\n        ? _getViewportEnabledElement(viewportId)\n        : _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof BaseVolumeViewport) {\n        const camera = viewport.getCamera();\n        const rotAngle = (rotation * Math.PI) / 180;\n        const rotMat = mat4.identity(new Float32Array(16));\n        mat4.rotate(rotMat, rotMat, rotAngle, camera.viewPlaneNormal);\n        const rotatedViewUp = vec3.transformMat4(vec3.create(), camera.viewUp, rotMat);\n        viewport.setCamera({ viewUp: rotatedViewUp as CoreTypes.Point3 });\n        viewport.render();\n        return;\n      }\n\n      if (viewport.getRotation !== undefined) {\n        const { rotation: currentRotation } = viewport.getViewPresentation();\n        const newRotation =\n          rotationMode === 'apply'\n            ? (currentRotation + rotation + 360) % 360\n            : (() => {\n                // In 'set' mode, account for the effect horizontal/vertical flips\n                // have on the perceived rotation direction. A single flip mirrors\n                // the image and inverses rotation direction, while two flips\n                // restore the original parity. We therefore invert the rotation\n                // angle when an odd number of flips are applied so that the\n                // requested absolute rotation matches the user expectation.\n                const { flipHorizontal = false, flipVertical = false } =\n                  viewport.getViewPresentation();\n\n                const flipsParity = (flipHorizontal ? 1 : 0) + (flipVertical ? 1 : 0);\n                const effectiveRotation = flipsParity % 2 === 1 ? -rotation : rotation;\n\n                return (effectiveRotation + 360) % 360;\n              })();\n        viewport.setViewPresentation({ rotation: newRotation });\n        viewport.render();\n      }\n    },\n    startRecordingForAnnotationGroup: () => {\n      cornerstoneTools.AnnotationTool.startGroupRecording();\n    },\n    endRecordingForAnnotationGroup: () => {\n      cornerstoneTools.AnnotationTool.endGroupRecording();\n    },\n    triggerCreateAnnotationMemo: ({\n      annotation,\n      FrameOfReferenceUID,\n      options,\n    }: {\n      annotation: ToolTypes.Annotation;\n      FrameOfReferenceUID: string;\n      options: { newAnnotation?: boolean; deleting?: boolean };\n    }): void => {\n      const { newAnnotation, deleting } = options;\n      const renderingEngines = getRenderingEngines();\n      const viewports = renderingEngines.flatMap(re => re.getViewports());\n      const validViewport = viewports.find(\n        vp => vp.getFrameOfReferenceUID() === FrameOfReferenceUID\n      );\n\n      if (!validViewport) {\n        return;\n      }\n\n      cornerstoneTools.AnnotationTool.createAnnotationMemo(validViewport.element, annotation, {\n        newAnnotation,\n        deleting,\n      });\n    },\n  };\n\n  const definitions = {\n    // The command here is to show the viewer context menu, as being the\n    // context menu\n    showCornerstoneContextMenu: {\n      commandFn: actions.showCornerstoneContextMenu,\n      options: {\n        menuCustomizationId: 'measurementsContextMenu',\n        commands: [\n          {\n            commandName: 'showContextMenu',\n          },\n        ],\n      },\n    },\n\n    getNearbyToolData: {\n      commandFn: actions.getNearbyToolData,\n    },\n    getNearbyAnnotation: {\n      commandFn: actions.getNearbyAnnotation,\n      storeContexts: [],\n      options: {},\n    },\n    toggleViewportColorbar: {\n      commandFn: actions.toggleViewportColorbar,\n    },\n    setMeasurementLabel: {\n      commandFn: actions.setMeasurementLabel,\n    },\n    renameMeasurement: {\n      commandFn: actions.renameMeasurement,\n    },\n    updateMeasurement: {\n      commandFn: actions.updateMeasurement,\n    },\n    jumpToMeasurement: actions.jumpToMeasurement,\n    removeMeasurement: {\n      commandFn: actions.removeMeasurement,\n    },\n    toggleLockMeasurement: {\n      commandFn: actions.toggleLockMeasurement,\n    },\n    toggleVisibilityMeasurement: {\n      commandFn: actions.toggleVisibilityMeasurement,\n    },\n    downloadCSVMeasurementsReport: {\n      commandFn: actions.downloadCSVMeasurementsReport,\n    },\n    setViewportWindowLevel: {\n      commandFn: actions.setViewportWindowLevel,\n    },\n    setWindowLevel: {\n      commandFn: actions.setWindowLevel,\n    },\n    setWindowLevelPreset: {\n      commandFn: actions.setWindowLevelPreset,\n    },\n    setToolActive: {\n      commandFn: actions.setToolActive,\n    },\n    setToolActiveToolbar: {\n      commandFn: actions.setToolActiveToolbar,\n    },\n    setToolEnabled: {\n      commandFn: actions.setToolEnabled,\n    },\n    rotateViewportCW: {\n      commandFn: actions.rotateViewportBy,\n      options: { rotation: 90 },\n    },\n    rotateViewportCCW: {\n      commandFn: actions.rotateViewportBy,\n      options: { rotation: -90 },\n    },\n    rotateViewportCWSet: {\n      commandFn: actions.setViewportRotation,\n      options: { rotation: 90 },\n    },\n    incrementActiveViewport: {\n      commandFn: actions.changeActiveViewport,\n    },\n    decrementActiveViewport: {\n      commandFn: actions.changeActiveViewport,\n      options: { direction: -1 },\n    },\n    flipViewportHorizontal: {\n      commandFn: actions.toggleViewportHorizontalFlip,\n    },\n    flipViewportVertical: {\n      commandFn: actions.toggleViewportVerticalFlip,\n    },\n    setViewportHorizontalFlip: {\n      commandFn: actions.setViewportHorizontalFlip,\n      options: { flipped: true },\n    },\n    setViewportVerticalFlip: {\n      commandFn: actions.setViewportVerticalFlip,\n      options: { flipped: true },\n    },\n    invertViewport: {\n      commandFn: actions.invertViewport,\n    },\n    resetViewport: {\n      commandFn: actions.resetViewport,\n    },\n    scaleUpViewport: {\n      commandFn: actions.scaleViewport,\n      options: { direction: 1 },\n    },\n    scaleDownViewport: {\n      commandFn: actions.scaleViewport,\n      options: { direction: -1 },\n    },\n    fitViewportToWindow: {\n      commandFn: actions.scaleViewport,\n      options: { direction: 0 },\n    },\n    nextImage: {\n      commandFn: actions.scroll,\n      options: { direction: 1 },\n    },\n    previousImage: {\n      commandFn: actions.scroll,\n      options: { direction: -1 },\n    },\n    firstImage: {\n      commandFn: actions.jumpToImage,\n      options: { imageIndex: 0 },\n    },\n    lastImage: {\n      commandFn: actions.jumpToImage,\n      options: { imageIndex: -1 },\n    },\n    jumpToImage: {\n      commandFn: actions.jumpToImage,\n    },\n    showDownloadViewportModal: {\n      commandFn: actions.showDownloadViewportModal,\n    },\n    toggleCine: {\n      commandFn: actions.toggleCine,\n    },\n    arrowTextCallback: {\n      commandFn: actions.arrowTextCallback,\n    },\n    setViewportActive: {\n      commandFn: actions.setViewportActive,\n    },\n    setViewportColormap: {\n      commandFn: actions.setViewportColormap,\n    },\n    setViewportForToolConfiguration: {\n      commandFn: actions.setViewportForToolConfiguration,\n    },\n    storePresentation: {\n      commandFn: actions.storePresentation,\n    },\n    attachProtocolViewportDataListener: {\n      commandFn: actions.attachProtocolViewportDataListener,\n    },\n    setViewportPreset: {\n      commandFn: actions.setViewportPreset,\n    },\n    setVolumeRenderingQulaity: {\n      commandFn: actions.setVolumeRenderingQulaity,\n    },\n    shiftVolumeOpacityPoints: {\n      commandFn: actions.shiftVolumeOpacityPoints,\n    },\n    setVolumeLighting: {\n      commandFn: actions.setVolumeLighting,\n    },\n    resetCrosshairs: {\n      commandFn: actions.resetCrosshairs,\n    },\n    toggleSynchronizer: {\n      commandFn: actions.toggleSynchronizer,\n    },\n    updateVolumeData: {\n      commandFn: actions.updateVolumeData,\n    },\n    toggleEnabledDisabledToolbar: {\n      commandFn: actions.toggleEnabledDisabledToolbar,\n    },\n    toggleActiveDisabledToolbar: {\n      commandFn: actions.toggleActiveDisabledToolbar,\n    },\n    updateStoredPositionPresentation: {\n      commandFn: actions.updateStoredPositionPresentation,\n    },\n    updateStoredSegmentationPresentation: {\n      commandFn: actions.updateStoredSegmentationPresentation,\n    },\n    createLabelmapForViewport: {\n      commandFn: actions.createLabelmapForViewport,\n    },\n    setActiveSegmentation: {\n      commandFn: actions.setActiveSegmentation,\n    },\n    addSegment: {\n      commandFn: actions.addSegmentCommand,\n    },\n    setActiveSegmentAndCenter: {\n      commandFn: actions.setActiveSegmentAndCenterCommand,\n    },\n    toggleSegmentVisibility: {\n      commandFn: actions.toggleSegmentVisibilityCommand,\n    },\n    toggleSegmentLock: {\n      commandFn: actions.toggleSegmentLockCommand,\n    },\n    toggleSegmentationVisibility: {\n      commandFn: actions.toggleSegmentationVisibilityCommand,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentationCommand,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentationCommand,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSSCommand,\n    },\n    setSegmentationStyle: {\n      commandFn: actions.setSegmentationStyleCommand,\n    },\n    deleteSegment: {\n      commandFn: actions.deleteSegmentCommand,\n    },\n    deleteSegmentation: {\n      commandFn: actions.deleteSegmentationCommand,\n    },\n    removeSegmentationFromViewport: {\n      commandFn: actions.removeSegmentationFromViewportCommand,\n    },\n    toggleRenderInactiveSegmentations: {\n      commandFn: actions.toggleRenderInactiveSegmentationsCommand,\n    },\n    setFillAlpha: {\n      commandFn: actions.setFillAlphaCommand,\n    },\n    setOutlineWidth: {\n      commandFn: actions.setOutlineWidthCommand,\n    },\n    setRenderFill: {\n      commandFn: actions.setRenderFillCommand,\n    },\n    setRenderOutline: {\n      commandFn: actions.setRenderOutlineCommand,\n    },\n    setFillAlphaInactive: {\n      commandFn: actions.setFillAlphaInactiveCommand,\n    },\n    editSegmentLabel: {\n      commandFn: actions.editSegmentLabel,\n    },\n    editSegmentationLabel: {\n      commandFn: actions.editSegmentationLabel,\n    },\n    editSegmentColor: {\n      commandFn: actions.editSegmentColor,\n    },\n    getRenderInactiveSegmentations: {\n      commandFn: actions.getRenderInactiveSegmentations,\n    },\n    deleteActiveAnnotation: {\n      commandFn: actions.deleteActiveAnnotation,\n    },\n    setDisplaySetsForViewports: actions.setDisplaySetsForViewports,\n    undo: actions.undo,\n    redo: actions.redo,\n    interpolateLabelmap: actions.interpolateLabelmap,\n    runSegmentBidirectional: actions.runSegmentBidirectional,\n    downloadCSVSegmentationReport: actions.downloadCSVSegmentationReport,\n    toggleSegmentPreviewEdit: actions.toggleSegmentPreviewEdit,\n    toggleSegmentSelect: actions.toggleSegmentSelect,\n    acceptPreview: actions.acceptPreview,\n    rejectPreview: actions.rejectPreview,\n    toggleUseCenterSegmentIndex: actions.toggleUseCenterSegmentIndex,\n    toggleLabelmapAssist: actions.toggleLabelmapAssist,\n    interpolateScrollForMarkerLabelmap: actions.interpolateScrollForMarkerLabelmap,\n    clearMarkersForMarkerLabelmap: actions.clearMarkersForMarkerLabelmap,\n    setBrushSize: actions.setBrushSize,\n    setThresholdRange: actions.setThresholdRange,\n    increaseBrushSize: actions.increaseBrushSize,\n    decreaseBrushSize: actions.decreaseBrushSize,\n    addNewSegment: actions.addNewSegment,\n    loadSegmentationDisplaySetsForViewport: actions.loadSegmentationDisplaySetsForViewport,\n    setViewportOrientation: actions.setViewportOrientation,\n    hydrateSecondaryDisplaySet: actions.hydrateSecondaryDisplaySet,\n    getVolumeIdForDisplaySet: actions.getVolumeIdForDisplaySet,\n    triggerCreateAnnotationMemo: actions.triggerCreateAnnotationMemo,\n    startRecordingForAnnotationGroup: actions.startRecordingForAnnotationGroup,\n    endRecordingForAnnotationGroup: actions.endRecordingForAnnotationGroup,\n    toggleSegmentLabel: actions.toggleSegmentLabel,\n    jumpToMeasurementViewport: actions.jumpToMeasurementViewport,\n    initializeSegmentLabelTool: actions.initializeSegmentLabelTool,\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'CORNERSTONE',\n  };\n}\n\nexport default commandsModule;\n","import { getCenterExtent } from './getCenterExtent';\n\n/**\n * Determines if a measurement is within the current viewport extent.\n * Uses the measurement's bounding box extent to efficiently check if the entire\n * measurement fits within the viewport's visible area.\n *\n * @param {Object} viewport - The viewport object containing camera information\n * @param {Object} measurement - The measurement object containing points to check\n * @returns {boolean} True if the measurement extent is within the viewport, false otherwise\n */\nexport const isMeasurementWithinViewport = (viewport, measurement) => {\n  const camera = viewport.getCamera();\n  const { focalPoint, parallelScale } = camera;\n\n  // Get the measurement's bounding box extent\n  const { extent } = getCenterExtent(measurement);\n  const { min, max } = extent;\n\n  // Check if the entire bounding box fits within the viewport extent\n  // We need to check both the min and max corners of the bounding box\n  for (let i = 0; i < 3; i++) {\n    const minDistance = Math.abs(min[i] - focalPoint[i]);\n    const maxDistance = Math.abs(max[i] - focalPoint[i]);\n\n    // If either the min or max point is outside the viewport extent, return false\n    if (minDistance > parallelScale || maxDistance > parallelScale) {\n      return false;\n    }\n  }\n\n  return true; // The entire measurement extent is within the viewport\n};\n","import * as cornerstoneTools from '@cornerstonejs/tools';\n\ninterface BidirectionalAxis {\n  length: number;\n  // Add other axis properties as needed\n}\n\ninterface BidirectionalData {\n  majorAxis: BidirectionalAxis;\n  minorAxis: BidirectionalAxis;\n}\n\n/**\n * Updates the statistics for a segmentation by calculating stats for each segment\n * and storing them in the segment's cachedStats property\n *\n * @param segmentation - The segmentation object containing segments to update stats for\n * @param segmentationId - The ID of the segmentation\n * @returns The updated segmentation object with new stats, or null if no updates were made\n */\nexport async function updateSegmentationStats({\n  segmentation,\n  segmentationId,\n  readableText,\n}: {\n  segmentation: any;\n  segmentationId: string;\n  readableText: any;\n}): Promise<any | null> {\n  if (!segmentation) {\n    console.debug('No segmentation found for id:', segmentationId);\n    return null;\n  }\n\n  const segmentIndices = Object.keys(segmentation.segments)\n    .map(index => parseInt(index))\n    .filter(index => index > 0); // Filter out segment 0 which is typically background\n\n  if (segmentIndices.length === 0) {\n    console.debug('No segments found in segmentation:', segmentationId);\n    return null;\n  }\n\n  const stats = await cornerstoneTools.utilities.segmentation.getStatistics({\n    segmentationId,\n    segmentIndices,\n    mode: 'individual',\n  });\n\n  if (!stats) {\n    return null;\n  }\n\n  const updatedSegmentation = { ...segmentation };\n  let hasUpdates = false;\n\n  // Loop through each segment's stats\n  Object.entries(stats).forEach(([segmentIndex, segmentStats]) => {\n    const index = parseInt(segmentIndex);\n\n    if (!updatedSegmentation.segments[index].cachedStats) {\n      updatedSegmentation.segments[index].cachedStats = {};\n      hasUpdates = true;\n    }\n\n    // Get existing namedStats or initialize if not present\n    const namedStats = updatedSegmentation.segments[index].cachedStats.namedStats || {};\n\n    if (segmentStats.array) {\n      segmentStats.array.forEach(stat => {\n        // only gather stats that are in the readableText\n        if (!readableText[stat.name]) {\n          return;\n        }\n\n        if (stat && stat.name) {\n          namedStats[stat.name] = {\n            name: stat.name,\n            label: readableText[stat.name],\n            value: stat.value,\n            unit: stat.unit,\n            order: Object.keys(readableText).indexOf(stat.name),\n          };\n        }\n      });\n\n      if (readableText.volume) {\n        // Add volume if it exists but isn't in the array\n        if (segmentStats.volume && !namedStats.volume) {\n          namedStats.volume = {\n            name: 'volume',\n            label: 'Volume',\n            value: segmentStats.volume.value,\n            unit: segmentStats.volume.unit,\n            order: Object.keys(readableText).indexOf('volume'),\n          };\n        }\n      }\n\n      // Update the segment's cachedStats with namedStats\n      updatedSegmentation.segments[index].cachedStats.namedStats = namedStats;\n      hasUpdates = true;\n    }\n  });\n\n  return hasUpdates ? updatedSegmentation : null;\n}\n\n/**\n * Updates a segment's statistics with bidirectional measurement data\n *\n * @param segmentationId - The ID of the segmentation\n * @param segmentIndex - The index of the segment to update\n * @param bidirectionalData - The bidirectional measurement data to add\n * @param segmentationService - The segmentation service to use for updating the segment\n * @returns Whether the update was successful\n */\nexport function updateSegmentBidirectionalStats({\n  segmentationId,\n  segmentIndex,\n  bidirectionalData,\n  segmentationService,\n  annotation,\n}: {\n  segmentationId: string;\n  segmentIndex: number;\n  bidirectionalData: BidirectionalData;\n  segmentationService: AppTypes.SegmentationService;\n  annotation: any;\n}) {\n  if (!segmentationId || segmentIndex === undefined || !bidirectionalData) {\n    console.debug('Missing required data for bidirectional stats update');\n    return null;\n  }\n\n  const segmentation = segmentationService.getSegmentation(segmentationId);\n  if (!segmentation || !segmentation.segments[segmentIndex]) {\n    console.debug('Segment not found:', segmentIndex, 'in segmentation:', segmentationId);\n    return null;\n  }\n\n  const updatedSegmentation = { ...segmentation };\n  const segment = updatedSegmentation.segments[segmentIndex];\n\n  if (!segment.cachedStats) {\n    segment.cachedStats = { namedStats: {} };\n  }\n\n  if (!segment.cachedStats.namedStats) {\n    segment.cachedStats.namedStats = {};\n  }\n\n  const { majorAxis, minorAxis, maxMajor, maxMinor } = bidirectionalData;\n  if (!majorAxis || !minorAxis) {\n    console.debug('Missing major or minor axis data');\n    return null;\n  }\n\n  let hasUpdates = false;\n  const namedStats = segment.cachedStats.namedStats;\n\n  // Only calculate and update if we have valid measurements\n  if (maxMajor > 0 && maxMinor > 0) {\n    namedStats.bidirectional = {\n      name: 'bidirectional',\n      label: 'Bidirectional',\n      annotationUID: annotation.annotationUID,\n      value: {\n        maxMajor,\n        maxMinor,\n        majorAxis,\n        minorAxis,\n      },\n      unit: 'mm',\n    };\n\n    hasUpdates = true;\n  }\n\n  if (hasUpdates) {\n    return updatedSegmentation;\n  }\n\n  return null;\n}\n","export function generateSegmentationCSVReport(\n  segmentationData,\n  info: {\n    reference: {\n      SeriesNumber: string;\n      SeriesInstanceUID: string;\n      StudyInstanceUID: string;\n      SeriesDate: string;\n      SeriesTime: string;\n      SeriesDescription: string;\n    };\n  }\n) {\n  // Initialize the rows for our CSV\n  const csvRows = [];\n\n  // Add segmentation-level information\n  csvRows.push(['Segmentation ID', segmentationData.segmentationId || '']);\n  csvRows.push(['Segmentation Label', segmentationData.label || '']);\n\n  csvRows.push([]);\n\n  const additionalInfo = info.reference;\n  // Add reference information\n  const referenceKeys = [\n    ['Series Number', additionalInfo.SeriesNumber],\n    ['Series Instance UID', additionalInfo.SeriesInstanceUID],\n    ['Study Instance UID', additionalInfo.StudyInstanceUID],\n    ['Series Date', additionalInfo.SeriesDate],\n    ['Series Time', additionalInfo.SeriesTime],\n    ['Series Description', additionalInfo.SeriesDescription],\n  ];\n\n  referenceKeys.forEach(([key, value]) => {\n    if (value) {\n      csvRows.push([`reference ${key}`, value]);\n    }\n  });\n\n  // Add a blank row for separation\n  csvRows.push([]);\n\n  csvRows.push(['Segments Statistics']);\n\n  // Add segment information in columns\n  if (segmentationData.segments) {\n    // First row: Segment headers\n    const segmentHeaderRow = ['Label'];\n    for (const segmentId in segmentationData.segments) {\n      const segment = segmentationData.segments[segmentId];\n      segmentHeaderRow.push(`${segment.label || ''}`);\n    }\n    csvRows.push(segmentHeaderRow);\n\n    // Add segment properties\n    csvRows.push([\n      'Segment Index',\n      ...Object.values(segmentationData.segments).map(s => s.segmentIndex || ''),\n    ]);\n    csvRows.push([\n      'Locked',\n      ...Object.values(segmentationData.segments).map(s => (s.locked ? 'Yes' : 'No')),\n    ]);\n    csvRows.push([\n      'Active',\n      ...Object.values(segmentationData.segments).map(s => (s.active ? 'Yes' : 'No')),\n    ]);\n\n    // Add segment statistics\n    // First, collect all unique statistics across all segments\n    const allStats = new Set();\n    for (const segment of Object.values(segmentationData.segments)) {\n      if (segment.cachedStats && segment.cachedStats.namedStats) {\n        for (const statKey in segment.cachedStats.namedStats) {\n          const stat = segment.cachedStats.namedStats[statKey];\n          const statLabel = stat.label || stat.name;\n          const statUnit = stat.unit ? ` (${stat.unit})` : '';\n          allStats.add(`${statLabel}${statUnit}`);\n        }\n      }\n    }\n\n    // Then create a row for each statistic\n    for (const statName of allStats) {\n      const statRow = [statName];\n\n      for (const segment of Object.values(segmentationData.segments)) {\n        let statValue = '';\n\n        if (segment.cachedStats && segment.cachedStats.namedStats) {\n          for (const statKey in segment.cachedStats.namedStats) {\n            const stat = segment.cachedStats.namedStats[statKey];\n            const currentStatName = `${stat.label || stat.name}${stat.unit ? ` (${stat.unit})` : ''}`;\n\n            if (currentStatName === statName) {\n              statValue = stat.value !== undefined ? stat.value : '';\n              break;\n            }\n          }\n        }\n\n        statRow.push(statValue);\n      }\n\n      csvRows.push(statRow);\n    }\n  }\n\n  // Convert to CSV string\n  let csvString = '';\n  for (const row of csvRows) {\n    const formattedRow = row.map(cell => {\n      // Handle values that need to be quoted (contain commas, quotes, or newlines)\n      const cellValue = cell !== undefined && cell !== null ? cell.toString() : '';\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        // Escape quotes and wrap in quotes\n        return '\"' + cellValue.replace(/\"/g, '\"\"') + '\"';\n      }\n      return cellValue;\n    });\n    csvString += formattedRow.join(',') + '\\n';\n  }\n\n  // Create a download link and trigger the download\n  const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n\n  link.setAttribute('href', url);\n  link.setAttribute(\n    'download',\n    `${segmentationData.label || 'Segmentation'}_Report_${new Date().toISOString().split('T')[0]}.csv`\n  );\n  link.style.visibility = 'hidden';\n\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n","import { Types } from '@ohif/core';\n\nexport const VOI_SYNC_GROUP = {\n  type: 'voi',\n  id: 'mpr',\n  source: true,\n  target: true,\n  options: {\n    syncColormap: true,\n  },\n};\n\nexport const HYDRATE_SEG_SYNC_GROUP = {\n  type: 'hydrateseg',\n  id: 'sameFORId',\n  source: true,\n  target: true,\n  options: {\n    matchingRules: ['sameFOR'],\n  },\n};\n\nexport const mpr: Types.HangingProtocol.Protocol = {\n  id: 'mpr',\n  name: 'MPR',\n  locked: true,\n  icon: 'layout-advanced-mpr',\n  isPreset: true,\n  createdDate: '2021-02-23',\n  modifiedDate: '2023-08-15',\n  availableTo: {},\n  editableBy: {},\n  numberOfPriorsReferenced: 0,\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'nth',\n  callbacks: {},\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'MPR 1x3',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 3,\n          layoutOptions: [\n            {\n              x: 0,\n              y: 0,\n              width: 1 / 3,\n              height: 1,\n            },\n            {\n              x: 1 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1,\n            },\n            {\n              x: 2 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1,\n            },\n          ],\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            viewportId: 'mpr-axial',\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'mpr-sagittal',\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'mpr-coronal',\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import { HYDRATE_SEG_SYNC_GROUP, VOI_SYNC_GROUP } from './mpr';\n\nexport const fourUp = {\n  id: 'fourUp',\n  locked: true,\n  name: '3D four up',\n  icon: 'layout-advanced-3d-four-up',\n  isPreset: true,\n  createdDate: '2023-03-15T10:29:44.894Z',\n  modifiedDate: '2023-03-15T10:29:44.894Z',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'interleaveCenter',\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'fourUpStage',\n      name: 'fourUp',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'volume3d',\n            viewportType: 'volume3d',\n            orientation: 'coronal',\n            customViewportProps: {\n              hideOverlays: true,\n            },\n            syncGroups: [HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n              options: {\n                displayPreset: {\n                  CT: 'CT-Bone',\n                  MR: 'MR-Default',\n                  default: 'CT-Bone',\n                },\n              },\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import { HYDRATE_SEG_SYNC_GROUP, VOI_SYNC_GROUP } from './mpr';\n\nexport const main3D = {\n  id: 'main3D',\n  locked: true,\n  name: '3D main',\n  icon: 'layout-advanced-3d-main',\n  isPreset: true,\n  createdDate: '2023-03-15T10:29:44.894Z',\n  modifiedDate: '2023-03-15T10:29:44.894Z',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'interleaveCenter',\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'main3DStage',\n      name: 'main3D',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 3,\n          layoutOptions: [\n            {\n              x: 0,\n              y: 0,\n              width: 1,\n              height: 1 / 2,\n            },\n            {\n              x: 0,\n              y: 1 / 2,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n            {\n              x: 1 / 3,\n              y: 1 / 2,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n            {\n              x: 2 / 3,\n              y: 1 / 2,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n          ],\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'volume3d',\n            viewportType: 'volume3d',\n            orientation: 'coronal',\n            customViewportProps: {\n              hideOverlays: true,\n            },\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n              options: {\n                displayPreset: {\n                  CT: 'CT-Bone',\n                  MR: 'MR-Default',\n                  default: 'CT-Bone',\n                },\n              },\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import { HYDRATE_SEG_SYNC_GROUP, VOI_SYNC_GROUP } from './mpr';\n\nexport const mprAnd3DVolumeViewport = {\n  id: 'mprAnd3DVolumeViewport',\n  locked: true,\n  name: 'mpr',\n  createdDate: '2023-03-15T10:29:44.894Z',\n  modifiedDate: '2023-03-15T10:29:44.894Z',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'interleaveCenter',\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CT',\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'mpr3Stage',\n      name: 'mpr',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'volume3d',\n            viewportType: 'volume3d',\n            orientation: 'coronal',\n            customViewportProps: {\n              hideOverlays: true,\n            },\n            syncGroups: [HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n              options: {\n                displayPreset: {\n                  CT: 'CT-Bone',\n                  MR: 'MR-Default',\n                  default: 'CT-Bone',\n                },\n              },\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import { HYDRATE_SEG_SYNC_GROUP, VOI_SYNC_GROUP } from './mpr';\n\nexport const only3D = {\n  id: 'only3D',\n  locked: true,\n  name: '3D only',\n  icon: 'layout-advanced-3d-only',\n  isPreset: true,\n  createdDate: '2023-03-15T10:29:44.894Z',\n  modifiedDate: '2023-03-15T10:29:44.894Z',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'interleaveCenter',\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'only3DStage',\n      name: 'only3D',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'volume3d',\n            viewportType: 'volume3d',\n            orientation: 'coronal',\n            customViewportProps: {\n              hideOverlays: true,\n              syncGroups: [HYDRATE_SEG_SYNC_GROUP],\n            },\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n              options: {\n                displayPreset: {\n                  CT: 'CT-Bone',\n                  MR: 'MR-Default',\n                  default: 'CT-Bone',\n                },\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import { HYDRATE_SEG_SYNC_GROUP, VOI_SYNC_GROUP } from './mpr';\n\nexport const primary3D = {\n  id: 'primary3D',\n  locked: true,\n  name: '3D primary',\n  icon: 'layout-advanced-3d-primary',\n  isPreset: true,\n  createdDate: '2023-03-15T10:29:44.894Z',\n  modifiedDate: '2023-03-15T10:29:44.894Z',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'interleaveCenter',\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'primary3DStage',\n      name: 'primary3D',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 3,\n          columns: 3,\n          layoutOptions: [\n            {\n              x: 0,\n              y: 0,\n              width: 2 / 3,\n              height: 1,\n            },\n            {\n              x: 2 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1 / 3,\n            },\n            {\n              x: 2 / 3,\n              y: 1 / 3,\n              width: 1 / 3,\n              height: 1 / 3,\n            },\n            {\n              x: 2 / 3,\n              y: 2 / 3,\n              width: 1 / 3,\n              height: 1 / 3,\n            },\n          ],\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'volume3d',\n            viewportType: 'volume3d',\n            orientation: 'coronal',\n            customViewportProps: {\n              hideOverlays: true,\n            },\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n              options: {\n                displayPreset: {\n                  CT: 'CT-Bone',\n                  MR: 'MR-Default',\n                  default: 'CT-Bone',\n                },\n              },\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import { HYDRATE_SEG_SYNC_GROUP, VOI_SYNC_GROUP } from './mpr';\n\nexport const primaryAxial = {\n  id: 'primaryAxial',\n  locked: true,\n  name: 'Axial Primary',\n  icon: 'layout-advanced-axial-primary',\n  isPreset: true,\n  createdDate: '2023-03-15T10:29:44.894Z',\n  modifiedDate: '2023-03-15T10:29:44.894Z',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'interleaveCenter',\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'primaryAxialStage',\n      name: 'primaryAxial',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 3,\n          layoutOptions: [\n            {\n              x: 0,\n              y: 0,\n              width: 2 / 3,\n              height: 1,\n            },\n            {\n              x: 2 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n            {\n              x: 2 / 3,\n              y: 1 / 2,\n              width: 1 / 3,\n              height: 1 / 2,\n            },\n          ],\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [VOI_SYNC_GROUP, HYDRATE_SEG_SYNC_GROUP],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import { Types } from '@ohif/core';\n\nconst frameView: Types.HangingProtocol.Protocol = {\n  id: '@ohif/frameView',\n  description: 'Frame view for the active series',\n  name: 'Frame View',\n  icon: 'tool-stack-scroll',\n  isPreset: true,\n  toolGroupIds: ['default'],\n  protocolMatchingRules: [],\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            greaterThan: { value: 16 },\n          },\n          required: true,\n        },\n        {\n          attribute: 'isDisplaySetFromUrl',\n          weight: 20,\n          constraint: {\n            equals: true,\n          },\n        },\n      ],\n    },\n  },\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'activeDisplaySet',\n      },\n    ],\n  },\n  stages: [\n    {\n      name: 'frameView',\n      id: '4x4',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 4,\n          columns: 4,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            viewportId: 'custom_R0_C0',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 0,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R0_C1',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 1,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R0_C2',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 2,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R0_C3',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 3,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R1_C0',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 4,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R1_C1',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 5,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R1_C2',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 6,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R1_C3',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 7,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R2_C0',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 8,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R2_C1',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 9,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R2_C2',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 10,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R2_C3',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 11,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R3_C0',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 12,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R3_C1',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 13,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R3_C2',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 14,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            viewportId: 'custom_R3_C3',\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 15,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'frameView',\n      id: '3x3',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 3,\n          columns: 3,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 0,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 1,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 2,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 3,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 4,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 5,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 6,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 7,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 8,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'frameView',\n      id: '3x2',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 3,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 0,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 1,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 2,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 3,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 4,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 5,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'frameView',\n      id: '2x2',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 0,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 1,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 2,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 3,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'frameView',\n      id: '1x3',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 3,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 0,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 1,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 2,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'frameView',\n      id: '1x2',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 0,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'default',\n            syncGroups: [\n              {\n                type: 'zoompan',\n                id: 'zoompansync',\n                source: true,\n                target: true,\n              },\n              {\n                type: 'voi',\n                id: 'wlsync',\n                source: true,\n                target: true,\n                options: {\n                  syncColormap: true,\n                },\n              },\n              {\n                type: 'frameview',\n                id: 'frameViewSync',\n                source: true,\n                target: true,\n                options: {\n                  viewportIndex: 1,\n                },\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nexport { frameView };\n","import { fourUp } from './hps/fourUp';\nimport { main3D } from './hps/main3D';\nimport { mpr } from './hps/mpr';\nimport { mprAnd3DVolumeViewport } from './hps/mprAnd3DVolumeViewport';\nimport { only3D } from './hps/only3D';\nimport { primary3D } from './hps/primary3D';\nimport { primaryAxial } from './hps/primaryAxial';\nimport { frameView } from './hps/frameView';\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: mpr.id,\n      protocol: mpr,\n    },\n    {\n      name: mprAnd3DVolumeViewport.id,\n      protocol: mprAnd3DVolumeViewport,\n    },\n    {\n      name: fourUp.id,\n      protocol: fourUp,\n    },\n    {\n      name: main3D.id,\n      protocol: main3D,\n    },\n    {\n      name: primaryAxial.id,\n      protocol: primaryAxial,\n    },\n    {\n      name: only3D.id,\n      protocol: only3D,\n    },\n    {\n      name: primary3D.id,\n      protocol: primary3D,\n    },\n    {\n      name: frameView.id,\n      protocol: frameView,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React from 'react';\n\n// should be used in a Select component\nconst SelectItemWithModality = ({\n  displaySet,\n  showModality = true,\n  dataCY = `${displaySet.label}-${displaySet.Modality}`,\n}: {\n  displaySet: AppTypes.DisplaySet;\n  showModality?: boolean;\n  dataCY?: string;\n}): JSX.Element => (\n  <div\n    className=\"flex w-[90%] items-center justify-between\"\n    data-cy={dataCY}\n  >\n    <span className=\"text-foreground truncate text-base\">{displaySet.label}</span>\n    {showModality && displaySet.Modality && (\n      <span className=\"text-muted-foreground flex-shrink-0 whitespace-nowrap text-xs\">\n        {displaySet.Modality}\n      </span>\n    )}\n  </div>\n);\n\nexport default SelectItemWithModality;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Icons,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Switch,\n} from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core';\n\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\nimport SelectItemWithModality from '../SelectItemWithModality';\nimport { useViewportRendering } from '../../hooks';\n\nfunction ViewportDataOverlayMenu({ viewportId }: withAppTypes<{ viewportId: string }>) {\n  const { commandsManager, servicesManager } = useSystem();\n  const [pendingForegrounds, setPendingForegrounds] = useState<string[]>([]);\n  const [pendingSegmentations, setPendingSegmentations] = useState<string[]>([]);\n  const { toggleColorbar } = useViewportRendering(viewportId);\n\n  const { hangingProtocolService, toolbarService } = servicesManager.services;\n\n  const {\n    backgroundDisplaySet,\n    potentialOverlayDisplaySets,\n    potentialForegroundDisplaySets,\n    potentialBackgroundDisplaySets,\n    overlayDisplaySets,\n    foregroundDisplaySets,\n  } = useViewportDisplaySets(viewportId);\n\n  const [optimisticOverlayDisplaySets, setOptimisticOverlayDisplaySets] =\n    useState(overlayDisplaySets);\n\n  const [thresholdOpacityEnabled, setThresholdOpacityEnabled] = useState(false);\n\n  /**\n   * Change the background display set\n   */\n  const handleBackgroundSelection = (newBackgroundDisplaySet: AppTypes.DisplaySet) => {\n    const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n      viewportId,\n      newBackgroundDisplaySet.displaySetInstanceUID\n    );\n\n    commandsManager.run('setDisplaySetsForViewports', {\n      viewportsToUpdate: updatedViewports,\n    });\n  };\n\n  /**\n   * Replace a display set layer with a new one\n   */\n  const handleReplaceDisplaySetLayer = (\n    currentDisplaySetInstanceUID: string,\n    newDisplaySetInstanceUID: string\n  ) => {\n    // Remove current display set\n    commandsManager.runCommand('removeDisplaySetLayer', {\n      viewportId,\n      displaySetInstanceUID: currentDisplaySetInstanceUID,\n    });\n\n    setTimeout(() => {\n      commandsManager.runCommand('addDisplaySetAsLayer', {\n        viewportId,\n        displaySetInstanceUID: newDisplaySetInstanceUID,\n      });\n    }, 0);\n  };\n\n  /**\n   * Remove a display set layer\n   */\n  const handleRemoveDisplaySetLayer = (displaySetInstanceUID: string) => {\n    const optimisticOverlayDisplaySetsIndex = optimisticOverlayDisplaySets.findIndex(\n      displaySet => displaySet.displaySetInstanceUID === displaySetInstanceUID\n    );\n\n    if (optimisticOverlayDisplaySetsIndex !== -1) {\n      setOptimisticOverlayDisplaySets(prevOptimisticOverlayDisplaySets => {\n        return prevOptimisticOverlayDisplaySets.filter(\n          displaySet => displaySet.displaySetInstanceUID !== displaySetInstanceUID\n        );\n      });\n    }\n\n    commandsManager.runCommand('removeDisplaySetLayer', {\n      viewportId,\n      displaySetInstanceUID,\n    });\n  };\n\n  /**\n   * Add a display set as a layer\n   */\n  const handleAddDisplaySetAsLayer = (displaySetInstanceUID: string) => {\n    commandsManager.runCommand('addDisplaySetAsLayer', {\n      viewportId,\n      displaySetInstanceUID,\n    });\n  };\n\n  /**\n   * Handle overlay display set selection change\n   */\n  const handleOverlaySelectionChange = (\n    currentDisplaySet: AppTypes.DisplaySet,\n    newDisplaySetInstanceUID: string\n  ) => {\n    if (newDisplaySetInstanceUID === currentDisplaySet.displaySetInstanceUID) {\n      return;\n    }\n\n    // Find the selected display set\n    const selectedDisplaySet = potentialOverlayDisplaySets.find(\n      ds => ds.displaySetInstanceUID === newDisplaySetInstanceUID\n    );\n\n    if (selectedDisplaySet) {\n      setOptimisticOverlayDisplaySets(prevOptimisticOverlayDisplaySets => {\n        const currentDisplaySetIndex = prevOptimisticOverlayDisplaySets.findIndex(\n          displaySet => displaySet.displaySetInstanceUID === currentDisplaySet.displaySetInstanceUID\n        );\n        return [\n          ...prevOptimisticOverlayDisplaySets.slice(0, currentDisplaySetIndex),\n          selectedDisplaySet,\n          ...prevOptimisticOverlayDisplaySets.slice(currentDisplaySetIndex + 1),\n        ];\n      });\n\n      handleReplaceDisplaySetLayer(\n        currentDisplaySet.displaySetInstanceUID,\n        selectedDisplaySet.displaySetInstanceUID\n      );\n    }\n  };\n\n  /**\n   * Handle foreground display set selection change\n   */\n  const handleForegroundSelectionChange = (\n    currentDisplaySet: AppTypes.DisplaySet,\n    newDisplaySetInstanceUID: string\n  ) => {\n    if (newDisplaySetInstanceUID === currentDisplaySet.displaySetInstanceUID) {\n      return;\n    }\n\n    // Find the selected display set\n    const selectedDisplaySet = potentialForegroundDisplaySets.find(\n      ds => ds.displaySetInstanceUID === newDisplaySetInstanceUID\n    );\n\n    if (selectedDisplaySet) {\n      handleReplaceDisplaySetLayer(\n        currentDisplaySet.displaySetInstanceUID,\n        selectedDisplaySet.displaySetInstanceUID\n      );\n    }\n  };\n\n  /**\n   * Handle pending segmentation selection\n   */\n  const handlePendingSegmentationSelection = (pendingId: string, displaySetInstanceUID: string) => {\n    const selectedDisplaySet = potentialOverlayDisplaySets.find(\n      ds => ds.displaySetInstanceUID === displaySetInstanceUID\n    );\n\n    if (selectedDisplaySet) {\n      setOptimisticOverlayDisplaySets(prevOptimisticOverlayDisplaySets => [\n        ...prevOptimisticOverlayDisplaySets,\n        selectedDisplaySet,\n      ]);\n      handleAddDisplaySetAsLayer(selectedDisplaySet.displaySetInstanceUID);\n      // Remove this pending segmentation from the list\n      setPendingSegmentations(pendingSegmentations.filter(id => id !== pendingId));\n    }\n  };\n\n  /**\n   * Handle pending foreground selection\n   */\n  const handlePendingForegroundSelection = (pendingId: string, displaySetInstanceUID: string) => {\n    const selectedDisplaySet = potentialForegroundDisplaySets.find(\n      ds => ds.displaySetInstanceUID === displaySetInstanceUID\n    );\n\n    if (selectedDisplaySet) {\n      handleAddDisplaySetAsLayer(selectedDisplaySet.displaySetInstanceUID);\n      // Remove this pending foreground from the list\n      setPendingForegrounds(pendingForegrounds.filter(id => id !== pendingId));\n    }\n  };\n\n  // Check if the advanced window level components exist in toolbar\n  const hasAdvancedRenderingControls = !!toolbarService.getButton('AdvancedRenderingControls');\n  const hasOpacityMenu = !!toolbarService.getButton('opacityMenu');\n\n  const handleThresholdOpacityToggle = () => {\n    const newValue = !thresholdOpacityEnabled;\n    if (hasAdvancedRenderingControls) {\n      toggleColorbar();\n    }\n    setThresholdOpacityEnabled(newValue);\n  };\n\n  return (\n    <div\n      className=\"bg-popover flex h-full w-[275px] flex-col rounded rounded-md p-1.5\"\n      data-cy={`viewport-data-overlay-menu-${viewportId}`}\n    >\n      {/* Top buttons row */}\n      <div className={`flex`}>\n        <Button\n          variant=\"ghost\"\n          className=\"text-primary flex items-center p-1\"\n          onClick={() => {\n            // Add a new pending foreground slot with a unique ID\n            setPendingForegrounds([...pendingForegrounds, `pending-${Date.now()}`]);\n          }}\n          disabled={potentialForegroundDisplaySets.length === 0}\n        >\n          <Icons.Plus className=\"h-4 w-4\" />\n          Foreground\n        </Button>\n        <Button\n          variant=\"ghost\"\n          className=\"text-primary ml-2 flex items-center\"\n          disabled={potentialOverlayDisplaySets.length === 0}\n          onClick={() => {\n            setPendingSegmentations([...pendingSegmentations, `seg-${Date.now()}`]);\n          }}\n          dataCY={`AddSegmentationDataOverlay-${viewportId}`}\n        >\n          <Icons.Plus className=\"h-4 w-4\" />\n          Segmentation\n        </Button>\n      </div>\n\n      <div className=\"\">\n        {/* Overlays Segmentation section */}\n        <div className=\"my-2 ml-1\">\n          {optimisticOverlayDisplaySets.map(displaySet => (\n            <div\n              key={displaySet.displaySetInstanceUID}\n              className=\"mb-1 flex items-center\"\n            >\n              <Icons.LayerSegmentation className=\"text-muted-foreground mr-1 h-6 w-6 flex-shrink-0\" />\n              <Select\n                value={displaySet.displaySetInstanceUID}\n                onValueChange={value => handleOverlaySelectionChange(displaySet, value)}\n              >\n                <SelectTrigger className=\"flex-1\">\n                  <SelectValue\n                    data-cy={`overlay-ds-select-value-${displaySet.label?.toUpperCase()}`}\n                  >\n                    {displaySet.label?.toUpperCase()}\n                  </SelectValue>\n                </SelectTrigger>\n                <SelectContent>\n                  {/* Include both potential overlays and the current overlay */}\n                  <SelectItem\n                    key={displaySet.displaySetInstanceUID}\n                    value={displaySet.displaySetInstanceUID}\n                    className=\"pr-2\"\n                  >\n                    <SelectItemWithModality displaySet={displaySet} />\n                  </SelectItem>\n                  {potentialOverlayDisplaySets.map(item => (\n                    <SelectItem\n                      key={item.displaySetInstanceUID}\n                      value={item.displaySetInstanceUID}\n                      className=\"pr-2\"\n                    >\n                      <SelectItemWithModality displaySet={item} />\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"ml-2 flex-shrink-0\"\n                    dataCY={`overlay-ds-more-button-${displaySet.label?.toUpperCase()}`}\n                  >\n                    <Icons.More className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  <DropdownMenuItem\n                    data-cy={`overlay-ds-remove-button-${displaySet.label?.toUpperCase()}`}\n                    onClick={() => handleRemoveDisplaySetLayer(displaySet.displaySetInstanceUID)}\n                  >\n                    Remove\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          ))}\n\n          {pendingSegmentations.map(pendingId => (\n            <div\n              key={pendingId}\n              className=\"mb-2 flex items-center\"\n            >\n              <Icons.LayerSegmentation className=\"text-muted-foreground mr-1 h-6 w-6 flex-shrink-0\" />\n              <Select\n                value=\"\"\n                onValueChange={value => handlePendingSegmentationSelection(pendingId, value)}\n              >\n                <SelectTrigger className=\"flex-1\">\n                  <SelectValue placeholder=\"SELECT A SEGMENTATION\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {potentialOverlayDisplaySets.map(item => (\n                    <SelectItem\n                      key={item.displaySetInstanceUID}\n                      value={item.displaySetInstanceUID}\n                      className=\"pr-2\"\n                    >\n                      <SelectItemWithModality\n                        displaySet={item}\n                        dataCY={`${item.label}`}\n                      />\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"ml-2 flex-shrink-0\"\n                  >\n                    <Icons.More className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  <DropdownMenuItem\n                    onClick={() => {\n                      // Remove this pending segmentation\n                      setPendingSegmentations(pendingSegmentations.filter(id => id !== pendingId));\n                    }}\n                  >\n                    Cancel\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          ))}\n        </div>\n        {/* Foregrounds section */}\n        <div className=\"my-2 px-1\">\n          {foregroundDisplaySets.map((displaySet, index) => (\n            <div\n              key={displaySet.displaySetInstanceUID}\n              className=\"mb-1 flex items-center\"\n            >\n              <Icons.LayerForeground className=\"text-muted-foreground mr-1 h-6 w-6 flex-shrink-0\" />\n              <Select\n                value={displaySet.displaySetInstanceUID}\n                onValueChange={value => handleForegroundSelectionChange(displaySet, value)}\n              >\n                <SelectTrigger className=\"flex-1\">\n                  <SelectValue>{displaySet.label?.toUpperCase()}</SelectValue>\n                </SelectTrigger>\n                <SelectContent>\n                  {/* Include both potential foregrounds and the current foreground */}\n                  <SelectItem\n                    key={displaySet.displaySetInstanceUID}\n                    value={displaySet.displaySetInstanceUID}\n                    className=\"pr-2\"\n                  >\n                    <SelectItemWithModality displaySet={displaySet} />\n                  </SelectItem>\n                  {potentialForegroundDisplaySets.map(item => (\n                    <SelectItem\n                      key={item.displaySetInstanceUID}\n                      value={item.displaySetInstanceUID}\n                      className=\"pr-2\"\n                    >\n                      <SelectItemWithModality displaySet={item} />\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"ml-2 flex-shrink-0\"\n                  >\n                    <Icons.More className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  <DropdownMenuItem\n                    onClick={() => handleRemoveDisplaySetLayer(displaySet.displaySetInstanceUID)}\n                  >\n                    Remove\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          ))}\n\n          {pendingForegrounds.map(pendingId => (\n            <div\n              key={pendingId}\n              className=\"mb-2 flex items-center\"\n            >\n              <Icons.LayerForeground className=\"text-muted-foreground mr-1 h-6 w-6 flex-shrink-0\" />\n              <Select\n                value=\"\"\n                onValueChange={value => handlePendingForegroundSelection(pendingId, value)}\n              >\n                <SelectTrigger className=\"flex-1\">\n                  <SelectValue placeholder=\"SELECT A FOREGROUND\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {potentialForegroundDisplaySets.map(item => (\n                    <SelectItem\n                      key={item.displaySetInstanceUID}\n                      value={item.displaySetInstanceUID}\n                      className=\"pr-2\"\n                    >\n                      <SelectItemWithModality displaySet={item} />\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"ml-2 flex-shrink-0\"\n                  >\n                    <Icons.More className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\">\n                  <DropdownMenuItem\n                    onClick={() => {\n                      // Remove this pending foreground\n                      setPendingForegrounds(pendingForegrounds.filter(id => id !== pendingId));\n                    }}\n                  >\n                    Cancel\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          ))}\n        </div>\n        {/* Background section */}\n        <div className=\"mt-1 mb-1 flex items-center px-1\">\n          <Icons.LayerBackground className=\"text-muted-foreground mr-1 h-6 w-6 flex-shrink-0\" />\n          <Select\n            value={backgroundDisplaySet?.displaySetInstanceUID}\n            onValueChange={value => {\n              const selectedDisplaySet = potentialBackgroundDisplaySets.find(\n                ds => ds.displaySetInstanceUID === value\n              );\n              if (selectedDisplaySet) {\n                handleBackgroundSelection(selectedDisplaySet);\n              }\n            }}\n          >\n            <SelectTrigger className=\"flex-1\">\n              <SelectValue>\n                {(\n                  backgroundDisplaySet?.SeriesDescription ||\n                  backgroundDisplaySet?.label ||\n                  'background'\n                ).toUpperCase()}\n              </SelectValue>\n            </SelectTrigger>\n            <SelectContent>\n              {potentialBackgroundDisplaySets.map(displaySet => (\n                <SelectItem\n                  key={displaySet.displaySetInstanceUID}\n                  value={displaySet.displaySetInstanceUID}\n                  className=\"pr-2\"\n                >\n                  <SelectItemWithModality displaySet={displaySet} />\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n      {foregroundDisplaySets.length > 0 && (hasAdvancedRenderingControls || hasOpacityMenu) && (\n        <div className=\"mt-1 ml-7\">\n          <div className=\"flex items-center\">\n            <Switch\n              id=\"threshold-opacity-switch\"\n              className=\"mr-2\"\n              checked={thresholdOpacityEnabled}\n              onCheckedChange={handleThresholdOpacityToggle}\n            />\n            <label\n              htmlFor=\"threshold-opacity-switch\"\n              className=\"text-muted-foreground cursor-pointer text-sm\"\n              onClick={() => setThresholdOpacityEnabled(!thresholdOpacityEnabled)}\n            >\n              Control threshold & opacity\n            </label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ViewportDataOverlayMenu;\n","import React, { ReactNode } from 'react';\nimport { useSystem } from '@ohif/core';\nimport {\n  Button,\n  Icons,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  useIconPresentation,\n} from '@ohif/ui-next';\nimport ViewportDataOverlayMenu from './ViewportDataOverlayMenu';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\n\ntype DataOverlayMenuProps = {\n  viewportId: string;\n  location: string;\n  isOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  disabled?: boolean;\n  id?: string;\n};\n\nexport function ViewportDataOverlayMenuWrapper(props: DataOverlayMenuProps): ReactNode {\n  const { viewportId, location, isOpen = false, onOpen, onClose, disabled, ...rest } = props;\n  const { viewportDisplaySets: displaySets } = useViewportDisplaySets(viewportId);\n  const { IconContainer, className: iconClassName, containerProps } = useIconPresentation();\n\n  const handleOpenChange = (openState: boolean) => {\n    if (openState) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  };\n\n  const { servicesManager } = useSystem();\n  const { toolbarService } = servicesManager.services;\n\n  const { align, side } = toolbarService.getAlignAndSide(location);\n\n  const Icon = <Icons.ViewportViews className={iconClassName} />;\n\n  const idProp = rest.id ? { id: `${rest.id}-${viewportId}` } : {};\n  return (\n    <Popover\n      open={isOpen}\n      onOpenChange={handleOpenChange}\n    >\n      <PopoverTrigger\n        asChild\n        className=\"flex items-center justify-center\"\n      >\n        <div>\n          {IconContainer ? (\n            <IconContainer\n              disabled={disabled}\n              icon=\"ViewportViews\"\n              {...rest}\n              {...containerProps}\n              {...idProp}\n            >\n              {Icon}\n            </IconContainer>\n          ) : (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled={disabled}\n            >\n              {Icon}\n            </Button>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"border-none bg-transparent p-0 shadow-none\"\n        side={side}\n        align={align}\n        alignOffset={0}\n        sideOffset={5}\n      >\n        <ViewportDataOverlayMenu\n          className=\"w-full\"\n          viewportId={viewportId}\n          displaySets={displaySets}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n","import React from 'react';\nimport { cn, Icons, useIconPresentation } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core';\nimport { Enums } from '@cornerstonejs/core';\nimport { Popover, PopoverTrigger, PopoverContent, Button, useViewportGrid } from '@ohif/ui-next';\n\nfunction ViewportOrientationMenu({\n  location,\n  viewportId,\n  displaySets,\n  isOpen = false,\n  onOpen,\n  onClose,\n  disabled,\n  ...props\n}: withAppTypes<{\n  location?: string;\n  viewportId: string;\n  displaySets: AppTypes.DisplaySet[];\n  isOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  disabled?: boolean;\n}>) {\n  const { servicesManager, commandsManager } = useSystem();\n  const { cornerstoneViewportService, toolbarService } = servicesManager.services;\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n  const viewportOrientation = viewportInfo.getOrientation();\n\n  const [gridState] = useViewportGrid();\n  const viewportIdToUse = viewportId || gridState.activeViewportId;\n  const { IconContainer, className: iconClassName, containerProps } = useIconPresentation();\n  const [currentOrientation, setCurrentOrientation] = React.useState<string>(\n    typeof viewportOrientation === 'string' ? viewportOrientation : 'axial'\n  );\n\n  const handleOrientationChange = (orientation: string) => {\n    setCurrentOrientation(orientation);\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportIdToUse);\n    const currentViewportType = viewportInfo?.getViewportType();\n\n    if (!displaySets.length) {\n      return;\n    }\n\n    // Check if at least one displaySet is reconstructable\n    const hasReconstructableDisplaySet = displaySets.some(ds => ds.isReconstructable);\n\n    if (!hasReconstructableDisplaySet) {\n      console.warn('Cannot change orientation: No reconstructable display sets in viewport');\n      return;\n    }\n\n    // Set the orientation enum based on the selected orientation\n    let orientationEnum;\n    switch (orientation.toLowerCase()) {\n      case 'axial':\n        orientationEnum = Enums.OrientationAxis.AXIAL;\n        break;\n      case 'sagittal':\n        orientationEnum = Enums.OrientationAxis.SAGITTAL;\n        break;\n      case 'coronal':\n        orientationEnum = Enums.OrientationAxis.CORONAL;\n        break;\n      case 'reformat':\n        orientationEnum = Enums.OrientationAxis.REFORMAT;\n        break;\n      default:\n        orientationEnum = Enums.OrientationAxis.ACQUISITION;\n    }\n\n    const displaySetUIDs = displaySets.map(ds => ds.displaySetInstanceUID);\n\n    // If viewport is not already a volume type, we need to convert it\n    if (currentViewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\n      // Configure the viewport to be a volume viewport with current display sets\n      const updatedViewport = {\n        viewportId: viewportIdToUse,\n        displaySetInstanceUIDs: displaySetUIDs,\n        viewportOptions: {\n          viewportType: Enums.ViewportType.ORTHOGRAPHIC,\n          orientation: orientationEnum,\n        },\n        displaySetOptions: displaySetUIDs.map(() => ({})),\n      };\n\n      // Update the viewport to be a volume viewport\n      commandsManager.run('setDisplaySetsForViewports', {\n        viewportsToUpdate: [updatedViewport],\n      });\n    } else {\n      // Set the viewport orientation\n      commandsManager.runCommand('setViewportOrientation', {\n        viewportId: viewportIdToUse,\n        orientation: orientationEnum,\n      });\n    }\n\n    // Close the menu after selection\n    onClose?.();\n  };\n\n  const handleOpenChange = (openState: boolean) => {\n    if (openState) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  };\n\n  if (!displaySets.length) {\n    return null;\n  }\n\n  // Get proper alignment and side based on the location using toolbar service\n  const { align, side } = toolbarService.getAlignAndSide(Number(location));\n\n  const Icon = React.createElement(getIcon(currentOrientation), { className: iconClassName });\n  return (\n    <Popover\n      open={isOpen}\n      onOpenChange={handleOpenChange}\n    >\n      <PopoverTrigger\n        asChild\n        className={cn('flex items-center justify-center')}\n      >\n        <div>\n          {IconContainer ? (\n            <IconContainer\n              disabled={disabled}\n              icon=\"OrientationSwitch\"\n              {...props}\n              {...containerProps}\n            >\n              {Icon}\n            </IconContainer>\n          ) : (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled={disabled}\n              onClick={() => {}}\n            >\n              {Icon}\n            </Button>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"h-[170px] w-[130px] flex-shrink-0 flex-col items-start rounded p-1\"\n        align={align}\n        side={side}\n        style={{ left: 0 }}\n      >\n        <Button\n          variant=\"ghost\"\n          className=\"flex h-7 w-full flex-shrink-0 items-center justify-start self-stretch px-1 py-0\"\n          onClick={() => handleOrientationChange('axial')}\n        >\n          <div className=\"mr-1 flex w-6 items-center justify-start\">\n            {currentOrientation === 'axial' ? (\n              <Icons.Checked className=\"text-primary h-6 w-6\" />\n            ) : null}\n          </div>\n          <div className=\"flex-1 text-left\">Axial</div>\n        </Button>\n        <Button\n          variant=\"ghost\"\n          className=\"flex h-7 w-full flex-shrink-0 items-center justify-start self-stretch px-1 py-0\"\n          onClick={() => handleOrientationChange('sagittal')}\n        >\n          <div className=\"mr-1 flex w-6 items-center justify-start\">\n            {currentOrientation === 'sagittal' ? (\n              <Icons.Checked className=\"text-primary h-6 w-6\" />\n            ) : null}\n          </div>\n          <div className=\"flex-1 text-left\">Sagittal</div>\n        </Button>\n        <Button\n          variant=\"ghost\"\n          className=\"flex h-7 w-full flex-shrink-0 items-center justify-start self-stretch px-1 py-0\"\n          onClick={() => handleOrientationChange('coronal')}\n        >\n          <div className=\"mr-1 flex w-6 items-center justify-start\">\n            {currentOrientation === 'coronal' ? (\n              <Icons.Checked className=\"text-primary h-6 w-6\" />\n            ) : null}\n          </div>\n          <div className=\"flex-1 text-left\">Coronal</div>\n        </Button>\n        <Button\n          variant=\"ghost\"\n          className=\"flex h-7 w-full flex-shrink-0 items-center justify-start self-stretch px-1 py-0\"\n          onClick={() => handleOrientationChange('acquisition')}\n        >\n          <div className=\"mr-1 flex w-6 items-center justify-start\">\n            {currentOrientation === 'acquisition' ? (\n              <Icons.Checked className=\"text-primary h-6 w-6\" />\n            ) : null}\n          </div>\n          <div className=\"flex-1 text-left\">Acquisition</div>\n        </Button>\n        {/* Divider */}\n        <div className=\"mx-1 my-2 border-t border-white/20\" />\n        <Button\n          variant=\"ghost\"\n          className=\"flex h-7 w-full flex-shrink-0 items-center justify-start self-stretch px-1 py-0\"\n          onClick={() => handleOrientationChange('reformat')}\n        >\n          <div className=\"mr-1 flex w-6 items-center justify-start\">\n            {currentOrientation === 'reformat' ? (\n              <Icons.Checked className=\"text-primary h-6 w-6\" />\n            ) : null}\n          </div>\n          <div className=\"flex-1 text-left\">Reformat</div>\n        </Button>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nconst getIcon = (orientationName: string) => {\n  switch (orientationName.toLowerCase()) {\n    case 'axial':\n      return Icons.OrientationSwitchA;\n    case 'sagittal':\n      return Icons.OrientationSwitchS;\n    case 'coronal':\n      return Icons.OrientationSwitchC;\n    case 'reformat':\n      return Icons.OrientationSwitchR;\n    case 'acquisition':\n      return Icons.OrientationSwitch;\n    default:\n      return Icons.OrientationSwitch;\n  }\n};\n\nexport default ViewportOrientationMenu;\n","import React, { ReactNode } from 'react';\nimport ViewportOrientationMenu from './ViewportOrientationMenu';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\n\nexport function ViewportOrientationMenuWrapper(\n  props: withAppTypes<{\n    viewportId: string;\n    location: string;\n    isOpen?: boolean;\n    onOpen?: () => void;\n    onClose?: () => void;\n    iconSize?: number;\n    disabled?: boolean;\n  }>\n): ReactNode {\n  const { viewportId } = props;\n  const { viewportDisplaySets } = useViewportDisplaySets(viewportId);\n\n  if (!viewportDisplaySets.length) {\n    return null;\n  }\n\n  return (\n    <ViewportOrientationMenu\n      {...props}\n      displaySets={viewportDisplaySets}\n    />\n  );\n}\n","import React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport { AllInOneMenu, ScrollArea, Switch, Tabs, TabsList, TabsTrigger } from '@ohif/ui-next';\nimport { useViewportRendering } from '../../hooks/useViewportRendering';\n\nexport function Colormap({ viewportId }: { viewportId?: string } = {}): ReactElement {\n  const { viewportDisplaySets } = useViewportRendering(viewportId);\n\n  const [activeDisplaySetUID, setActiveDisplaySetUID] = useState<string | undefined>(\n    viewportDisplaySets?.[0]?.displaySetInstanceUID\n  );\n\n  // Use the hook with the active display set\n  const { colorbarProperties, setColormap } = useViewportRendering(viewportId, {\n    displaySetInstanceUID: activeDisplaySetUID,\n  });\n\n  const { colormaps } = colorbarProperties;\n\n  const [showPreview, setShowPreview] = useState(false);\n  const [prePreviewColormap, setPrePreviewColormap] = useState(null);\n  const [currentColormap, setCurrentColormap] = useState(null);\n\n  const showPreviewRef = useRef(showPreview);\n  showPreviewRef.current = showPreview;\n  const prePreviewColormapRef = useRef(prePreviewColormap);\n  prePreviewColormapRef.current = prePreviewColormap;\n  const currentColormapRef = useRef(currentColormap);\n  currentColormapRef.current = currentColormap;\n\n  useEffect(() => {\n    setCurrentColormap(null);\n    setPrePreviewColormap(null);\n  }, [activeDisplaySetUID]);\n\n  const handleSetColorLUT = (colormap, immediate = true) => {\n    // Check if it's a fusion viewport\n    const oneOpacityColormaps = ['Grayscale', 'X Ray'];\n    const opacity =\n      viewportDisplaySets.length > 1 && !oneOpacityColormaps.includes(colormap.name) ? 0.5 : 1;\n\n    setColormap({\n      colormap,\n      opacity,\n      immediate,\n    });\n  };\n\n  return (\n    <>\n      {viewportDisplaySets && viewportDisplaySets.length > 1 && (\n        <div className=\"flex h-8 w-full flex-shrink-0 items-center justify-center px-2 text-base\">\n          <Tabs\n            value={activeDisplaySetUID}\n            onValueChange={displaySetUID => {\n              setActiveDisplaySetUID(displaySetUID);\n              setPrePreviewColormap(null);\n            }}\n          >\n            <TabsList>\n              {viewportDisplaySets.map(ds => (\n                <TabsTrigger\n                  key={ds.displaySetInstanceUID}\n                  value={ds.displaySetInstanceUID}\n                >\n                  {ds.Modality}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </Tabs>\n        </div>\n      )}\n\n      <div\n        className=\"hover:bg-accent flex h-8 w-full flex-shrink-0 cursor-pointer items-center px-2 text-base hover:rounded\"\n        onClick={() => setShowPreview(!showPreview)}\n      >\n        <span className=\"flex-shrink-0\">Preview in viewport</span>\n        <Switch\n          className=\"ml-auto flex-shrink-0\"\n          checked={showPreview}\n          onCheckedChange={checked => {\n            setShowPreview(checked);\n\n            if (!checked && currentColormapRef.current) {\n              handleSetColorLUT(currentColormapRef.current);\n            }\n          }}\n        />\n      </div>\n\n      <AllInOneMenu.DividerItem />\n\n      <div className=\"h-[300px] flex-grow\">\n        <ScrollArea className=\"h-full w-full\">\n          <div className=\"p-1\">\n            {colormaps.map((colormap, index) => (\n              <AllInOneMenu.Item\n                key={index}\n                label={colormap.description}\n                useIconSpace={false}\n                onClick={() => {\n                  setCurrentColormap(colormap);\n                  handleSetColorLUT(colormap);\n                  setPrePreviewColormap(null);\n                }}\n                onMouseEnter={() => {\n                  if (showPreviewRef.current) {\n                    if (!prePreviewColormapRef.current) {\n                      setPrePreviewColormap(colormap);\n                    }\n                    handleSetColorLUT(colormap);\n                  }\n                }}\n                onMouseLeave={() => {\n                  if (showPreviewRef.current && prePreviewColormapRef.current) {\n                    handleSetColorLUT(prePreviewColormapRef.current);\n                  }\n                }}\n              />\n            ))}\n          </div>\n        </ScrollArea>\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback } from 'react';\nimport { Switch } from '@ohif/ui-next';\nimport { useViewportRendering } from '../../hooks/useViewportRendering';\n\nexport function Colorbar({ viewportId }: { viewportId?: string } = {}): ReactElement {\n  const { hasColorbar, toggleColorbar } = useViewportRendering(viewportId);\n\n  const handleToggle = useCallback(() => {\n    toggleColorbar();\n  }, [toggleColorbar]);\n\n  return (\n    <div className=\"hover:bg-accent flex h-8 w-full flex-shrink-0 cursor-pointer items-center px-2 text-base hover:rounded\">\n      <div className=\"flex w-7 flex-shrink-0 items-center justify-center\"></div>\n      <span\n        className=\"flex-grow\"\n        onClick={handleToggle}\n      >\n        Display Color bar\n      </span>\n      <Switch\n        className=\"ml-2 flex-shrink-0\"\n        checked={!!hasColorbar}\n        onCheckedChange={handleToggle}\n      />\n    </div>\n  );\n}\n","import React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport { AllInOneMenu, ScrollArea, Switch, Tabs, TabsList, TabsTrigger } from '@ohif/ui-next';\nimport { useViewportRendering } from '../../hooks/useViewportRendering';\nimport { WindowLevelPreset } from '../../types/WindowLevel';\n\nexport function WindowLevel({ viewportId }: { viewportId?: string } = {}): ReactElement {\n  const { viewportDisplaySets } = useViewportRendering(viewportId);\n  const [activeDisplaySetUID, setActiveDisplaySetUID] = useState<string | undefined>(\n    viewportDisplaySets?.[0]?.displaySetInstanceUID\n  );\n\n  // Use the hook with the active display set\n  const { windowLevelPresets, setWindowLevel } = useViewportRendering(viewportId, {\n    displaySetInstanceUID: activeDisplaySetUID,\n  });\n\n  const [showPreview, setShowPreview] = useState(false);\n  const [prePreviewPreset, setPrePreviewPreset] = useState<WindowLevelPreset | null>(null);\n  const [currentPreset, setCurrentPreset] = useState<WindowLevelPreset | null>(null);\n\n  const showPreviewRef = useRef(showPreview);\n  showPreviewRef.current = showPreview;\n  const prePreviewPresetRef = useRef(prePreviewPreset);\n  prePreviewPresetRef.current = prePreviewPreset;\n  const currentPresetRef = useRef(currentPreset);\n  currentPresetRef.current = currentPreset;\n\n  // Reset presets when active display set changes\n  useEffect(() => {\n    setCurrentPreset(null);\n    setPrePreviewPreset(null);\n  }, [activeDisplaySetUID]);\n\n  // Handle applying window level preset\n  const handleSetWindowLevel = (preset: WindowLevelPreset, immediate = false) => {\n    setWindowLevel({\n      windowWidth: Number(preset.window),\n      windowCenter: Number(preset.level),\n      immediate,\n    });\n  };\n\n  return (\n    <>\n      {viewportDisplaySets && viewportDisplaySets.length > 1 && (\n        <div className=\"flex h-8 w-full flex-shrink-0 items-center justify-center px-2 text-base\">\n          <Tabs\n            value={activeDisplaySetUID}\n            onValueChange={displaySetUID => {\n              setActiveDisplaySetUID(displaySetUID);\n            }}\n          >\n            <TabsList>\n              {viewportDisplaySets.map(ds => (\n                <TabsTrigger\n                  key={ds.displaySetInstanceUID}\n                  value={ds.displaySetInstanceUID}\n                >\n                  {ds.Modality}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </Tabs>\n        </div>\n      )}\n\n      <div\n        className=\"hover:bg-accent flex h-8 w-full flex-shrink-0 cursor-pointer items-center px-2 text-base hover:rounded\"\n        onClick={() => setShowPreview(!showPreview)}\n      >\n        <span className=\"flex-shrink-0\">Preview in viewport</span>\n        <Switch\n          className=\"ml-auto flex-shrink-0\"\n          checked={showPreview}\n          onCheckedChange={checked => {\n            setShowPreview(checked);\n\n            // When turning off preview, restore the current preset if one exists\n            if (!checked && currentPresetRef.current) {\n              handleSetWindowLevel(currentPresetRef.current, true);\n            }\n          }}\n        />\n      </div>\n\n      <AllInOneMenu.DividerItem />\n\n      <div className=\"h-[175px] flex-grow\">\n        <ScrollArea className=\"h-full w-full\">\n          <div className=\"p-1\">\n            {windowLevelPresets.map((preset, index) => (\n              <AllInOneMenu.Item\n                key={index}\n                label={preset.description}\n                secondaryLabel={`${preset.window} / ${preset.level}`}\n                useIconSpace={false}\n                onClick={() => {\n                  setCurrentPreset(preset);\n                  handleSetWindowLevel(preset, true);\n                  setPrePreviewPreset(null);\n                }}\n                onMouseEnter={() => {\n                  if (showPreviewRef.current) {\n                    if (!prePreviewPresetRef.current) {\n                      setPrePreviewPreset(currentPresetRef.current || preset);\n                    }\n                    handleSetWindowLevel(preset, true);\n                  }\n                }}\n                onMouseLeave={() => {\n                  if (showPreviewRef.current && prePreviewPresetRef.current) {\n                    handleSetWindowLevel(prePreviewPresetRef.current, true);\n                  }\n                }}\n              />\n            ))}\n          </div>\n        </ScrollArea>\n      </div>\n    </>\n  );\n}\n","import { Icons, FooterAction } from '@ohif/ui-next';\nimport React, { ReactElement, useState, useCallback } from 'react';\nimport { PresetDialog } from '@ohif/ui-next';\nimport { ViewportPreset, VolumeRenderingPresetsContentProps } from '../../types/ViewportPresets';\nimport { useSystem } from '@ohif/core';\n\ninterface Props extends VolumeRenderingPresetsContentProps {\n  hide: () => void;\n}\n\nexport function VolumeRenderingPresetsContent({ presets, viewportId, hide }: Props): ReactElement {\n  const { commandsManager } = useSystem();\n  const [searchValue, setSearchValue] = useState('');\n  const [selectedPreset, setSelectedPreset] = useState<ViewportPreset | null>(null);\n\n  const handleSearchChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n  }, []);\n\n  const handleApply = useCallback(\n    props => {\n      commandsManager.runCommand('setViewportPreset', {\n        ...props,\n      });\n    },\n    [commandsManager]\n  );\n\n  const filteredPresets = searchValue\n    ? presets.filter(preset => preset.name.toLowerCase().includes(searchValue.toLowerCase()))\n    : presets;\n\n  const formatLabel = (label: string, maxChars: number) => {\n    return label.length > maxChars ? `${label.slice(0, maxChars)}...` : label;\n  };\n\n  return (\n    <PresetDialog className=\"h-[500px]\">\n      <PresetDialog.PresetBody>\n        <PresetDialog.PresetFilter>\n          <PresetDialog.PresetSearch\n            value={searchValue}\n            onChange={handleSearchChange}\n            placeholder=\"Search all\"\n          />\n        </PresetDialog.PresetFilter>\n        <PresetDialog.PresetGrid>\n          {filteredPresets.map((preset, index) => (\n            <div\n              key={index}\n              className=\"flex cursor-pointer flex-col items-start\"\n              onClick={() => {\n                setSelectedPreset(preset);\n                handleApply({ preset: preset.name, viewportId });\n              }}\n            >\n              <Icons.ByName\n                name={preset.name}\n                className={\n                  selectedPreset?.name === preset.name\n                    ? 'border-highlight h-[75px] w-[95px] max-w-none rounded border-2'\n                    : 'hover:border-highlight h-[75px] w-[95px] max-w-none rounded border-2 border-black'\n                }\n              />\n              <label className=\"text-muted-foreground mt-1 text-left text-xs\">\n                {formatLabel(preset.name, 11)}\n              </label>\n            </div>\n          ))}\n        </PresetDialog.PresetGrid>\n      </PresetDialog.PresetBody>\n      <FooterAction className=\"mt-4 flex-shrink-0\">\n        <FooterAction.Right>\n          <FooterAction.Secondary onClick={hide}>Cancel</FooterAction.Secondary>\n        </FooterAction.Right>\n      </FooterAction>\n    </PresetDialog>\n  );\n}\n","import { AllInOneMenu } from '@ohif/ui-next';\nimport { Icons } from '@ohif/ui-next';\nimport React, { ReactElement } from 'react';\nimport { VolumeRenderingPresetsContent } from './VolumeRenderingPresetsContent';\nimport { useSystem } from '@ohif/core';\nimport { useViewportRendering } from '../../hooks/useViewportRendering';\n\nexport function VolumeRenderingPresets({ viewportId }: { viewportId?: string } = {}): ReactElement {\n  const { volumeRenderingPresets } = useViewportRendering(viewportId);\n  const { servicesManager } = useSystem();\n  const { uiDialogService } = servicesManager.services;\n\n  const onClickPresets = () => {\n    uiDialogService.show({\n      id: 'volume-rendering-presets',\n      content: VolumeRenderingPresetsContent,\n      title: 'Rendering Presets',\n      isDraggable: true,\n      contentProps: {\n        presets: volumeRenderingPresets,\n        viewportId,\n      },\n    });\n  };\n\n  return (\n    <AllInOneMenu.Item\n      label=\"Rendering Presets\"\n      icon={<Icons.VolumeRendering />}\n      rightIcon={<Icons.ByName name=\"action-new-dialog\" />}\n      onClick={onClickPresets}\n    />\n  );\n}\n","import React, { ReactElement, useCallback, useState, useEffect } from 'react';\nimport { VolumeRenderingQualityProps } from '../../types/ViewportPresets';\nimport { Numeric } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core';\n\nexport function VolumeRenderingQuality({\n  volumeRenderingQualityRange,\n  viewportId,\n}: VolumeRenderingQualityProps): ReactElement {\n  const { servicesManager, commandsManager } = useSystem();\n  const { cornerstoneViewportService } = servicesManager.services;\n  const { min, max, step } = volumeRenderingQualityRange;\n  const [quality, setQuality] = useState(null);\n\n  const onChange = useCallback(\n    (value: number) => {\n      commandsManager.runCommand('setVolumeRenderingQulaity', {\n        viewportId,\n        volumeQuality: value,\n      });\n      setQuality(value);\n    },\n    [commandsManager, viewportId]\n  );\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const mapper = actor.getMapper();\n    const image = mapper.getInputData();\n    const spacing = image.getSpacing();\n    const sampleDistance = mapper.getSampleDistance();\n    const averageSpacing = spacing.reduce((a, b) => a + b) / 3.0;\n    if (sampleDistance === averageSpacing) {\n      setQuality(1);\n    } else {\n      setQuality(Math.sqrt(averageSpacing / (sampleDistance * 0.5)));\n    }\n  }, [cornerstoneViewportService, viewportId]);\n\n  return (\n    <div className=\"my-1 mt-2 flex flex-col space-y-2\">\n      {quality !== null && (\n        <div className=\"w-full pl-2 pr-1\">\n          <Numeric.Container\n            mode=\"singleRange\"\n            min={min}\n            max={max}\n            step={step}\n            value={quality}\n            onChange={onChange}\n          >\n            <div className=\"flex flex-row items-center\">\n              <Numeric.Label className=\"w-16\">Quality</Numeric.Label>\n              <Numeric.SingleRange sliderClassName=\"mx-2 flex-grow\" />\n            </div>\n          </Numeric.Container>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState, useRef } from 'react';\nimport { VolumeShiftProps } from '../../types/ViewportPresets';\nimport { Numeric } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core';\n\nexport function VolumeShift({ viewportId }: VolumeShiftProps): ReactElement {\n  const { servicesManager, commandsManager } = useSystem();\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [minShift, setMinShift] = useState<number | null>(null);\n  const [maxShift, setMaxShift] = useState<number | null>(null);\n  const [shift, setShift] = useState<number | null>(\n    cornerstoneViewportService.getCornerstoneViewport(viewportId)?.shiftedBy || 0\n  );\n  const [step, setStep] = useState<number | null>(null);\n  const [isBlocking, setIsBlocking] = useState(false);\n\n  const prevShiftRef = useRef<number>(shift);\n\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  const { actor } = viewport.getActors()[0];\n  const ofun = actor.getProperty().getScalarOpacity(0);\n\n  useEffect(() => {\n    if (isBlocking) {\n      return;\n    }\n    const range = ofun.getRange();\n\n    const transferFunctionWidth = range[1] - range[0];\n\n    const minShift = -transferFunctionWidth;\n    const maxShift = transferFunctionWidth;\n\n    setMinShift(minShift);\n    setMaxShift(maxShift);\n    setStep(Math.pow(10, Math.floor(Math.log10(transferFunctionWidth / 500))));\n  }, [cornerstoneViewportService, viewportId, actor, ofun, isBlocking]);\n\n  const onChangeRange = useCallback(\n    newShift => {\n      const shiftDifference = newShift - prevShiftRef.current;\n      prevShiftRef.current = newShift;\n      viewport.shiftedBy = newShift;\n      commandsManager.runCommand('shiftVolumeOpacityPoints', {\n        viewportId,\n        shift: shiftDifference,\n      });\n      setShift(newShift);\n    },\n    [commandsManager, viewportId, viewport]\n  );\n\n  return (\n    <div className=\"my-1 mt-2 flex flex-col space-y-2\">\n      {step !== null && minShift !== null && maxShift !== null && (\n        <div className=\"w-full pl-2 pr-1\">\n          <Numeric.Container\n            mode=\"singleRange\"\n            min={minShift}\n            max={maxShift}\n            step={step}\n            value={shift}\n            onChange={onChangeRange}\n            onMouseDown={() => setIsBlocking(true)}\n            onMouseUp={() => setIsBlocking(false)}\n          >\n            <div className=\"flex flex-row items-center\">\n              <Numeric.Label className=\"w-16\">Shift</Numeric.Label>\n              <Numeric.SingleRange sliderClassName=\"mx-2 flex-grow\" />\n            </div>\n          </Numeric.Container>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { ReactElement, useState, useEffect, useCallback } from 'react';\nimport { VolumeLightingProps } from '../../types/ViewportPresets';\nimport { Numeric } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core';\n\nexport function VolumeLighting({ viewportId, hasShade }: VolumeLightingProps): ReactElement {\n  const { servicesManager, commandsManager } = useSystem();\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [lightingValues, setLightingValues] = useState({\n    ambient: null,\n    diffuse: null,\n    specular: null,\n  });\n\n  // Single callback to handle all lighting property changes\n  const onLightingChange = useCallback(\n    (property, value) => {\n      commandsManager.runCommand('setVolumeLighting', {\n        viewportId,\n        options: { [property]: value },\n      });\n      setLightingValues(prev => ({\n        ...prev,\n        [property]: value,\n      }));\n    },\n    [commandsManager, viewportId]\n  );\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const property = actor.getProperty();\n\n    const values = {\n      ambient: property.getAmbient(),\n      diffuse: property.getDiffuse(),\n      specular: property.getSpecular(),\n    };\n\n    setLightingValues(values);\n  }, [viewportId, cornerstoneViewportService]);\n\n  const disableOption = hasShade ? '' : 'ohif-disabled !opacity-40';\n\n  // Configuration for our lighting properties\n  const lightingProperties = [\n    { key: 'ambient', label: 'Ambient' },\n    { key: 'diffuse', label: 'Diffuse' },\n    { key: 'specular', label: 'Specular' },\n  ];\n\n  return (\n    <div className=\"my-1 mt-2 flex flex-col space-y-2\">\n      {lightingProperties.map(\n        ({ key, label }) =>\n          lightingValues[key] !== null && (\n            <div\n              key={key}\n              className={`w-full pl-2 pr-1 ${disableOption}`}\n            >\n              <Numeric.Container\n                mode=\"singleRange\"\n                min={0}\n                max={1}\n                step={0.1}\n                value={lightingValues[key]}\n                onChange={value => onLightingChange(key, value)}\n              >\n                <div className=\"flex flex-row items-center\">\n                  <Numeric.Label className=\"w-16\">{label}</Numeric.Label>\n                  <Numeric.SingleRange sliderClassName=\"mx-2 flex-grow\" />\n                </div>\n              </Numeric.Container>\n            </div>\n          )\n      )}\n    </div>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { Switch } from '@ohif/ui-next';\nimport { VolumeShadeProps } from '../../types/ViewportPresets';\nimport { useSystem } from '@ohif/core';\n\nexport function VolumeShade({\n  viewportId,\n  onClickShade = bool => {},\n}: VolumeShadeProps): ReactElement {\n  const { servicesManager, commandsManager } = useSystem();\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [shade, setShade] = useState(true);\n  const [key, setKey] = useState(0);\n\n  const onShadeChange = useCallback(\n    (checked: boolean) => {\n      commandsManager.runCommand('setVolumeLighting', { viewportId, options: { shade: checked } });\n    },\n    [commandsManager, viewportId]\n  );\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const shade = actor.getProperty().getShade();\n    setShade(shade);\n    onClickShade(shade);\n    setKey(key + 1);\n  }, [viewportId, cornerstoneViewportService]);\n\n  return (\n    <>\n      <span className=\"flex-grow\">Shade</span>\n      <Switch\n        className=\"ml-2 flex-shrink-0\"\n        key={key}\n        checked={shade}\n        onCheckedChange={() => {\n          setShade(!shade);\n          onClickShade(!shade);\n          onShadeChange(!shade);\n        }}\n      />\n    </>\n  );\n}\n","import React, { ReactElement, useState } from 'react';\nimport { AllInOneMenu } from '@ohif/ui-next';\nimport { VolumeRenderingQuality } from './VolumeRenderingQuality';\nimport { VolumeShift } from './VolumeShift';\nimport { VolumeLighting } from './VolumeLighting';\nimport { VolumeShade } from './VolumeShade';\nimport { useViewportRendering } from '../../hooks/useViewportRendering';\n\nexport function VolumeRenderingOptions({ viewportId }: { viewportId?: string } = {}): ReactElement {\n  const { volumeRenderingQualityRange } = useViewportRendering(viewportId);\n  const [hasShade, setShade] = useState(false);\n  return (\n    <AllInOneMenu.ItemPanel>\n      <VolumeRenderingQuality\n        viewportId={viewportId}\n        volumeRenderingQualityRange={volumeRenderingQualityRange}\n      />\n      <VolumeShift viewportId={viewportId} />\n      <div className=\"mt-2 flex h-8 !h-[20px] w-full flex-shrink-0 items-center justify-start px-2 text-base\">\n        <div className=\"text-muted-foreground text-sm\">Lighting</div>\n      </div>\n      <div className=\"bg-background mt-1 mb-1 h-px w-full\"></div>\n      <div className=\"hover:bg-accent flex h-8 w-full flex-shrink-0 items-center px-2 text-base hover:rounded\">\n        <VolumeShade\n          viewportId={viewportId}\n          onClickShade={setShade}\n        />\n      </div>\n      <VolumeLighting\n        viewportId={viewportId}\n        hasShade={hasShade}\n      />\n    </AllInOneMenu.ItemPanel>\n  );\n}\n","import React, { ReactElement, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AllInOneMenu } from '@ohif/ui-next';\nimport { Colormap } from './Colormap';\nimport { Colorbar } from './Colorbar';\nimport { WindowLevel } from './WindowLevel';\nimport { VolumeRenderingPresets } from './VolumeRenderingPresets';\nimport { VolumeRenderingOptions } from './VolumeRenderingOptions';\nimport { useViewportRendering } from '../../hooks/useViewportRendering';\n\nexport type WindowLevelActionMenuProps = {\n  viewportId: string;\n  element?: HTMLElement;\n  align?: 'start' | 'end' | 'center';\n  side?: 'top' | 'bottom' | 'left' | 'right';\n};\n\nexport function WindowLevelActionMenu({\n  viewportId,\n  element,\n  align,\n  side,\n}: WindowLevelActionMenuProps): ReactElement {\n  return (\n    <WindowLevelActionMenuContent\n      viewportId={viewportId}\n      align={align}\n      side={side}\n    />\n  );\n}\n\nexport function WindowLevelActionMenuContent({\n  viewportId,\n  align,\n  side,\n}: {\n  viewportId: string;\n  align?: string;\n  side?: string;\n}): ReactElement {\n  const { t } = useTranslation('WindowLevelActionMenu');\n  // Use a stable key for the menu to avoid infinite re-renders\n  const menuKey = useMemo(() => `${viewportId}`, [viewportId]);\n\n  const {\n    is3DVolume,\n    colorbarProperties,\n    windowLevelPresets,\n    volumeRenderingPresets,\n    volumeRenderingQualityRange,\n  } = useViewportRendering(viewportId);\n\n  return (\n    <AllInOneMenu.Menu\n      key={menuKey}\n      // the visibility is handled by the parent component\n      isVisible={true}\n      align={align}\n      side={side}\n    >\n      <AllInOneMenu.ItemPanel>\n        {!is3DVolume && <Colorbar viewportId={viewportId} />}\n\n        {colorbarProperties?.colormaps && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"colorLUTPresets\"\n            itemLabel=\"Color LUT\"\n            itemIcon=\"icon-color-lut\"\n            className=\"flex h-[calc(100%-32px)] flex-col\"\n          >\n            <Colormap viewportId={viewportId} />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {windowLevelPresets?.length > 0 && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"windowLevelPresets\"\n            itemLabel={t('Modality Window Presets')}\n            itemIcon=\"viewport-window-level\"\n          >\n            <WindowLevel viewportId={viewportId} />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {volumeRenderingPresets && is3DVolume && <VolumeRenderingPresets viewportId={viewportId} />}\n\n        {volumeRenderingQualityRange && is3DVolume && (\n          <AllInOneMenu.SubMenu itemLabel=\"Rendering Options\">\n            <VolumeRenderingOptions viewportId={viewportId} />\n          </AllInOneMenu.SubMenu>\n        )}\n      </AllInOneMenu.ItemPanel>\n    </AllInOneMenu.Menu>\n  );\n}\n","import React, { ReactNode } from 'react';\nimport { useSystem } from '@ohif/core';\nimport {\n  Button,\n  Icons,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  useViewportGrid,\n  useIconPresentation,\n} from '@ohif/ui-next';\nimport { WindowLevelActionMenu } from './WindowLevelActionMenu';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\nimport { useViewportRendering } from '../../hooks';\n\nexport function WindowLevelActionMenuWrapper(\n  props: withAppTypes<{\n    viewportId: string;\n    element?: HTMLElement;\n    location?: number;\n    isOpen?: boolean;\n    onOpen?: () => void;\n    onClose?: () => void;\n    displaySets?: Array<AppTypes.DisplaySet>;\n    disabled?: boolean;\n    isEmbedded?: boolean;\n  }>\n): ReactNode {\n  const {\n    viewportId,\n    element,\n    location,\n    isOpen = false,\n    onOpen,\n    onClose,\n    disabled,\n    isEmbedded = false,\n    onInteraction: onInteractionProps,\n    hasEmbeddedVariantToUse,\n    ...rest\n  } = props;\n\n  const [gridState] = useViewportGrid();\n  const viewportIdToUse = viewportId || gridState.activeViewportId;\n\n  const { viewportDisplaySets: displaySets } = useViewportDisplaySets(viewportIdToUse);\n  const { servicesManager } = useSystem();\n  const { toolbarService } = servicesManager.services;\n  const { IconContainer, className: iconClassName, containerProps } = useIconPresentation();\n  const { hasColorbar, toggleColorbar } = useViewportRendering(viewportId);\n\n  const handleOpenChange = (openState: boolean) => {\n    const shouldToggleColorbar = hasColorbar && !isEmbedded;\n\n    if (isOpen && shouldToggleColorbar && openState) {\n      toggleColorbar();\n      onClose?.();\n      return;\n    }\n\n    if (!isOpen && openState && shouldToggleColorbar) {\n      toggleColorbar();\n      return;\n    }\n\n    if (openState) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  };\n\n  const { align, side } = toolbarService.getAlignAndSide(location);\n\n  const modalities = displaySets.map(displaySet => displaySet.supportsWindowLevel);\n\n  if (modalities.length === 0) {\n    return null;\n  }\n\n  const Icon =\n    hasColorbar && !isEmbedded && hasEmbeddedVariantToUse ? (\n      <Icons.Close className={iconClassName} />\n    ) : (\n      <Icons.ViewportWindowLevel className={iconClassName} />\n    );\n\n  return (\n    <Popover\n      open={isOpen}\n      onOpenChange={handleOpenChange}\n    >\n      <PopoverTrigger\n        asChild\n        className=\"flex items-center justify-center\"\n      >\n        <div>\n          {IconContainer ? (\n            <IconContainer\n              disabled={disabled}\n              {...rest}\n              {...containerProps}\n            >\n              {Icon}\n            </IconContainer>\n          ) : (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled={disabled}\n            >\n              {Icon}\n            </Button>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"border-none bg-transparent p-0 shadow-none\"\n        side={side}\n        align={align}\n        alignOffset={0}\n        sideOffset={5}\n      >\n        <WindowLevelActionMenu\n          viewportId={viewportIdToUse}\n          element={element}\n          align={align}\n          side={side}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  Numeric,\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from '@ohif/ui-next';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\nimport { useViewportRendering } from '../../hooks/useViewportRendering';\nimport { useSystem } from '@ohif/core';\nimport { cache } from '@cornerstonejs/core';\n\ninterface VOIManualControlMenuProps {\n  viewportId: string;\n  className?: string;\n}\n\nconst TABS = {\n  MINMAX: 'minmax',\n  MANUAL: 'manual',\n};\n\nfunction VOIManualControlMenu({ viewportId, className }: VOIManualControlMenuProps) {\n  const { servicesManager } = useSystem();\n  const { displaySetService } = servicesManager.services;\n  const [activeTab, setActiveTab] = useState(TABS.MINMAX);\n  const { viewportDisplaySets } = useViewportDisplaySets(viewportId);\n  const [selectedDisplaySetUID, setSelectedDisplaySetUID] = useState<string | undefined>(\n    viewportDisplaySets.length > 0 ? viewportDisplaySets[0].displaySetInstanceUID : undefined\n  );\n\n  const { voiRange, setVOIRange, windowLevel, setWindowLevel } = useViewportRendering(viewportId, {\n    displaySetInstanceUID: selectedDisplaySetUID,\n  });\n\n  useEffect(() => {\n    if (viewportDisplaySets.length > 0 && !selectedDisplaySetUID) {\n      setSelectedDisplaySetUID(viewportDisplaySets[0].displaySetInstanceUID);\n    }\n  }, [viewportDisplaySets, selectedDisplaySetUID]);\n\n  if (!voiRange) {\n    return null;\n  }\n\n  const { upper, lower } = voiRange;\n  const { windowWidth, windowCenter } = windowLevel;\n\n  const selectedViewportImageIds =\n    displaySetService.getDisplaySetByUID(selectedDisplaySetUID)?.imageIds;\n\n  let min = Infinity;\n  let max = -Infinity;\n\n  if (selectedViewportImageIds) {\n    for (const imageId of selectedViewportImageIds) {\n      const image = cache.getImage(imageId);\n      if (image) {\n        min = Math.min(min, image.minPixelValue);\n        max = Math.max(max, image.maxPixelValue);\n      }\n    }\n  }\n\n  // Provide reasonable defaults if min/max couldn't be determined\n  if (min === Infinity || max === -Infinity) {\n    min = 0;\n    max = 255;\n  }\n\n  const selectedDisplaySet = viewportDisplaySets.find(\n    ds => ds.displaySetInstanceUID === selectedDisplaySetUID\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"bg-popover w-72 rounded-lg p-4 shadow-md\">\n        <Tabs\n          defaultValue={activeTab}\n          onValueChange={setActiveTab}\n        >\n          <div className=\"mb-4 flex items-center space-x-2\">\n            {viewportDisplaySets.length > 1 && (\n              <Select\n                value={selectedDisplaySetUID}\n                onValueChange={setSelectedDisplaySetUID}\n              >\n                <SelectTrigger>\n                  <SelectValue>{selectedDisplaySet?.label || 'Select Display Set'}</SelectValue>\n                </SelectTrigger>\n                <SelectContent>\n                  {viewportDisplaySets.map(ds => (\n                    <SelectItem\n                      key={ds.displaySetInstanceUID}\n                      value={ds.displaySetInstanceUID}\n                    >\n                      {`${ds.SeriesDescription || ''}`.trim()}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n            <TabsList className=\"w-full flex-1\">\n              <TabsTrigger\n                value={TABS.MINMAX}\n                className=\"flex-1\"\n              >\n                Min/Max\n              </TabsTrigger>\n              <TabsTrigger\n                value={TABS.MANUAL}\n                className=\"flex-1\"\n              >\n                Manual\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value={TABS.MINMAX}>\n            <Numeric.Container\n              mode=\"doubleRange\"\n              min={min}\n              max={max}\n              values={[lower, upper]}\n              step={1}\n              className=\"space-y-1\"\n              onChange={(vals: [number, number]) => {\n                const [newLower, newUpper] = vals;\n                if (newLower !== lower || newUpper !== upper) {\n                  setVOIRange({ lower: newLower, upper: newUpper });\n                }\n              }}\n            >\n              <Numeric.DoubleRange showNumberInputs />\n            </Numeric.Container>\n          </TabsContent>\n          <TabsContent value={TABS.MANUAL}>\n            <div className=\"space-y-1\">\n              <Numeric.Container\n                mode=\"singleRange\"\n                min={0}\n                max={max}\n                step={1}\n                value={windowWidth}\n                className=\"space-y-1\"\n                onChange={(val: number) => {\n                  if (val !== windowWidth) {\n                    setWindowLevel({ windowWidth: val, windowCenter });\n                  }\n                }}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <Numeric.Label>W:</Numeric.Label>\n                  <Numeric.SingleRange showNumberInput />\n                </div>\n              </Numeric.Container>\n\n              <Numeric.Container\n                mode=\"singleRange\"\n                min={min}\n                max={max}\n                step={1}\n                value={windowCenter}\n                className=\"space-y-1\"\n                onChange={(val: number) => {\n                  if (val !== windowCenter) {\n                    setWindowLevel({ windowWidth, windowCenter: val });\n                  }\n                }}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <Numeric.Label>L:</Numeric.Label>\n                  <Numeric.SingleRange showNumberInput />\n                </div>\n              </Numeric.Container>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nexport default VOIManualControlMenu;\n","import React, { ReactNode } from 'react';\nimport { useSystem } from '@ohif/core';\nimport {\n  Button,\n  Icons,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  useIconPresentation,\n} from '@ohif/ui-next';\nimport VOIManualControlMenu from './VOIManualControlMenu';\n\ntype VOIManualControlMenuWrapperProps = {\n  viewportId: string;\n  location: string;\n  isOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  disabled?: boolean;\n};\n\nexport function VOIManualControlMenuWrapper(props: VOIManualControlMenuWrapperProps): ReactNode {\n  const { viewportId, location, isOpen = false, onOpen, onClose, disabled, ...rest } = props;\n  const { IconContainer, className: iconClassName, containerProps } = useIconPresentation();\n\n  const handleOpenChange = (openState: boolean) => {\n    if (openState) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  };\n\n  const { servicesManager } = useSystem();\n  const { toolbarService } = servicesManager.services;\n\n  const { align, side } = toolbarService.getAlignAndSide(location);\n\n  const Icon = <Icons.WindowLevelAdvanced className={iconClassName} />;\n\n  return (\n    <Popover\n      open={isOpen}\n      onOpenChange={handleOpenChange}\n    >\n      <PopoverTrigger\n        asChild\n        className=\"flex items-center justify-center\"\n      >\n        <div>\n          {IconContainer ? (\n            <IconContainer\n              disabled={disabled}\n              icon=\"WindowLevelAdvanced\"\n              {...rest}\n              {...containerProps}\n            >\n              {Icon}\n            </IconContainer>\n          ) : (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled={disabled}\n            >\n              {Icon}\n            </Button>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"border-none bg-transparent p-0 shadow-none\"\n        side={side}\n        align={align}\n        alignOffset={0}\n        sideOffset={5}\n      >\n        <VOIManualControlMenu\n          className=\"w-full\"\n          viewportId={viewportId}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Numeric,\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n  Button,\n} from '@ohif/ui-next';\nimport { useViewportRendering } from '../../hooks';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\nimport SelectItemWithModality from '../SelectItemWithModality';\n\ninterface ThresholdMenuProps {\n  viewportId: string;\n  className?: string;\n}\n\nfunction ThresholdMenu({ viewportId, className }: ThresholdMenuProps) {\n  const { viewportDisplaySets, foregroundDisplaySets } = useViewportDisplaySets(viewportId);\n  const [selectedDisplaySetUID, setSelectedDisplaySetUID] = useState<string | undefined>(\n    foregroundDisplaySets.length > 0 ? foregroundDisplaySets[0].displaySetInstanceUID : undefined\n  );\n\n  const { threshold, setThreshold, pixelValueRange } = useViewportRendering(viewportId, {\n    displaySetInstanceUID: selectedDisplaySetUID,\n  });\n\n  const { min, max } = pixelValueRange;\n  const thresholdValue = threshold ?? min;\n\n  useEffect(() => {\n    if (foregroundDisplaySets.length > 0 && !selectedDisplaySetUID) {\n      setSelectedDisplaySetUID(foregroundDisplaySets[0].displaySetInstanceUID);\n    }\n  }, [foregroundDisplaySets, selectedDisplaySetUID]);\n\n  const selectedDisplaySet = viewportDisplaySets.find(\n    ds => ds.displaySetInstanceUID === selectedDisplaySetUID\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"bg-popover w-72 rounded-lg p-4 shadow-md\">\n        <div className=\"mb-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-muted-foreground text-base\">Threshold</span>\n            {viewportDisplaySets.length > 1 && (\n              <div className=\"w-32\">\n                <Select\n                  value={selectedDisplaySetUID}\n                  onValueChange={setSelectedDisplaySetUID}\n                >\n                  <SelectTrigger>\n                    <SelectValue>{selectedDisplaySet?.label || 'Select Display Set'}</SelectValue>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {viewportDisplaySets.map(ds => (\n                      <SelectItem\n                        key={ds.displaySetInstanceUID}\n                        value={ds.displaySetInstanceUID}\n                      >\n                        <SelectItemWithModality displaySet={ds} />\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setThreshold(min)}\n            className=\"text-sm\"\n          >\n            Reset\n          </Button>\n        </div>\n        <Numeric.Container\n          mode=\"singleRange\"\n          value={thresholdValue}\n          onChange={(val: number | [number, number]) => {\n            if (typeof val === 'number') {\n              setThreshold(val);\n            }\n          }}\n          min={min}\n          max={max}\n          step={0.01}\n        >\n          <Numeric.SingleRange />\n          <div className=\"mt-1 flex justify-between\">\n            <span className=\"text-muted-foreground text-sm\">{min.toFixed(0)}</span>\n            <span className=\"text-muted-foreground text-sm\">{max.toFixed(0)}</span>\n          </div>\n        </Numeric.Container>\n      </div>\n    </div>\n  );\n}\n\nexport default ThresholdMenu;\n","import React, { ReactNode } from 'react';\nimport { useSystem } from '@ohif/core';\nimport {\n  Button,\n  Icons,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  useIconPresentation,\n} from '@ohif/ui-next';\nimport ThresholdMenu from './ThresholdMenu';\n\ntype ThresholdMenuWrapperProps = {\n  viewportId: string;\n  location: string;\n  isOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  disabled?: boolean;\n};\n\nexport function ThresholdMenuWrapper(props: ThresholdMenuWrapperProps): ReactNode {\n  const { viewportId, location, isOpen = false, onOpen, onClose, disabled, ...rest } = props;\n  const { IconContainer, className: iconClassName, containerProps } = useIconPresentation();\n\n  const handleOpenChange = (openState: boolean) => {\n    if (openState) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  };\n\n  const { servicesManager } = useSystem();\n  const { toolbarService } = servicesManager.services;\n\n  const { align, side } = toolbarService.getAlignAndSide(location);\n\n  const Icon = <Icons.Threshold className={iconClassName} />;\n\n  return (\n    <Popover\n      open={isOpen}\n      onOpenChange={handleOpenChange}\n    >\n      <PopoverTrigger\n        asChild\n        className=\"flex items-center justify-center\"\n      >\n        <div>\n          {IconContainer ? (\n            <IconContainer\n              disabled={disabled}\n              icon=\"Threshold\"\n              {...rest}\n              {...containerProps}\n            >\n              {Icon}\n            </IconContainer>\n          ) : (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled={disabled}\n            >\n              {Icon}\n            </Button>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"border-none bg-transparent p-0 shadow-none\"\n        side={side}\n        align={align}\n        alignOffset={0}\n        sideOffset={5}\n      >\n        <ThresholdMenu\n          className=\"w-full\"\n          viewportId={viewportId}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}","import React from 'react';\nimport { Numeric } from '@ohif/ui-next';\nimport { useViewportDisplaySets, useViewportRendering } from '../../hooks';\n\ninterface OpacityMenuProps {\n  viewportId: string;\n  className?: string;\n}\n\nfunction OpacityMenu({ viewportId, className }: OpacityMenuProps) {\n  const { backgroundDisplaySet, foregroundDisplaySets } = useViewportDisplaySets(viewportId, {\n    includeForeground: true,\n    includeBackground: true,\n  });\n  const { opacityLinear, setOpacityLinear } = useViewportRendering(viewportId, {\n    displaySetInstanceUID: foregroundDisplaySets[0].displaySetInstanceUID,\n  });\n\n  const opacityValue = opacityLinear !== undefined ? opacityLinear : 0;\n  const backgroundModality = backgroundDisplaySet?.Modality || '';\n  const foregroundModality = foregroundDisplaySets[0]?.Modality || '';\n\n  return (\n    <div className={className}>\n      <div className=\"bg-popover w-72 rounded-lg p-3\">\n        <div className=\"mb-2 flex items-center justify-center\">\n          <span className=\"text-muted-foreground text-base\">Opacity</span>\n        </div>\n        <div className=\"\">\n          <Numeric.Container\n            mode=\"singleRange\"\n            value={opacityValue}\n            onChange={(val: number | [number, number]) => {\n              if (typeof val === 'number') {\n                setOpacityLinear(val);\n              }\n            }}\n            min={0}\n            max={1}\n            step={0.0001}\n          >\n            <div className=\"flex items-center\">\n              <span className=\"text-foreground mr-2 text-sm\">{backgroundModality}</span>\n              <Numeric.SingleRange showNumberInput={false} />\n              <span className=\"text-foreground ml-2 text-sm\">{foregroundModality}</span>\n            </div>\n          </Numeric.Container>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default OpacityMenu;\n","import React, { ReactNode } from 'react';\nimport { useSystem } from '@ohif/core';\nimport {\n  Button,\n  Icons,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  useIconPresentation,\n} from '@ohif/ui-next';\nimport OpacityMenu from './OpacityMenu';\n\ntype OpacityMenuWrapperProps = {\n  viewportId: string;\n  location: string;\n  isOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  disabled?: boolean;\n};\n\nexport function OpacityMenuWrapper(props: OpacityMenuWrapperProps): ReactNode {\n  const { viewportId, location, isOpen = false, onOpen, onClose, disabled, ...rest } = props;\n  const { IconContainer, className: iconClassName, containerProps } = useIconPresentation();\n\n  const handleOpenChange = (openState: boolean) => {\n    if (openState) {\n      onOpen?.();\n    } else {\n      onClose?.();\n    }\n  };\n\n  const { servicesManager } = useSystem();\n  const { toolbarService } = servicesManager.services;\n\n  const { align, side } = toolbarService.getAlignAndSide(location);\n\n  const Icon = <Icons.Opacity className={iconClassName} />;\n\n  return (\n    <Popover\n      open={isOpen}\n      onOpenChange={handleOpenChange}\n    >\n      <PopoverTrigger\n        asChild\n        className=\"flex items-center justify-center\"\n      >\n        <div>\n          {IconContainer ? (\n            <IconContainer\n              disabled={disabled}\n              icon=\"Opacity\"\n              {...rest}\n              {...containerProps}\n            >\n              {Icon}\n            </IconContainer>\n          ) : (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled={disabled}\n            >\n              {Icon}\n            </Button>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"border-none bg-transparent p-0 shadow-none\"\n        side={side}\n        align={align}\n        alignOffset={0}\n        sideOffset={5}\n      >\n        <OpacityMenu\n          className=\"w-full\"\n          viewportId={viewportId}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}","import React, { useMemo, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ViewportActionButton } from '@ohif/ui-next';\nimport { Icons, Tooltip, TooltipTrigger, TooltipContent } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core/src';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\nimport { useMeasurementTracking } from '../../hooks/useMeasurementTracking';\n\n/**\n * ModalityLoadBadge displays the status and actionable buttons for viewports containing\n * special displaySets (SR, SEG, RTSTRUCT) or when tracking measurements\n */\nfunction ModalityLoadBadge({ viewportId }: { viewportId: string }) {\n  const { commandsManager } = useSystem();\n  const { t } = useTranslation('Common');\n  const loadStr = t('LOAD');\n\n  const { isTracked, isLocked } = useMeasurementTracking({ viewportId });\n\n  const { backgroundDisplaySet } = useViewportDisplaySets(viewportId);\n\n  const [specialDisplaySet, setSpecialDisplaySet] = useState(null);\n\n  const allDisplaySets = useMemo(() => {\n    return [backgroundDisplaySet].filter(Boolean);\n  }, [backgroundDisplaySet]);\n\n  useEffect(() => {\n    const displaySet = allDisplaySets.find(ds => ds.isOverlayDisplaySet || ds?.Modality === 'SR');\n\n    setSpecialDisplaySet(displaySet || null);\n  }, [allDisplaySets]);\n\n  const statusInfo = useMemo(() => {\n    if (isTracked && !specialDisplaySet) {\n      return {\n        type: 'SR',\n        isHydrated: true,\n        isTracked,\n        displaySet: null,\n        tooltip: 'Currently tracking measurements in this viewport',\n      };\n    }\n\n    if (!specialDisplaySet) {\n      return {\n        type: null,\n      };\n    }\n\n    const type = specialDisplaySet.Modality;\n    const isHydrated = specialDisplaySet.isHydrated || false;\n    let tooltip = null;\n    const isRehydratable = specialDisplaySet.isRehydratable || false;\n\n    if (type === 'SEG') {\n      tooltip = isHydrated\n        ? 'This Segmentation is loaded in the segmentation panel'\n        : 'Click LOAD to load segmentation.';\n    } else if (type === 'RTSTRUCT') {\n      tooltip = isHydrated\n        ? 'This RTSTRUCT is loaded in the segmentation panel'\n        : 'Click LOAD to load RTSTRUCT.';\n    } else if (type === 'SR') {\n      if (!isRehydratable) {\n        tooltip = 'This structured report is not compatible with this application.';\n      } else if (isRehydratable && isLocked) {\n        tooltip =\n          'This structured report is currently read-only because you are tracking measurements in another viewport.';\n      } else {\n        tooltip = `Click ${loadStr} to restore measurements.`;\n      }\n    }\n\n    return {\n      type,\n      isHydrated,\n      displaySet: specialDisplaySet,\n      isRehydratable,\n      tooltip,\n    };\n  }, [specialDisplaySet, loadStr, isLocked, isTracked]);\n\n  // Nothing to show if there's no special display set type or tracking\n  if (!statusInfo.type && !isTracked) {\n    return null;\n  }\n\n  const StatusIcon = () => {\n    if (statusInfo.type === 'SR') {\n      if (statusInfo.isRehydratable && !isLocked) {\n        return (\n          <Icons.ByName\n            className=\"text-muted-foreground h-4 w-4\"\n            name=\"status-untracked\"\n          />\n        );\n      }\n\n      if (statusInfo.isRehydratable && isLocked) {\n        return (\n          <Icons.ByName\n            name=\"status-locked\"\n            className=\"h-4 w-4\"\n          />\n        );\n      } else {\n        return (\n          <Icons.ByName\n            name=\"status-alert\"\n            className=\"h-4 w-4\"\n          />\n        );\n      }\n    } else {\n      return <Icons.StatusUntracked className=\"h-4 w-4\" />;\n    }\n  };\n\n  const StatusArea = () => {\n    if (!statusInfo.isHydrated) {\n      return (\n        <div\n          data-cy={`ModalityLoadBadge-${viewportId}`}\n          className=\"flex h-6 cursor-default text-sm leading-6 text-white\"\n        >\n          <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\n            <StatusIcon />\n            <span className=\"ml-1\">{statusInfo.type}</span>\n          </div>\n          {/* We don't show the load button for SRs because we handle it in the SR extension\n          via the tracked measurement context that works with state machine, this is not a regression right now  */}\n          {statusInfo.type !== 'SR' && (\n            <ViewportActionButton\n              onInteraction={() => {\n                commandsManager.runCommand('hydrateSecondaryDisplaySet', {\n                  displaySet: statusInfo.displaySet,\n                  viewportId,\n                });\n              }}\n            >\n              {loadStr}\n            </ViewportActionButton>\n          )}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <>\n      {statusInfo.tooltip && (\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <span>\n              <StatusArea />\n            </span>\n          </TooltipTrigger>\n          <TooltipContent side=\"bottom\">\n            <div>{statusInfo.tooltip}</div>\n          </TooltipContent>\n        </Tooltip>\n      )}\n      {!statusInfo.tooltip && <StatusArea />}\n    </>\n  );\n}\n\nexport default ModalityLoadBadge;\n","import React, { useCallback, useState } from 'react';\nimport { ViewportActionArrows } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core/src';\nimport { utils } from '../..';\nimport { useViewportSegmentations } from '../../hooks';\nimport { useMeasurementTracking } from '../../hooks/useMeasurementTracking';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\n\n/**\n * NavigationComponent provides navigation controls for viewports containing\n * special displaySets (SR, SEG, RTSTRUCT) to navigate between segments or measurements\n */\nfunction NavigationComponent({ viewportId }: { viewportId: string }) {\n  const { servicesManager } = useSystem();\n  const { segmentationService, cornerstoneViewportService, measurementService } =\n    servicesManager.services;\n\n  // Get tracking information\n  const { isTracked, trackedMeasurementUIDs } = useMeasurementTracking({ viewportId });\n  const { viewportDisplaySets } = useViewportDisplaySets(viewportId);\n  const [measurementSelected, setMeasurementSelected] = useState(0);\n  const isSRDisplaySet = viewportDisplaySets.some(displaySet => displaySet?.Modality === 'SR');\n  const cornerstoneViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n  // Get segmentation information\n  const { segmentationsWithRepresentations } = useViewportSegmentations({\n    viewportId,\n  });\n\n  const hasSegmentations = segmentationsWithRepresentations.length > 0;\n\n  // prefer segment navigation if available\n  const navigationMode = hasSegmentations\n    ? 'segment'\n    : isSRDisplaySet\n      ? 'measurement'\n      : isTracked\n        ? 'measurement'\n        : null;\n\n  const handleMeasurementNavigation = useCallback(\n    (direction: number) => {\n      const measurementDisplaySet = viewportDisplaySets.find(\n        displaySet => displaySet?.Modality === 'SR'\n      );\n\n      if (measurementDisplaySet) {\n        const measurements = measurementDisplaySet.measurements;\n        if (measurements.length <= 0) {\n          return;\n        }\n\n        const newIndex = getNextIndex(measurementSelected, direction, measurements.length);\n        setMeasurementSelected(newIndex);\n\n        const measurement = measurements[newIndex];\n        cornerstoneViewport.setViewReference({\n          referencedImageId: measurement.imageId,\n        });\n        return;\n      }\n\n      if (isTracked && trackedMeasurementUIDs.length > 0) {\n        const newIndex = getNextIndex(\n          measurementSelected,\n          direction,\n          trackedMeasurementUIDs.length\n        );\n        setMeasurementSelected(newIndex);\n        measurementService.jumpToMeasurement(viewportId, trackedMeasurementUIDs[newIndex]);\n      }\n    },\n    [\n      viewportId,\n      cornerstoneViewport,\n      measurementSelected,\n      measurementService,\n      isTracked,\n      trackedMeasurementUIDs,\n      viewportDisplaySets,\n    ]\n  );\n\n  const handleSegmentNavigation = useCallback(\n    (direction: number) => {\n      if (!segmentationsWithRepresentations.length) {\n        return;\n      }\n\n      const segmentationId = segmentationsWithRepresentations[0].segmentation.segmentationId;\n\n      utils.handleSegmentChange({\n        direction,\n        segmentationId,\n        viewportId,\n        selectedSegmentObjectIndex: 0,\n        segmentationService,\n      });\n    },\n    [segmentationsWithRepresentations, viewportId, segmentationService]\n  );\n\n  // Handle navigation between segments/measurements\n  const handleNavigate = useCallback(\n    (direction: number) => {\n      if (navigationMode === 'segment') {\n        handleSegmentNavigation(direction);\n      } else if (navigationMode === 'measurement') {\n        handleMeasurementNavigation(direction);\n      }\n    },\n    [navigationMode, handleSegmentNavigation, handleMeasurementNavigation]\n  );\n\n  // Only render if we have a navigation mode\n  if (!navigationMode) {\n    return null;\n  }\n\n  return (\n    <ViewportActionArrows\n      onArrowsClick={handleNavigate}\n      className=\"h-6\"\n    />\n  );\n}\n\n/**\n * Calculate the next index with circular navigation support\n * @param currentIndex Current index position\n * @param direction Direction of movement (1 for next, -1 for previous)\n * @param totalItems Total number of items to navigate through\n * @returns The next index with wrap-around support\n */\nfunction getNextIndex(currentIndex: number, direction: number, totalItems: number): number {\n  if (totalItems <= 0) {\n    return 0;\n  }\n\n  // Use modulo to handle circular navigation\n  let nextIndex = (currentIndex + direction) % totalItems;\n\n  // Handle negative index when going backwards from index 0\n  if (nextIndex < 0) {\n    nextIndex = totalItems - 1;\n  }\n\n  return nextIndex;\n}\n\nexport default NavigationComponent;\n","import React from 'react';\nimport { Icons, Tooltip, TooltipTrigger, TooltipContent } from '@ohif/ui-next';\nimport { useMeasurementTracking } from '../../hooks/useMeasurementTracking';\n\n/**\n * TrackingStatus displays an indicator icon for viewports that have\n * tracked measurements\n */\nfunction TrackingStatus({ viewportId }: { viewportId: string }) {\n  const { isTracked } = useMeasurementTracking({ viewportId });\n\n  if (!isTracked) {\n    return null;\n  }\n\n  return (\n    <>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <span>\n            <Icons.StatusTracking className=\"h-4 w-4\" />\n          </span>\n        </TooltipTrigger>\n        <TooltipContent side=\"bottom\">\n          <div>Tracking</div>\n        </TooltipContent>\n      </Tooltip>\n    </>\n  );\n}\n\nexport default TrackingStatus;\n","import React, { useEffect, useRef, useMemo, memo } from 'react';\nimport { utilities } from '@cornerstonejs/tools';\nimport { useSystem, useViewportRef, useViewportSize } from '@ohif/core';\nimport {\n  ColorbarPositionType,\n  TickPositionType,\n  ColorbarCustomization,\n  TickStyleType,\n  ContainerStyleType,\n} from '../../types/Colorbar';\nimport { ColorbarRangeTextPosition } from '@cornerstonejs/tools/utilities/voi/colorbar/enums/ColorbarRangeTextPosition';\n\nconst { ViewportColorbar: CornerstoneViewportColorbar } = utilities.voi.colorbar;\n\ntype ColorbarProps = {\n  viewportId: string;\n  displaySetInstanceUID: string;\n  colormap?: any;\n  colormaps: any[];\n  activeColormapName: string;\n  volumeId?: string;\n  position: ColorbarPositionType;\n  tickPosition: TickPositionType;\n  tickStyles?: TickStyleType;\n  containerStyles?: ContainerStyleType;\n  viewportElementRef?: React.RefObject<HTMLDivElement>;\n  numColorbars: number;\n};\n\nexport const isHorizontal = (position: ColorbarPositionType): boolean =>\n  position === 'top' || position === 'bottom';\n\n/**\n * ViewportColorbar Component\n * A React wrapper for the cornerstone ViewportColorbar that adds a close button\n * positioned appropriately based on the colorbar position.\n */\nconst ViewportColorbar = memo(function ViewportColorbar({\n  viewportId,\n  displaySetInstanceUID,\n  colormaps,\n  activeColormapName,\n  volumeId,\n  position,\n  tickPosition,\n  tickStyles,\n  numColorbars,\n}: ColorbarProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { servicesManager } = useSystem();\n  const { customizationService } = servicesManager.services;\n  const viewportElementRef = useViewportRef(viewportId);\n  const { height, width } = useViewportSize(viewportId);\n\n  // Memoize colorbar customization to prevent rerenders from unrelated customization changes\n  const colorbarCustomization = useMemo(() => {\n    return customizationService.getCustomization(\n      'cornerstone.colorbar'\n    ) as unknown as ColorbarCustomization;\n  }, [customizationService]);\n\n  const appropriateTickPosition = useMemo(() => {\n    let tickPos = tickPosition;\n    if (position === 'left' || position === 'right') {\n      tickPos = position === 'left' ? 'right' : 'left';\n    } else {\n      tickPos = position === 'top' ? 'bottom' : 'top';\n    }\n    return tickPos;\n  }, [position, tickPosition]);\n\n  const positionTickStyles = useMemo(() => {\n    return colorbarCustomization?.positionTickStyles?.[position];\n  }, [colorbarCustomization, position]);\n\n  const positionStylesFromConfig = useMemo(() => {\n    return colorbarCustomization?.positionStyles?.[position] || {};\n  }, [colorbarCustomization, position]);\n\n  const mergedTickStyles = useMemo(() => {\n    return {\n      ...(colorbarCustomization?.tickStyles || {}),\n      ...(positionTickStyles?.style || {}),\n      ...(tickStyles || {}),\n    };\n  }, [colorbarCustomization, positionTickStyles, tickStyles]);\n\n  const colorbarId = useMemo(() => {\n    return `Colorbar-${viewportId}-${displaySetInstanceUID}`;\n  }, [viewportId, displaySetInstanceUID]);\n\n  useEffect(() => {\n    if (!containerRef.current || !colormaps || !activeColormapName) {\n      return;\n    }\n\n    const viewportElement = viewportElementRef?.current;\n\n    if (!viewportElement || !colormaps?.length) {\n      return;\n    }\n\n    // Using stable references from memoized values\n    const csColorbar = new CornerstoneViewportColorbar({\n      id: colorbarId,\n      element: viewportElement,\n      container: containerRef.current,\n      colormaps: colormaps,\n      activeColormapName: activeColormapName,\n      volumeId,\n      ticks: {\n        position: appropriateTickPosition as ColorbarRangeTextPosition,\n        style: mergedTickStyles,\n      },\n    });\n\n    return () => {\n      if (csColorbar) {\n        csColorbar.destroy();\n      }\n    };\n  }, [\n    viewportId,\n    displaySetInstanceUID,\n    colormaps,\n    activeColormapName,\n    volumeId,\n    colorbarId,\n    appropriateTickPosition,\n    mergedTickStyles,\n    viewportElementRef,\n  ]);\n\n  if (!height || !width) {\n    return null;\n  }\n\n  return (\n    <div\n      id={`colorbar-container-${viewportId}-${displaySetInstanceUID}`}\n      ref={containerRef}\n      style={{\n        position: 'relative',\n        zIndex: 1000,\n        boxSizing: 'border-box',\n        display: 'flex',\n        alignItems: 'center',\n        pointerEvents: 'auto',\n        minWidth: isHorizontal(position) ? width / 2.5 : '17px',\n        minHeight: isHorizontal(position) ? '20px' : numColorbars === 1 ? height / 3 : height / 4,\n        height: '1px', // sometimes flex items with min-height need a starting point for its height calculation\n        ...positionStylesFromConfig,\n      }}\n    ></div>\n  );\n});\n\nexport default ViewportColorbar;\n","import React, { useEffect, useState, useMemo, memo, useCallback } from 'react';\nimport { useSystem } from '@ohif/core';\nimport { ColorbarCustomization } from '../../types/Colorbar';\nimport type { ColorMapPreset } from '../../types/Colormap';\nimport ViewportColorbar, { isHorizontal } from './ViewportColorbar';\nimport useViewportRendering from '../../hooks/useViewportRendering';\nimport { useViewportDisplaySets } from '../../hooks/useViewportDisplaySets';\ntype ViewportColorbarsContainerProps = {\n  viewportId: string;\n  location: number;\n};\n\ntype ColorbarData = {\n  colorbar: {\n    activeColormapName: string;\n    colormaps: ColorMapPreset[];\n    volumeId?: string;\n  };\n  displaySetInstanceUID: string;\n};\n\n/**\n * Container component that manages multiple colorbars for a viewport\n * It interacts with the colorbarService to get/set colorbar states\n */\nconst ViewportColorbarsContainer = memo(function ViewportColorbarsContainer({\n  viewportId,\n  location,\n}: ViewportColorbarsContainerProps) {\n  const [colorbars, setColorbars] = useState<ColorbarData[]>([]);\n  const { servicesManager } = useSystem();\n  const { colorbarService, customizationService, displaySetService } = servicesManager.services;\n  const { viewportDisplaySets, backgroundDisplaySet, foregroundDisplaySets } =\n    useViewportDisplaySets(viewportId);\n  const { colorbarPosition: position, opacity } = useViewportRendering(viewportId, {\n    location,\n  });\n\n  // Memoize the customization to prevent recomputation\n  const colorbarCustomization = useMemo(() => {\n    return customizationService.getCustomization(\n      'cornerstone.colorbar'\n    ) as unknown as ColorbarCustomization;\n  }, [customizationService]);\n\n  // Memoize tick position\n  const tickPosition = useMemo(() => {\n    const defaultTickPosition = colorbarCustomization?.colorbarTickPosition;\n    return colorbarCustomization?.colorbarTickPosition || defaultTickPosition;\n  }, [colorbarCustomization]);\n\n  // Initial load of colorbars\n  useEffect(() => {\n    setColorbars(colorbarService.getViewportColorbar(viewportId) || []);\n  }, [viewportId, colorbarService]);\n\n  // Subscribe to colorbar state changes\n  useEffect(() => {\n    const { unsubscribe } = colorbarService.subscribe(\n      colorbarService.EVENTS.STATE_CHANGED,\n      (event: { viewportId: string; displaySetInstanceUID?: string; changeType: string }) => {\n        if (event.viewportId === viewportId) {\n          setColorbars(colorbarService.getViewportColorbar(viewportId) || []);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId, colorbarService]);\n\n  if (!colorbars.length) {\n    return null;\n  }\n\n  const isSingleViewport = viewportDisplaySets.length === 1;\n  const showFullList = isSingleViewport || !isHorizontal(position);\n\n  const colorbarsToUse = showFullList\n    ? colorbars\n    : colorbars.filter(({ displaySetInstanceUID }) => {\n        const { displaySetInstanceUID: dsUID } =\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID) ?? {};\n\n        const targetUID =\n          opacity === 0 || opacity == null\n            ? backgroundDisplaySet?.displaySetInstanceUID\n            : foregroundDisplaySets[0].displaySetInstanceUID;\n\n        return dsUID === targetUID;\n      });\n\n  return (\n    <div\n      style={{\n        pointerEvents: 'auto',\n      }}\n    >\n      <div\n        className=\"flex h-full flex-col items-center justify-center\"\n        style={{ pointerEvents: 'auto' }}\n      >\n        {colorbarsToUse.map(colorbarInfo => {\n          const { colorbar, displaySetInstanceUID } = colorbarInfo;\n          return (\n            <ViewportColorbar\n              key={`colorbar-${viewportId}-${displaySetInstanceUID}`}\n              viewportId={viewportId}\n              displaySetInstanceUID={displaySetInstanceUID}\n              colormaps={colorbar.colormaps}\n              activeColormapName={colorbar.activeColormapName}\n              volumeId={colorbar.volumeId}\n              position={position}\n              tickPosition={tickPosition}\n              tickStyles={colorbarCustomization?.tickStyles}\n              numColorbars={colorbars.length}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default ViewportColorbarsContainer;\n","import ViewportColorbar from './ViewportColorbar';\nimport ViewportColorbarsContainer from './ViewportColorbarsContainer';\n\nexport { ViewportColorbar, ViewportColorbarsContainer };\nexport default ViewportColorbarsContainer;\n","import { useToolbar, useViewportMousePosition } from '@ohif/core/src/hooks';\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useViewportRendering } from '../../hooks';\nimport { ButtonLocation } from '@ohif/core/src/services/ToolBarService/ToolbarService';\nimport classNames from 'classnames';\n\nconst mouseNearControlsRanges = {\n  [ButtonLocation.TopMiddle]: { minX: 0, minY: 0, maxX: 1, maxY: 0.1 },\n  [ButtonLocation.BottomMiddle]: { minX: 0, minY: 0.9, maxX: 1, maxY: 1 },\n  [ButtonLocation.LeftMiddle]: { minX: 0, minY: 0, maxX: 0.1, maxY: 1 },\n  [ButtonLocation.RightMiddle]: { minX: 0.9, minY: 0, maxX: 1, maxY: 1 },\n};\n\nconst getFlexDirectionClassName = (location: ButtonLocation) =>\n  location === ButtonLocation.LeftMiddle || location === ButtonLocation.RightMiddle\n    ? 'flex-col'\n    : 'flex-row';\n\nfunction AdvancedRenderingControls({\n  viewportId,\n  location,\n  buttonSection,\n}: {\n  viewportId: string;\n  location: number;\n  buttonSection: string;\n}) {\n  const {\n    onInteraction,\n    toolbarButtons,\n    isItemOpen,\n    isItemLocked,\n    openItem,\n    closeItem,\n    toggleLock,\n  } = useToolbar({\n    buttonSection,\n  });\n\n  const mousePosition = useViewportMousePosition(viewportId);\n  const [isMouseNearControls, setIsMouseNearControls] = useState(false);\n  const [showAllIcons, setShowAllIcons] = useState(true);\n  const firstMountRef = useRef(true);\n  const { hasColorbar } = useViewportRendering(viewportId);\n  const [isAnItemOpen, setIsAnItemOpen] = useState(false);\n\n  useEffect(() => {\n    if (firstMountRef.current) {\n      firstMountRef.current = false;\n\n      const timer = setTimeout(() => {\n        setShowAllIcons(false);\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!showAllIcons && mousePosition.isInViewport) {\n      const mouseHoverLocation = mouseNearControlsRanges[location];\n      if (mousePosition.isWithinNormalizedBox(mouseHoverLocation)) {\n        setIsMouseNearControls(true);\n      } else {\n        setIsMouseNearControls(false);\n      }\n    }\n  }, [location, mousePosition, showAllIcons]);\n\n  const handleOnItemOpen = useCallback(\n    (id, viewportId) => {\n      openItem(id, viewportId);\n      setIsAnItemOpen(true);\n    },\n    [openItem, setIsAnItemOpen]\n  );\n\n  const handleOnItemClose = useCallback(\n    (id, viewportId) => {\n      closeItem(id, viewportId);\n      setIsAnItemOpen(false);\n    },\n    [closeItem, setIsAnItemOpen]\n  );\n\n  if (!toolbarButtons?.length) {\n    return null;\n  }\n\n  if (!hasColorbar) {\n    return null;\n  }\n\n  return (\n    <div className={classNames('flex gap-2', getFlexDirectionClassName(location))}>\n      {toolbarButtons.map(toolDef => {\n        if (!toolDef) {\n          return null;\n        }\n\n        const { id, Component, componentProps } = toolDef;\n\n        // Enhanced props with state and actions - respecting viewport specificity\n        const enhancedProps = {\n          ...componentProps,\n          isOpen: isItemOpen(id, viewportId),\n          isLocked: isItemLocked(id, viewportId),\n          onOpen: () => handleOnItemOpen(id, viewportId),\n          onClose: () => handleOnItemClose(id, viewportId),\n          onToggleLock: () => toggleLock(id, viewportId),\n          viewportId,\n        };\n\n        const tool = (\n          <Component\n            key={id}\n            id={id}\n            location={location}\n            onInteraction={args => {\n              onInteraction({\n                ...args,\n                itemId: id,\n                viewportId,\n              });\n            }}\n            {...enhancedProps}\n          />\n        );\n\n        // Always show all icons on first mount for 3 seconds\n        // After that, always show Colorbar, show others only when mouse is at bottom\n        const shouldBeVisible =\n          isAnItemOpen || showAllIcons || id === 'Colorbar' || isMouseNearControls;\n\n        return (\n          <div\n            key={id}\n            className={shouldBeVisible ? 'opacity-100' : 'pointer-events-none opacity-0'}\n            style={{ transition: 'opacity 0.2s ease-in-out' }}\n          >\n            {tool}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default AdvancedRenderingControls;\n","import { Enums } from '@cornerstonejs/tools';\nimport { utils } from '@ohif/ui-next';\nimport { ViewportDataOverlayMenuWrapper } from './components/ViewportDataOverlaySettingMenu/ViewportDataOverlayMenuWrapper';\nimport { ViewportOrientationMenuWrapper } from './components/ViewportOrientationMenu/ViewportOrientationMenuWrapper';\nimport { WindowLevelActionMenuWrapper } from './components/WindowLevelActionMenu/WindowLevelActionMenuWrapper';\nimport { VOIManualControlMenuWrapper } from './components/VOIManualControlMenu';\nimport { ThresholdMenuWrapper } from './components/ThresholdMenu/ThresholdMenuWrapper';\nimport { OpacityMenuWrapper } from './components/OpacityMenu/OpacityMenuWrapper';\nimport ModalityLoadBadge from './components/ModalityLoadBadge/ModalityLoadBadge';\nimport NavigationComponent from './components/NavigationComponent/NavigationComponent';\nimport TrackingStatus from './components/TrackingStatus/TrackingStatus';\nimport ViewportColorbarsContainer from './components/ViewportColorbar';\nimport AdvancedRenderingControls from './components/AdvancedRenderingControls';\n\nconst getDisabledState = (disabledText?: string) => ({\n  disabled: true,\n  disabledText: disabledText ?? 'Not available on the current viewport',\n});\n\nexport default function getToolbarModule({ servicesManager, extensionManager }: withAppTypes) {\n  const {\n    toolGroupService,\n    toolbarService,\n    syncGroupService,\n    cornerstoneViewportService,\n    colorbarService,\n    displaySetService,\n    viewportGridService,\n    segmentationService,\n  } = servicesManager.services;\n\n  return [\n    {\n      name: 'ohif.advancedRenderingControls',\n      defaultComponent: AdvancedRenderingControls,\n    },\n    {\n      name: 'evaluate.advancedRenderingControls',\n      evaluate: ({ viewportId }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return {\n            disabled: true,\n          };\n        }\n\n        const hasColorbar = colorbarService?.hasColorbar(viewportId) || false;\n        return {\n          disabled: !hasColorbar,\n        };\n      },\n    },\n    {\n      name: 'ohif.colorbar',\n      defaultComponent: ViewportColorbarsContainer,\n    },\n    {\n      name: 'ohif.trackingStatus',\n      defaultComponent: TrackingStatus,\n    },\n    {\n      name: 'evaluate.trackingStatus',\n      evaluate: ({ viewportId }) => {\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n        if (!displaySetUIDs?.length) {\n          return {\n            disabled: true,\n          };\n        }\n\n        return {\n          disabled: false,\n        };\n      },\n    },\n    // ModalityLoadBadge\n    {\n      name: 'ohif.modalityLoadBadge',\n      defaultComponent: ModalityLoadBadge,\n    },\n    {\n      name: 'evaluate.modalityLoadBadge',\n      evaluate: ({ viewportId }) => {\n        // We can't use useViewportDisplaySets hook here since we're in a non-React context,\n        // but we'll follow the same pattern by getting only the display sets for this viewport\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n        if (!displaySetUIDs?.length) {\n          return {\n            disabled: true,\n          };\n        }\n\n        // Get the display sets that are specifically in this viewport\n        const viewportDisplaySets = displaySetUIDs.map(uid =>\n          displaySetService.getDisplaySetByUID(uid)\n        );\n\n        // Only show status for supported types like SR, SEG, RTSTRUCT\n        const isSupportedType = viewportDisplaySets.some(\n          displaySet =>\n            displaySet?.Modality === 'SR' ||\n            displaySet?.Modality === 'SEG' ||\n            displaySet?.Modality === 'RTSTRUCT'\n        );\n\n        return {\n          disabled: !isSupportedType,\n        };\n      },\n    },\n    // NavigationComponent\n    {\n      name: 'ohif.navigationComponent',\n      defaultComponent: NavigationComponent,\n    },\n    {\n      name: 'evaluate.navigationComponent',\n      evaluate: ({ viewportId }) => {\n        const { trackedMeasurementsService } = servicesManager.services;\n        // Same logic as statusComponent - only show for SR, SEG, RTSTRUCT\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n        if (!displaySetUIDs?.length) {\n          return {\n            disabled: true,\n          };\n        }\n\n        // Get the display sets that are specifically in this viewport\n        const viewportDisplaySets = displaySetUIDs.map(uid =>\n          displaySetService.getDisplaySetByUID(uid)\n        );\n\n        // Check if there's a need for navigation:\n        // 1. Segmentations are present (for SEG/RTSTRUCT navigation)\n        // 2. There are tracked measurements in the viewport (for SR navigation)\n\n        // Check for SEG/RTSTRUCT navigation\n        const hasSegmentation =\n          segmentationService.getSegmentationRepresentations(viewportId).length > 0;\n\n        if (!trackedMeasurementsService) {\n          return {\n            disabled: !hasSegmentation,\n          };\n        }\n\n        // Check if any of the viewport's series are being tracked\n        const hasTrackedInViewport = viewportDisplaySets.some(\n          displaySet =>\n            displaySet?.SeriesInstanceUID &&\n            trackedMeasurementsService.isSeriesTracked(displaySet.SeriesInstanceUID)\n        );\n\n        const isSRDisplaySet = viewportDisplaySets.some(\n          displaySet => displaySet?.Modality === 'SR'\n        );\n\n        // Enable navigation if:\n        // - There's a segmentation to navigate (SEG/RTSTRUCT)\n        // - OR there are tracked measurements in the viewport (SR/etc.)\n        const needsNavigation = hasSegmentation || hasTrackedInViewport || isSRDisplaySet;\n\n        return {\n          disabled: !needsNavigation,\n        };\n      },\n    },\n    {\n      name: 'ohif.dataOverlayMenu',\n      defaultComponent: ViewportDataOverlayMenuWrapper,\n    },\n    {\n      name: 'evaluate.dataOverlayMenu',\n      evaluate: ({ viewportId }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return {\n            disabled: true,\n          };\n        }\n\n        // Example: Show data overlay menu only for certain modalities\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n        if (!displaySetUIDs?.length) {\n          return {\n            disabled: true,\n          };\n        }\n\n        return {\n          disabled: false,\n        };\n      },\n    },\n    {\n      name: 'ohif.orientationMenu',\n      defaultComponent: ViewportOrientationMenuWrapper,\n    },\n    {\n      name: 'evaluate.orientationMenu',\n      evaluate: ({ viewportId }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return {\n            disabled: true,\n          };\n        }\n\n        // Only show orientation menu for 3D capable viewports\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n        const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\n        const isNotReconstructable = displaySets.some(displaySet => !displaySet?.isReconstructable);\n\n        const disabled = isNotReconstructable;\n\n        return {\n          disabled,\n        };\n      },\n    },\n    {\n      name: 'ohif.windowLevelMenu',\n      defaultComponent: WindowLevelActionMenuWrapper,\n    },\n    {\n      name: 'ohif.voiManualControlMenu',\n      defaultComponent: VOIManualControlMenuWrapper,\n    },\n    {\n      name: 'ohif.windowLevelMenuEmbedded',\n      defaultComponent: WindowLevelActionMenuWrapper,\n    },\n    {\n      name: 'evaluate.windowLevelMenuEmbedded',\n      evaluate: () => {\n        return {\n          isEmbedded: true,\n        };\n      },\n    },\n    {\n      name: 'ohif.thresholdMenu',\n      defaultComponent: ThresholdMenuWrapper,\n    },\n    {\n      name: 'ohif.opacityMenu',\n      defaultComponent: OpacityMenuWrapper,\n    },\n    {\n      name: 'evaluate.windowLevelMenu',\n      evaluate: ({ viewportId }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return {\n            disabled: true,\n          };\n        }\n\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n        const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\n\n        const supportWindowLevel = displaySets.some(displaySet => displaySet?.supportsWindowLevel);\n\n        const isInAnySection = toolbarService.isInAnySection('windowLevelMenuEmbedded');\n\n        return {\n          disabled: !supportWindowLevel,\n          hasEmbeddedVariantToUse: !!isInAnySection,\n        };\n      },\n    },\n    {\n      name: 'evaluate.voiManualControlMenu',\n      evaluate: ({ viewportId }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return {\n            disabled: true,\n          };\n        }\n\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n        const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\n\n        const supportWindowLevel = displaySets.some(displaySet => displaySet?.supportsWindowLevel);\n\n        return {\n          disabled: !supportWindowLevel,\n        };\n      },\n    },\n    {\n      name: 'evaluate.thresholdMenu',\n      evaluate: ({ viewportId }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return {\n            disabled: true,\n          };\n        }\n\n        if (viewport.type !== 'orthographic') {\n          return {\n            disabled: true,\n          };\n        }\n\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n        if (!displaySetUIDs.length) {\n          return {\n            disabled: true,\n          };\n        }\n\n        return {\n          disabled: false,\n        };\n      },\n    },\n    {\n      name: 'evaluate.opacityMenu',\n      evaluate: ({ viewportId }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport || viewport.type !== 'orthographic') {\n          return {\n            disabled: true,\n          };\n        }\n\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n        if (displaySetUIDs.length <= 1) {\n          return {\n            disabled: true,\n          };\n        }\n\n        const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\n        const hasOverlayable = displaySets.some(displaySet => displaySet?.isOverlayDisplaySet);\n\n        return {\n          disabled: hasOverlayable,\n        };\n      },\n    },\n    // functions/helpers to be used by the toolbar buttons to decide if they should\n    // enabled or not\n    {\n      name: 'evaluate.viewport.supported',\n      evaluate: ({ viewportId, unsupportedViewportTypes, disabledText }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (viewport && unsupportedViewportTypes?.includes(viewport.type)) {\n          return getDisabledState(disabledText);\n        }\n\n        return undefined;\n      },\n    },\n    {\n      name: 'evaluate.modality.supported',\n      evaluate: ({ viewportId, unsupportedModalities, supportedModalities, disabledText }) => {\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n        if (!displaySetUIDs?.length) {\n          return;\n        }\n\n        const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\n\n        // Check for unsupported modalities (exclusion)\n        if (unsupportedModalities?.length) {\n          const hasUnsupportedModality = displaySets.some(displaySet =>\n            unsupportedModalities.includes(displaySet?.Modality)\n          );\n\n          if (hasUnsupportedModality) {\n            return getDisabledState(disabledText);\n          }\n        }\n\n        // Check for supported modalities (inclusion)\n        if (supportedModalities?.length) {\n          const hasAnySupportedModality = displaySets.some(displaySet =>\n            supportedModalities.includes(displaySet?.Modality)\n          );\n\n          if (!hasAnySupportedModality) {\n            return getDisabledState(disabledText || 'Tool not available for this modality');\n          }\n        }\n      },\n    },\n    {\n      name: 'evaluate.cornerstoneTool',\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n        if (!toolGroup) {\n          return;\n        }\n\n        const toolName = toolbarService.getToolNameForButton(button);\n\n        if (!toolGroup || (!toolGroup.hasTool(toolName) && !toolNames)) {\n          return getDisabledState(disabledText);\n        }\n\n        const isPrimaryActive = toolNames\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\n\n        return {\n          disabled: false,\n          isActive: isPrimaryActive,\n        };\n      },\n    },\n    {\n      name: 'evaluate.action',\n      evaluate: () => {\n        return {\n          disabled: false,\n        };\n      },\n    },\n    {\n      name: 'evaluate.cornerstoneTool.toggle.ifStrictlyDisabled',\n      evaluate: ({ viewportId, button, disabledText }) =>\n        _evaluateToggle({\n          viewportId,\n          button,\n          toolbarService,\n          disabledText,\n          offModes: [Enums.ToolModes.Disabled],\n          toolGroupService,\n        }),\n    },\n    {\n      name: 'evaluate.cornerstoneTool.toggle',\n      evaluate: ({ viewportId, button, disabledText }) =>\n        _evaluateToggle({\n          viewportId,\n          button,\n          toolbarService,\n          disabledText,\n          offModes: [Enums.ToolModes.Disabled, Enums.ToolModes.Passive],\n          toolGroupService,\n        }),\n    },\n    {\n      name: 'evaluate.cornerstone.synchronizer',\n      evaluate: ({ viewportId, button }) => {\n        let synchronizers = syncGroupService.getSynchronizersForViewport(viewportId);\n\n        if (!synchronizers?.length || synchronizers.length <= 1) {\n          return {\n            className: utils.getToggledClassName(false),\n          };\n        }\n\n        const isArray = Array.isArray(button.props?.commands);\n\n        const synchronizerType = isArray\n          ? button.props?.commands?.[0].commandOptions.type\n          : button.props?.commands?.commandOptions.type;\n\n        synchronizers = syncGroupService.getSynchronizersOfType(synchronizerType);\n\n        if (!synchronizers?.length) {\n          return {\n            className: utils.getToggledClassName(false),\n          };\n        }\n\n        // Todo: we need a better way to find the synchronizers based on their\n        // type, but for now we just check the first one and see if it is\n        // enabled\n        const synchronizer = synchronizers[0];\n\n        const isEnabled = synchronizer?._enabled;\n\n        return {\n          className: utils.getToggledClassName(isEnabled),\n        };\n      },\n    },\n    {\n      name: 'evaluate.viewportProperties.toggle',\n      evaluate: ({ viewportId, button }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport || viewport.isDisabled) {\n          return;\n        }\n\n        const propId = button.id;\n\n        const properties = viewport.getProperties();\n        const camera = viewport.getCamera();\n\n        const prop = camera?.[propId] || properties?.[propId];\n\n        if (!prop) {\n          return {\n            disabled: false,\n          };\n        }\n\n        const isToggled = prop;\n\n        return {\n          className: utils.getToggledClassName(isToggled),\n        };\n      },\n    },\n    {\n      name: 'evaluate.displaySetIsReconstructable',\n      evaluate: ({ viewportId, disabledText = 'Selected viewport is not reconstructable' }) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return;\n        }\n\n        const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewportId);\n\n        const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\n\n        const areReconstructable = displaySets.every(displaySet => {\n          return displaySet?.isReconstructable;\n        });\n\n        if (!areReconstructable) {\n          return getDisabledState(disabledText);\n        }\n\n        return {\n          disabled: false,\n        };\n      },\n    },\n  ];\n}\n\nfunction _evaluateToggle({\n  viewportId,\n  toolbarService,\n  button,\n  disabledText,\n  offModes,\n  toolGroupService,\n}) {\n  const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n  if (!toolGroup) {\n    return;\n  }\n  const toolName = toolbarService.getToolNameForButton(button);\n\n  if (!toolGroup?.hasTool(toolName)) {\n    return getDisabledState(disabledText);\n  }\n\n  const isOff = offModes.includes(toolGroup.getToolOptions(toolName).mode);\n\n  return {\n    className: utils.getToggledClassName(!isOff),\n  };\n}\n","import { ToolGroupManager, Enums, Types } from '@cornerstonejs/tools';\nimport { eventTarget } from '@cornerstonejs/core';\n\nimport { Types as OhifTypes, pubSubServiceInterface } from '@ohif/core';\nimport getActiveViewportEnabledElement from '../../utils/getActiveViewportEnabledElement';\n\nconst EVENTS = {\n  VIEWPORT_ADDED: 'event::cornerstone::toolgroupservice:viewportadded',\n  TOOLGROUP_CREATED: 'event::cornerstone::toolgroupservice:toolgroupcreated',\n  TOOL_ACTIVATED: 'event::cornerstone::toolgroupservice:toolactivated',\n  PRIMARY_TOOL_ACTIVATED: 'event::cornerstone::toolgroupservice:primarytoolactivated',\n};\n\ntype Tool = {\n  toolName: string;\n  bindings?: typeof Enums.MouseBindings | Enums.KeyboardBindings;\n};\n\ntype Tools = {\n  active: Tool[];\n  passive?: Tool[];\n  enabled?: Tool[];\n  disabled?: Tool[];\n};\n\nexport default class ToolGroupService {\n  public static REGISTRATION = {\n    name: 'toolGroupService',\n    altName: 'ToolGroupService',\n    create: ({ servicesManager }: OhifTypes.Extensions.ExtensionParams): ToolGroupService => {\n      return new ToolGroupService(servicesManager);\n    },\n  };\n\n  servicesManager: AppTypes.ServicesManager;\n  cornerstoneViewportService: any;\n  viewportGridService: any;\n  uiNotificationService: any;\n  private toolGroupIds: Set<string> = new Set();\n  /**\n   * Service-specific\n   */\n  listeners: { [key: string]: Function[] };\n  EVENTS: { [key: string]: string };\n\n  constructor(servicesManager: AppTypes.ServicesManager) {\n    const { cornerstoneViewportService, viewportGridService, uiNotificationService } =\n      servicesManager.services;\n    this.cornerstoneViewportService = cornerstoneViewportService;\n    this.viewportGridService = viewportGridService;\n    this.uiNotificationService = uiNotificationService;\n    this.listeners = {};\n    this.EVENTS = EVENTS;\n    Object.assign(this, pubSubServiceInterface);\n\n    this._init();\n  }\n\n  onModeExit() {\n    this.destroy();\n  }\n\n  private _init() {\n    eventTarget.addEventListener(Enums.Events.TOOL_ACTIVATED, this._onToolActivated);\n  }\n\n  /**\n   * Retrieves a tool group from the ToolGroupManager by tool group ID.\n   * If no tool group ID is provided, it retrieves the tool group of the active viewport.\n   * @param toolGroupId - Optional ID of the tool group to retrieve.\n   * @returns The tool group or undefined if it is not found.\n   */\n  public getToolGroup(toolGroupId?: string): Types.IToolGroup | void {\n    let toolGroupIdToUse = toolGroupId;\n\n    if (!toolGroupIdToUse) {\n      // Use the active viewport's tool group if no tool group id is provided\n      const enabledElement = getActiveViewportEnabledElement(this.viewportGridService);\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { renderingEngineId, viewportId } = enabledElement;\n      const toolGroup = ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);\n\n      if (!toolGroup) {\n        console.warn(\n          'No tool group found for viewportId:',\n          viewportId,\n          'and renderingEngineId:',\n          renderingEngineId\n        );\n        return;\n      }\n\n      toolGroupIdToUse = toolGroup.id;\n    }\n\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupIdToUse);\n    return toolGroup;\n  }\n\n  public getToolGroupIds(): string[] {\n    return Array.from(this.toolGroupIds);\n  }\n\n  public getToolGroupForViewport(viewportId: string): Types.IToolGroup | void {\n    const renderingEngine = this.cornerstoneViewportService.getRenderingEngine();\n    return ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngine.id);\n  }\n\n  public getActiveToolForViewport(viewportId: string): string {\n    const toolGroup = this.getToolGroupForViewport(viewportId);\n    if (!toolGroup) {\n      return;\n    }\n\n    return toolGroup.getActivePrimaryMouseButtonTool();\n  }\n\n  public destroy(): void {\n    ToolGroupManager.destroy();\n    this.toolGroupIds = new Set();\n\n    eventTarget.removeEventListener(Enums.Events.TOOL_ACTIVATED, this._onToolActivated);\n  }\n\n  public destroyToolGroup(toolGroupId: string): void {\n    ToolGroupManager.destroyToolGroup(toolGroupId);\n    this.toolGroupIds.delete(toolGroupId);\n  }\n\n  public removeViewportFromToolGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    deleteToolGroupIfEmpty?: boolean\n  ): void {\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);\n\n    if (!toolGroup) {\n      return;\n    }\n\n    toolGroup.removeViewports(renderingEngineId, viewportId);\n\n    const viewportIds = toolGroup.getViewportIds();\n\n    if (viewportIds.length === 0 && deleteToolGroupIfEmpty) {\n      ToolGroupManager.destroyToolGroup(toolGroup.id);\n    }\n  }\n\n  public addViewportToToolGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    toolGroupId?: string\n  ): void {\n    if (!toolGroupId) {\n      // If toolGroupId is not provided, add the viewport to all toolGroups\n      const toolGroups = ToolGroupManager.getAllToolGroups();\n      toolGroups.forEach(toolGroup => {\n        toolGroup.addViewport(viewportId, renderingEngineId);\n      });\n    } else {\n      let toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n      if (!toolGroup) {\n        toolGroup = this.createToolGroup(toolGroupId);\n      }\n\n      toolGroup.addViewport(viewportId, renderingEngineId);\n    }\n\n    this._broadcastEvent(EVENTS.VIEWPORT_ADDED, {\n      viewportId,\n      toolGroupId,\n    });\n  }\n\n  public createToolGroup(toolGroupId: string): Types.IToolGroup {\n    if (this.getToolGroup(toolGroupId)) {\n      throw new Error(`ToolGroup ${toolGroupId} already exists`);\n    }\n\n    // if the toolGroup doesn't exist, create it\n    const toolGroup = ToolGroupManager.createToolGroup(toolGroupId);\n    this.toolGroupIds.add(toolGroupId);\n\n    this._broadcastEvent(EVENTS.TOOLGROUP_CREATED, {\n      toolGroupId,\n    });\n\n    return toolGroup;\n  }\n\n  public addToolsToToolGroup(toolGroupId: string, tools: Array<Tool>, configs: any = {}): void {\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n    // this.changeConfigurationIfNecessary(toolGroup, volumeId);\n    this._addTools(toolGroup, tools, configs);\n    this._setToolsMode(toolGroup, tools);\n  }\n\n  public createToolGroupAndAddTools(toolGroupId: string, tools: Array<Tool>): Types.IToolGroup {\n    const toolGroup = this.createToolGroup(toolGroupId);\n    this.addToolsToToolGroup(toolGroupId, tools);\n    return toolGroup;\n  }\n  /**\n   * Get the tool's configuration based on the tool name and tool group id\n   * @param toolGroupId - The id of the tool group that the tool instance belongs to.\n   * @param toolName - The name of the tool\n   * @returns The configuration of the tool.\n   */\n  public getToolConfiguration(toolGroupId: string, toolName: string) {\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n    if (!toolGroup) {\n      return null;\n    }\n\n    const tool = toolGroup.getToolInstance(toolName);\n    if (!tool) {\n      return null;\n    }\n\n    return tool.configuration;\n  }\n\n  /**\n   * Set the tool instance configuration. This will update the tool instance configuration\n   * on the toolGroup\n   * @param toolGroupId - The id of the tool group that the tool instance belongs to.\n   * @param toolName - The name of the tool\n   * @param config - The configuration object that you want to set.\n   */\n  public setToolConfiguration(toolGroupId, toolName, config) {\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n    const toolInstance = toolGroup.getToolInstance(toolName);\n    toolInstance.configuration = config;\n  }\n\n  public getActivePrimaryMouseButtonTool(toolGroupId?: string): string {\n    return this.getToolGroup(toolGroupId)?.getActivePrimaryMouseButtonTool();\n  }\n\n  private _setToolsMode(toolGroup, tools) {\n    const { active, passive, enabled, disabled } = tools;\n\n    if (active) {\n      active.forEach(({ toolName, bindings }) => {\n        toolGroup.setToolActive(toolName, { bindings });\n      });\n    }\n\n    if (passive) {\n      passive.forEach(({ toolName }) => {\n        toolGroup.setToolPassive(toolName);\n      });\n    }\n\n    if (enabled) {\n      enabled.forEach(({ toolName }) => {\n        toolGroup.setToolEnabled(toolName);\n      });\n    }\n\n    if (disabled) {\n      disabled.forEach(({ toolName }) => {\n        toolGroup.setToolDisabled(toolName);\n      });\n    }\n  }\n\n  private _addTools(toolGroup, tools) {\n    const addTools = tools => {\n      tools.forEach(({ toolName, parentTool, configuration }) => {\n        if (parentTool) {\n          toolGroup.addToolInstance(toolName, parentTool, {\n            ...configuration,\n          });\n        } else {\n          toolGroup.addTool(toolName, { ...configuration });\n        }\n      });\n    };\n\n    if (tools.active) {\n      addTools(tools.active);\n    }\n\n    if (tools.passive) {\n      addTools(tools.passive);\n    }\n\n    if (tools.enabled) {\n      addTools(tools.enabled);\n    }\n\n    if (tools.disabled) {\n      addTools(tools.disabled);\n    }\n  }\n\n  private _onToolActivated = (evt: Types.EventTypes.ToolActivatedEventType) => {\n    const { toolGroupId, toolName, toolBindingsOptions } = evt.detail;\n    const isPrimaryTool = toolBindingsOptions.bindings?.some(\n      binding => binding.mouseButton === Enums.MouseBindings.Primary\n    );\n\n    const callbackProps = {\n      toolGroupId,\n      toolName,\n      toolBindingsOptions,\n    };\n\n    this._broadcastEvent(EVENTS.TOOL_ACTIVATED, callbackProps);\n\n    if (isPrimaryTool) {\n      this._broadcastEvent(EVENTS.PRIMARY_TOOL_ACTIVATED, callbackProps);\n    }\n  };\n}\n","import ToolGroupService from './ToolGroupService';\n\nexport default ToolGroupService;\n","import { Enums as CoreEnums, Types, getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport {\n  SynchronizerManager,\n  Synchronizer,\n  Enums,\n  Types as ToolsTypes,\n} from '@cornerstonejs/tools';\n\nconst { createSynchronizer } = SynchronizerManager;\nconst { SEGMENTATION_REPRESENTATION_MODIFIED } = Enums.Events;\nconst { BlendModes } = CoreEnums;\n\nexport default function createHydrateSegmentationSynchronizer(\n  synchronizerName: string,\n  { servicesManager, ...options }: { servicesManager: AppTypes.ServicesManager; options }\n): Synchronizer {\n  const stackImageSynchronizer = createSynchronizer(\n    synchronizerName,\n    SEGMENTATION_REPRESENTATION_MODIFIED,\n    (synchronizerInstance, sourceViewport, targetViewport, sourceEvent) => {\n      return segmentationRepresentationModifiedCallback(\n        synchronizerInstance,\n        sourceViewport,\n        targetViewport,\n        sourceEvent,\n        { servicesManager, options }\n      );\n    },\n    {\n      eventSource: 'eventTarget',\n    }\n  );\n\n  return stackImageSynchronizer;\n}\n\nconst segmentationRepresentationModifiedCallback = async (\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  sourceEvent: Event,\n  { servicesManager, options }: { servicesManager: AppTypes.ServicesManager; options: unknown }\n) => {\n  const event = sourceEvent as ToolsTypes.EventTypes.SegmentationRepresentationModifiedEventType;\n\n  const { segmentationId } = event.detail;\n  const { segmentationService } = servicesManager.services;\n\n  const targetViewportId = targetViewport.viewportId;\n\n  const { viewport } = getEnabledElementByViewportId(targetViewportId);\n\n  const targetFrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n  if (!targetFrameOfReferenceUID) {\n    return;\n  }\n\n  const targetViewportRepresentation = segmentationService.getSegmentationRepresentations(\n    targetViewportId,\n    { segmentationId }\n  );\n\n  if (targetViewportRepresentation.length > 0) {\n    return;\n  }\n\n  // whatever type the source viewport has, we need to add that to the target viewport\n  const sourceViewportRepresentation = segmentationService.getSegmentationRepresentations(\n    sourceViewport.viewportId,\n    { segmentationId }\n  );\n\n  const type = sourceViewportRepresentation[0].type;\n\n  await segmentationService.addSegmentationRepresentation(targetViewportId, {\n    segmentationId,\n    type,\n    config: {\n      blendMode:\n        viewport.getBlendMode() === 1 ? BlendModes.LABELMAP_EDGE_PROJECTION_BLEND : undefined,\n    },\n  });\n};\n","import { synchronizers, SynchronizerManager, Synchronizer } from '@cornerstonejs/tools';\nimport { getRenderingEngines, utilities } from '@cornerstonejs/core';\n\nimport { pubSubServiceInterface, Types } from '@ohif/core';\nimport createHydrateSegmentationSynchronizer from './createHydrateSegmentationSynchronizer';\n\nconst EVENTS = {\n  TOOL_GROUP_CREATED: 'event::cornerstone::syncgroupservice:toolgroupcreated',\n};\n\n/**\n * @params options - are an optional set of options associated with the first\n * sync group declared.\n */\nexport type SyncCreator = (id: string, options?: Record<string, unknown>) => Synchronizer;\n\nexport type SyncGroup = {\n  type: string;\n  id?: string;\n  // Source and target default to true if not specified\n  source?: boolean;\n  target?: boolean;\n  options?: Record<string, unknown>;\n};\n\nconst POSITION = 'cameraposition';\nconst VOI = 'voi';\nconst ZOOMPAN = 'zoompan';\nconst STACKIMAGE = 'stackimage';\nconst IMAGE_SLICE = 'imageslice';\nconst HYDRATE_SEG = 'hydrateseg';\n\nconst asSyncGroup = (syncGroup: string | SyncGroup): SyncGroup =>\n  typeof syncGroup === 'string' ? { type: syncGroup } : syncGroup;\n\nexport default class SyncGroupService {\n  static REGISTRATION = {\n    name: 'syncGroupService',\n    altName: 'SyncGroupService',\n    create: ({ servicesManager }: Types.Extensions.ExtensionParams): SyncGroupService => {\n      return new SyncGroupService(servicesManager);\n    },\n  };\n\n  servicesManager: AppTypes.ServicesManager;\n  listeners: { [key: string]: (...args: any[]) => void } = {};\n  EVENTS: { [key: string]: string };\n  synchronizerCreators: Record<string, SyncCreator> = {\n    [POSITION]: synchronizers.createCameraPositionSynchronizer,\n    [VOI]: synchronizers.createVOISynchronizer,\n    [ZOOMPAN]: synchronizers.createZoomPanSynchronizer,\n    // todo: remove stack image since it is legacy now and the image_slice\n    // handles both stack and volume viewports\n    [STACKIMAGE]: synchronizers.createImageSliceSynchronizer,\n    [IMAGE_SLICE]: synchronizers.createImageSliceSynchronizer,\n    [HYDRATE_SEG]: createHydrateSegmentationSynchronizer,\n  };\n\n  synchronizersByType: { [key: string]: Synchronizer[] } = {};\n\n  constructor(servicesManager: AppTypes.ServicesManager) {\n    this.servicesManager = servicesManager;\n    this.listeners = {};\n    this.EVENTS = EVENTS;\n    //\n    Object.assign(this, pubSubServiceInterface);\n  }\n\n  private _createSynchronizer(type: string, id: string, options): Synchronizer | undefined {\n    // Initialize if not already done\n    this.synchronizersByType[type] = this.synchronizersByType[type] || [];\n    const syncCreator = this.synchronizerCreators[type.toLowerCase()];\n\n    if (syncCreator) {\n      // Pass the servicesManager along with other parameters\n      const synchronizer = syncCreator(id, { ...options, servicesManager: this.servicesManager });\n\n      if (synchronizer) {\n        this.synchronizersByType[type].push(synchronizer);\n        return synchronizer;\n      }\n    } else {\n      console.debug(`Unknown synchronizer type: ${type}, id: ${id}`);\n    }\n  }\n\n  public getSyncCreatorForType(type: string): SyncCreator {\n    return this.synchronizerCreators[type.toLowerCase()];\n  }\n\n  /**\n   * Creates a synchronizer type.\n   * @param type is the type of the synchronizer to create\n   * @param creator\n   */\n  public addSynchronizerType(type: string, creator: SyncCreator): void {\n    this.synchronizerCreators[type.toLowerCase()] = creator;\n  }\n\n  public getSynchronizer(id: string): Synchronizer | void {\n    return SynchronizerManager.getSynchronizer(id);\n  }\n\n  /**\n   * Registers a custom synchronizer.\n   * @param id - The id of the synchronizer.\n   * @param createFunction - The function that creates the synchronizer.\n   */\n  public registerCustomSynchronizer(id: string, createFunction: SyncCreator): void {\n    this.synchronizerCreators[id] = createFunction;\n  }\n\n  /**\n   * Retrieves an array of synchronizers of a specific type.\n   * @param type - The type of synchronizers to retrieve.\n   * @returns An array of synchronizers of the specified type.\n   */\n  public getSynchronizersOfType(type: string): Synchronizer[] {\n    return this.synchronizersByType[type];\n  }\n\n  protected _getOrCreateSynchronizer(\n    type: string,\n    id: string,\n    options: Record<string, unknown>\n  ): Synchronizer | undefined {\n    let synchronizer = SynchronizerManager.getSynchronizer(id);\n\n    if (!synchronizer) {\n      synchronizer = this._createSynchronizer(type, id, options);\n    }\n    return synchronizer;\n  }\n\n  public addViewportToSyncGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    syncGroups?: SyncGroup | string | SyncGroup[] | string[]\n  ): void {\n    if (!syncGroups) {\n      return;\n    }\n\n    const syncGroupsArray = Array.isArray(syncGroups) ? syncGroups : [syncGroups];\n\n    syncGroupsArray.forEach(syncGroup => {\n      const syncGroupObj = asSyncGroup(syncGroup);\n      const { type, target = true, source = true, options = {}, id = type } = syncGroupObj;\n\n      const synchronizer = this._getOrCreateSynchronizer(type, id, options);\n\n      if (!synchronizer) {\n        return;\n      }\n\n      synchronizer.setOptions(viewportId, options);\n\n      const viewportInfo = { viewportId, renderingEngineId };\n      if (target && source) {\n        synchronizer.add(viewportInfo);\n        return;\n      } else if (source) {\n        synchronizer.addSource(viewportInfo);\n      } else if (target) {\n        synchronizer.addTarget(viewportInfo);\n      }\n    });\n  }\n\n  public destroy(): void {\n    SynchronizerManager.destroy();\n  }\n\n  public getSynchronizersForViewport(viewportId: string): Synchronizer[] {\n    const renderingEngine =\n      getRenderingEngines().find(re => {\n        return re.getViewports().find(vp => vp.id === viewportId);\n      }) || getRenderingEngines()[0];\n\n    const synchronizers = SynchronizerManager.getAllSynchronizers();\n    return synchronizers.filter(\n      s =>\n        s.hasSourceViewport(renderingEngine.id, viewportId) ||\n        s.hasTargetViewport(renderingEngine.id, viewportId)\n    );\n  }\n\n  public removeViewportFromSyncGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    syncGroupId?: string\n  ): void {\n    const synchronizers = SynchronizerManager.getAllSynchronizers();\n\n    const filteredSynchronizers = syncGroupId\n      ? synchronizers.filter(s => s.id === syncGroupId)\n      : synchronizers;\n\n    filteredSynchronizers.forEach(synchronizer => {\n      if (!synchronizer) {\n        return;\n      }\n\n      // Only image slice synchronizer register spatial registration\n      if (this.isImageSliceSyncronizer(synchronizer)) {\n        this.unRegisterSpatialRegistration(synchronizer);\n      }\n\n      synchronizer.remove({\n        viewportId,\n        renderingEngineId,\n      });\n\n      // check if any viewport is left in any of the sync groups, if not, delete that sync group\n      const sourceViewports = synchronizer.getSourceViewports();\n      const targetViewports = synchronizer.getTargetViewports();\n\n      if (!sourceViewports.length && !targetViewports.length) {\n        SynchronizerManager.destroySynchronizer(synchronizer.id);\n      }\n    });\n  }\n  /**\n   * Clean up the spatial registration metadata created by synchronizer\n   * This is needed to be able to re-sync images slices if needed\n   * @param synchronizer\n   */\n  unRegisterSpatialRegistration(synchronizer: Synchronizer) {\n    const sourceViewports = synchronizer.getSourceViewports().map(vp => vp.viewportId);\n    const targetViewports = synchronizer.getTargetViewports().map(vp => vp.viewportId);\n\n    // Create an array of pair of viewports to remove from spatialRegistrationMetadataProvider\n    // All sourceViewports combined with all targetViewports\n    const toUnregister = sourceViewports\n      .map((sourceViewportId: string) => {\n        return targetViewports.map(targetViewportId => [targetViewportId, sourceViewportId]);\n      })\n      .reduce((acc, c) => acc.concat(c), []);\n\n    toUnregister.forEach(viewportIdPair => {\n      utilities.spatialRegistrationMetadataProvider.add(viewportIdPair, undefined);\n    });\n  }\n  /**\n   * Check if the synchronizer type is IMAGE_SLICE\n   * Need to convert to lowercase here because the types are lowercase\n   * e.g: synchronizerCreators\n   * @param synchronizer\n   */\n  isImageSliceSyncronizer(synchronizer: Synchronizer) {\n    return this.getSynchronizerType(synchronizer).toLowerCase() === IMAGE_SLICE;\n  }\n  /**\n   * Returns the syncronizer type\n   * @param synchronizer\n   */\n  getSynchronizerType(synchronizer: Synchronizer): string {\n    const synchronizerTypes = Object.keys(this.synchronizersByType);\n    const syncType = synchronizerTypes.find(syncType =>\n      this.getSynchronizersOfType(syncType).includes(synchronizer)\n    );\n    return syncType;\n  }\n}\n","import SyncGroupService from './SyncGroupService';\n\nexport default SyncGroupService;\n","/**\n * It is a bell curved function that uses ease in out quadratic for css\n * transition timing function for each side of the curve.\n *\n * @param {number} x - The current time, in the range [0, 1].\n * @param {number} baseline - The baseline value to start from and return to.\n * @returns the value of the transition at time x.\n */\nexport function easeInOutBell(x: number, baseline: number): number {\n  const alpha = 1 - baseline;\n\n  // prettier-ignore\n  if (x < 1 / 4) {\n    return  4 * Math.pow(2 * x, 3) * alpha + baseline;\n  } else if (x < 1 / 2) {\n    return (1 - Math.pow(-4 * x + 2, 3) / 2) * alpha + baseline;\n  } else if (x < 3 / 4) {\n    return (1 - Math.pow(4 * x - 2, 3) / 2) * alpha + baseline;\n  } else {\n    return (- 4 * Math.pow(2 * x - 2, 3)) * alpha + baseline;\n  }\n}\n\n/**\n * A reversed bell curved function that starts from 1 and goes to baseline and\n * come back to 1 again. It uses ease in out quadratic for css transition\n * timing function for each side of the curve.\n *\n * @param {number} x - The current time, in the range [0, 1].\n * @param {number} baseline - The baseline value to start from and return to.\n * @returns the value of the transition at time x.\n */\nexport function reverseEaseInOutBell(x: number, baseline: number): number {\n  const y = easeInOutBell(x, baseline);\n  return -y + 1 + baseline;\n}\n\nexport function easeInOutBellRelative(\n  x: number,\n  baseline: number,\n  prevOutlineWidth: number\n): number {\n  const range = baseline - prevOutlineWidth;\n\n  if (x < 1 / 4) {\n    return prevOutlineWidth + 4 * Math.pow(2 * x, 3) * range;\n  } else if (x < 1 / 2) {\n    return prevOutlineWidth + (1 - Math.pow(-4 * x + 2, 3) / 2) * range;\n  } else if (x < 3 / 4) {\n    return prevOutlineWidth + (1 - Math.pow(4 * x - 2, 3) / 2) * range;\n  } else {\n    return prevOutlineWidth + -4 * Math.pow(2 * x - 2, 3) * range;\n  }\n}\n\nexport function reverseEaseInOutBellRelative(\n  x: number,\n  baseline: number,\n  prevOutlineWidth: number\n): number {\n  const y = easeInOutBellRelative(x, baseline, prevOutlineWidth);\n  return y;\n}\n","// Volume loader schemes\nexport const VOLUME_LOADER_SCHEME = 'cornerstoneStreamingImageVolume';\nexport const DYNAMIC_VOLUME_LOADER_SCHEME = 'cornerstoneStreamingDynamicImageVolume';","import {\n  cache,\n  Enums as csEnums,\n  eventTarget,\n  geometryLoader,\n  getEnabledElementByViewportId,\n  imageLoader,\n  Types as csTypes,\n  utilities as csUtils,\n  metaData,\n} from '@cornerstonejs/core';\nimport {\n  Enums as csToolsEnums,\n  segmentation as cstSegmentation,\n  Types as cstTypes,\n} from '@cornerstonejs/tools';\nimport { PubSubService, Types as OHIFTypes } from '@ohif/core';\nimport i18n from '@ohif/i18n';\nimport { easeInOutBell, easeInOutBellRelative } from '../../utils/transitions';\nimport { mapROIContoursToRTStructData } from './RTSTRUCT/mapROIContoursToRTStructData';\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\nimport { addColorLUT } from '@cornerstonejs/tools/segmentation/addColorLUT';\nimport { getNextColorLUTIndex } from '@cornerstonejs/tools/segmentation/getNextColorLUTIndex';\nimport { Segment } from '@cornerstonejs/tools/types/SegmentationStateTypes';\nimport { ContourStyle, LabelmapStyle, SurfaceStyle } from '@cornerstonejs/tools/types';\nimport { ViewportType } from '@cornerstonejs/core/enums';\nimport { SegmentationPresentation, SegmentationPresentationItem } from '../../types/Presentation';\nimport { updateLabelmapSegmentationImageReferences } from '@cornerstonejs/tools/segmentation/updateLabelmapSegmentationImageReferences';\nimport { triggerSegmentationRepresentationModified } from '@cornerstonejs/tools/segmentation/triggerSegmentationEvents';\nimport { convertStackToVolumeLabelmap } from '@cornerstonejs/tools/segmentation/helpers/convertStackToVolumeLabelmap';\nimport { getLabelmapImageIds } from '@cornerstonejs/tools/segmentation';\nimport { VOLUME_LOADER_SCHEME } from '../../constants';\n\nconst LABELMAP = csToolsEnums.SegmentationRepresentations.Labelmap;\nconst CONTOUR = csToolsEnums.SegmentationRepresentations.Contour;\n\nexport type SegmentRepresentation = {\n  segmentIndex: number;\n  color: csTypes.Color;\n  opacity: number;\n  visible: boolean;\n};\n\nexport type SegmentationData = cstTypes.Segmentation;\n\nexport type SegmentationRepresentation = cstTypes.SegmentationRepresentation & {\n  viewportId: string;\n  id: string;\n  label: string;\n  styles: cstTypes.RepresentationStyle;\n  segments: {\n    [key: number]: SegmentRepresentation;\n  };\n};\n\nexport type SegmentationInfo = {\n  segmentation: SegmentationData;\n  representation?: SegmentationRepresentation;\n};\n\nconst EVENTS = {\n  SEGMENTATION_MODIFIED: 'event::segmentation_modified',\n  // fired when the segmentation is added\n  SEGMENTATION_ADDED: 'event::segmentation_added',\n  //\n  SEGMENTATION_DATA_MODIFIED: 'event::segmentation_data_modified',\n  // fired when the segmentation is removed\n  SEGMENTATION_REMOVED: 'event::segmentation_removed',\n  //\n  // fired when segmentation representation is added\n  SEGMENTATION_REPRESENTATION_MODIFIED: 'event::segmentation_representation_modified',\n  // fired when segmentation representation is removed\n  SEGMENTATION_REPRESENTATION_REMOVED: 'event::segmentation_representation_removed',\n  //\n  // LOADING EVENTS\n  // fired when the active segment is loaded in SEG or RTSTRUCT\n  SEGMENT_LOADING_COMPLETE: 'event::segment_loading_complete',\n  // loading completed for all segments\n  SEGMENTATION_LOADING_COMPLETE: 'event::segmentation_loading_complete',\n};\n\nconst VALUE_TYPES = {};\n\nclass SegmentationService extends PubSubService {\n  static REGISTRATION = {\n    name: 'segmentationService',\n    altName: 'SegmentationService',\n    create: ({ servicesManager }: OHIFTypes.Extensions.ExtensionParams): SegmentationService => {\n      return new SegmentationService({ servicesManager });\n    },\n  };\n\n  private _segmentationIdToColorLUTIndexMap: Map<string, number>;\n  private _segmentationGroupStatsMap: Map<string, any>;\n  readonly servicesManager: AppTypes.ServicesManager;\n  highlightIntervalId = null;\n  readonly EVENTS = EVENTS;\n\n  constructor({ servicesManager }) {\n    super(EVENTS);\n\n    this._segmentationIdToColorLUTIndexMap = new Map();\n\n    this.servicesManager = servicesManager;\n\n    this._segmentationGroupStatsMap = new Map();\n  }\n\n  public onModeEnter(): void {\n    this._initSegmentationService();\n  }\n\n  public onModeExit(): void {\n    this.destroy();\n  }\n\n  /**\n   * Retrieves a segmentation by its ID.\n   *\n   * @param segmentationId - The unique identifier of the segmentation to retrieve.\n   * @returns The segmentation object if found, or undefined if not found.\n   *\n   * @remarks\n   * This method directly accesses the cornerstone tools segmentation state to fetch\n   * the segmentation data. It's useful when you need to access specific properties\n   * or perform operations on a particular segmentation.\n   */\n  public getSegmentation(segmentationId: string): cstTypes.Segmentation | undefined {\n    return cstSegmentation.state.getSegmentation(segmentationId);\n  }\n\n  /**\n   * Retrieves all segmentations from the cornerstone tools segmentation state.\n   *\n   * @returns An array of all segmentations currently stored in the state\n   *\n   * @remarks\n   * This is a convenience method that directly accesses the cornerstone tools\n   * segmentation state to get all available segmentations. It returns the raw\n   * segmentation objects without any additional processing or filtering.\n   */\n  public getSegmentations(): cstTypes.Segmentation[] | [] {\n    return cstSegmentation.state.getSegmentations();\n  }\n\n  public getPresentation(viewportId: string): SegmentationPresentation {\n    const segmentationPresentations: SegmentationPresentation = [];\n    const segmentationsMap = new Map<string, SegmentationPresentationItem>();\n\n    const representations = this.getSegmentationRepresentations(viewportId);\n    for (const representation of representations) {\n      const { segmentationId } = representation;\n\n      if (!representation) {\n        continue;\n      }\n\n      const { type } = representation;\n\n      segmentationsMap.set(segmentationId, {\n        segmentationId,\n        type,\n        hydrated: true,\n        config: representation.config || {},\n      });\n    }\n\n    // Check inside the removedDisplaySetAndRepresentationMaps to see if any of the representations are not hydrated\n    // const hydrationMap = this._segmentationRepresentationHydrationMaps.get(presentationId);\n\n    // if (hydrationMap) {\n    //   hydrationMap.forEach(rep => {\n    //     segmentationsMap.set(rep.segmentationId, {\n    //       segmentationId: rep.segmentationId,\n    //       type: rep.type,\n    //       hydrated: rep.hydrated,\n    //       config: rep.config || {},\n    //     });\n    //   });\n    // }\n\n    // // Convert the Map to an array\n    segmentationPresentations.push(...segmentationsMap.values());\n\n    return segmentationPresentations;\n  }\n\n  public getRepresentationsForSegmentation(\n    segmentationId: string\n  ): { viewportId: string; representations: any[] }[] {\n    const representations =\n      cstSegmentation.state.getSegmentationRepresentationsBySegmentationId(segmentationId);\n\n    return representations;\n  }\n\n  /**\n   * Retrieves segmentation representations (labelmap, contour, surface) based on specified criteria.\n   *\n   * @param viewportId - The ID of the viewport.\n   * @param specifier - An object containing optional `segmentationId` and `type` to filter the representations.\n   * @returns An array of `SegmentationRepresentation` matching the criteria, or an empty array if none are found.\n   *\n   * @remarks\n   * This method filters the segmentation representations according to the provided `specifier`:\n   * - **No `segmentationId` or `type` provided**: Returns all representations associated with the given `viewportId`.\n   * - **Only `segmentationId` provided**: Returns all representations with that `segmentationId`, regardless of `viewportId`.\n   * - **Only `type` provided**: Returns all representations of that `type` associated with the given `viewportId`.\n   * - **Both `segmentationId` and `type` provided**: Returns representations matching both criteria, regardless of `viewportId`.\n   */\n  public getSegmentationRepresentations(\n    viewportId: string,\n    specifier: {\n      segmentationId?: string;\n      type?: SegmentationRepresentations;\n    } = {}\n  ): SegmentationRepresentation[] {\n    // Get all representations for the viewportId\n    const representations = cstSegmentation.state.getSegmentationRepresentations(\n      viewportId,\n      specifier\n    );\n\n    // Map to our SegmentationRepresentation type\n    const ohifRepresentations = representations.map(repr =>\n      this._toOHIFSegmentationRepresentation(viewportId, repr)\n    );\n\n    return ohifRepresentations;\n  }\n\n  public destroy = () => {\n    eventTarget.removeEventListener(\n      csToolsEnums.Events.SEGMENTATION_MODIFIED,\n      this._onSegmentationModifiedFromSource\n    );\n\n    eventTarget.removeEventListener(\n      csToolsEnums.Events.SEGMENTATION_REMOVED,\n      this._onSegmentationModifiedFromSource\n    );\n\n    eventTarget.removeEventListener(\n      csToolsEnums.Events.SEGMENTATION_DATA_MODIFIED,\n      this._onSegmentationDataModifiedFromSource\n    );\n\n    eventTarget.removeEventListener(\n      csToolsEnums.Events.SEGMENTATION_REPRESENTATION_ADDED,\n      this._onSegmentationModifiedFromSource\n    );\n\n    eventTarget.removeEventListener(\n      csToolsEnums.Events.SEGMENTATION_ADDED,\n      this._onSegmentationAddedFromSource\n    );\n\n    this.reset();\n  };\n\n  public async addSegmentationRepresentation(\n    viewportId: string,\n    {\n      segmentationId,\n      type,\n      config,\n      suppressEvents = false,\n    }: {\n      segmentationId: string;\n      type?: csToolsEnums.SegmentationRepresentations;\n      config?: {\n        blendMode?: csEnums.BlendModes;\n      };\n      suppressEvents?: boolean;\n    }\n  ): Promise<void> {\n    const segmentation = this.getSegmentation(segmentationId);\n    const csViewport = this.getAndValidateViewport(viewportId);\n\n    if (!csViewport) {\n      return;\n    }\n\n    const colorLUTIndex = this._segmentationIdToColorLUTIndexMap.get(segmentationId);\n\n    const defaultRepresentationType = csToolsEnums.SegmentationRepresentations.Labelmap;\n    let representationTypeToUse = type || defaultRepresentationType;\n    let isConverted = false;\n\n    if (type === csToolsEnums.SegmentationRepresentations.Labelmap) {\n      const { isVolumeViewport, isVolumeSegmentation } = this.determineViewportAndSegmentationType(\n        csViewport,\n        segmentation\n      ) || { isVolumeViewport: false, isVolumeSegmentation: false };\n\n      ({ representationTypeToUse, isConverted } = await this.handleViewportConversion(\n        isVolumeViewport,\n        isVolumeSegmentation,\n        csViewport,\n        segmentation,\n        viewportId,\n        segmentationId,\n        representationTypeToUse\n      ));\n    }\n\n    await this._addSegmentationRepresentation(\n      viewportId,\n      segmentationId,\n      representationTypeToUse,\n      colorLUTIndex,\n      isConverted,\n      config\n    );\n\n    if (!suppressEvents) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, { segmentationId });\n    }\n  }\n\n  /**\n   * Creates an labelmap segmentation for a given display set\n   *\n   * @param displaySet - The display set to create the segmentation for.\n   * @param options - Optional parameters for creating the segmentation.\n   * @param options.segmentationId - Custom segmentation ID. If not provided, a UUID will be generated.\n   * @param options.FrameOfReferenceUID - Frame of reference UID for the segmentation.\n   * @param options.label - Label for the segmentation.\n   * @returns A promise that resolves to the created segmentation ID.\n   */\n  public async createLabelmapForDisplaySet(\n    displaySet: AppTypes.DisplaySet,\n    options?: {\n      segmentationId?: string;\n      segments?: { [segmentIndex: number]: Partial<cstTypes.Segment> };\n      FrameOfReferenceUID?: string;\n      label?: string;\n    }\n  ): Promise<string> {\n    // Todo: random does not makes sense, make this better, like\n    // labelmap 1, 2, 3 etc\n    const segmentationId = options?.segmentationId ?? `${csUtils.uuidv4()}`;\n\n    const isDynamicVolume = displaySet.isDynamicVolume;\n\n    let referenceImageIds = displaySet.imageIds;\n    if (isDynamicVolume) {\n      // get the middle timepoint for referenceImageIds\n      const timePoints = displaySet.dynamicVolumeInfo.timePoints;\n      const middleTimePoint = timePoints[Math.floor(timePoints.length / 2)];\n      referenceImageIds = middleTimePoint;\n    }\n\n    const derivedImages = await imageLoader.createAndCacheDerivedLabelmapImages(referenceImageIds);\n\n    const segs = this.getSegmentations();\n    const label = options.label || `Segmentation ${segs.length + 1}`;\n\n    const segImageIds = derivedImages.map(image => image.imageId);\n\n    const segmentationPublicInput: cstTypes.SegmentationPublicInput = {\n      segmentationId,\n      representation: {\n        type: LABELMAP,\n        data: {\n          imageIds: segImageIds,\n          // referencedVolumeId: this._getVolumeIdForDisplaySet(displaySet),\n          referencedImageIds: referenceImageIds,\n        },\n      },\n      config: {\n        label,\n        segments:\n          options.segments && Object.keys(options.segments).length > 0\n            ? options.segments\n            : {\n                1: {\n                  label: `${i18n.t('Segment')} 1`,\n                  active: true,\n                },\n              },\n        cachedStats: {\n          info: `S${displaySet.SeriesNumber}: ${displaySet.SeriesDescription}`,\n        },\n      },\n    };\n\n    this.addOrUpdateSegmentation(segmentationPublicInput);\n    return segmentationId;\n  }\n\n  public async createSegmentationForSEGDisplaySet(\n    segDisplaySet,\n    options: {\n      segmentationId?: string;\n      type: SegmentationRepresentations;\n    } = {\n      type: LABELMAP,\n    }\n  ): Promise<string> {\n    const { type } = options;\n    let { segmentationId } = options;\n    const { labelMapImages } = segDisplaySet;\n\n    if (type !== LABELMAP) {\n      throw new Error('Only labelmap type is supported for SEG display sets right now');\n    }\n\n    if (!labelMapImages || !labelMapImages.length) {\n      throw new Error('SEG reading failed');\n    }\n\n    segmentationId = segmentationId ?? segDisplaySet.displaySetInstanceUID;\n    const referencedDisplaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\n    const referencedDisplaySet = this.servicesManager.services.displaySetService.getDisplaySetByUID(\n      referencedDisplaySetInstanceUID\n    );\n\n    const images = referencedDisplaySet.instances;\n\n    if (!images.length) {\n      throw new Error('No instances were provided for the referenced display set of the SEG');\n    }\n\n    const imageIds = images.map(image => image.imageId);\n    const derivedImages = labelMapImages?.flat();\n    const derivedImageIds = derivedImages.map(image => image.imageId);\n\n    segDisplaySet.images = derivedImages.map(image => ({\n      ...image,\n      ...metaData.get('instance', image.referencedImageId),\n    }));\n\n    segDisplaySet.imageIds = derivedImageIds;\n\n    // We should parse the segmentation as separate slices to support overlapping segments.\n    // This parsing should occur in the CornerstoneJS library adapters.\n    // For now, we use the volume returned from the library and chop it here.\n    let firstSegmentedSliceImageId = null;\n    for (let i = 0; i < derivedImages.length; i++) {\n      const voxelManager = derivedImages[i].voxelManager as csTypes.IVoxelManager<number>;\n      const scalarData = voxelManager.getScalarData();\n      voxelManager.setScalarData(scalarData);\n\n      // Check if this slice has any non-zero voxels and we haven't found one yet\n      if (!firstSegmentedSliceImageId && scalarData.some(value => value !== 0)) {\n        firstSegmentedSliceImageId = derivedImages[i].referencedImageId;\n      }\n    }\n\n    // assign the first non zero voxel image id to the segDisplaySet\n    segDisplaySet.firstSegmentedSliceImageId = firstSegmentedSliceImageId;\n\n    const segmentsInfo = segDisplaySet.segMetadata.data;\n\n    const segments: { [segmentIndex: string]: cstTypes.Segment } = {};\n    const colorLUT = [];\n\n    segmentsInfo.forEach((segmentInfo, index) => {\n      if (index === 0) {\n        colorLUT.push([0, 0, 0, 0]);\n        return;\n      }\n\n      const {\n        SegmentedPropertyCategoryCodeSequence,\n        SegmentNumber,\n        SegmentLabel,\n        SegmentAlgorithmType,\n        SegmentAlgorithmName,\n        SegmentedPropertyTypeCodeSequence,\n        rgba,\n      } = segmentInfo;\n\n      colorLUT.push(rgba);\n\n      const segmentIndex = Number(SegmentNumber);\n\n      const centroid = segDisplaySet.centroids?.get(index);\n      const imageCentroidXYZ = centroid?.image || { x: 0, y: 0, z: 0 };\n      const worldCentroidXYZ = centroid?.world || { x: 0, y: 0, z: 0 };\n\n      segments[segmentIndex] = {\n        segmentIndex,\n        label: SegmentLabel || `Segment ${SegmentNumber}`,\n        locked: false,\n        active: false,\n        cachedStats: {\n          center: {\n            image: [imageCentroidXYZ.x, imageCentroidXYZ.y, imageCentroidXYZ.z],\n            world: [worldCentroidXYZ.x, worldCentroidXYZ.y, worldCentroidXYZ.z],\n          },\n          modifiedTime: segDisplaySet.SeriesDate,\n          category: SegmentedPropertyCategoryCodeSequence\n            ? SegmentedPropertyCategoryCodeSequence.CodeMeaning\n            : '',\n          type: SegmentedPropertyTypeCodeSequence\n            ? SegmentedPropertyTypeCodeSequence.CodeMeaning\n            : '',\n          algorithmType: SegmentAlgorithmType,\n          algorithmName: SegmentAlgorithmName,\n        },\n      };\n    });\n\n    // get next color lut index\n    const colorLUTIndex = getNextColorLUTIndex();\n    addColorLUT(colorLUT, colorLUTIndex);\n    this._segmentationIdToColorLUTIndexMap.set(segmentationId, colorLUTIndex);\n\n    this._broadcastEvent(EVENTS.SEGMENTATION_LOADING_COMPLETE, {\n      segmentationId,\n      segDisplaySet,\n    });\n\n    const seg: cstTypes.SegmentationPublicInput = {\n      segmentationId,\n      representation: {\n        type: LABELMAP,\n        data: {\n          imageIds: derivedImageIds,\n          // referencedVolumeId: this._getVolumeIdForDisplaySet(referencedDisplaySet),\n          referencedImageIds: imageIds as string[],\n        },\n      },\n      config: {\n        label: segDisplaySet.SeriesDescription,\n        segments,\n      },\n    };\n\n    segDisplaySet.isLoaded = true;\n\n    this.addOrUpdateSegmentation(seg);\n\n    return segmentationId;\n  }\n\n  public async createSegmentationForRTDisplaySet(\n    rtDisplaySet,\n    options: {\n      segmentationId?: string;\n      type: SegmentationRepresentations;\n    } = {\n      type: CONTOUR,\n    }\n  ): Promise<string> {\n    const { type } = options;\n    let { segmentationId } = options;\n\n    // Currently, only contour representation is supported for RT display\n    if (type !== CONTOUR) {\n      throw new Error('Only contour type is supported for RT display sets right now');\n    }\n\n    // Assign segmentationId if not provided\n    segmentationId = segmentationId ?? rtDisplaySet.displaySetInstanceUID;\n    const { structureSet } = rtDisplaySet;\n\n    if (!structureSet) {\n      throw new Error(\n        'To create the contours from RT displaySet, the displaySet should be loaded first. You can perform rtDisplaySet.load() before calling this method.'\n      );\n    }\n\n    const rtDisplaySetUID = rtDisplaySet.displaySetInstanceUID;\n    const referencedDisplaySet = this.servicesManager.services.displaySetService.getDisplaySetByUID(\n      rtDisplaySet.referencedDisplaySetInstanceUID\n    );\n\n    const referencedImageIdsWithGeometry = Array.from(structureSet.ReferencedSOPInstanceUIDsSet);\n\n    const referencedImageIds = referencedDisplaySet.imageIds;\n    // find the first image id that contains a referenced SOP instance UID\n    const firstSegmentedSliceImageId =\n      referencedImageIds?.find(imageId =>\n        referencedImageIdsWithGeometry.some(referencedId => imageId.includes(referencedId))\n      ) || null;\n\n    rtDisplaySet.firstSegmentedSliceImageId = firstSegmentedSliceImageId;\n    // Map ROI contours to RT Struct Data\n    const allRTStructData = mapROIContoursToRTStructData(structureSet, rtDisplaySetUID);\n\n    // Sort by segmentIndex for consistency\n    allRTStructData.sort((a, b) => a.segmentIndex - b.segmentIndex);\n\n    const geometryIds = allRTStructData.map(({ geometryId }) => geometryId);\n\n    // Initialize SegmentationPublicInput similar to SEG function\n    const segmentation: cstTypes.SegmentationPublicInput = {\n      segmentationId,\n      representation: {\n        type: CONTOUR,\n        data: {\n          geometryIds,\n        },\n      },\n      config: {\n        label: rtDisplaySet.SeriesDescription,\n      },\n    };\n\n    if (!structureSet.ROIContours?.length) {\n      throw new Error(\n        'The structureSet does not contain any ROIContours. Please ensure the structureSet is loaded first.'\n      );\n    }\n\n    const segments: { [segmentIndex: string]: cstTypes.Segment } = {};\n    let segmentsCachedStats = {};\n\n    // Create colorLUT array for RT structures\n    const colorLUT = [[0, 0, 0, 0]]; // First entry is transparent for index 0\n\n    // Process each segment similarly to the SEG function\n    for (const rtStructData of allRTStructData) {\n      const { data, id, color, segmentIndex, geometryId, group } = rtStructData;\n\n      // Add the color to the colorLUT array\n      colorLUT.push(color);\n\n      try {\n        const geometry = await geometryLoader.createAndCacheGeometry(geometryId, {\n          geometryData: {\n            data,\n            id,\n            color,\n            frameOfReferenceUID: structureSet.frameOfReferenceUID,\n            segmentIndex,\n          },\n          type: csEnums.GeometryType.CONTOUR,\n        });\n\n        const contourSet = geometry.data as csTypes.IContourSet;\n        const centroid = contourSet.centroid;\n\n        segmentsCachedStats = {\n          center: { world: centroid },\n          modifiedTime: rtDisplaySet.SeriesDate, // Using SeriesDate as modifiedTime\n        };\n\n        segments[segmentIndex] = {\n          label: id,\n          segmentIndex,\n          cachedStats: segmentsCachedStats,\n          locked: false,\n          active: false,\n          group,\n        };\n\n        // Broadcast segment loading progress\n        const numInitialized = Object.keys(segmentsCachedStats).length;\n        const percentComplete = Math.round((numInitialized / allRTStructData.length) * 100);\n        this._broadcastEvent(EVENTS.SEGMENT_LOADING_COMPLETE, {\n          percentComplete,\n          numSegments: allRTStructData.length,\n        });\n      } catch (e) {\n        console.warn(`Error initializing contour for segment ${segmentIndex}:`, e);\n        continue; // Continue processing other segments even if one fails\n      }\n    }\n\n    // Create and register the colorLUT\n    const colorLUTIndex = getNextColorLUTIndex();\n    addColorLUT(colorLUT, colorLUTIndex);\n    this._segmentationIdToColorLUTIndexMap.set(segmentationId, colorLUTIndex);\n\n    // Assign processed segments to segmentation config\n    segmentation.config.segments = segments;\n\n    // Broadcast segmentation loading complete event\n    this._broadcastEvent(EVENTS.SEGMENTATION_LOADING_COMPLETE, {\n      segmentationId,\n      rtDisplaySet,\n    });\n\n    // Mark the RT display set as loaded\n    rtDisplaySet.isLoaded = true;\n    // Add or update the segmentation in the state\n    this.addOrUpdateSegmentation(segmentation);\n\n    return segmentationId;\n  }\n\n  /**\n   * Adds or updates a segmentation in the state\n   * @param segmentationId - The ID of the segmentation to add or update\n   * @param data - The data to add or update the segmentation with\n   *\n   * @remarks\n   * This method handles the addition or update of a segmentation in the state.\n   * If the segmentation already exists, it updates the existing segmentation.\n   * If the segmentation does not exist, it adds a new segmentation.\n   */\n  public addOrUpdateSegmentation(\n    data: cstTypes.SegmentationPublicInput | Partial<cstTypes.Segmentation>\n  ) {\n    const segmentationId = data.segmentationId;\n    const existingSegmentation = cstSegmentation.state.getSegmentation(segmentationId);\n\n    if (existingSegmentation) {\n      // Update the existing segmentation\n      this.updateSegmentationInSource(segmentationId, data as Partial<cstTypes.Segmentation>);\n    } else {\n      // Add a new segmentation\n      this.addSegmentationToSource(data as cstTypes.SegmentationPublicInput);\n    }\n  }\n\n  public setActiveSegmentation(viewportId: string, segmentationId: string): void {\n    cstSegmentation.activeSegmentation.setActiveSegmentation(viewportId, segmentationId);\n  }\n\n  /**\n   * Gets the active segmentation for a viewport\n   * @param viewportId - The ID of the viewport to get the active segmentation for\n   * @returns The active segmentation object, or null if no segmentation is active\n   *\n   * @remarks\n   * This method retrieves the currently active segmentation for the specified viewport.\n   * The active segmentation is the one that is currently selected for editing operations.\n   * Returns null if no segmentation is active in the viewport.\n   */\n  public getActiveSegmentation(viewportId: string): cstTypes.Segmentation | null {\n    return cstSegmentation.activeSegmentation.getActiveSegmentation(viewportId);\n  }\n\n  /**\n   * Gets the active segment from the active segmentation in a viewport\n   * @param viewportId - The ID of the viewport to get the active segment from\n   * @returns The active segment object, or undefined if no segment is active\n   *\n   * @remarks\n   * This method retrieves the currently active segment from the active segmentation\n   * in the specified viewport. The active segment is the one that is currently\n   * selected for editing operations. Returns undefined if no segment is active or\n   * if there is no active segmentation.\n   */\n  public getActiveSegment(viewportId: string): cstTypes.Segment | undefined {\n    const activeSegmentation = this.getActiveSegmentation(viewportId);\n\n    if (!activeSegmentation) {\n      return;\n    }\n\n    const { segments } = activeSegmentation;\n\n    let activeSegment;\n    for (const segment of Object.values(segments)) {\n      if (segment.active) {\n        activeSegment = segment;\n        break;\n      }\n    }\n\n    return activeSegment;\n  }\n\n  public hasCustomStyles(specifier: {\n    viewportId: string;\n    segmentationId: string;\n    type: SegmentationRepresentations;\n  }): boolean {\n    return cstSegmentation.config.style.hasCustomStyle(specifier);\n  }\n\n  public getStyle = (specifier: {\n    viewportId: string;\n    segmentationId: string;\n    type: SegmentationRepresentations;\n    segmentIndex?: number;\n  }) => {\n    const style = cstSegmentation.config.style.getStyle(specifier);\n\n    return style;\n  };\n\n  public setStyle = (\n    specifier: {\n      type: SegmentationRepresentations;\n      viewportId?: string;\n      segmentationId?: string;\n      segmentIndex?: number;\n    },\n    style: LabelmapStyle | ContourStyle | SurfaceStyle\n  ) => {\n    cstSegmentation.config.style.setStyle(specifier, style);\n  };\n\n  public resetToGlobalStyle = () => {\n    cstSegmentation.config.style.resetToGlobalStyle();\n  };\n\n  /**\n   * Adds a new segment to the specified segmentation.\n   * @param segmentationId - The ID of the segmentation to add the segment to.\n   * @param viewportId: The ID of the viewport to add the segment to, it is used to get the representation, if it is not\n   * provided, the first available representation for the segmentationId will be used.\n   * @param config - An object containing the configuration options for the new segment.\n   *   - segmentIndex: (optional) The index of the segment to add. If not provided, the next available index will be used.\n   *   - properties: (optional) An object containing the properties of the new segment.\n   *     - label: (optional) The label of the new segment. If not provided, a default label will be used.\n   *     - color: (optional) The color of the new segment in RGB format. If not provided, a default color will be used.\n   *     - visibility: (optional) Whether the new segment should be visible. If not provided, the segment will be visible by default.\n   *     - isLocked: (optional) Whether the new segment should be locked for editing. If not provided, the segment will not be locked by default.\n   *     - active: (optional) Whether the new segment should be the active segment to be edited. If not provided, the segment will not be active by default.\n   */\n  public addSegment(\n    segmentationId: string,\n    config: {\n      segmentIndex?: number;\n      label?: string;\n      isLocked?: boolean;\n      active?: boolean;\n      color?: csTypes.Color; // Add color type\n      visibility?: boolean; // Add visibility option\n    } = {}\n  ): void {\n    if (config?.segmentIndex === 0) {\n      throw new Error(i18n.t('Segment') + ' index 0 is reserved for \"no label\"');\n    }\n\n    const csSegmentation = this.getCornerstoneSegmentation(segmentationId);\n\n    let segmentIndex = config.segmentIndex;\n    if (!segmentIndex) {\n      // grab the next available segment index based on the object keys,\n      // so basically get the highest segment index value + 1\n      const segmentKeys = Object.keys(csSegmentation.segments);\n      segmentIndex = segmentKeys.length === 0 ? 1 : Math.max(...segmentKeys.map(Number)) + 1;\n    }\n\n    // update the segmentation\n    if (!config.label) {\n      config.label = `${i18n.t('Segment')} ${segmentIndex}`;\n    }\n\n    const currentSegments = csSegmentation.segments;\n\n    cstSegmentation.updateSegmentations([\n      {\n        segmentationId,\n        payload: {\n          segments: {\n            ...currentSegments,\n            [segmentIndex]: {\n              ...currentSegments[segmentIndex],\n              segmentIndex,\n              cachedStats: {},\n              locked: false,\n              ...config,\n            },\n          },\n        },\n      },\n    ]);\n\n    this.setActiveSegment(segmentationId, segmentIndex);\n\n    // Apply additional configurations\n    if (config.isLocked !== undefined) {\n      this._setSegmentLockedStatus(segmentationId, segmentIndex, config.isLocked);\n    }\n\n    // Get all viewports that have this segmentation\n    const viewportIds = this.getViewportIdsWithSegmentation(segmentationId);\n\n    viewportIds.forEach(viewportId => {\n      // Set color if provided\n      if (config.color !== undefined) {\n        this.setSegmentColor(viewportId, segmentationId, segmentIndex, config.color);\n      }\n\n      // Set visibility if provided\n      if (config.visibility !== undefined) {\n        this.setSegmentVisibility(viewportId, segmentationId, segmentIndex, config.visibility);\n      }\n    });\n  }\n\n  /**\n   * Removes a segment from a segmentation and updates the active segment index if necessary.\n   *\n   * @param segmentationId - The ID of the segmentation containing the segment to remove.\n   * @param segmentIndex - The index of the segment to remove.\n   *\n   * @remarks\n   * This method performs the following actions:\n   * 1. Clears the segment value in the Cornerstone segmentation.\n   * 2. Updates all related segmentation representations to remove the segment.\n   * 3. If the removed segment was the active segment, it updates the active segment index.\n   *\n   */\n  public removeSegment(segmentationId: string, segmentIndex: number): void {\n    cstSegmentation.removeSegment(segmentationId, segmentIndex);\n  }\n\n  public setSegmentVisibility(\n    viewportId: string,\n    segmentationId: string,\n    segmentIndex: number,\n    isVisible: boolean,\n    type?: SegmentationRepresentations\n  ): void {\n    this._setSegmentVisibility(viewportId, segmentationId, segmentIndex, isVisible, type);\n  }\n\n  /**\n   * Sets the locked status of a segment in a segmentation.\n   *\n   * @param segmentationId - The ID of the segmentation containing the segment.\n   * @param segmentIndex - The index of the segment to set the locked status for.\n   * @param isLocked - The new locked status of the segment.\n   *\n   * @remarks\n   * This method updates the locked status of a specific segment within a segmentation.\n   * A locked segment cannot be modified or edited.\n   */\n  public setSegmentLocked(segmentationId: string, segmentIndex: number, isLocked: boolean): void {\n    this._setSegmentLockedStatus(segmentationId, segmentIndex, isLocked);\n  }\n\n  /**\n   * Toggles the locked state of a segment in a segmentation.\n   * @param segmentationId - The ID of the segmentation.\n   * @param segmentIndex - The index of the segment to toggle.\n   */\n  public toggleSegmentLocked(segmentationId: string, segmentIndex: number): void {\n    const isLocked = cstSegmentation.segmentLocking.isSegmentIndexLocked(\n      segmentationId,\n      segmentIndex\n    );\n    this._setSegmentLockedStatus(segmentationId, segmentIndex, !isLocked);\n  }\n\n  public toggleSegmentVisibility(\n    viewportId: string,\n    segmentationId: string,\n    segmentIndex: number,\n    type: SegmentationRepresentations\n  ): void {\n    const isVisible = cstSegmentation.config.visibility.getSegmentIndexVisibility(\n      viewportId,\n      {\n        segmentationId,\n        type,\n      },\n      segmentIndex\n    );\n    this._setSegmentVisibility(viewportId, segmentationId, segmentIndex, !isVisible, type);\n  }\n\n  /**\n   * Sets the color of a specific segment in a segmentation.\n   *\n   * @param viewportId - The ID of the viewport containing the segmentation\n   * @param segmentationId - The ID of the segmentation containing the segment\n   * @param segmentIndex - The index of the segment to set the color for\n   * @param color - The new color to apply to the segment as an array of RGBA values\n   *\n   * @remarks\n   * This method updates the color of a specific segment within a segmentation.\n   * The color parameter should be an array of 4 numbers representing RGBA values.\n   */\n  public setSegmentColor(\n    viewportId: string,\n    segmentationId: string,\n    segmentIndex: number,\n    color: csTypes.Color\n  ): void {\n    cstSegmentation.config.color.setSegmentIndexColor(\n      viewportId,\n      segmentationId,\n      segmentIndex,\n      color\n    );\n  }\n\n  /**\n   * Gets the current color of a specific segment in a segmentation.\n   *\n   * @param viewportId - The ID of the viewport containing the segmentation\n   * @param segmentationId - The ID of the segmentation containing the segment\n   * @param segmentIndex - The index of the segment to get the color for\n   * @returns An array of 4 numbers representing the RGBA color values of the segment\n   *\n   * @remarks\n   * This method retrieves the current color of a specific segment within a segmentation.\n   * The returned color is an array of 4 numbers representing RGBA values.\n   */\n  public getSegmentColor(viewportId: string, segmentationId: string, segmentIndex: number) {\n    return cstSegmentation.config.color.getSegmentIndexColor(\n      viewportId,\n      segmentationId,\n      segmentIndex\n    );\n  }\n\n  /**\n   * Gets the labelmap volume for a segmentation\n   * @param segmentationId - The ID of the segmentation to get the labelmap volume for\n   * @returns The labelmap volume for the segmentation, or null if not found\n   *\n   * @remarks\n   * This method retrieves the labelmap volume data for a specific segmentation.\n   * The labelmap volume contains the actual segmentation data in the form of a 3D volume.\n   * Returns null if the segmentation does not have valid labelmap volume data.\n   */\n  public getLabelmapVolume(segmentationId: string) {\n    const csSegmentation = cstSegmentation.state.getSegmentation(segmentationId);\n    const labelmapData = csSegmentation.representationData[\n      SegmentationRepresentations.Labelmap\n    ] as cstTypes.LabelmapToolOperationDataVolume;\n\n    if (!labelmapData || !labelmapData.volumeId) {\n      return null;\n    }\n\n    const { volumeId } = labelmapData;\n    const labelmapVolume = cache.getVolume(volumeId);\n\n    return labelmapVolume;\n  }\n\n  /**\n   * Sets the label for a specific segment in a segmentation\n   * @param segmentationId - The ID of the segmentation containing the segment\n   * @param segmentIndex - The index of the segment to set the label for\n   * @param label - The new label to apply to the segment\n   *\n   * @remarks\n   * This method updates the text label of a specific segment within a segmentation.\n   * The label is used to identify and describe the segment in the UI.\n   */\n  public setSegmentLabel(segmentationId: string, segmentIndex: number, label: string) {\n    this._setSegmentLabel(segmentationId, segmentIndex, label);\n  }\n\n  /**\n   * Sets the active segment for a segmentation\n   * @param segmentationId - The ID of the segmentation containing the segment\n   * @param segmentIndex - The index of the segment to set as active\n   *\n   * @remarks\n   * This method updates which segment is considered \"active\" within a segmentation.\n   * The active segment is typically highlighted and available for editing operations.\n   */\n  public setActiveSegment(segmentationId: string, segmentIndex: number): void {\n    this._setActiveSegment(segmentationId, segmentIndex);\n  }\n\n  /**\n   * Controls whether inactive segmentations should be rendered in a viewport\n   * @param viewportId - The ID of the viewport to update\n   * @param renderInactive - Whether inactive segmentations should be rendered\n   *\n   * @remarks\n   * This method configures if segmentations that are not currently active\n   * should still be visible in the specified viewport. This can be useful\n   * for comparing or viewing multiple segmentations simultaneously.\n   */\n  public setRenderInactiveSegmentations(viewportId: string, renderInactive: boolean): void {\n    cstSegmentation.config.style.setRenderInactiveSegmentations(viewportId, renderInactive);\n  }\n\n  /**\n   * Gets whether inactive segmentations are being rendered for a viewport\n   * @param viewportId - The ID of the viewport to check\n   * @returns boolean indicating if inactive segmentations are rendered\n   *\n   * @remarks\n   * This method retrieves the current rendering state for inactive segmentations\n   * in the specified viewport. Returns true if inactive segmentations are visible.\n   */\n  public getRenderInactiveSegmentations(viewportId: string): boolean {\n    return cstSegmentation.config.style.getRenderInactiveSegmentations(viewportId);\n  }\n  /**\n   * Sets statistics for a group of segmentations\n   * @param segmentationIds - Array of segmentation IDs that form the group\n   * @param stats - Statistics object containing metrics for the segmentation group\n   *\n   * @remarks\n   * This method stores statistical data for a group of related segmentations.\n   * The stats are stored using a composite key created from the sorted and joined\n   */\n  public setSegmentationGroupStats(segmentationIds: string[], stats: any) {\n    const groupId = this.getGroupId(segmentationIds);\n    this._segmentationGroupStatsMap.set(groupId, stats);\n  }\n\n  /**\n   * Gets statistics for a group of segmentations\n   * @param segmentationIds - Array of segmentation IDs that form the group\n   * @returns The stored statistics object for the segmentation group if found, undefined otherwise\n   */\n  public getSegmentationGroupStats(segmentationIds: string[]) {\n    const groupId = this.getGroupId(segmentationIds);\n    return this._segmentationGroupStatsMap.get(groupId);\n  }\n\n  private getGroupId(segmentationIds: string[]) {\n    return segmentationIds.sort().join(',');\n  }\n\n  /**\n   * Toggles the visibility of a segmentation in the state, and broadcasts the event.\n   * Note: this method does not update the segmentation state in the source. It only\n   * updates the state, and there should be separate listeners for that.\n   * @param ids segmentation ids\n   */\n  public toggleSegmentationRepresentationVisibility = (\n    viewportId: string,\n    { segmentationId, type }: { segmentationId: string; type: SegmentationRepresentations }\n  ): void => {\n    this._toggleSegmentationRepresentationVisibility(viewportId, segmentationId, type);\n  };\n\n  public getViewportIdsWithSegmentation = (segmentationId: string): string[] => {\n    const viewportIds = cstSegmentation.state.getViewportIdsWithSegmentation(segmentationId);\n    return viewportIds;\n  };\n\n  /**\n   * Clears segmentation representations from the viewport.\n   * Unlike removeSegmentationRepresentations, this doesn't update\n   * removed display set and representation maps.\n   * We track removed segmentations manually to avoid re-adding them\n   * when the display set is added again.\n   * @param viewportId - The viewport ID to clear segmentation representations from.\n   */\n  public clearSegmentationRepresentations(viewportId: string): void {\n    this.removeSegmentationRepresentations(viewportId);\n  }\n\n  /**\n   * Completely removes a segmentation from the state\n   * @param segmentationId - The ID of the segmentation to remove.\n   */\n  public remove(segmentationId: string): void {\n    cstSegmentation.state.removeSegmentation(segmentationId);\n  }\n\n  public removeAllSegmentations(): void {\n    cstSegmentation.state.removeAllSegmentations();\n  }\n\n  /**\n   * It removes the segmentation representations from the viewport.\n   * @param viewportId - The viewport id to remove the segmentation representations from.\n   * @param specifier - The specifier to remove the segmentation representations.\n   *\n   * @remarks\n   * If no specifier is provided, all segmentation representations for the viewport are removed.\n   * If a segmentationId specifier is provided, only the segmentation representation with the specified segmentationId and type are removed.\n   * If a type specifier is provided, only the segmentation representation with the specified type are removed.\n   * If both a segmentationId and type specifier are provided, only the segmentation representation with the specified segmentationId and type are removed.\n   */\n  public removeSegmentationRepresentations(\n    viewportId: string,\n    specifier: {\n      segmentationId?: string;\n      type?: SegmentationRepresentations;\n    } = {}\n  ): void {\n    cstSegmentation.removeSegmentationRepresentations(viewportId, specifier);\n  }\n\n  public jumpToSegmentCenter(\n    segmentationId: string,\n    segmentIndex: number,\n    viewportId?: string,\n    highlightAlpha = 0.9,\n    highlightSegment = true,\n    animationLength = 750,\n    highlightHideOthers = false,\n    highlightFunctionType = 'ease-in-out' // todo: make animation functions configurable from outside\n  ): void {\n    const center = this._getSegmentCenter(segmentationId, segmentIndex);\n    if (!center) {\n      console.warn('No center found for segmentation', segmentationId, segmentIndex);\n      return;\n    }\n\n    const { world } = center as { world: csTypes.Point3 };\n\n    // need to find which viewports are displaying the segmentation\n    const viewportIds = viewportId\n      ? [viewportId]\n      : this.getViewportIdsWithSegmentation(segmentationId);\n\n    viewportIds.forEach(viewportId => {\n      const { viewport } = getEnabledElementByViewportId(viewportId);\n      viewport.jumpToWorld(world);\n\n      highlightSegment &&\n        this.highlightSegment(\n          segmentationId,\n          segmentIndex,\n          viewportId,\n          highlightAlpha,\n          animationLength,\n          highlightHideOthers\n        );\n    });\n  }\n\n  public highlightSegment(\n    segmentationId: string,\n    segmentIndex: number,\n    viewportId?: string,\n    alpha = 0.9,\n    animationLength = 750,\n    hideOthers = true,\n    highlightFunctionType = 'ease-in-out'\n  ): void {\n    if (this.highlightIntervalId) {\n      clearInterval(this.highlightIntervalId);\n    }\n\n    const csSegmentation = this.getCornerstoneSegmentation(segmentationId);\n\n    const viewportIds = viewportId\n      ? [viewportId]\n      : this.getViewportIdsWithSegmentation(segmentationId);\n\n    viewportIds.forEach(viewportId => {\n      const segmentationRepresentation = this.getSegmentationRepresentations(viewportId, {\n        segmentationId,\n      });\n\n      const representation = segmentationRepresentation[0];\n      const { type } = representation;\n      const segments = csSegmentation.segments;\n\n      const highlightFn =\n        type === LABELMAP ? this._highlightLabelmap.bind(this) : this._highlightContour.bind(this);\n\n      const adjustedAlpha = type === LABELMAP ? alpha : 1 - alpha;\n\n      highlightFn(\n        segmentIndex,\n        adjustedAlpha,\n        hideOthers,\n        segments,\n        viewportId,\n        animationLength,\n        representation\n      );\n    });\n  }\n\n  private getAndValidateViewport(viewportId: string) {\n    const csViewport =\n      this.servicesManager.services.cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (!csViewport) {\n      console.warn(`Viewport with id ${viewportId} not found.`);\n      return null;\n    }\n    return csViewport;\n  }\n\n  /**\n   * Sets the visibility of a segmentation representation.\n   *\n   * @param viewportId - The ID of the viewport.\n   * @param segmentationId - The ID of the segmentation.\n   * @param isVisible - The new visibility state.\n   */\n  private _setSegmentationRepresentationVisibility(\n    viewportId: string,\n    segmentationId: string,\n    type: SegmentationRepresentations,\n    isVisible: boolean\n  ): void {\n    const representations = this.getSegmentationRepresentations(viewportId, {\n      segmentationId,\n      type,\n    });\n    const representation = representations[0];\n\n    if (!representation) {\n      console.debug(\n        'No segmentation representation found for the given viewportId and segmentationId'\n      );\n      return;\n    }\n\n    cstSegmentation.config.visibility.setSegmentationRepresentationVisibility(\n      viewportId,\n      {\n        segmentationId,\n        type,\n      },\n      isVisible\n    );\n  }\n\n  private determineViewportAndSegmentationType(csViewport, segmentation) {\n    const isVolumeViewport =\n      csViewport.type === ViewportType.ORTHOGRAPHIC || csViewport.type === ViewportType.VOLUME_3D;\n    const isVolumeSegmentation = 'volumeId' in segmentation.representationData[LABELMAP];\n    return { isVolumeViewport, isVolumeSegmentation };\n  }\n\n  private async handleViewportConversion(\n    isVolumeViewport: boolean,\n    isVolumeSegmentation: boolean,\n    csViewport: csTypes.IViewport,\n    segmentation: cstTypes.Segmentation,\n    viewportId: string,\n    segmentationId: string,\n    representationType: csToolsEnums.SegmentationRepresentations\n  ) {\n    let representationTypeToUse = representationType;\n    let isConverted = false;\n\n    const handler = isVolumeViewport ? this.handleVolumeViewportCase : this.handleStackViewportCase;\n\n    ({ representationTypeToUse, isConverted } = await handler.apply(this, [\n      csViewport,\n      segmentation,\n      isVolumeSegmentation,\n      viewportId,\n      segmentationId,\n    ]));\n\n    return { representationTypeToUse, isConverted };\n  }\n\n  private async handleVolumeViewportCase(csViewport, segmentation, isVolumeSegmentation) {\n    if (csViewport.type === ViewportType.VOLUME_3D) {\n      return { representationTypeToUse: SegmentationRepresentations.Surface, isConverted: false };\n    } else {\n      await this.handleVolumeViewport(\n        csViewport as csTypes.IVolumeViewport,\n        segmentation,\n        isVolumeSegmentation\n      );\n      return { representationTypeToUse: SegmentationRepresentations.Labelmap, isConverted: false };\n    }\n  }\n\n  private async handleStackViewportCase(\n    csViewport: csTypes.IViewport,\n    segmentation: cstTypes.Segmentation,\n    isVolumeSegmentation: boolean,\n    viewportId: string,\n    segmentationId: string\n  ): Promise<{ representationTypeToUse: SegmentationRepresentations; isConverted: boolean }> {\n    if (isVolumeSegmentation) {\n      const isConverted = await this.convertStackToVolumeViewport(csViewport);\n      return { representationTypeToUse: SegmentationRepresentations.Labelmap, isConverted };\n    }\n\n    if (updateLabelmapSegmentationImageReferences(viewportId, segmentationId)) {\n      return { representationTypeToUse: SegmentationRepresentations.Labelmap, isConverted: false };\n    }\n\n    const isConverted = await this.attemptStackToVolumeConversion(\n      csViewport as csTypes.IStackViewport,\n      segmentation,\n      viewportId,\n      segmentationId\n    );\n\n    return { representationTypeToUse: SegmentationRepresentations.Labelmap, isConverted };\n  }\n\n  private async _addSegmentationRepresentation(\n    viewportId: string,\n    segmentationId: string,\n    representationType: csToolsEnums.SegmentationRepresentations,\n    colorLUTIndex: number,\n    isConverted: boolean,\n    config?: {\n      blendMode?: csEnums.BlendModes;\n    }\n  ): Promise<void> {\n    const representation = {\n      type: representationType,\n      segmentationId,\n      config: { colorLUTOrIndex: colorLUTIndex, ...config },\n    };\n\n    const addRepresentation = () =>\n      cstSegmentation.addSegmentationRepresentations(viewportId, [representation]);\n\n    if (isConverted) {\n      const { viewportGridService } = this.servicesManager.services;\n      await new Promise<void>(resolve => {\n        const { unsubscribe } = viewportGridService.subscribe(\n          viewportGridService.EVENTS.GRID_STATE_CHANGED,\n          () => {\n            addRepresentation();\n            unsubscribe();\n            resolve();\n          }\n        );\n      });\n    } else {\n      addRepresentation();\n    }\n  }\n  private async handleVolumeViewport(\n    viewport: csTypes.IVolumeViewport,\n    segmentation: SegmentationData,\n    isVolumeSegmentation: boolean\n  ): Promise<void> {\n    if (isVolumeSegmentation) {\n      return; // Volume Labelmap on Volume Viewport is natively supported\n    }\n\n    const frameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    const imageIds = getLabelmapImageIds(segmentation.segmentationId);\n    const segImage = cache.getImage(imageIds[0]);\n\n    if (segImage?.FrameOfReferenceUID === frameOfReferenceUID) {\n      await convertStackToVolumeLabelmap(segmentation);\n    }\n  }\n\n  private async convertStackToVolumeViewport(viewport: csTypes.IViewport): Promise<boolean> {\n    const { viewportGridService, cornerstoneViewportService } = this.servicesManager.services;\n    const state = viewportGridService.getState();\n    const gridViewport = state.viewports.get(viewport.id);\n\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    const stackViewport = cornerstoneViewportService.getCornerstoneViewport(viewport.id);\n    const { element } = stackViewport;\n\n    const volumeViewportNewVolumeHandler = () => {\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewport.id);\n      volumeViewport.setViewPresentation(prevViewPresentation);\n      volumeViewport.setViewReference(prevViewReference);\n      volumeViewport.render();\n\n      element.removeEventListener(\n        csEnums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        volumeViewportNewVolumeHandler\n      );\n    };\n\n    element.addEventListener(\n      csEnums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      volumeViewportNewVolumeHandler\n    );\n\n    viewportGridService.setDisplaySetsForViewport({\n      viewportId: viewport.id,\n      displaySetInstanceUIDs: gridViewport.displaySetInstanceUIDs,\n      viewportOptions: {\n        ...gridViewport.viewportOptions,\n        viewportType: ViewportType.ORTHOGRAPHIC,\n      },\n    });\n\n    return true;\n  }\n\n  private async attemptStackToVolumeConversion(\n    viewport: csTypes.IStackViewport,\n    segmentation: SegmentationData,\n    viewportId: string,\n    segmentationId: string\n  ): Promise<boolean> {\n    const imageIds = getLabelmapImageIds(segmentation.segmentationId);\n    const frameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    const segImage = cache.getImage(imageIds[0]);\n\n    if (\n      segImage?.FrameOfReferenceUID &&\n      frameOfReferenceUID &&\n      segImage.FrameOfReferenceUID === frameOfReferenceUID\n    ) {\n      const isConverted = await this.convertStackToVolumeViewport(viewport);\n      triggerSegmentationRepresentationModified(\n        viewportId,\n        segmentationId,\n        SegmentationRepresentations.Labelmap\n      );\n\n      return isConverted;\n    }\n  }\n\n  private addSegmentationToSource(segmentationPublicInput: cstTypes.SegmentationPublicInput) {\n    cstSegmentation.addSegmentations([segmentationPublicInput]);\n  }\n\n  private updateSegmentationInSource(\n    segmentationId: string,\n    payload: Partial<cstTypes.Segmentation>\n  ) {\n    cstSegmentation.updateSegmentations([{ segmentationId, payload }]);\n  }\n\n  private _toOHIFSegmentationRepresentation(\n    viewportId: string,\n    csRepresentation: cstTypes.SegmentationRepresentation\n  ): SegmentationRepresentation {\n    const { segmentationId, type, active, visible } = csRepresentation;\n    const { colorLUTIndex } = csRepresentation;\n\n    const segmentsRepresentations: { [segmentIndex: number]: SegmentRepresentation } = {};\n\n    const segmentation = cstSegmentation.state.getSegmentation(segmentationId);\n\n    if (!segmentation) {\n      throw new Error(`Segmentation with ID ${segmentationId} not found.`);\n    }\n\n    const segmentIds = Object.keys(segmentation.segments);\n\n    for (const segmentId of segmentIds) {\n      const segmentIndex = parseInt(segmentId, 10);\n\n      const color = cstSegmentation.config.color.getSegmentIndexColor(\n        viewportId,\n        segmentationId,\n        segmentIndex\n      );\n\n      const isVisible = cstSegmentation.config.visibility.getSegmentIndexVisibility(\n        viewportId,\n        {\n          segmentationId,\n          type,\n        },\n        segmentIndex\n      );\n\n      segmentsRepresentations[segmentIndex] = {\n        color,\n        segmentIndex,\n        opacity: color[3],\n        visible: isVisible,\n      };\n    }\n\n    const styles = cstSegmentation.config.style.getStyle({\n      viewportId,\n      segmentationId,\n      type,\n    });\n\n    const id = `${segmentationId}-${type}-${viewportId}`;\n\n    return {\n      id: id,\n      segmentationId,\n      label: segmentation.label,\n      active,\n      type,\n      visible,\n      segments: segmentsRepresentations,\n      styles,\n      viewportId,\n      colorLUTIndex,\n      config: {},\n    };\n  }\n\n  private _initSegmentationService() {\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_MODIFIED,\n      this._onSegmentationModifiedFromSource\n    );\n\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_REMOVED,\n      this._onSegmentationModifiedFromSource\n    );\n\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_DATA_MODIFIED,\n      this._onSegmentationDataModifiedFromSource\n    );\n\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      this._onSegmentationRepresentationModifiedFromSource\n    );\n\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_REPRESENTATION_ADDED,\n      this._onSegmentationRepresentationModifiedFromSource\n    );\n\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_REPRESENTATION_REMOVED,\n      this._onSegmentationRepresentationModifiedFromSource\n    );\n\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_ADDED,\n      this._onSegmentationAddedFromSource\n    );\n  }\n\n  private getCornerstoneSegmentation(segmentationId: string) {\n    return cstSegmentation.state.getSegmentation(segmentationId);\n  }\n\n  private _highlightLabelmap(\n    segmentIndex: number,\n    alpha: number,\n    hideOthers: boolean,\n    segments: Segment[],\n    viewportId: string,\n    animationLength: number,\n    representation: cstTypes.SegmentationRepresentation\n  ) {\n    const { segmentationId } = representation;\n    const newSegmentSpecificConfig = {\n      fillAlpha: alpha,\n    };\n\n    if (hideOthers) {\n      throw new Error('hideOthers is not working right now');\n      for (let i = 0; i < segments.length; i++) {\n        if (i !== segmentIndex) {\n          newSegmentSpecificConfig[i] = {\n            fillAlpha: 0,\n          };\n        }\n      }\n    }\n\n    const { fillAlpha } = this.getStyle({\n      viewportId,\n      segmentationId,\n      type: LABELMAP,\n      segmentIndex,\n    }) as cstTypes.LabelmapStyle;\n\n    let startTime: number = null;\n    const animation = (timestamp: number) => {\n      if (startTime === null) {\n        startTime = timestamp;\n      }\n\n      const elapsed = timestamp - startTime;\n      const progress = Math.min(elapsed / animationLength, 1);\n\n      cstSegmentation.config.style.setStyle(\n        {\n          segmentationId,\n          segmentIndex,\n          type: LABELMAP,\n        },\n        {\n          fillAlpha: easeInOutBell(progress, fillAlpha),\n        }\n      );\n\n      if (progress < 1) {\n        requestAnimationFrame(animation);\n      } else {\n        cstSegmentation.config.style.setStyle(\n          {\n            segmentationId,\n            segmentIndex,\n            type: LABELMAP,\n          },\n          {}\n        );\n      }\n    };\n\n    requestAnimationFrame(animation);\n  }\n\n  private _highlightContour(\n    segmentIndex: number,\n    alpha: number,\n    hideOthers: boolean,\n    segments: Segment[],\n    viewportId: string,\n    animationLength: number,\n    representation: cstTypes.SegmentationRepresentation\n  ) {\n    const { segmentationId } = representation;\n    const startTime = performance.now();\n\n    const prevStyle = cstSegmentation.config.style.getStyle({\n      type: CONTOUR,\n    }) as ContourStyle;\n\n    const prevOutlineWidth = prevStyle.outlineWidth;\n    // make this configurable\n    const baseline = Math.max(prevOutlineWidth * 3.5, 5);\n\n    const animate = (currentTime: number) => {\n      const progress = (currentTime - startTime) / animationLength;\n      if (progress >= 1) {\n        cstSegmentation.config.style.resetToGlobalStyle();\n        return;\n      }\n\n      const reversedProgress = easeInOutBellRelative(progress, baseline, prevOutlineWidth);\n\n      cstSegmentation.config.style.setStyle(\n        {\n          segmentationId,\n          segmentIndex,\n          type: CONTOUR,\n        },\n        {\n          outlineWidth: reversedProgress,\n        }\n      );\n\n      requestAnimationFrame(animate);\n    };\n\n    requestAnimationFrame(animate);\n  }\n\n  private _toggleSegmentationRepresentationVisibility = (\n    viewportId: string,\n    segmentationId: string,\n    type: SegmentationRepresentations\n  ): void => {\n    const representations = this.getSegmentationRepresentations(viewportId, {\n      segmentationId,\n      type,\n    });\n    const representation = representations[0];\n\n    const segmentsHidden = cstSegmentation.config.visibility.getHiddenSegmentIndices(viewportId, {\n      segmentationId,\n      type: representation.type,\n    });\n\n    const currentVisibility = segmentsHidden.size === 0;\n    this._setSegmentationRepresentationVisibility(\n      viewportId,\n      segmentationId,\n      representation.type,\n      !currentVisibility\n    );\n  };\n\n  private _setActiveSegment(segmentationId: string, segmentIndex: number) {\n    cstSegmentation.segmentIndex.setActiveSegmentIndex(segmentationId, segmentIndex);\n  }\n\n  private _getVolumeIdForDisplaySet(displaySet) {\n    const volumeLoaderSchema = displaySet.volumeLoaderSchema ?? VOLUME_LOADER_SCHEME;\n\n    return `${volumeLoaderSchema}:${displaySet.displaySetInstanceUID}`;\n  }\n\n  private _getSegmentCenter(segmentationId, segmentIndex) {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (!segmentation) {\n      return;\n    }\n\n    const { segments } = segmentation;\n\n    const { cachedStats } = segments[segmentIndex];\n\n    if (!cachedStats || !cachedStats?.center || !cachedStats?.namedStats?.center) {\n      return;\n    }\n\n    const { center } = cachedStats;\n\n    if (!center) {\n      return {\n        world: cachedStats.namedStats.center.value,\n      };\n    }\n\n    return center;\n  }\n\n  private _setSegmentLockedStatus(segmentationId: string, segmentIndex: number, isLocked: boolean) {\n    cstSegmentation.segmentLocking.setSegmentIndexLocked(segmentationId, segmentIndex, isLocked);\n  }\n\n  private _setSegmentVisibility(\n    viewportId: string,\n    segmentationId: string,\n    segmentIndex: number,\n    isVisible: boolean,\n    type?: SegmentationRepresentations\n  ) {\n    cstSegmentation.config.visibility.setSegmentIndexVisibility(\n      viewportId,\n      {\n        segmentationId,\n        type,\n      },\n      segmentIndex,\n      isVisible\n    );\n  }\n\n  private _setSegmentLabel(segmentationId: string, segmentIndex: number, segmentLabel: string) {\n    const segmentation = this.getCornerstoneSegmentation(segmentationId);\n    const { segments } = segmentation;\n\n    segments[segmentIndex].label = segmentLabel;\n\n    cstSegmentation.updateSegmentations([\n      {\n        segmentationId,\n        payload: {\n          segments,\n        },\n      },\n    ]);\n  }\n\n  private _onSegmentationDataModifiedFromSource = evt => {\n    const { segmentationId } = evt.detail;\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_DATA_MODIFIED, {\n      segmentationId,\n    });\n  };\n\n  private _onSegmentationRepresentationModifiedFromSource = evt => {\n    const { segmentationId, viewportId } = evt.detail;\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, {\n      segmentationId,\n      viewportId,\n    });\n  };\n\n  private _onSegmentationModifiedFromSource = (\n    evt: cstTypes.EventTypes.SegmentationModifiedEventType\n  ) => {\n    const { segmentationId } = evt.detail;\n\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_MODIFIED, {\n      segmentationId,\n    });\n  };\n\n  private _onSegmentationAddedFromSource = (\n    evt: cstTypes.EventTypes.SegmentationAddedEventType\n  ) => {\n    const { segmentationId } = evt.detail;\n\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_ADDED, {\n      segmentationId,\n    });\n  };\n}\n\nexport default SegmentationService;\nexport { EVENTS, VALUE_TYPES };\n","/**\n * Maps a DICOM RT Struct ROI Contour to a RTStruct data that can be used\n * in Segmentation Service\n *\n * @param structureSet - A DICOM RT Struct ROI Contour\n * @param rtDisplaySetUID - A CornerstoneTools DisplaySet UID\n * @returns An array of object that includes data, id, segmentIndex, color\n * and geometry Id\n */\nexport function mapROIContoursToRTStructData(structureSet: unknown, rtDisplaySetUID: unknown) {\n  return structureSet.ROIContours.map(\n    ({ contourPoints, ROINumber, ROIName, colorArray, ROIGroup }) => {\n      const data = contourPoints.map(({ points, ...rest }) => {\n        const newPoints = points.map(({ x, y, z }) => {\n          return [x, y, z];\n        });\n\n        return {\n          ...rest,\n          points: newPoints,\n        };\n      });\n\n      const id = ROIName || ROINumber;\n\n      return {\n        data,\n        id,\n        segmentIndex: ROINumber,\n        color: colorArray,\n        group: ROIGroup,\n        geometryId: `${rtDisplaySetUID}:${id}:segmentIndex-${ROINumber}`,\n      };\n    }\n  );\n}\n","import SegmentationService from './SegmentationService';\n\nexport default SegmentationService;\n","import type { Types } from '@ohif/core';\nimport { Enums } from '@cornerstonejs/core';\n\nconst STACK = 'stack';\nconst VOLUME = 'volume';\nconst ORTHOGRAPHIC = 'orthographic';\nconst VOLUME_3D = 'volume3d';\nconst VIDEO = 'video';\nconst WHOLESLIDE = 'wholeslide';\n\nexport default function getCornerstoneViewportType(\n  viewportType: string,\n  displaySets?: Types.DisplaySet[]\n): Enums.ViewportType {\n  const lowerViewportType =\n    displaySets?.[0]?.viewportType?.toLowerCase() || viewportType.toLowerCase();\n  if (lowerViewportType === STACK) {\n    return Enums.ViewportType.STACK;\n  }\n\n  if (lowerViewportType === VIDEO) {\n    return Enums.ViewportType.VIDEO;\n  }\n  if (lowerViewportType === WHOLESLIDE) {\n    return Enums.ViewportType.WHOLE_SLIDE;\n  }\n\n  if (lowerViewportType === VOLUME || lowerViewportType === ORTHOGRAPHIC) {\n    return Enums.ViewportType.ORTHOGRAPHIC;\n  }\n\n  if (lowerViewportType === VOLUME_3D) {\n    return Enums.ViewportType.VOLUME_3D;\n  }\n\n  throw new Error(\n    `Invalid viewport type: ${viewportType}. Valid types are: stack, volume, video, wholeslide`\n  );\n}\n","import { Types } from '@ohif/core';\nimport { cache as cs3DCache, Enums, volumeLoader } from '@cornerstonejs/core';\n\nimport getCornerstoneViewportType from '../../utils/getCornerstoneViewportType';\nimport { StackViewportData, VolumeViewportData } from '../../types/CornerstoneCacheService';\nimport { VOLUME_LOADER_SCHEME } from '../../constants';\n\nclass CornerstoneCacheService {\n  static REGISTRATION = {\n    name: 'cornerstoneCacheService',\n    altName: 'CornerstoneCacheService',\n    create: ({ servicesManager }: Types.Extensions.ExtensionParams): CornerstoneCacheService => {\n      return new CornerstoneCacheService(servicesManager);\n    },\n  };\n\n  stackImageIds: Map<string, string[]> = new Map();\n  volumeImageIds: Map<string, string[]> = new Map();\n  readonly servicesManager: AppTypes.ServicesManager;\n\n  constructor(servicesManager: AppTypes.ServicesManager) {\n    this.servicesManager = servicesManager;\n  }\n\n  public getCacheSize() {\n    return cs3DCache.getCacheSize();\n  }\n\n  public getCacheFreeSpace() {\n    return cs3DCache.getBytesAvailable();\n  }\n\n  public async createViewportData(\n    displaySets: Types.DisplaySet[],\n    viewportOptions: AppTypes.ViewportGrid.GridViewportOptions,\n    dataSource: unknown,\n    initialImageIndex?: number\n  ): Promise<StackViewportData | VolumeViewportData> {\n    const viewportType = viewportOptions.viewportType as string;\n\n    const cs3DViewportType = getCornerstoneViewportType(viewportType, displaySets);\n    let viewportData: StackViewportData | VolumeViewportData;\n\n    if (\n      cs3DViewportType === Enums.ViewportType.ORTHOGRAPHIC ||\n      cs3DViewportType === Enums.ViewportType.VOLUME_3D\n    ) {\n      viewportData = await this._getVolumeViewportData(dataSource, displaySets, cs3DViewportType);\n    } else if (cs3DViewportType === Enums.ViewportType.STACK) {\n      // Everything else looks like a stack\n      viewportData = await this._getStackViewportData(\n        dataSource,\n        displaySets,\n        initialImageIndex,\n        cs3DViewportType\n      );\n    } else {\n      viewportData = await this._getOtherViewportData(\n        dataSource,\n        displaySets,\n        initialImageIndex,\n        cs3DViewportType\n      );\n    }\n\n    viewportData.viewportType = cs3DViewportType;\n\n    return viewportData;\n  }\n\n  public async invalidateViewportData(\n    viewportData: VolumeViewportData | StackViewportData,\n    invalidatedDisplaySetInstanceUID: string,\n    dataSource,\n    displaySetService\n  ): Promise<VolumeViewportData | StackViewportData> {\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\n      const displaySet = displaySetService.getDisplaySetByUID(invalidatedDisplaySetInstanceUID);\n      const imageIds = this._getCornerstoneStackImageIds(displaySet, dataSource);\n\n      // remove images from the cache to be able to re-load them\n      imageIds.forEach(imageId => {\n        if (cs3DCache.getImageLoadObject(imageId)) {\n          cs3DCache.removeImageLoadObject(imageId);\n        }\n      });\n\n      return {\n        viewportType: Enums.ViewportType.STACK,\n        data: {\n          StudyInstanceUID: displaySet.StudyInstanceUID,\n          displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\n          imageIds,\n        },\n      };\n    }\n\n    // Todo: grab the volume and get the id from the viewport itself\n    const volumeId = `${VOLUME_LOADER_SCHEME}:${invalidatedDisplaySetInstanceUID}`;\n\n    const volume = cs3DCache.getVolume(volumeId);\n\n    if (volume) {\n      if (volume.imageIds) {\n        // also for each imageId in the volume, remove the imageId from the cache\n        // since that will hold the old metadata as well\n\n        volume.imageIds.forEach(imageId => {\n          if (cs3DCache.getImageLoadObject(imageId)) {\n            cs3DCache.removeImageLoadObject(imageId, { force: true });\n          }\n        });\n      }\n\n      // this shouldn't be via removeVolumeLoadObject, since that will\n      // remove the texture as well, but here we really just need a remove\n      // from registry so that we load it again\n      cs3DCache._volumeCache.delete(volumeId);\n      this.volumeImageIds.delete(volumeId);\n    }\n\n    const displaySets = viewportData.data.map(({ displaySetInstanceUID }) =>\n      displaySetService.getDisplaySetByUID(displaySetInstanceUID)\n    );\n\n    const newViewportData = await this._getVolumeViewportData(\n      dataSource,\n      displaySets,\n      viewportData.viewportType\n    );\n\n    return newViewportData;\n  }\n\n  private async _getOtherViewportData(\n    dataSource,\n    displaySets,\n    _initialImageIndex,\n    viewportType: Enums.ViewportType\n  ): Promise<StackViewportData> {\n    // TODO - handle overlays and secondary display sets, but for now assume\n    // the 1st display set is the one of interest\n    const [displaySet] = displaySets;\n    if (!displaySet.imageIds) {\n      displaySet.imagesIds = this._getCornerstoneStackImageIds(displaySet, dataSource);\n    }\n    const { imageIds: data, viewportType: dsViewportType } = displaySet;\n    return {\n      viewportType: dsViewportType || viewportType,\n      data: displaySets,\n    };\n  }\n\n  private async _getStackViewportData(\n    dataSource,\n    displaySets,\n    initialImageIndex,\n    viewportType: Enums.ViewportType\n  ): Promise<StackViewportData> {\n    const { uiNotificationService } = this.servicesManager.services;\n    const overlayDisplaySets = displaySets.filter(ds => ds.isOverlayDisplaySet);\n    for (const overlayDisplaySet of overlayDisplaySets) {\n      if (overlayDisplaySet.load && overlayDisplaySet.load instanceof Function) {\n        const { userAuthenticationService } = this.servicesManager.services;\n        const headers = userAuthenticationService.getAuthorizationHeader();\n        try {\n          await overlayDisplaySet.load({ headers });\n        } catch (e) {\n          uiNotificationService.show({\n            title: 'Error loading displaySet',\n            message: e.message,\n            type: 'error',\n          });\n          console.error(e);\n        }\n      }\n    }\n\n    // Ensuring the first non-overlay `displaySet` is always the primary one\n    const StackViewportData = [];\n    for (const displaySet of displaySets) {\n      const { displaySetInstanceUID, StudyInstanceUID, isCompositeStack } = displaySet;\n\n      if (displaySet.load && displaySet.load instanceof Function) {\n        const { userAuthenticationService } = this.servicesManager.services;\n        const headers = userAuthenticationService.getAuthorizationHeader();\n        try {\n          await displaySet.load({ headers });\n        } catch (e) {\n          uiNotificationService.show({\n            title: 'Error loading displaySet',\n            message: e.message,\n            type: 'error',\n          });\n          console.error(e);\n        }\n      }\n\n      let stackImageIds = this.stackImageIds.get(displaySet.displaySetInstanceUID);\n\n      if (!stackImageIds) {\n        stackImageIds = this._getCornerstoneStackImageIds(displaySet, dataSource);\n        // assign imageIds to the displaySet\n        displaySet.imageIds = stackImageIds;\n        this.stackImageIds.set(displaySet.displaySetInstanceUID, stackImageIds);\n      }\n\n      StackViewportData.push({\n        StudyInstanceUID,\n        displaySetInstanceUID,\n        isCompositeStack,\n        imageIds: stackImageIds,\n        initialImageIndex,\n      });\n    }\n\n    return {\n      viewportType,\n      data: StackViewportData,\n    };\n  }\n\n  private async _getVolumeViewportData(\n    dataSource,\n    displaySets,\n    viewportType: Enums.ViewportType\n  ): Promise<VolumeViewportData> {\n    // Todo: Check the cache for multiple scenarios to see if we need to\n    // decache the volume data from other viewports or not\n\n    const volumeData = [];\n\n    for (const displaySet of displaySets) {\n      const { Modality } = displaySet;\n      const isParametricMap = Modality === 'PMAP';\n      const isSeg = Modality === 'SEG';\n\n      // Don't create volumes for the displaySets that have custom load\n      // function (e.g., SEG, RT, since they rely on the reference volumes\n      // and they take care of their own loading after they are created in their\n      // getSOPClassHandler method\n\n      if (displaySet.load && displaySet.load instanceof Function) {\n        const { userAuthenticationService } = this.servicesManager.services;\n        const headers = userAuthenticationService.getAuthorizationHeader();\n\n        try {\n          await displaySet.load({ headers });\n        } catch (e) {\n          const { uiNotificationService } = this.servicesManager.services;\n          uiNotificationService.show({\n            title: 'Error loading displaySet',\n            message: e.message,\n            type: 'error',\n          });\n          console.error(e);\n        }\n\n        // Parametric maps have a `load` method but it should not be loaded in the\n        // same way as SEG and RTSTRUCT but like a normal volume\n        if (!isParametricMap) {\n          volumeData.push({\n            studyInstanceUID: displaySet.StudyInstanceUID,\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\n          });\n\n          // Todo: do some cache check and empty the cache if needed\n          continue;\n        }\n      }\n\n      const volumeLoaderSchema = displaySet.volumeLoaderSchema ?? VOLUME_LOADER_SCHEME;\n      const volumeId = `${volumeLoaderSchema}:${displaySet.displaySetInstanceUID}`;\n      let volumeImageIds = this.volumeImageIds.get(displaySet.displaySetInstanceUID);\n      let volume = cs3DCache.getVolume(volumeId);\n\n      // Parametric maps do not have image ids but they already have volume data\n      // therefore a new volume should not be created.\n      if (!isParametricMap && !isSeg && (!volumeImageIds || !volume)) {\n        volumeImageIds = this._getCornerstoneVolumeImageIds(displaySet, dataSource);\n\n        volume = await volumeLoader.createAndCacheVolume(volumeId, {\n          imageIds: volumeImageIds,\n        });\n\n        this.volumeImageIds.set(displaySet.displaySetInstanceUID, volumeImageIds);\n\n        // Add imageIds to the displaySet for volumes\n        displaySet.imageIds = volumeImageIds;\n      }\n\n      volumeData.push({\n        StudyInstanceUID: displaySet.StudyInstanceUID,\n        displaySetInstanceUID: displaySet.displaySetInstanceUID,\n        volume,\n        volumeId,\n        imageIds: volumeImageIds,\n        isDynamicVolume: displaySet.isDynamicVolume,\n      });\n    }\n\n    return {\n      viewportType,\n      data: volumeData,\n    };\n  }\n\n  private _getCornerstoneStackImageIds(displaySet, dataSource): string[] {\n    return dataSource.getImageIdsForDisplaySet(displaySet);\n  }\n\n  private _getCornerstoneVolumeImageIds(displaySet, dataSource): string[] {\n    if (displaySet.imageIds) {\n      return displaySet.imageIds;\n    }\n\n    const stackImageIds = this._getCornerstoneStackImageIds(displaySet, dataSource);\n\n    return stackImageIds;\n  }\n}\n\nexport default CornerstoneCacheService;\n","import CornerstoneCacheService from './CornerstoneCacheService';\n\nexport default CornerstoneCacheService;\n","const RENDERING_ENGINE_ID = 'OHIFCornerstoneRenderingEngine';\n\nexport { RENDERING_ENGINE_ID };\n","import {\n  Types,\n  Enums,\n  getEnabledElementByViewportId,\n  VolumeViewport,\n  utilities,\n} from '@cornerstonejs/core';\nimport { StackViewportData, VolumeViewportData } from '../../types/CornerstoneCacheService';\nimport getCornerstoneBlendMode from '../../utils/getCornerstoneBlendMode';\nimport getCornerstoneOrientation from '../../utils/getCornerstoneOrientation';\nimport getCornerstoneViewportType from '../../utils/getCornerstoneViewportType';\nimport JumpPresets from '../../utils/JumpPresets';\nimport { SyncGroup } from '../SyncGroupService/SyncGroupService';\n\nexport type InitialImageOptions = {\n  index?: number;\n  preset?: JumpPresets;\n  useOnce?: boolean;\n};\n\nexport type ViewportOptions = {\n  id?: string;\n  viewportType: Enums.ViewportType;\n  toolGroupId: string;\n  viewportId: string;\n  // Presentation ID to store/load presentation state from\n  presentationIds?: AppTypes.PresentationIds;\n  orientation?: Enums.OrientationAxis;\n  background?: Types.Point3;\n  displayArea?: Types.DisplayArea;\n  syncGroups?: SyncGroup[];\n  initialImageOptions?: InitialImageOptions;\n  rotation?: number;\n  flipHorizontal?: boolean;\n  viewReference?: Types.ViewReference;\n  customViewportProps?: Record<string, unknown>;\n  /*\n   * Allows drag and drop of display sets not matching viewport options, but\n   * doesn't show them initially.  Displays initially blank if no required match\n   */\n  allowUnmatchedView?: boolean;\n};\n\nexport type PublicViewportOptions = {\n  id?: string;\n  viewportType?: string;\n  toolGroupId?: string;\n  presentationIds?: string[];\n  viewportId?: string;\n  orientation?: Enums.OrientationAxis;\n  background?: Types.Point3;\n  displayArea?: Types.DisplayArea;\n  syncGroups?: SyncGroup[];\n  rotation?: number;\n  flipHorizontal?: boolean;\n  initialImageOptions?: InitialImageOptions;\n  customViewportProps?: Record<string, unknown>;\n  allowUnmatchedView?: boolean;\n};\n\nexport type DisplaySetSelector = {\n  id?: string;\n  options?: PublicDisplaySetOptions;\n};\n\nexport type PublicDisplaySetOptions = {\n  /** The display set options can have an id in order to distinguish\n   * it from other similar items.\n   */\n  id?: string;\n  voi?: VOI;\n  voiInverted?: boolean;\n  blendMode?: string;\n  slabThickness?: number;\n  colormap?: string;\n  displayPreset?: string;\n};\n\nexport type DisplaySetOptions = {\n  id?: string;\n  voi?: VOI;\n  voiInverted: boolean;\n  blendMode?: Enums.BlendModes;\n  slabThickness?: number;\n  colormap?: { name: string; opacity?: number };\n  displayPreset?: string;\n};\n\ntype VOI = {\n  windowWidth: number;\n  windowCenter: number;\n};\n\nexport type DisplaySet = {\n  displaySetInstanceUID: string;\n};\n\nconst STACK = 'stack';\nconst DEFAULT_TOOLGROUP_ID = 'default';\n\n// Return true if the data contains the given display set UID OR the imageId\n// if it is a composite object.\nconst dataContains = ({ data, displaySetUID, imageId, viewport }): boolean => {\n  if (imageId && data.isCompositeStack && data.imageIds) {\n    return !!data.imageIds.find(dataId => dataId === imageId);\n  }\n\n  if (imageId && (data.volumeId || viewport instanceof VolumeViewport)) {\n    const isAcquisition = !!viewport.getCurrentImageId();\n\n    if (!isAcquisition) {\n      return false;\n    }\n\n    const imageURI = utilities.imageIdToURI(imageId);\n    const hasImageId = viewport.hasImageURI(imageURI);\n\n    if (hasImageId) {\n      return true;\n    }\n  }\n\n  if (data.displaySetInstanceUID === displaySetUID) {\n    return true;\n  }\n\n  return false;\n};\n\nclass ViewportInfo {\n  private viewportId = '';\n  private element: HTMLDivElement;\n  private viewportOptions: ViewportOptions;\n  private displaySetOptions: Array<DisplaySetOptions>;\n  private viewportData: StackViewportData | VolumeViewportData;\n  private renderingEngineId: string;\n  private viewReference: Types.ViewReference;\n\n  constructor(viewportId: string) {\n    this.viewportId = viewportId;\n    this.setPublicViewportOptions({});\n    this.setPublicDisplaySetOptions([{}]);\n  }\n\n  /**\n   * Return true if the viewport contains the given display set UID,\n   * OR if it is a composite stack and contains the given imageId\n   */\n  public contains(displaySetUID: string, imageId: string): boolean {\n    if (!this.viewportData?.data) {\n      return false;\n    }\n\n    const { viewport } = getEnabledElementByViewportId(this.viewportId) || {};\n\n    if (this.viewportData.data.length) {\n      return !!this.viewportData.data.find(data =>\n        dataContains({ data, displaySetUID, imageId, viewport })\n      );\n    }\n\n    return dataContains({\n      data: this.viewportData.data,\n      displaySetUID,\n      imageId,\n      viewport,\n    });\n  }\n\n  public destroy = (): void => {\n    this.element = null;\n    this.viewportData = null;\n    this.viewportOptions = null;\n    this.displaySetOptions = null;\n  };\n\n  public setRenderingEngineId(renderingEngineId: string): void {\n    this.renderingEngineId = renderingEngineId;\n  }\n\n  public getRenderingEngineId(): string {\n    return this.renderingEngineId;\n  }\n\n  public setViewportId(viewportId: string): void {\n    this.viewportId = viewportId;\n  }\n\n  public setElement(element: HTMLDivElement): void {\n    this.element = element;\n  }\n\n  public setViewportData(viewportData: StackViewportData | VolumeViewportData): void {\n    this.viewportData = viewportData;\n  }\n\n  public getViewportData(): StackViewportData | VolumeViewportData {\n    return this.viewportData;\n  }\n\n  public getElement(): HTMLDivElement {\n    return this.element;\n  }\n\n  public getViewportId(): string {\n    return this.viewportId;\n  }\n\n  public getViewReference(): Types.ViewReference {\n    return this.viewportOptions?.viewReference;\n  }\n\n  public setPublicDisplaySetOptions(\n    publicDisplaySetOptions: PublicDisplaySetOptions[] | DisplaySetSelector[]\n  ): Array<DisplaySetOptions> {\n    // map the displaySetOptions and check if they are undefined then set them to default values\n    const displaySetOptions = this.mapDisplaySetOptions(publicDisplaySetOptions);\n\n    this.setDisplaySetOptions(displaySetOptions);\n\n    return this.displaySetOptions;\n  }\n\n  public hasDisplaySet(displaySetInstanceUID: string): boolean {\n    // Todo: currently this does not work for non image & referenceImage displaySets.\n    // Since SEG and other derived displaySets are loaded in a different way, and not\n    // via cornerstoneViewportService\n    let viewportData = this.getViewportData();\n\n    if (\n      viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC ||\n      viewportData.viewportType === Enums.ViewportType.VOLUME_3D\n    ) {\n      viewportData = viewportData as VolumeViewportData;\n      return viewportData.data.some(\n        ({ displaySetInstanceUID: dsUID }) => dsUID === displaySetInstanceUID\n      );\n    }\n\n    viewportData = viewportData as StackViewportData;\n    return viewportData.data.displaySetInstanceUID === displaySetInstanceUID;\n  }\n\n  /**\n   *\n   * @param viewportOptionsEntry - the base values for the options\n   * @param viewportTypeDisplaySet  - allows overriding the viewport type\n   */\n  public setPublicViewportOptions(\n    viewportOptionsEntry: PublicViewportOptions,\n    viewportTypeDisplaySet?: string\n  ): ViewportOptions {\n    const ohifViewportType = viewportTypeDisplaySet || viewportOptionsEntry.viewportType || STACK;\n    const { presentationIds } = viewportOptionsEntry;\n    let { toolGroupId = DEFAULT_TOOLGROUP_ID } = viewportOptionsEntry;\n    // Just assign the orientation for any viewport type and let the viewport deal with it\n    const orientation = getCornerstoneOrientation(viewportOptionsEntry.orientation);\n\n    const viewportType = getCornerstoneViewportType(ohifViewportType);\n\n    if (!toolGroupId) {\n      toolGroupId = DEFAULT_TOOLGROUP_ID;\n    }\n\n    this.setViewportOptions({\n      ...viewportOptionsEntry,\n      viewportId: this.viewportId,\n      viewportType: viewportType as Enums.ViewportType,\n      orientation,\n      toolGroupId,\n      presentationIds,\n    });\n\n    return this.viewportOptions;\n  }\n\n  public setViewportOptions(viewportOptions: ViewportOptions): void {\n    this.viewportOptions = viewportOptions;\n  }\n\n  public getViewportOptions(): ViewportOptions {\n    return this.viewportOptions;\n  }\n\n  public getPresentationIds(): AppTypes.PresentationIds | null {\n    const { presentationIds } = this.viewportOptions;\n    return presentationIds;\n  }\n\n  public setDisplaySetOptions(displaySetOptions: Array<DisplaySetOptions>): void {\n    this.displaySetOptions = displaySetOptions;\n  }\n\n  public getSyncGroups(): SyncGroup[] {\n    this.viewportOptions.syncGroups ||= [];\n    return this.viewportOptions.syncGroups;\n  }\n\n  public getDisplaySetOptions(): Array<DisplaySetOptions> {\n    return this.displaySetOptions;\n  }\n\n  public getViewportType(): Enums.ViewportType {\n    return this.viewportOptions.viewportType || Enums.ViewportType.STACK;\n  }\n\n  public getToolGroupId(): string {\n    return this.viewportOptions.toolGroupId;\n  }\n\n  public getBackground(): Types.Point3 {\n    return this.viewportOptions.background || [0, 0, 0];\n  }\n\n  public getOrientation(): Enums.OrientationAxis {\n    return this.viewportOptions.orientation;\n  }\n\n  public setOrientation(orientation: Enums.OrientationAxis): void {\n    this.viewportOptions.orientation = orientation;\n  }\n\n  public getDisplayArea(): Types.DisplayArea {\n    return this.viewportOptions.displayArea;\n  }\n\n  public getInitialImageOptions(): InitialImageOptions {\n    return this.viewportOptions.initialImageOptions;\n  }\n\n  // Handle incoming public display set options or a display set select\n  // with a contained options.\n  private mapDisplaySetOptions(\n    options: PublicDisplaySetOptions[] | DisplaySetSelector[] = [{}]\n  ): Array<DisplaySetOptions> {\n    const displaySetOptions: Array<DisplaySetOptions> = [];\n\n    options.forEach(item => {\n      let option = item?.options || item;\n      if (!option) {\n        option = {\n          blendMode: undefined,\n          slabThickness: undefined,\n          colormap: undefined,\n          voi: {},\n          voiInverted: false,\n        };\n      }\n      const blendMode = getCornerstoneBlendMode(option.blendMode);\n\n      displaySetOptions.push({\n        voi: option.voi,\n        voiInverted: option.voiInverted,\n        colormap: option.colormap,\n        slabThickness: option.slabThickness,\n        blendMode,\n        displayPreset: option.displayPreset,\n      });\n    });\n\n    return displaySetOptions;\n  }\n}\n\nexport default ViewportInfo;\n","import { Enums } from '@cornerstonejs/core';\n\nconst AXIAL = 'axial';\nconst SAGITTAL = 'sagittal';\nconst CORONAL = 'coronal';\n\nexport default function getCornerstoneOrientation(orientation: string): Enums.OrientationAxis {\n  if (orientation) {\n    switch (orientation.toLowerCase()) {\n      case AXIAL:\n        return Enums.OrientationAxis.AXIAL;\n      case SAGITTAL:\n        return Enums.OrientationAxis.SAGITTAL;\n      case CORONAL:\n        return Enums.OrientationAxis.CORONAL;\n      default:\n        return Enums.OrientationAxis.ACQUISITION;\n    }\n  }\n\n  return Enums.OrientationAxis.ACQUISITION;\n}\n","import { Enums } from '@cornerstonejs/core';\n\nconst MIP = 'mip';\nconst MINIP = 'minip';\nconst AVG = 'avg';\n\nexport default function getCornerstoneBlendMode(blendMode: string): Enums.BlendModes {\n  if (!blendMode) {\n    return Enums.BlendModes.COMPOSITE;\n  }\n\n  if (blendMode.toLowerCase() === MIP) {\n    return Enums.BlendModes.MAXIMUM_INTENSITY_BLEND;\n  }\n\n  if (blendMode.toLowerCase() === MINIP) {\n    return Enums.BlendModes.MINIMUM_INTENSITY_BLEND;\n  }\n\n  if (blendMode.toLowerCase() === AVG) {\n    return Enums.BlendModes.AVERAGE_INTENSITY_BLEND;\n  }\n\n  throw new Error(`Unsupported blend mode: ${blendMode}`);\n}\n","/**\n * Jump Presets - This enum defines the 3 jump states which are available\n * to be used with the jumpToSlice utility function.\n */\nenum JumpPresets {\n  /** Jumps to first slice */\n  First = 'first',\n  /** Jumps to last slice */\n  Last = 'last',\n  /** Jumps to the middle slice */\n  Middle = 'middle',\n}\n\nexport default JumpPresets;\n","import { PubSubService } from '@ohif/core';\nimport { Types as OhifTypes } from '@ohif/core';\nimport {\n  RenderingEngine,\n  StackViewport,\n  Types,\n  getRenderingEngine,\n  utilities as csUtils,\n  VolumeViewport,\n  VolumeViewport3D,\n  cache,\n  Enums as csEnums,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\n\nimport { utilities as csToolsUtils, Enums as csToolsEnums } from '@cornerstonejs/tools';\nimport { IViewportService } from './IViewportService';\nimport { RENDERING_ENGINE_ID } from './constants';\nimport ViewportInfo, {\n  DisplaySetOptions,\n  PublicViewportOptions,\n  ViewportOptions,\n} from './Viewport';\nimport { StackViewportData, VolumeViewportData } from '../../types/CornerstoneCacheService';\nimport {\n  LutPresentation,\n  PositionPresentation,\n  Presentations,\n  SegmentationPresentation,\n  SegmentationPresentationItem,\n} from '../../types/Presentation';\n\nimport JumpPresets from '../../utils/JumpPresets';\nimport { ViewportProperties } from '@cornerstonejs/core/types';\nimport { useLutPresentationStore } from '../../stores/useLutPresentationStore';\nimport { usePositionPresentationStore } from '../../stores/usePositionPresentationStore';\nimport { useSynchronizersStore } from '../../stores/useSynchronizersStore';\nimport { useSegmentationPresentationStore } from '../../stores/useSegmentationPresentationStore';\n\nconst EVENTS = {\n  VIEWPORT_DATA_CHANGED: 'event::cornerstoneViewportService:viewportDataChanged',\n  VIEWPORT_VOLUMES_CHANGED: 'event::cornerstoneViewportService:viewportVolumesChanged',\n};\n\nconst MIN_STACK_VIEWPORTS_TO_ENQUEUE_RESIZE = 12;\nconst MIN_VOLUME_VIEWPORTS_TO_ENQUEUE_RESIZE = 6;\n\nexport const WITH_NAVIGATION = { withNavigation: true, withOrientation: false };\nexport const WITH_ORIENTATION = { withNavigation: true, withOrientation: true };\n\n/**\n * Handles cornerstone viewport logic including enabling, disabling, and\n * updating the viewport.\n */\nclass CornerstoneViewportService extends PubSubService implements IViewportService {\n  static REGISTRATION = {\n    name: 'cornerstoneViewportService',\n    altName: 'CornerstoneViewportService',\n    create: ({\n      servicesManager,\n    }: OhifTypes.Extensions.ExtensionParams): CornerstoneViewportService => {\n      return new CornerstoneViewportService(servicesManager);\n    },\n  };\n\n  renderingEngine: Types.IRenderingEngine | null;\n  viewportsById: Map<string, ViewportInfo> = new Map();\n  viewportGridResizeObserver: ResizeObserver | null;\n  viewportsDisplaySets: Map<string, string[]> = new Map();\n  beforeResizePositionPresentations: Map<string, PositionPresentation> = new Map();\n\n  // Some configs\n  servicesManager: AppTypes.ServicesManager = null;\n\n  resizeQueue = [];\n  viewportResizeTimer = null;\n  gridResizeDelay = 50;\n  gridResizeTimeOut = null;\n\n  constructor(servicesManager: AppTypes.ServicesManager) {\n    super(EVENTS);\n    this.renderingEngine = null;\n    this.viewportGridResizeObserver = null;\n    this.servicesManager = servicesManager;\n  }\n  hangingProtocolService: unknown;\n  viewportsInfo: unknown;\n  sceneVolumeInputs: unknown;\n  viewportDivElements: unknown;\n  ViewportPropertiesMap: unknown;\n  volumeUIDs: unknown;\n  displaySetsNeedRerendering: unknown;\n  viewportDisplaySets: unknown;\n\n  /**\n   * Adds the HTML element to the viewportService\n   * @param {*} viewportId\n   * @param {*} elementRef\n   */\n  public enableViewport(viewportId: string, elementRef: HTMLDivElement): void {\n    const viewportInfo = new ViewportInfo(viewportId);\n    viewportInfo.setElement(elementRef);\n    this.viewportsById.set(viewportId, viewportInfo);\n  }\n\n  public getViewportIds(): string[] {\n    return Array.from(this.viewportsById.keys());\n  }\n\n  /**\n   * It retrieves the renderingEngine if it does exist, or creates one otherwise\n   * @returns {RenderingEngine} rendering engine\n   */\n  public getRenderingEngine() {\n    // get renderingEngine from cache if it exists\n    const renderingEngine = getRenderingEngine(RENDERING_ENGINE_ID);\n\n    if (renderingEngine) {\n      this.renderingEngine = renderingEngine;\n      return this.renderingEngine;\n    }\n\n    if (!renderingEngine || renderingEngine.hasBeenDestroyed) {\n      this.renderingEngine = new RenderingEngine(RENDERING_ENGINE_ID);\n    }\n\n    return this.renderingEngine;\n  }\n\n  /**\n   * It triggers the resize on the rendering engine, and renders the viewports\n   *\n   */\n  public resize() {\n    // https://stackoverflow.com/a/26279685\n    // This resize() call, among other things, rerenders the viewports. But when the entire viewer is\n    // display: none'd, it makes the size of all hidden elements 0, including the viewport canvas and its containers.\n    // Even if the viewer is later displayed again, trying to render when the size is 0 permanently \"breaks\" the\n    // viewport, making it fully black even after the size is normal again. So just ignore resize events when hidden:\n    const areViewportsHidden = Array.from(this.viewportsById.values()).every(viewportInfo => {\n      const element = viewportInfo.getElement();\n\n      return element.clientWidth === 0 && element.clientHeight === 0;\n    });\n    if (areViewportsHidden) {\n      console.warn('Ignoring resize when viewports have size 0');\n      return;\n    }\n\n    const numStackViewportsInViewportGrid = Array.from(this.viewportsById.values()).filter(\n      viewportInfo => viewportInfo.getViewportType() === csEnums.ViewportType.STACK\n    ).length;\n\n    const numVolumeViewportsInViewportGrid = Array.from(this.viewportsById.values()).filter(\n      viewportInfo => viewportInfo.getViewportType() === csEnums.ViewportType.ORTHOGRAPHIC\n    ).length;\n\n    const isEasyResize =\n      numStackViewportsInViewportGrid <= MIN_STACK_VIEWPORTS_TO_ENQUEUE_RESIZE &&\n      numVolumeViewportsInViewportGrid <= MIN_VOLUME_VIEWPORTS_TO_ENQUEUE_RESIZE;\n\n    // if there is a grid resize happening, it means the viewport grid\n    // has been manipulated (e.g., panels closed, added, etc.) and we need\n    // to resize all viewports, so we will add a timeout here to make sure\n    // we don't double resize the viewports when viewports in the grid are\n    // resized individually\n    if (isEasyResize) {\n      this.performResize();\n      this.resetGridResizeTimeout();\n      this.resizeQueue = [];\n      clearTimeout(this.viewportResizeTimer);\n    } else {\n      this.enqueueViewportResizeRequest();\n    }\n  }\n\n  /**\n   * Removes the viewport from cornerstone, and destroys the rendering engine\n   */\n  public destroy() {\n    this._removeResizeObserver();\n    this.viewportGridResizeObserver = null;\n    try {\n      this.renderingEngine?.destroy?.();\n    } catch (e) {\n      console.warn('Rendering engine not destroyed', e);\n    }\n    this.viewportsDisplaySets.clear();\n    this.renderingEngine = null;\n    cache.purgeCache();\n  }\n\n  /**\n   * Disables the viewport inside the renderingEngine, if no viewport is left\n   * it destroys the renderingEngine.\n   *\n   * This is called when the element goes away entirely - with new viewportId's\n   * created for every new viewport, this will be called whenever the set of\n   * viewports is changed, but NOT when the viewport position changes only.\n   *\n   * @param viewportId - The viewportId to disable\n   */\n  public disableElement(viewportId: string): void {\n    this.renderingEngine?.disableElement(viewportId);\n\n    // clean up\n    this.viewportsById.delete(viewportId);\n    this.viewportsDisplaySets.delete(viewportId);\n  }\n\n  /**\n   * Sets the presentations for a given viewport. Presentations is an object\n   * that can define the lut or position for a viewport.\n   *\n   * @param viewportId - The ID of the viewport.\n   * @param presentations - The presentations to apply to the viewport.\n   * @param viewportInfo - Contains a view reference for immediate application\n   */\n  public setPresentations(viewportId: string, presentations: Presentations): void {\n    const viewport = this.getCornerstoneViewport(viewportId) as\n      | Types.IStackViewport\n      | Types.IVolumeViewport;\n\n    if (!viewport || !presentations) {\n      return;\n    }\n\n    const { lutPresentation, positionPresentation, segmentationPresentation } = presentations;\n\n    // Always set the segmentation presentation first, since there might be some\n    // lutpresentation states that need to be set on the segmentation\n    // Todo: i think we should even await this\n    this._setSegmentationPresentation(viewport, segmentationPresentation);\n\n    this._setLutPresentation(viewport, lutPresentation);\n    this._setPositionPresentation(viewport, { ...positionPresentation, viewportId });\n  }\n\n  /**\n   * Stores the presentation state for a given viewport inside the\n   * each store. This is used to persist the presentation state\n   * across different scenarios e.g., when the viewport is changing the\n   * display set, or when the viewport is moving to a different layout.\n   *\n   * @param viewportId The ID of the viewport.\n   */\n  public storePresentation({ viewportId }) {\n    const presentationIds = this.getPresentationIds(viewportId);\n    const { syncGroupService } = this.servicesManager.services;\n    const synchronizers = syncGroupService.getSynchronizersForViewport(viewportId);\n\n    if (!presentationIds || Object.keys(presentationIds).length === 0) {\n      return null;\n    }\n\n    const { lutPresentationId, positionPresentationId, segmentationPresentationId } =\n      presentationIds;\n\n    const positionPresentation = this._getPositionPresentation(viewportId);\n    const lutPresentation = this._getLutPresentation(viewportId);\n    const segmentationPresentation = this._getSegmentationPresentation(viewportId);\n\n    const { setLutPresentation } = useLutPresentationStore.getState();\n    const { setPositionPresentation } = usePositionPresentationStore.getState();\n    const { setSynchronizers } = useSynchronizersStore.getState();\n    const { setSegmentationPresentation } = useSegmentationPresentationStore.getState();\n\n    if (lutPresentationId) {\n      setLutPresentation(lutPresentationId, lutPresentation);\n    }\n\n    if (positionPresentationId) {\n      setPositionPresentation(positionPresentationId, positionPresentation);\n    }\n\n    if (segmentationPresentationId) {\n      setSegmentationPresentation(segmentationPresentationId, segmentationPresentation);\n    }\n\n    if (synchronizers?.length) {\n      setSynchronizers(\n        viewportId,\n        synchronizers.map(synchronizer => ({\n          id: synchronizer.id,\n          sourceViewports: [...synchronizer.getSourceViewports()],\n          targetViewports: [...synchronizer.getTargetViewports()],\n        }))\n      );\n    }\n  }\n\n  /**\n   * Retrieves the presentations for a given viewport.\n   * @param viewportId - The ID of the viewport.\n   * @returns The presentations for the viewport.\n   */\n  public getPresentations(viewportId: string): Presentations {\n    const positionPresentation = this._getPositionPresentation(viewportId);\n    const lutPresentation = this._getLutPresentation(viewportId);\n    const segmentationPresentation = this._getSegmentationPresentation(viewportId);\n\n    return {\n      positionPresentation,\n      lutPresentation,\n      segmentationPresentation,\n    };\n  }\n\n  private getPresentationIds(viewportId: string): AppTypes.PresentationIds | null {\n    const viewportInfo = this.viewportsById.get(viewportId);\n    if (!viewportInfo) {\n      return null;\n    }\n\n    return viewportInfo.getPresentationIds();\n  }\n\n  private _getPositionPresentation(viewportId: string): PositionPresentation {\n    const csViewport = this.getCornerstoneViewport(viewportId);\n    if (!csViewport) {\n      return;\n    }\n\n    const viewportInfo = this.viewportsById.get(viewportId);\n\n    return {\n      viewportType: viewportInfo.getViewportType(),\n      viewReference: csViewport instanceof VolumeViewport3D ? null : csViewport.getViewReference(),\n      viewPresentation: csViewport.getViewPresentation({ pan: true, zoom: true }),\n      viewportId,\n    };\n  }\n\n  private _getLutPresentation(viewportId: string): LutPresentation {\n    const csViewport = this.getCornerstoneViewport(viewportId) as\n      | Types.IStackViewport\n      | Types.IVolumeViewport;\n\n    if (!csViewport) {\n      return;\n    }\n\n    const cleanProperties = properties => {\n      if (properties?.isComputedVOI) {\n        delete properties?.voiRange;\n        delete properties?.VOILUTFunction;\n      }\n      if (properties?.colormap) {\n        if (properties.colormap?.opacity?.length === 0) {\n          delete properties.colormap.opacity;\n        }\n      }\n      return properties;\n    };\n\n    const properties =\n      csViewport instanceof BaseVolumeViewport\n        ? new Map()\n        : cleanProperties(csViewport.getProperties());\n\n    if (properties instanceof Map) {\n      const volumeIds = (csViewport as Types.IBaseVolumeViewport).getAllVolumeIds();\n      volumeIds?.forEach(volumeId => {\n        const csProps = cleanProperties(csViewport.getProperties(volumeId));\n        properties.set(volumeId, csProps);\n      });\n    }\n\n    const viewportInfo = this.viewportsById.get(viewportId);\n\n    return {\n      viewportType: viewportInfo.getViewportType(),\n      properties,\n    };\n  }\n\n  private _getSegmentationPresentation(viewportId: string): SegmentationPresentation {\n    const { segmentationService } = this.servicesManager.services;\n\n    const presentation = segmentationService.getPresentation(viewportId);\n    return presentation;\n  }\n\n  /**\n   * Sets the viewport data for a viewport.\n   * @param viewportId - The ID of the viewport to set the data for.\n   * @param viewportData - The viewport data to set.\n   * @param publicViewportOptions - The public viewport options.\n   * @param publicDisplaySetOptions - The public display set options.\n   * @param presentations - The presentations to set.\n   */\n  public setViewportData(\n    viewportId: string,\n    viewportData: StackViewportData | VolumeViewportData,\n    publicViewportOptions: PublicViewportOptions,\n    publicDisplaySetOptions: DisplaySetOptions[],\n    presentations?: Presentations\n  ): void {\n    const renderingEngine = this.getRenderingEngine();\n\n    // if not valid viewportData then return early\n    if (viewportData.viewportType === csEnums.ViewportType.STACK) {\n      // check if imageIds is valid\n      if (!viewportData.data[0].imageIds?.length) {\n        return;\n      }\n    }\n\n    // This is the old viewportInfo, which may have old options but we might be\n    // using its viewport (same viewportId as the new viewportInfo)\n    const viewportInfo = this.viewportsById.get(viewportId);\n\n    // We should store the presentation for the current viewport since we can't only\n    // rely to store it WHEN the viewport is disabled since we might keep around the\n    // same viewport/element and just change the viewportData for it (drag and drop etc.)\n    // the disableElement storePresentation handle would not be called in this case\n    // and we would lose the presentation.\n    this.storePresentation({ viewportId: viewportInfo.getViewportId() });\n\n    // Todo: i don't like this here, move it\n    this.servicesManager.services.segmentationService.clearSegmentationRepresentations(\n      viewportInfo.getViewportId()\n    );\n\n    if (!viewportInfo) {\n      throw new Error('element is not enabled for the given viewportId');\n    }\n\n    // override the viewportOptions and displaySetOptions with the public ones\n    // since those are the newly set ones, we set them here so that it handles defaults\n    const displaySetOptions = viewportInfo.setPublicDisplaySetOptions(publicDisplaySetOptions);\n    // Specify an over-ride for the viewport type, even though it is in the public\n    // viewport options, because the one in the viewportData is a requirement based on the\n    // type of data being displayed.\n    const viewportOptions = viewportInfo.setPublicViewportOptions(\n      publicViewportOptions,\n      viewportData.viewportType\n    );\n\n    const element = viewportInfo.getElement();\n    const type = viewportInfo.getViewportType();\n    const background = viewportInfo.getBackground();\n    const orientation = viewportInfo.getOrientation();\n    const displayArea = viewportInfo.getDisplayArea();\n\n    const viewportInput: Types.PublicViewportInput = {\n      viewportId,\n      element,\n      type,\n      defaultOptions: {\n        background,\n        orientation,\n        displayArea,\n      },\n    };\n\n    // Rendering Engine Id set should happen before enabling the element\n    // since there are callbacks that depend on the renderingEngine id\n    // Todo: however, this is a limitation which means that we can't change\n    // the rendering engine id for a given viewport which might be a super edge\n    // case\n    viewportInfo.setRenderingEngineId(renderingEngine.id);\n\n    // Todo: this is not optimal at all, we are re-enabling the already enabled\n    // element which is not what we want. But enabledElement as part of the\n    // renderingEngine is designed to be used like this. This will trigger\n    // ENABLED_ELEMENT again and again, which will run onEnableElement callbacks\n    renderingEngine.enableElement(viewportInput);\n\n    viewportInfo.setViewportOptions(viewportOptions);\n    viewportInfo.setDisplaySetOptions(displaySetOptions);\n    viewportInfo.setViewportData(viewportData);\n    viewportInfo.setViewportId(viewportId);\n\n    this.viewportsById.set(viewportId, viewportInfo);\n\n    const viewport = renderingEngine.getViewport(viewportId);\n    const displaySetPromise = this._setDisplaySets(\n      viewport,\n      viewportData,\n      viewportInfo,\n      presentations\n    );\n\n    // The broadcast event here ensures that listeners have a valid, up to date\n    // viewport to access.  Doing it too early can result in exceptions or\n    // invalid data.\n    displaySetPromise.then(() => {\n      this._broadcastEvent(this.EVENTS.VIEWPORT_DATA_CHANGED, {\n        viewportData,\n        viewportId,\n      });\n    });\n  }\n\n  public getViewportOptions(viewportId: string): ViewportOptions {\n    return this.viewportsById.get(viewportId).getViewportOptions();\n  }\n\n  /**\n   * Retrieves the Cornerstone viewport with the specified ID.\n   *\n   * @param viewportId - The ID of the viewport.\n   * @returns The Cornerstone viewport object if found, otherwise null.\n   */\n  public getCornerstoneViewport(viewportId: string): Types.IViewport | null {\n    const viewportInfo = this.getViewportInfo(viewportId);\n\n    if (!viewportInfo || !this.renderingEngine || this.renderingEngine.hasBeenDestroyed) {\n      return null;\n    }\n\n    const viewport = this.renderingEngine.getViewport(viewportId);\n\n    return viewport;\n  }\n\n  /**\n   * Retrieves the viewport information for a given viewport ID. The viewport information\n   * is the OHIF construct that holds different options and data for a given viewport and\n   * is different from the cornerstone viewport.\n   *\n   * @param viewportId The ID of the viewport.\n   * @returns The viewport information.\n   */\n  public getViewportInfo(viewportId: string): ViewportInfo {\n    return this.viewportsById.get(viewportId);\n  }\n\n  public getOrientation(viewportId: string): string {\n    const viewportInfo = this.getViewportInfo(viewportId);\n    return viewportInfo.getOrientation();\n  }\n\n  /**\n   * Looks through the viewports to see if the specified measurement can be\n   * displayed in one of the viewports. This function tries to get a \"best fit\"\n   * viewport to display the image in where it matches, in order:\n   *   * Active viewport that can be navigated to the given image without orientation change\n   *   * Other viewport that can be navigated to the given image without orientation change\n   *   * Active viewport that can change orientation to display the image\n   *   * Other viewport that can change orientation to display the image\n   *\n   * It returns `null` otherwise, indicating that a viewport needs display set/type\n   * changes in order to display the image.\n   *\n   * Notes:\n   *   * If the display set is displayed in multiple viewports all needing orientation change,\n   *     then the active one or first one listed will be modified.  This can create unexpected\n   *     behaviour for MPR views.\n   *   * If the image is contained in multiple display sets, then the first one\n   *     found will be navigated (active first, followed by first found)\n   *\n   * @param measurement - The measurement that is desired to view.\n   * @param activeViewportId - the index that was active at the time the jump\n   *          was initiated.\n   * @return the viewportId that the measurement should be displayed in.\n   */\n  public findNavigationCompatibleViewportId(activeViewportId: string, metadata): string {\n    // First check if the active viewport can just be navigated to show the given item\n    const activeViewport = this.getCornerstoneViewport(activeViewportId);\n    if (!activeViewport) {\n      console.warn('No active viewport found for', activeViewportId);\n    }\n    if (activeViewport?.isReferenceViewable(metadata, { withNavigation: true })) {\n      return activeViewportId;\n    }\n\n    // Next, see if any viewport could be navigated to show the given item,\n    // without considering orientation changes.\n    for (const id of this.viewportsById.keys()) {\n      const viewport = this.getCornerstoneViewport(id);\n      if (viewport?.isReferenceViewable(metadata, { withNavigation: true })) {\n        return id;\n      }\n    }\n\n    // No viewport is in the right display set/orientation to show this, so see if\n    // the active viewport could change orientations to show this\n    if (\n      activeViewport?.isReferenceViewable(metadata, { withNavigation: true, withOrientation: true })\n    ) {\n      return activeViewportId;\n    }\n\n    // See if any viewport could show this with an orientation change\n    for (const id of this.viewportsById.keys()) {\n      const viewport = this.getCornerstoneViewport(id);\n      if (\n        viewport?.isReferenceViewable(metadata, { withNavigation: true, withOrientation: true })\n      ) {\n        return id;\n      }\n    }\n\n    // No luck, need to update the viewport itself\n    return null;\n  }\n\n  /**\n   * Figures out which viewport to update when the viewport type needs to change.\n   * This may not be the active viewport if there is already a viewport showing\n   * the display set, but in the wrong orientation.\n   *\n   * The viewport will need to update the viewport type and/or display set to\n   * display the resulting data.\n   *\n   * The first choice will be a viewport already showing the correct display set,\n   * but showing it as a stack.\n   *\n   * Second choice is to see if there is a viewport already showing the right\n   * orientation for the image, but the wrong display set.  This fixes the\n   * case where the user is in MPR and a viewport other than active should be\n   * the one to change to display the iamge.\n   *\n   * Final choice is to use the provide activeViewportId.  This will cover\n   * changes to/from video and wsi viewports and other cases where no\n   * viewport is really even close to being able to display the measurement.\n   */\n  public findUpdateableViewportConfiguration(activeViewportId: string, measurement) {\n    const { metadata, displaySetInstanceUID } = measurement;\n    const { volumeId, referencedImageId } = metadata;\n    const { displaySetService, viewportGridService } = this.servicesManager.services;\n    const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n    let { viewportType } = displaySet;\n    if (!viewportType) {\n      if (referencedImageId && !displaySet.isReconstructable) {\n        viewportType = csEnums.ViewportType.STACK;\n      } else if (volumeId) {\n        viewportType = 'volume';\n      }\n    }\n\n    // Find viewports that could be updated to be volumes to show this view\n    // That prefers a viewport already showing the right display set.\n    if (volumeId) {\n      for (const id of this.viewportsById.keys()) {\n        const viewport = this.getCornerstoneViewport(id);\n        if (viewport?.isReferenceViewable(metadata, { asVolume: true, withNavigation: true })) {\n          return {\n            viewportId: id,\n            displaySetInstanceUID,\n            viewportOptions: { viewportType },\n          };\n        }\n      }\n    }\n\n    // Find a viewport in the correct orientation showing a different display set\n    // which could be used to display the annotation.\n    const altMetadata = { ...metadata, volumeId: null, referencedImageId: null };\n    for (const id of this.viewportsById.keys()) {\n      const viewport = this.getCornerstoneViewport(id);\n      const viewportDisplaySetUID = viewportGridService.getDisplaySetsUIDsForViewport(id)?.[0];\n      if (!viewportDisplaySetUID || !viewport) {\n        continue;\n      }\n      if (volumeId) {\n        altMetadata.volumeId = viewportDisplaySetUID;\n      }\n      altMetadata.FrameOfReferenceUID = this._getFrameOfReferenceUID(viewportDisplaySetUID);\n      if (viewport.isReferenceViewable(altMetadata, { asVolume: true, withNavigation: true })) {\n        return {\n          viewportId: id,\n          displaySetInstanceUID,\n          viewportOptions: { viewportType },\n        };\n      }\n    }\n\n    // Just display in the active viewport\n    return {\n      viewportId: activeViewportId,\n      displaySetInstanceUID,\n      viewportOptions: { viewportType },\n    };\n  }\n\n  /**\n   * Sets the image data for the given viewport.\n   */\n  private async _setOtherViewport(\n    viewport: Types.IStackViewport,\n    viewportData: StackViewportData,\n    viewportInfo: ViewportInfo,\n    _presentations: Presentations = {}\n  ): Promise<void> {\n    const [displaySet] = viewportData.data;\n    return viewport.setDataIds(displaySet.imageIds, {\n      groupId: displaySet.displaySetInstanceUID,\n      viewReference: viewportInfo.getViewReference(),\n    });\n  }\n\n  private async _setStackViewport(\n    viewport: Types.IStackViewport,\n    viewportData: StackViewportData,\n    viewportInfo: ViewportInfo,\n    presentations: Presentations = {}\n  ): Promise<void> {\n    const displaySetOptions = viewportInfo.getDisplaySetOptions();\n\n    const displaySetInstanceUIDs = viewportData.data.map(data => data.displaySetInstanceUID);\n\n    // based on the cache service construct always the first one is the non-overlay\n    // and the rest are overlays\n\n    this.viewportsDisplaySets.set(viewport.id, [...displaySetInstanceUIDs]);\n\n    const { initialImageIndex, imageIds } = viewportData.data[0];\n\n    // Use the slice index from any provided view reference, as the view reference\n    // is being used to navigate to the initial view position for measurement\n    // navigation and other navigation forcing specific views.\n    let initialImageIndexToUse =\n      presentations?.positionPresentation?.initialImageIndex ?? <number>initialImageIndex;\n\n    const { rotation, flipHorizontal, displayArea } = viewportInfo.getViewportOptions();\n\n    const properties = { ...presentations.lutPresentation?.properties };\n    if (!presentations.lutPresentation?.properties) {\n      const { voi, voiInverted, colormap } = displaySetOptions[0];\n      if (voi && (voi.windowWidth || voi.windowCenter)) {\n        const { lower, upper } = csUtils.windowLevel.toLowHighRange(\n          voi.windowWidth,\n          voi.windowCenter\n        );\n        properties.voiRange = { lower, upper };\n      }\n\n      properties.invert = voiInverted ?? properties.invert;\n      properties.colormap = colormap ?? properties.colormap;\n    }\n\n    viewport.element.addEventListener(csEnums.Events.VIEWPORT_NEW_IMAGE_SET, evt => {\n      const { element } = evt.detail;\n\n      if (element !== viewport.element) {\n        return;\n      }\n\n      csToolsUtils.stackContextPrefetch.enable(element);\n    });\n\n    const overlayProcessingResults = this._processExtraDisplaySetsForViewport(viewport);\n\n    const referencedImageId = presentations?.positionPresentation?.viewReference?.referencedImageId;\n    if (referencedImageId) {\n      initialImageIndexToUse = imageIds.indexOf(referencedImageId);\n    }\n\n    if (\n      initialImageIndexToUse === undefined ||\n      initialImageIndexToUse === null ||\n      initialImageIndexToUse < 0\n    ) {\n      initialImageIndexToUse = this._getInitialImageIndexForViewport(viewportInfo, imageIds) || 0;\n    }\n\n    return viewport.setStack(imageIds, initialImageIndexToUse).then(() => {\n      viewport.setProperties({ ...properties });\n      this.setPresentations(viewport.id, presentations, viewportInfo);\n\n      if (overlayProcessingResults?.length) {\n        overlayProcessingResults.forEach(overlayProcessingResult => {\n          if (overlayProcessingResult?.addOverlayFn) {\n            overlayProcessingResult.addOverlayFn();\n          }\n        });\n      }\n\n      if (displayArea) {\n        viewport.setDisplayArea(displayArea);\n      }\n      if (rotation) {\n        viewport.setProperties({ rotation });\n      }\n      if (flipHorizontal) {\n        viewport.setCamera({ flipHorizontal: true });\n      }\n    });\n  }\n\n  private _getInitialImageIndexForViewport(\n    viewportInfo: ViewportInfo,\n    imageIds?: string[]\n  ): number {\n    const initialImageOptions = viewportInfo.getInitialImageOptions();\n    if (!initialImageOptions) {\n      return;\n    }\n    const { index, preset } = initialImageOptions;\n    const viewportType = viewportInfo.getViewportType();\n\n    let numberOfSlices;\n    if (viewportType === csEnums.ViewportType.STACK) {\n      numberOfSlices = imageIds.length;\n    } else if (viewportType === csEnums.ViewportType.ORTHOGRAPHIC) {\n      const viewport = this.getCornerstoneViewport(viewportInfo.getViewportId());\n      const imageSliceData = csUtils.getImageSliceDataForVolumeViewport(viewport);\n\n      if (!imageSliceData) {\n        return;\n      }\n\n      ({ numberOfSlices } = imageSliceData);\n    } else {\n      return;\n    }\n\n    return this._getInitialImageIndex(numberOfSlices, index, preset);\n  }\n\n  _getInitialImageIndex(numberOfSlices: number, imageIndex?: number, preset?: JumpPresets): number {\n    const lastSliceIndex = numberOfSlices - 1;\n\n    if (imageIndex !== undefined) {\n      return csUtils.clip(imageIndex, 0, lastSliceIndex);\n    }\n\n    if (preset === JumpPresets.First) {\n      return 0;\n    }\n\n    if (preset === JumpPresets.Last) {\n      return lastSliceIndex;\n    }\n\n    if (preset === JumpPresets.Middle) {\n      // Note: this is a simple but yet very important formula.\n      // since viewport reset works with the middle slice\n      // if the below formula is not correct, on a viewport reset\n      // it will jump to a different slice than the middle one which\n      // was the initial slice, and we have some tools such as Crosshairs\n      // which rely on a relative camera modifications and those will break.\n      return lastSliceIndex % 2 === 0 ? lastSliceIndex / 2 : (lastSliceIndex + 1) / 2;\n    }\n\n    return 0;\n  }\n\n  async _setVolumeViewport(\n    viewport: Types.IVolumeViewport,\n    viewportData: VolumeViewportData,\n    viewportInfo: ViewportInfo,\n    presentations: Presentations = {}\n  ): Promise<void> {\n    // TODO: We need to overhaul the way data sources work so requests can be made\n    // async. I think we should follow the image loader pattern which is async and\n    // has a cache behind it.\n    // The problem is that to set this volume, we need the metadata, but the request is\n    // already in-flight, and the promise is not cached, so we have no way to wait for\n    // it and know when it has fully arrived.\n    // loadStudyMetadata(StudyInstanceUID) => Promise([instances for study])\n    // loadSeriesMetadata(StudyInstanceUID, SeriesInstanceUID) => Promise([instances for series])\n    // If you call loadStudyMetadata and it's not in the DicomMetadataStore cache, it should fire\n    // a request through the data source?\n    // (This call may or may not create sub-requests for series metadata)\n    const { displaySetService } = this.servicesManager.services;\n    const volumeInputArray = [];\n    const displaySetOptionsArray = viewportInfo.getDisplaySetOptions();\n    const { hangingProtocolService } = this.servicesManager.services;\n\n    const volumeToLoad = [];\n    const displaySetInstanceUIDs = [];\n\n    for (const [index, data] of viewportData.data.entries()) {\n      const { imageIds, displaySetInstanceUID } = data;\n      let volume = data.volume;\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n      if (!volume && displaySet.images) {\n        volume = csToolsUtils.getOrCreateImageVolume(displaySet.images.map(image => image.imageId));\n      }\n\n      displaySetInstanceUIDs.push(displaySetInstanceUID);\n\n      if (!volume) {\n        console.log('Volume display set not found');\n        continue;\n      }\n\n      volumeToLoad.push(volume);\n\n      const displaySetOptions = displaySetOptionsArray[index];\n      const { volumeId } = volume;\n      volumeInputArray.push({\n        imageIds,\n        volumeId,\n        modality: displaySet.Modality,\n        displaySetInstanceUID,\n        blendMode: displaySetOptions.blendMode,\n        slabThickness: this._getSlabThickness(displaySetOptions, volumeId),\n      });\n    }\n\n    this.viewportsDisplaySets.set(viewport.id, displaySetInstanceUIDs);\n\n    const volumesNotLoaded = volumeToLoad.filter(volume => !volume.loadStatus?.loaded);\n    if (volumesNotLoaded.length) {\n      if (hangingProtocolService.getShouldPerformCustomImageLoad()) {\n        // delegate the volume loading to the hanging protocol service if it has a custom image load strategy\n        return hangingProtocolService.runImageLoadStrategy({\n          viewportId: viewport.id,\n          volumeInputArray,\n        });\n      }\n\n      volumesNotLoaded.forEach(volume => {\n        if (!volume.loadStatus?.loading && volume.load instanceof Function) {\n          volume.load();\n        }\n      });\n    }\n\n    // It's crucial not to return here because the volume may be loaded,\n    // but the viewport also needs to set the volume.\n    // if (!volumesNotLoaded.length) {\n    //   return;\n    // }\n\n    // This returns the async continuation only\n    return this.setVolumesForViewport(viewport, volumeInputArray, presentations);\n  }\n\n  public async setVolumesForViewport(viewport, volumeInputArray, presentations) {\n    const { displaySetService, viewportGridService } = this.servicesManager.services;\n\n    const viewportInfo = this.getViewportInfo(viewport.id);\n    const displaySetOptions = viewportInfo.getDisplaySetOptions();\n    const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(viewport.id);\n    const displaySet = displaySetService.getDisplaySetByUID(displaySetUIDs[0]);\n    const displaySetModality = displaySet?.Modality;\n\n    // filter overlay display sets (e.g. segmentation) since they will get handled below via the segmentation service\n    const filteredVolumeInputArray = volumeInputArray\n      .map((volumeInput, index) => {\n        return { volumeInput, displaySetOptions: displaySetOptions[index] };\n      })\n      .filter(({ volumeInput }) => {\n        const displaySet = displaySetService.getDisplaySetByUID(volumeInput.displaySetInstanceUID);\n        return !displaySet?.isOverlayDisplaySet;\n      });\n\n    // Todo: use presentations states\n    const volumesProperties = filteredVolumeInputArray.map(({ volumeInput, displaySetOptions }) => {\n      const { volumeId } = volumeInput;\n      const { voi, voiInverted, colormap, displayPreset } = displaySetOptions;\n      const properties = {} as ViewportProperties;\n\n      if (voi && (voi.windowWidth || voi.windowCenter)) {\n        const { lower, upper } = csUtils.windowLevel.toLowHighRange(\n          voi.windowWidth,\n          voi.windowCenter\n        );\n        properties.voiRange = { lower, upper };\n      }\n\n      if (voiInverted !== undefined) {\n        properties.invert = voiInverted;\n      }\n\n      if (colormap !== undefined) {\n        properties.colormap = colormap;\n      }\n\n      if (displayPreset !== undefined) {\n        properties.preset = displayPreset[displaySetModality] || displayPreset.default;\n      }\n\n      return { properties, volumeId };\n    });\n\n    // For SEG and RT viewports\n    const overlayProcessingResults = this._processExtraDisplaySetsForViewport(viewport) || [];\n    if (!filteredVolumeInputArray.length && overlayProcessingResults?.length) {\n      overlayProcessingResults.forEach(({ imageIds, addOverlayFn }) => {\n        if (addOverlayFn) {\n          // if there is no volume input array, and there is an addOverlayFn, means we need to take\n          // care of the background overlay display set first then the addOverlayFn will add the\n          // SEG displaySet\n          const sampleImageId = imageIds[0];\n          const backgroundDisplaySet = displaySetService.getDisplaySetsBy(\n            displaySet =>\n              !displaySet.isOverlayDisplaySet &&\n              displaySet.images.some(image => image.imageId === sampleImageId)\n          );\n\n          if (backgroundDisplaySet.length !== 1) {\n            throw new Error('Background display set not found');\n          }\n        }\n      });\n    }\n\n    await viewport.setVolumes(volumeInputArray);\n\n    if (overlayProcessingResults?.length) {\n      overlayProcessingResults.forEach(({ addOverlayFn }) => {\n        if (addOverlayFn) {\n          addOverlayFn();\n        }\n      });\n    }\n    viewport.render();\n\n    volumesProperties.forEach(({ properties, volumeId }) => {\n      setTimeout(() => {\n        // seems like a hack but we need the actor to be ready first before\n        // we set the properties\n        viewport.setProperties(properties, volumeId);\n        viewport.render();\n      }, 0);\n    });\n\n    this.setPresentations(viewport.id, presentations, viewportInfo);\n\n    if (!presentations.positionPresentation) {\n      const imageIndex = this._getInitialImageIndexForViewport(viewportInfo);\n\n      if (imageIndex !== undefined) {\n        csUtils.jumpToSlice(viewport.element, {\n          imageIndex,\n        });\n      }\n    }\n\n    this._broadcastEvent(this.EVENTS.VIEWPORT_VOLUMES_CHANGED, {\n      viewportInfo,\n    });\n  }\n\n  private _processExtraDisplaySetsForViewport(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ) {\n    const { displaySetService } = this.servicesManager.services;\n\n    // load any secondary displaySets\n    const displaySetInstanceUIDs = this.viewportsDisplaySets.get(viewport.id);\n\n    // Find overlay display sets (e.g. SEG, RTSTRUCT)\n    const overlayDisplaySets = displaySetInstanceUIDs\n      .map(displaySetService.getDisplaySetByUID)\n      .filter(displaySet => displaySet?.isOverlayDisplaySet);\n\n    // if it is only the overlay displaySet, then we need to get the reference\n    // displaySet imageIds and set them as the imageIds for the viewport,\n    // here we can do some logic if the reference is missing\n    // then find the most similar match of displaySet instead\n    if (!overlayDisplaySets?.length) {\n      return;\n    }\n\n    return overlayDisplaySets.map(overlayDisplaySet => {\n      let imageIds;\n      if (overlayDisplaySet.referencedDisplaySetInstanceUID) {\n        const referenceDisplaySet = displaySetService.getDisplaySetByUID(\n          overlayDisplaySet.referencedDisplaySetInstanceUID\n        );\n        imageIds = referenceDisplaySet.images.map(image => image.imageId);\n      }\n      return {\n        imageIds,\n        addOverlayFn: () => this.addOverlayRepresentationForDisplaySet(overlayDisplaySet, viewport),\n      };\n    });\n  }\n\n  private addOverlayRepresentationForDisplaySet(\n    displaySet: OhifTypes.DisplaySet,\n    viewport: Types.IViewport\n  ) {\n    const { segmentationService } = this.servicesManager.services;\n    const segmentationId = displaySet.displaySetInstanceUID;\n\n    const representationType =\n      displaySet.Modality === 'SEG'\n        ? csToolsEnums.SegmentationRepresentations.Labelmap\n        : csToolsEnums.SegmentationRepresentations.Contour;\n\n    segmentationService.addSegmentationRepresentation(viewport.id, {\n      segmentationId,\n      type: representationType,\n    });\n\n    // store the segmentation presentation id in the viewport info\n    this.storePresentation({ viewportId: viewport.id });\n  }\n\n  // Todo: keepCamera is an interim solution until we have a better solution for\n  // keeping the camera position when the viewport data is changed\n  public updateViewport(viewportId: string, viewportData, keepCamera = false) {\n    const viewportInfo = this.getViewportInfo(viewportId);\n    const viewport = this.getCornerstoneViewport(viewportId);\n    const viewportCamera = viewport.getCamera();\n\n    let displaySetPromise;\n\n    if (viewport instanceof VolumeViewport || viewport instanceof VolumeViewport3D) {\n      displaySetPromise = this._setVolumeViewport(viewport, viewportData, viewportInfo).then(() => {\n        if (keepCamera) {\n          viewport.setCamera(viewportCamera);\n          viewport.render();\n        }\n      });\n    }\n\n    if (viewport instanceof StackViewport) {\n      displaySetPromise = this._setStackViewport(viewport, viewportData, viewportInfo);\n    }\n\n    displaySetPromise.then(() => {\n      this._broadcastEvent(this.EVENTS.VIEWPORT_DATA_CHANGED, {\n        viewportData,\n        viewportId,\n      });\n    });\n  }\n\n  _setDisplaySets(\n    viewport: Types.IViewport,\n    viewportData: StackViewportData | VolumeViewportData,\n    viewportInfo: ViewportInfo,\n    presentations: Presentations = {}\n  ): Promise<void> {\n    if (viewport instanceof StackViewport) {\n      return this._setStackViewport(\n        viewport,\n        viewportData as StackViewportData,\n        viewportInfo,\n        presentations\n      );\n    }\n\n    if ([VolumeViewport, VolumeViewport3D].some(type => viewport instanceof type)) {\n      return this._setVolumeViewport(\n        viewport as Types.IVolumeViewport,\n        viewportData as VolumeViewportData,\n        viewportInfo,\n        presentations\n      );\n    }\n\n    return this._setOtherViewport(\n      viewport,\n      viewportData as StackViewportData,\n      viewportInfo,\n      presentations\n    );\n  }\n\n  /**\n   * Removes the resize observer from the viewport element\n   */\n  _removeResizeObserver() {\n    if (this.viewportGridResizeObserver) {\n      this.viewportGridResizeObserver.disconnect();\n    }\n  }\n\n  _getSlabThickness(displaySetOptions, volumeId) {\n    const { blendMode } = displaySetOptions;\n    if (blendMode === undefined || displaySetOptions.slabThickness === undefined) {\n      return;\n    }\n\n    // if there is a slabThickness set as a number then use it\n    if (typeof displaySetOptions.slabThickness === 'number') {\n      return displaySetOptions.slabThickness;\n    }\n\n    if (displaySetOptions.slabThickness.toLowerCase() === 'fullvolume') {\n      // calculate the slab thickness based on the volume dimensions\n      const imageVolume = cache.getVolume(volumeId);\n\n      const { dimensions, spacing } = imageVolume;\n      const slabThickness = Math.sqrt(\n        Math.pow(dimensions[0] * spacing[0], 2) +\n          Math.pow(dimensions[1] * spacing[1], 2) +\n          Math.pow(dimensions[2] * spacing[2], 2)\n      );\n\n      return slabThickness;\n    }\n  }\n\n  _getFrameOfReferenceUID(displaySetInstanceUID) {\n    const { displaySetService } = this.servicesManager.services;\n    const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n    if (!displaySet) {\n      return;\n    }\n\n    if (displaySet.frameOfReferenceUID) {\n      return displaySet.frameOfReferenceUID;\n    }\n\n    if (displaySet.Modality === 'SEG') {\n      const { instance } = displaySet;\n      return instance.FrameOfReferenceUID;\n    }\n\n    if (displaySet.Modality === 'RTSTRUCT') {\n      const { instance } = displaySet;\n      return instance.ReferencedFrameOfReferenceSequence.FrameOfReferenceUID;\n    }\n\n    const { images } = displaySet;\n    if (images && images.length) {\n      return images[0].FrameOfReferenceUID;\n    }\n  }\n\n  private enqueueViewportResizeRequest() {\n    this.resizeQueue.push(false); // false indicates viewport resize\n\n    clearTimeout(this.viewportResizeTimer);\n    this.viewportResizeTimer = setTimeout(() => {\n      this.processViewportResizeQueue();\n    }, this.gridResizeDelay);\n  }\n\n  private processViewportResizeQueue() {\n    const isGridResizeInQueue = this.resizeQueue.some(isGridResize => isGridResize);\n    if (this.resizeQueue.length > 0 && !isGridResizeInQueue && !this.gridResizeTimeOut) {\n      this.performResize();\n    }\n\n    // Clear the queue after processing viewport resizes\n    this.resizeQueue = [];\n  }\n\n  private performResize() {\n    const isImmediate = false;\n\n    try {\n      const viewports = this.getRenderingEngine().getViewports();\n\n      // Store the current position presentations for each viewport.\n      viewports.forEach(({ id: viewportId }) => {\n        const presentation = this._getPositionPresentation(viewportId);\n\n        // During a resize, the slice index should remain unchanged. This is a temporary fix for\n        // a larger issue regarding the definition of slice index with slab thickness.\n        // We need to revisit this to make it more robust and understandable.\n        delete presentation.viewReference?.sliceIndex;\n        this.beforeResizePositionPresentations.set(viewportId, presentation);\n      });\n\n      // Resize the rendering engine and render.\n      const renderingEngine = this.renderingEngine;\n      renderingEngine.resize(isImmediate);\n      renderingEngine.render();\n\n      // Reset the camera for all viewports using position presentation to maintain relative size/position\n      // which means only those viewports that have a zoom level of 1.\n      this.beforeResizePositionPresentations.forEach((positionPresentation, viewportId) => {\n        this.setPresentations(viewportId, {\n          positionPresentation,\n        });\n      });\n\n      // Resize and render the rendering engine again.\n      renderingEngine.resize(isImmediate);\n      renderingEngine.render();\n    } catch (e) {\n      // This can happen if the resize is too close to navigation or shutdown\n      console.warn('Caught resize exception', e);\n    }\n  }\n\n  private resetGridResizeTimeout() {\n    clearTimeout(this.gridResizeTimeOut);\n    this.gridResizeTimeOut = setTimeout(() => {\n      this.gridResizeTimeOut = null;\n    }, this.gridResizeDelay);\n  }\n\n  private _setLutPresentation(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    lutPresentation: LutPresentation\n  ): void {\n    if (!lutPresentation) {\n      return;\n    }\n\n    const { properties } = lutPresentation;\n    if (viewport instanceof BaseVolumeViewport) {\n      if (properties instanceof Map) {\n        properties.forEach((propertiesEntry, volumeId) => {\n          viewport.setProperties(propertiesEntry, volumeId);\n        });\n      } else {\n        viewport.setProperties(properties);\n      }\n    } else {\n      viewport.setProperties(properties);\n    }\n  }\n\n  private _setPositionPresentation(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    positionPresentation: PositionPresentation\n  ): void {\n    const viewRef = positionPresentation?.viewReference;\n    if (viewRef) {\n      // The orientation can be updated here to navigate to the specified\n      // measurement or previous item, but this will not switch to volume\n      // or to stack from the other type\n      if (viewport.isReferenceViewable(viewRef, WITH_ORIENTATION)) {\n        viewport.setViewReference(viewRef);\n      } else {\n        console.warn('Unable to apply reference viewable', viewRef);\n      }\n    }\n\n    const viewPresentation = positionPresentation?.viewPresentation;\n    if (viewPresentation) {\n      viewport.setViewPresentation(viewPresentation);\n    }\n  }\n\n  private _setSegmentationPresentation(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    segmentationPresentation: SegmentationPresentation\n  ): void {\n    if (!segmentationPresentation) {\n      return;\n    }\n\n    const { segmentationService } = this.servicesManager.services;\n\n    segmentationPresentation.forEach((presentationItem: SegmentationPresentationItem) => {\n      const { segmentationId, type, hydrated } = presentationItem;\n\n      if (hydrated) {\n        segmentationService.addSegmentationRepresentation(viewport.id, {\n          segmentationId,\n          type,\n        });\n      }\n    });\n  }\n\n  /**\n   * Gets the display sets for a given viewport\n   * @param viewportId - The ID of the viewport to get display sets for\n   * @returns Array of display sets for the viewport\n   */\n  public getViewportDisplaySets(viewportId: string): OhifTypes.DisplaySet[] {\n    const { displaySetService } = this.servicesManager.services;\n    const displaySetInstanceUIDs = this.viewportsDisplaySets.get(viewportId) || [];\n\n    return displaySetInstanceUIDs\n      .map(uid => displaySetService.getDisplaySetByUID(uid))\n      .filter(Boolean);\n  }\n}\n\nexport default CornerstoneViewportService;\n","import { ColorMapPreset } from './Colormap';\n\n// Position options\nexport type ColorbarPositionType = 'top' | 'bottom' | 'left' | 'right';\n\n// Tick position options\nexport type TickPositionType = 'top' | 'bottom' | 'left' | 'right';\n\n// CSS style properties for ticks\nexport type TickStyleType = {\n  font?: string;\n  color?: string;\n  maxNumTicks?: number;\n  tickSize?: number;\n  tickWidth?: number;\n  labelMargin?: number;\n  labelOffset?: number;\n};\n\n// Position-specific styles\nexport type PositionStyleType = {\n  [key: string]: string;\n};\n\n// Styles for a specific position (like bottom)\nexport type PositionTickStyleType = {\n  position: TickPositionType;\n  style?: TickStyleType;\n};\n\n// Map of position to position-specific styles\nexport type PositionTickStylesMapType = {\n  [key in ColorbarPositionType]?: PositionTickStyleType;\n};\n\n// Map of position to position-specific CSS\nexport type PositionStylesMapType = {\n  [key in ColorbarPositionType]?: PositionStyleType;\n};\n\n// Container styles\nexport type ContainerStyleType = {\n  position?: string;\n  boxSizing?: string;\n  border?: string;\n  cursor?: string;\n  [key: string]: string | undefined;\n};\n\n// Dimension configuration\nexport type DimensionConfigType = {\n  bottomHeight: string;\n  defaultVerticalWidth: string;\n  defaultHorizontalHeight: string;\n};\n\n// Tick configuration\nexport type TickConfigType = {\n  position: TickPositionType;\n  style?: TickStyleType;\n};\n\n// Base options for colorbar\nexport type ColorbarOptions = {\n  position: ColorbarPositionType;\n  colormaps: Record<string, ColorMapPreset>;\n  activeColormapName: string;\n  ticks?: TickConfigType;\n  width: string;\n};\n\n// Props for the Colorbar component\nexport type ColorbarProps = {\n  viewportId: string;\n  displaySets: Array<any>;\n  colorbarProperties: ColorbarProperties;\n};\n\n// Extended properties with styling options\nexport type ColorbarProperties = {\n  width: string;\n  colorbarTickPosition: TickPositionType;\n  colorbarContainerPosition: ColorbarPositionType;\n  colormaps: Record<string, ColorMapPreset>;\n  colorbarInitialColormap: string;\n\n  // Styling properties\n  positionStyles?: PositionStylesMapType;\n  positionTickStyles?: PositionTickStylesMapType;\n  containerStyles?: ContainerStyleType;\n  tickStyles?: TickStyleType;\n};\n\n// Type for the customization object from the customization service\nexport interface ColorbarCustomization {\n  width: string;\n  colorbarTickPosition: TickPositionType;\n  colorbarContainerPosition: ColorbarPositionType;\n  colormaps: Record<string, ColorMapPreset>;\n  colorbarInitialColormap: string;\n\n  // Styling properties\n  positionStyles: PositionStylesMapType;\n  positionTickStyles: PositionTickStylesMapType;\n  containerStyles: ContainerStyleType;\n  tickStyles: TickStyleType;\n}\n\n// Event types for colorbar changes\nexport enum ChangeTypes {\n  Removed = 'removed',\n  Added = 'added',\n  Modified = 'modified',\n}\n","import { PubSubService, Types as OhifTypes } from '@ohif/core';\nimport { RENDERING_ENGINE_ID } from '../ViewportService/constants';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport { ColorbarOptions, ChangeTypes } from '../../types/Colorbar';\n\nexport default class ColorbarService extends PubSubService {\n  static EVENTS = {\n    STATE_CHANGED: 'event::ColorbarService:stateChanged',\n  };\n\n  public static REGISTRATION = {\n    name: 'colorbarService',\n    create: ({ servicesManager }: OhifTypes.Extensions.ExtensionParams) => {\n      return new ColorbarService(servicesManager);\n    },\n  };\n\n  /**\n   * Structure of colorbars state:\n   * {\n   *   [viewportId]: [\n   *     {\n   *       displaySetInstanceUID: string,\n   *       colorbar: {\n   *         activeColormapName: string,\n   *         colormaps: array,\n   *         volumeId: string (optional),\n   *       }\n   *     }\n   *   ]\n   * }\n   */\n  colorbars = {};\n  servicesManager: AppTypes.ServicesManager;\n\n  constructor(servicesManager: AppTypes.ServicesManager) {\n    super(ColorbarService.EVENTS);\n    this.servicesManager = servicesManager;\n  }\n\n  /**\n   * Gets the appropriate data ID for a viewport and display set\n   * @param viewport - The viewport instance\n   * @param displaySetInstanceUID - The display set instance UID to identify data\n   * @returns The appropriate data ID for the viewport type (volumeId for volume viewports, undefined for stack)\n   */\n  private getDataIdForViewport(viewport, displaySetInstanceUID: string): string | undefined {\n    // For volume viewports, find the matching volumeId\n    if (viewport.getAllVolumeIds) {\n      const volumeIds = viewport.getAllVolumeIds() || [];\n      return volumeIds.length > 0\n        ? volumeIds.find(id => id.includes(displaySetInstanceUID)) || undefined\n        : undefined;\n    }\n\n    // For other viewports, no specific dataId is needed for now\n    return undefined;\n  }\n\n  /**\n   * Adds a colorbar to a specific viewport identified by `viewportId`, using the provided `displaySetInstanceUIDs` and `options`.\n   * This method prepares the colorbar state that will be used by the ViewportColorbarsContainer component.\n   *\n   * @param viewportId The identifier for the viewport where the colorbar will be added.\n   * @param displaySetInstanceUIDs An array of display set instance UIDs to associate with the colorbar.\n   * @param options Configuration options for the colorbar, including position, colormaps, active colormap name, ticks, and width.\n   */\n  public addColorbar(\n    viewportId: string,\n    displaySetInstanceUIDs: string[],\n    options = {} as ColorbarOptions\n  ) {\n    const { displaySetService } = this.servicesManager.services;\n    const renderingEngine = getRenderingEngine(RENDERING_ENGINE_ID);\n    const viewport = renderingEngine.getViewport(viewportId);\n\n    if (!viewport) {\n      return;\n    }\n\n    const actorEntries = viewport.getActors();\n    if (!actorEntries || actorEntries.length === 0) {\n      return;\n    }\n\n    const { activeColormapName, colormaps } = options;\n\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\n      // don't show colorbar for overlay display sets (e.g. segmentation)\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n      if (displaySet.isOverlayDisplaySet) {\n        return;\n      }\n\n      const dataId = this.getDataIdForViewport(viewport, displaySetInstanceUID);\n      const properties = dataId ? viewport.getProperties(dataId) : viewport.getProperties();\n      const colormap = properties?.colormap;\n\n      if (activeColormapName && !colormap) {\n        this.setViewportColormap(\n          viewportId,\n          displaySetInstanceUID,\n          colormaps[activeColormapName],\n          true\n        );\n      }\n\n      // Prepare colorbar data for the React component\n      const colorbarData = {\n        activeColormapName: colormap?.name || options?.activeColormapName || 'Grayscale',\n        colormaps: options.colormaps ? Object.values(options.colormaps) : [],\n        volumeId: dataId,\n        dataId,\n      };\n\n      // Store the colorbar data in the service state\n      if (this.colorbars[viewportId]) {\n        // Check if there's already an entry for this displaySetInstanceUID\n        const existingIndex = this.colorbars[viewportId].findIndex(\n          item => item.displaySetInstanceUID === displaySetInstanceUID\n        );\n\n        if (existingIndex !== -1) {\n          // Update existing colorbar\n          this.colorbars[viewportId][existingIndex].colorbar = colorbarData;\n        } else {\n          // Add new colorbar\n          this.colorbars[viewportId].push({\n            colorbar: colorbarData,\n            displaySetInstanceUID,\n          });\n        }\n      } else {\n        // Create new colorbar array for this viewport\n        this.colorbars[viewportId] = [\n          {\n            colorbar: colorbarData,\n            displaySetInstanceUID,\n          },\n        ];\n      }\n    });\n\n    // Notify listeners about the state change\n    this._broadcastEvent(ColorbarService.EVENTS.STATE_CHANGED, {\n      viewportId,\n      changeType: ChangeTypes.Added,\n    });\n  }\n\n  /**\n   * Removes a colorbar from a specific viewport. If displaySetInstanceUID is provided,\n   * only the colorbar associated with that specific displaySetInstanceUID will be removed.\n   * Otherwise, all colorbars for the given viewport will be removed.\n   *\n   * @param viewportId The identifier for the viewport from which the colorbar will be removed.\n   * @param displaySetInstanceUID Optional. The specific display set instance UID associated with the colorbar to remove.\n   */\n  public removeColorbar(viewportId, displaySetInstanceUID?: string) {\n    const colorbarInfo = this.colorbars[viewportId];\n    if (!colorbarInfo) {\n      return;\n    }\n\n    if (displaySetInstanceUID) {\n      // Find the index of the colorbar with the matching displaySetInstanceUID\n      const index = colorbarInfo.findIndex(\n        info => info.displaySetInstanceUID === displaySetInstanceUID\n      );\n\n      if (index !== -1) {\n        // Remove the colorbar from the array\n        colorbarInfo.splice(index, 1);\n\n        // If there are no more colorbars for this viewport, remove the entry\n        if (colorbarInfo.length === 0) {\n          delete this.colorbars[viewportId];\n        }\n      }\n    } else {\n      delete this.colorbars[viewportId];\n    }\n\n    this._broadcastEvent(ColorbarService.EVENTS.STATE_CHANGED, {\n      viewportId,\n      displaySetInstanceUID,\n      changeType: ChangeTypes.Removed,\n    });\n  }\n\n  /**\n   * Checks whether a colorbar is associated with a given viewport ID.\n   *\n   * @param viewportId The identifier for the viewport to check.\n   * @returns `true` if a colorbar exists for the specified viewport, otherwise `false`.\n   */\n  public hasColorbar(viewportId) {\n    return this.colorbars[viewportId] ? true : false;\n  }\n\n  /**\n   * Retrieves the current state of colorbars, including all active colorbars and their configurations.\n   *\n   * @returns An object representing the current state of all colorbars managed by this service.\n   */\n  public getState() {\n    return this.colorbars;\n  }\n\n  /**\n   * Retrieves colorbar information for a specific viewport ID.\n   *\n   * @param viewportId The identifier for the viewport to retrieve colorbar information for.\n   * @returns The colorbar information associated with the specified viewport, if available.\n   */\n  public getViewportColorbar(viewportId) {\n    return this.colorbars[viewportId];\n  }\n\n  /**\n   * Handles the cleanup and removal of all colorbars from the viewports. This is typically called\n   * when exiting the mode or context in which the colorbars are used, ensuring that no DOM\n   * elements or references are left behind.\n   */\n  public onModeExit() {\n    const viewportIds = Object.keys(this.colorbars);\n    viewportIds.forEach(viewportId => {\n      this.removeColorbar(viewportId);\n    });\n  }\n\n  /**\n   * Sets the colormap for a viewport. This function is used internally to update the colormap the viewport\n   *\n   * @param viewportId The identifier of the viewport to update.\n   * @param displaySetInstanceUID The display set instance UID associated with the viewport.\n   * @param colormap The colormap object to set on the viewport.\n   * @param immediate A boolean indicating whether the viewport should be re-rendered immediately after setting the colormap.\n   */\n  private setViewportColormap(viewportId, displaySetInstanceUID, colormap, immediate = false) {\n    const renderingEngine = getRenderingEngine(RENDERING_ENGINE_ID);\n    const viewport = renderingEngine.getViewport(viewportId);\n    const actorEntries = viewport?.getActors();\n    if (!viewport || !actorEntries || actorEntries.length === 0) {\n      return;\n    }\n\n    // Get the appropriate dataId for this viewport/displaySet combination\n    const dataId = this.getDataIdForViewport(viewport, displaySetInstanceUID);\n\n    // Set properties with or without dataId based on what the viewport supports\n    viewport.setProperties({ colormap }, dataId);\n\n    if (immediate) {\n      viewport.render();\n    }\n  }\n}\n","import ColorbarService from './ColorbarService';\nexport default ColorbarService;\n","import { imageLoader } from '@cornerstonejs/core';\nimport dicomImageLoader from '@cornerstonejs/dicom-image-loader';\nimport { api } from 'dicomweb-client';\nimport { DICOMWeb, errorHandler } from '@ohif/core';\n\nconst getImageId = imageObj => {\n  if (!imageObj) {\n    return;\n  }\n\n  return typeof imageObj.getImageId === 'function' ? imageObj.getImageId() : imageObj.url;\n};\n\nconst findImageIdOnStudies = (studies, displaySetInstanceUID) => {\n  const study = studies.find(study => {\n    const displaySet = study.displaySets.some(\n      displaySet => displaySet.displaySetInstanceUID === displaySetInstanceUID\n    );\n    return displaySet;\n  });\n  const { series = [] } = study;\n  const { instances = [] } = series[0] || {};\n  const instance = instances[0];\n\n  return getImageId(instance);\n};\n\nconst someInvalidStrings = strings => {\n  const stringsArray = Array.isArray(strings) ? strings : [strings];\n  const emptyString = string => !string;\n  let invalid = stringsArray.some(emptyString);\n  return invalid;\n};\n\nconst getImageInstance = dataset => {\n  return dataset && dataset.images && dataset.images[0];\n};\n\nconst getNonImageInstance = dataset => {\n  return dataset && dataset.instance;\n};\n\nconst getImageInstanceId = imageInstance => {\n  return getImageId(imageInstance);\n};\n\nconst fetchIt = (url, headers = DICOMWeb.getAuthorizationHeader()) => {\n  return fetch(url, headers).then(response => response.arrayBuffer());\n};\n\nconst cornerstoneRetriever = imageId => {\n  return imageLoader.loadAndCacheImage(imageId).then(image => {\n    return image && image.data && image.data.byteArray.buffer;\n  });\n};\n\nconst wadorsRetriever = (\n  url,\n  studyInstanceUID,\n  seriesInstanceUID,\n  sopInstanceUID,\n  headers = DICOMWeb.getAuthorizationHeader(),\n  errorInterceptor = errorHandler.getHTTPErrorHandler()\n) => {\n  const config = {\n    url,\n    headers,\n    errorInterceptor,\n  };\n  const dicomWeb = new api.DICOMwebClient(config);\n\n  return dicomWeb.retrieveInstance({\n    studyInstanceUID,\n    seriesInstanceUID,\n    sopInstanceUID,\n  });\n};\n\nconst getImageLoaderType = imageId => {\n  const loaderRegExp = /^\\w+\\:/;\n  const loaderType = loaderRegExp.exec(imageId);\n\n  return (\n    (loaderRegExp.lastIndex === 0 &&\n      loaderType &&\n      loaderType[0] &&\n      loaderType[0].replace(':', '')) ||\n    ''\n  );\n};\n\nclass DicomLoaderService {\n  getLocalData(dataset, studies) {\n    // Use referenced imageInstance\n    const imageInstance = getImageInstance(dataset);\n    const nonImageInstance = getNonImageInstance(dataset);\n\n    if (\n      (!imageInstance && !nonImageInstance) ||\n      !nonImageInstance.imageId?.startsWith('dicomfile')\n    ) {\n      return;\n    }\n\n    const instance = imageInstance || nonImageInstance;\n\n    let imageId = getImageInstanceId(instance);\n\n    // or Try to get it from studies\n    if (someInvalidStrings(imageId)) {\n      imageId = findImageIdOnStudies(studies, dataset.displaySetInstanceUID);\n    }\n\n    if (!someInvalidStrings(imageId)) {\n      return dicomImageLoader.wadouri.loadFileRequest(imageId);\n    }\n  }\n\n  getDataByImageType(dataset) {\n    const imageInstance = getImageInstance(dataset);\n\n    if (imageInstance) {\n      let imageId = getImageInstanceId(imageInstance);\n      let getDicomDataMethod = fetchIt;\n      const loaderType = getImageLoaderType(imageId);\n\n      switch (loaderType) {\n        case 'dicomfile':\n          getDicomDataMethod = cornerstoneRetriever.bind(this, imageId);\n          break;\n        case 'wadors':\n          const url = imageInstance.getData().wadoRoot;\n          const studyInstanceUID = imageInstance.getStudyInstanceUID();\n          const seriesInstanceUID = imageInstance.getSeriesInstanceUID();\n          const sopInstanceUID = imageInstance.getSOPInstanceUID();\n          const invalidParams = someInvalidStrings([\n            url,\n            studyInstanceUID,\n            seriesInstanceUID,\n            sopInstanceUID,\n          ]);\n          if (invalidParams) {\n            return;\n          }\n\n          getDicomDataMethod = wadorsRetriever.bind(\n            this,\n            url,\n            studyInstanceUID,\n            seriesInstanceUID,\n            sopInstanceUID\n          );\n          break;\n        case 'wadouri':\n          // Strip out the image loader specifier\n          imageId = imageId.substring(imageId.indexOf(':') + 1);\n\n          if (someInvalidStrings(imageId)) {\n            return;\n          }\n          getDicomDataMethod = fetchIt.bind(this, imageId);\n          break;\n        default:\n          return;\n      }\n\n      return getDicomDataMethod();\n    }\n  }\n\n  getDataByDatasetType(dataset) {\n    const {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      authorizationHeaders,\n      wadoRoot,\n      wadoUri,\n      instance,\n    } = dataset;\n    // Retrieve wadors or just try to fetch wadouri\n    if (!someInvalidStrings(wadoRoot)) {\n      return wadorsRetriever(\n        wadoRoot,\n        StudyInstanceUID,\n        SeriesInstanceUID,\n        SOPInstanceUID,\n        authorizationHeaders\n      );\n    } else if (!someInvalidStrings(wadoUri)) {\n      return fetchIt(wadoUri, { headers: authorizationHeaders });\n    } else if (!someInvalidStrings(instance?.url)) {\n      // make sure the url is absolute, remove the scope\n      // from it if it is not absolute. For instance it might be dicomweb:http://....\n      // and we need to remove the dicomweb: part\n      const url = instance.url;\n      const absoluteUrl = url.startsWith('http') ? url : url.substring(url.indexOf(':') + 1);\n      return fetchIt(absoluteUrl, { headers: authorizationHeaders });\n    }\n  }\n\n  *getLoaderIterator(dataset, studies, headers) {\n    yield this.getLocalData(dataset, studies);\n    yield this.getDataByImageType(dataset);\n    yield this.getDataByDatasetType(dataset);\n  }\n\n  findDicomDataPromise(dataset, studies, headers) {\n    dataset.authorizationHeaders = headers;\n    const loaderIterator = this.getLoaderIterator(dataset, studies);\n    // it returns first valid retriever method.\n    for (const loader of loaderIterator) {\n      if (loader) {\n        return loader;\n      }\n    }\n\n    // in case of no valid loader\n    throw new Error('Invalid dicom data loader');\n  }\n}\n\nconst dicomLoaderService = new DicomLoaderService();\n\nexport default dicomLoaderService;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { SynchronizerManager, Synchronizer } from '@cornerstonejs/tools';\nimport { EVENTS, getRenderingEngine, type Types, utilities } from '@cornerstonejs/core';\n\nconst frameViewSyncCallback = (\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n) => {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n  }\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId) as Types.IStackViewport;\n\n  const { viewportIndex: targetViewportIndex } = synchronizerInstance.getOptions(\n    targetViewport.viewportId\n  );\n\n  const { viewportIndex: sourceViewportIndex } = synchronizerInstance.getOptions(\n    sourceViewport.viewportId\n  );\n\n  if (targetViewportIndex === undefined || sourceViewportIndex === undefined) {\n    throw new Error('No viewportIndex provided');\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId) as Types.IStackViewport;\n\n  const sourceSliceIndex = sViewport.getSliceIndex();\n  const sliceDifference = Number(targetViewportIndex) - Number(sourceViewportIndex);\n  const targetSliceIndex = sourceSliceIndex + sliceDifference;\n\n  if (targetSliceIndex === tViewport.getSliceIndex()) {\n    return;\n  }\n\n  utilities.jumpToSlice(tViewport.element, {\n    imageIndex: targetSliceIndex,\n  });\n};\n\nconst createFrameViewSynchronizer = (synchronizerName: string): Synchronizer => {\n  const synchronizer = SynchronizerManager.createSynchronizer(\n    synchronizerName,\n    EVENTS.STACK_VIEWPORT_SCROLL,\n    frameViewSyncCallback,\n    { auxiliaryEvents: [{ name: EVENTS.CAMERA_MODIFIED, source: 'element' }] }\n  );\n  return synchronizer;\n};\n\nexport { createFrameViewSynchronizer };\n","import OHIF from '@ohif/core';\nimport i18n from '@ohif/i18n';\nimport { utilities as csUtils, Enums as csEnums } from '@cornerstonejs/core';\nimport dcmjs from 'dcmjs';\nimport { dicomWebUtils } from '@ohif/extension-default';\n\nconst { MetadataModules } = csEnums;\nconst { utils } = OHIF;\nconst { denaturalizeDataset } = dcmjs.data.DicomMetaDictionary;\nconst { transferDenaturalizedDataset, fixMultiValueKeys } = dicomWebUtils;\n\nconst SOP_CLASS_UIDS = {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.6',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-cornerstone.sopClassHandlerModule.DicomMicroscopySopClassHandler';\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const instance = instances[0];\n\n  let singleFrameInstance = instance;\n  let currentFrames = +singleFrameInstance.NumberOfFrames || 1;\n  for (const instanceI of instances) {\n    const framesI = +instanceI.NumberOfFrames || 1;\n    if (framesI < currentFrames) {\n      singleFrameInstance = instanceI;\n      currentFrames = framesI;\n    }\n  }\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  instances = instances.map(inst => {\n    // NOTE: According to DICOM standard a series should have a FrameOfReferenceUID\n    // When the Microscopy file was built by certain tool from multiple image files,\n    // each instance's FrameOfReferenceUID is sometimes different.\n    // Even though this means the file was not well formatted DICOM VL Whole Slide Microscopy Image,\n    // the case is so often, so let's override this value manually here.\n    //\n    // https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html#sect_C.7.4.1.1.1\n\n    inst.FrameOfReferenceUID = instance.FrameOfReferenceUID;\n\n    return inst;\n  });\n\n  const othersFrameOfReferenceUID = instances\n    .filter(v => v)\n    .map(inst => inst.FrameOfReferenceUID)\n    .filter((value, index, array) => array.indexOf(value) === index);\n  if (othersFrameOfReferenceUID.length > 1) {\n    console.warn(\n      'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\n      othersFrameOfReferenceUID\n    );\n  }\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SM',\n    viewportType: csEnums.ViewportType.WHOLE_SLIDE,\n    altImageText: 'Microscopy',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    FrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription: SeriesDescription || 'Microscopy Data',\n    // Map ContentDate/Time to SeriesTime for series list sorting.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    firstInstance: singleFrameInstance, // top level instance in the image Pyramid\n    instance,\n    numImageFrames: 0,\n    numInstances: 1,\n    others: instances, // all other level instances in the image Pyramid\n    instances,\n    othersFrameOfReferenceUID,\n    imageIds: instances.map(instance => instance.imageId),\n    getThumbnailSrc: dataSource.retrieve.getGetThumbnailSrc?.(\n      singleFrameInstance,\n      singleFrameInstance.imageId\n    ),\n    label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t('SM')}`,\n  };\n  // The microscopy viewer directly accesses the metadata already loaded, and\n  // uses the DICOMweb client library directly for loading, so it has to be\n  // provided here.\n  const dicomWebClient = dataSource.retrieve.getWadoDicomWebClient?.();\n  const instanceMap = new Map();\n  instances.forEach(instance => instanceMap.set(instance.imageId, instance));\n  if (dicomWebClient) {\n    const webClient = Object.create(dicomWebClient);\n    // This replaces just the dicom web metadata call with one which retrieves\n    // internally.\n    webClient.getDICOMwebMetadata = getDICOMwebMetadata.bind(webClient, instanceMap);\n\n    csUtils.genericMetadataProvider.addRaw(displaySet.imageIds[0], {\n      type: MetadataModules.WADO_WEB_CLIENT,\n      metadata: webClient,\n    });\n  } else {\n    // Might have some other way of getting the data in the future or internally?\n    // throw new Error('Unable to provide a DICOMWeb client library, microscopy will fail to view');\n  }\n\n  return [displaySet];\n}\n\n/**\n * This method provides access to the internal DICOMweb metadata, used to avoid\n * refetching the DICOMweb data.  It gets assigned as a member function to the\n * dicom web client.\n */\nfunction getDICOMwebMetadata(instanceMap, imageId) {\n  const instance = instanceMap.get(imageId);\n  if (!instance) {\n    console.warn('Metadata not already found for', imageId, 'in', instanceMap);\n    return this.super.getDICOMwebMetadata(imageId);\n  }\n  return transferDenaturalizedDataset(\n    denaturalizeDataset(fixMultiValueKeys(instanceMap.get(imageId)))\n  );\n}\n\nexport function getDicomMicroscopySopClassHandler({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return {\n    name: 'DicomMicroscopySopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE],\n    getDisplaySetsFromSeries,\n  };\n}\n\nexport function getSopClassHandlerModule(params) {\n  return [getDicomMicroscopySopClassHandler(params)];\n}\n","import React from 'react';\nimport { SegmentationTable } from '@ohif/ui-next';\nimport { useActiveViewportSegmentationRepresentations } from '../hooks/useActiveViewportSegmentationRepresentations';\nimport { metaData, cache } from '@cornerstonejs/core';\nimport { useSystem } from '@ohif/core/src';\n\nexport default function PanelSegmentation({ children }: withAppTypes) {\n  const { commandsManager, servicesManager } = useSystem();\n  const { customizationService, displaySetService } = servicesManager.services;\n\n  const { segmentationsWithRepresentations, disabled } =\n    useActiveViewportSegmentationRepresentations();\n\n  // Extract customization options\n  const segmentationTableMode = customizationService.getCustomization(\n    'panelSegmentation.tableMode'\n  ) as unknown as string;\n  const onSegmentationAdd = customizationService.getCustomization(\n    'panelSegmentation.onSegmentationAdd'\n  );\n  const disableEditing = customizationService.getCustomization('panelSegmentation.disableEditing');\n  const showAddSegment = customizationService.getCustomization('panelSegmentation.showAddSegment');\n  const CustomDropdownMenuContent = customizationService.getCustomization(\n    'panelSegmentation.customDropdownMenuContent'\n  );\n\n  const CustomSegmentStatisticsHeader = customizationService.getCustomization(\n    'panelSegmentation.customSegmentStatisticsHeader'\n  );\n\n  // Create handlers object for all command runs\n  const handlers = {\n    onSegmentationClick: (segmentationId: string) => {\n      commandsManager.run('setActiveSegmentation', { segmentationId });\n    },\n    onSegmentAdd: segmentationId => {\n      commandsManager.run('addSegment', { segmentationId });\n    },\n    onSegmentClick: (segmentationId, segmentIndex) => {\n      commandsManager.run('setActiveSegmentAndCenter', { segmentationId, segmentIndex });\n    },\n    onSegmentEdit: (segmentationId, segmentIndex) => {\n      commandsManager.run('editSegmentLabel', { segmentationId, segmentIndex });\n    },\n    onSegmentationEdit: segmentationId => {\n      commandsManager.run('editSegmentationLabel', { segmentationId });\n    },\n    onSegmentColorClick: (segmentationId, segmentIndex) => {\n      commandsManager.run('editSegmentColor', { segmentationId, segmentIndex });\n    },\n    onSegmentDelete: (segmentationId, segmentIndex) => {\n      commandsManager.run('deleteSegment', { segmentationId, segmentIndex });\n    },\n    onToggleSegmentVisibility: (segmentationId, segmentIndex, type) => {\n      commandsManager.run('toggleSegmentVisibility', { segmentationId, segmentIndex, type });\n    },\n    onToggleSegmentLock: (segmentationId, segmentIndex) => {\n      commandsManager.run('toggleSegmentLock', { segmentationId, segmentIndex });\n    },\n    onToggleSegmentationRepresentationVisibility: (segmentationId, type) => {\n      commandsManager.run('toggleSegmentationVisibility', { segmentationId, type });\n    },\n    onSegmentationDownload: segmentationId => {\n      commandsManager.run('downloadSegmentation', { segmentationId });\n    },\n    setStyle: (segmentationId, type, key, value) => {\n      commandsManager.run('setSegmentationStyle', { segmentationId, type, key, value });\n    },\n    toggleRenderInactiveSegmentations: () => {\n      commandsManager.run('toggleRenderInactiveSegmentations');\n    },\n    onSegmentationRemoveFromViewport: segmentationId => {\n      commandsManager.run('removeSegmentationFromViewport', { segmentationId });\n    },\n    onSegmentationDelete: segmentationId => {\n      commandsManager.run('deleteSegmentation', { segmentationId });\n    },\n    setFillAlpha: ({ type }, value) => {\n      commandsManager.run('setFillAlpha', { type, value });\n    },\n    setOutlineWidth: ({ type }, value) => {\n      commandsManager.run('setOutlineWidth', { type, value });\n    },\n    setRenderFill: ({ type }, value) => {\n      commandsManager.run('setRenderFill', { type, value });\n    },\n    setRenderOutline: ({ type }, value) => {\n      commandsManager.run('setRenderOutline', { type, value });\n    },\n    setFillAlphaInactive: ({ type }, value) => {\n      commandsManager.run('setFillAlphaInactive', { type, value });\n    },\n    getRenderInactiveSegmentations: () => {\n      return commandsManager.run('getRenderInactiveSegmentations');\n    },\n  };\n\n  // Generate export options\n  const exportOptions = segmentationsWithRepresentations.map(({ segmentation }) => {\n    const { representationData, segmentationId } = segmentation;\n    const { Labelmap } = representationData;\n\n    if (!Labelmap) {\n      return { segmentationId, isExportable: true };\n    }\n\n    // Check if any segments have anything drawn in any of the viewports\n    const hasAnySegmentData = (() => {\n      const imageIds = Labelmap.imageIds;\n      if (!imageIds?.length) return false;\n\n      for (const imageId of imageIds) {\n        const pixelData = cache.getImage(imageId)?.getPixelData();\n        if (!pixelData) continue;\n\n        for (let i = 0; i < pixelData.length; i++) {\n          if (pixelData[i] !== 0) return true;\n        }\n      }\n      return false;\n    })();\n\n    if (!hasAnySegmentData) {\n      return { segmentationId, isExportable: false };\n    }\n\n    const referencedImageIds = Labelmap.referencedImageIds;\n    const firstImageId = referencedImageIds[0];\n    const instance = metaData.get('instance', firstImageId);\n\n    if (!instance) {\n      return { segmentationId, isExportable: false };\n    }\n\n    const SOPInstanceUID = instance.SOPInstanceUID || instance.SopInstanceUID;\n    const SeriesInstanceUID = instance.SeriesInstanceUID;\n    const displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID\n    );\n\n    return {\n      segmentationId,\n      isExportable: displaySet?.isReconstructable,\n    };\n  });\n\n  // Common props for SegmentationTable\n  const tableProps = {\n    disabled,\n    data: segmentationsWithRepresentations,\n    mode: segmentationTableMode,\n    title: 'Segmentations',\n    exportOptions,\n    disableEditing,\n    onSegmentationAdd,\n    showAddSegment,\n    renderInactiveSegmentations: handlers.getRenderInactiveSegmentations(),\n    ...handlers,\n  };\n\n  const renderSegments = () => {\n    return (\n      <SegmentationTable.Segments>\n        <SegmentationTable.SegmentStatistics.Header>\n          <CustomSegmentStatisticsHeader />\n        </SegmentationTable.SegmentStatistics.Header>\n        <SegmentationTable.SegmentStatistics.Body />\n      </SegmentationTable.Segments>\n    );\n  };\n\n  // Render content based on mode\n  const renderModeContent = () => {\n    if (tableProps.mode === 'collapsed') {\n      return (\n        <SegmentationTable.Collapsed>\n          <SegmentationTable.Collapsed.Header>\n            <SegmentationTable.Collapsed.DropdownMenu>\n              <CustomDropdownMenuContent />\n            </SegmentationTable.Collapsed.DropdownMenu>\n            <SegmentationTable.Collapsed.Selector />\n            <SegmentationTable.Collapsed.Info />\n          </SegmentationTable.Collapsed.Header>\n          <SegmentationTable.Collapsed.Content>\n            <SegmentationTable.AddSegmentRow />\n            {renderSegments()}\n          </SegmentationTable.Collapsed.Content>\n        </SegmentationTable.Collapsed>\n      );\n    }\n\n    return (\n      <>\n        <SegmentationTable.Expanded>\n          <SegmentationTable.Expanded.Header>\n            <SegmentationTable.Expanded.DropdownMenu>\n              <CustomDropdownMenuContent />\n            </SegmentationTable.Expanded.DropdownMenu>\n            <SegmentationTable.Expanded.Label />\n            <SegmentationTable.Expanded.Info />\n          </SegmentationTable.Expanded.Header>\n\n          <SegmentationTable.Expanded.Content>\n            <SegmentationTable.AddSegmentRow />\n            {renderSegments()}\n          </SegmentationTable.Expanded.Content>\n        </SegmentationTable.Expanded>\n      </>\n    );\n  };\n\n  return (\n    <SegmentationTable {...tableProps}>\n      {children}\n      <SegmentationTable.Config />\n      <SegmentationTable.AddSegmentationRow />\n      {renderModeContent()}\n    </SegmentationTable>\n  );\n}\n","import { getWebWorkerManager } from '@cornerstonejs/core';\n\nconst workerManager = getWebWorkerManager();\n\nconst WorkerOptions = {\n  maxWorkerInstances: 1,\n  autoTerminateOnIdle: {\n    enabled: true,\n    idleTimeThreshold: 1000,\n  },\n};\n\n// Register the task\nconst workerFn = () => {\n  return new Worker(new URL('./histogramWorker.js', import.meta.url), {\n    name: 'histogram-worker', // name used by the browser to name the worker\n  });\n};\n\nconst getViewportVolumeHistogram = async (viewport, volume, options?) => {\n  workerManager.registerWorker('histogram-worker', workerFn, WorkerOptions);\n\n  const volumeImageData = viewport.getImageData(volume.volumeId);\n\n  if (!volumeImageData) {\n    return undefined;\n  }\n\n  let scalarData = volume.scalarData;\n\n  if (volume.numTimePoints > 1) {\n    const targetTimePoint = volume.numTimePoints - 1; // or any other time point you need\n    scalarData = volume.voxelManager.getTimePointScalarData(targetTimePoint);\n  } else {\n    scalarData = volume.voxelManager.getCompleteScalarDataArray();\n  }\n\n  if (!scalarData?.length) {\n    return undefined;\n  }\n\n  const { dimensions, origin, direction, spacing } = volume;\n\n  const range = await workerManager.executeTask('histogram-worker', 'getRange', {\n    dimensions,\n    origin,\n    direction,\n    spacing,\n    scalarData,\n  });\n\n  const { minimum: min, maximum: max } = range;\n\n  if (min === Infinity || max === -Infinity) {\n    return undefined;\n  }\n\n  const calcHistOptions = {\n    numBins: 256,\n    min: Math.max(min, options?.min ?? min),\n    max: Math.min(max, options?.max ?? max),\n  };\n\n  const histogram = await workerManager.executeTask('histogram-worker', 'calcHistogram', {\n    data: scalarData,\n    options: calcHistOptions,\n  });\n\n  return histogram;\n};\n\nexport { getViewportVolumeHistogram };\n","import { cache as cs3DCache, Types } from '@cornerstonejs/core';\nimport vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getViewportVolumeHistogram } from './getViewportVolumeHistogram';\n\n/**\n * Gets node opacity from volume actor\n */\nexport const getNodeOpacity = (volumeActor, nodeIndex) => {\n  const volumeOpacity = volumeActor.getProperty().getScalarOpacity(0);\n  const nodeValue = [];\n\n  volumeOpacity.getNodeValue(nodeIndex, nodeValue);\n\n  return nodeValue[1];\n};\n\n/**\n * Checks if the opacity applied to the PET volume follows a specific pattern\n */\nexport const isPetVolumeWithDefaultOpacity = (volumeId: string, volumeActor) => {\n  const volume = cs3DCache.getVolume(volumeId);\n\n  if (!volume || volume.metadata.Modality !== 'PT') {\n    return false;\n  }\n\n  const volumeOpacity = volumeActor.getProperty().getScalarOpacity(0);\n\n  if (volumeOpacity.getSize() < 2) {\n    return false;\n  }\n\n  const node1Value = [];\n  const node2Value = [];\n\n  volumeOpacity.getNodeValue(0, node1Value);\n  volumeOpacity.getNodeValue(1, node2Value);\n\n  if (node1Value[0] !== 0 || node1Value[1] !== 0 || node2Value[0] !== 0.1) {\n    return false;\n  }\n\n  const expectedOpacity = node2Value[1];\n  const opacitySize = volumeOpacity.getSize();\n  const currentNodeValue = [];\n\n  for (let i = 2; i < opacitySize; i++) {\n    volumeOpacity.getNodeValue(i, currentNodeValue);\n    if (currentNodeValue[1] !== expectedOpacity) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Checks if volume has constant opacity\n */\nexport const isVolumeWithConstantOpacity = volumeActor => {\n  const volumeOpacity = volumeActor.getProperty().getScalarOpacity(0);\n  const opacitySize = volumeOpacity.getSize();\n  const firstNodeValue = [];\n\n  volumeOpacity.getNodeValue(0, firstNodeValue);\n  const firstNodeOpacity = firstNodeValue[1];\n\n  for (let i = 0; i < opacitySize; i++) {\n    const currentNodeValue = [];\n    volumeOpacity.getNodeValue(0, currentNodeValue);\n    if (currentNodeValue[1] !== firstNodeOpacity) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Gets window levels data for a viewport\n */\nexport const getWindowLevelsData = async (\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  viewportInfo: any,\n  getVolumeOpacity: (viewport: any, volumeId: string) => number | undefined\n) => {\n  if (!viewport) {\n    return [];\n  }\n\n  const volumeIds = (viewport as Types.IBaseVolumeViewport).getAllVolumeIds();\n  const viewportProperties = viewport.getProperties();\n  const { voiRange } = viewportProperties;\n  const viewportVoi = voiRange\n    ? {\n        windowWidth: voiRange.upper - voiRange.lower,\n        windowCenter: voiRange.lower + (voiRange.upper - voiRange.lower) / 2,\n      }\n    : undefined;\n\n  const windowLevels = await Promise.all(\n    volumeIds.map(async (volumeId, volumeIndex) => {\n      const volume = cs3DCache.getVolume(volumeId);\n\n      const opacity = getVolumeOpacity(viewport, volumeId);\n      const { metadata, scaling } = volume;\n      const modality = metadata.Modality;\n\n      const options = {\n        min: modality === 'PT' ? 0.1 : -999,\n        max: modality === 'PT' ? 5 : 10000,\n      };\n\n      const histogram = await getViewportVolumeHistogram(viewport, volume, options);\n\n      if (!histogram || histogram.range.min === histogram.range.max) {\n        return null;\n      }\n\n      if (!viewportInfo.displaySetOptions || !viewportInfo.displaySetOptions[volumeIndex]) {\n        return null;\n      }\n\n      const { voi: displaySetVOI, colormap: displaySetColormap } =\n        viewportInfo.displaySetOptions[volumeIndex];\n\n      let colormap;\n      if (displaySetColormap) {\n        colormap =\n          csUtils.colormap.getColormap(displaySetColormap.name) ??\n          vtkColorMaps.getPresetByName(displaySetColormap.name);\n      }\n\n      const voi = !volumeIndex ? (viewportVoi ?? displaySetVOI) : displaySetVOI;\n\n      return {\n        viewportId: viewportInfo.viewportId,\n        modality,\n        volumeId,\n        volumeIndex,\n        voi,\n        histogram,\n        colormap,\n        step: scaling?.PT ? 0.05 : 1,\n        opacity,\n        showOpacitySlider: volumeIndex === 1 && opacity !== undefined,\n      };\n    })\n  );\n\n  return windowLevels.filter(Boolean);\n};\n","import React, { useEffect, useCallback, useState, ReactElement, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport { PanelSection, WindowLevel } from '@ohif/ui-next';\nimport { BaseVolumeViewport, Enums, eventTarget } from '@cornerstonejs/core';\nimport { useActiveViewportDisplaySets } from '@ohif/core';\nimport {\n  getNodeOpacity,\n  isPetVolumeWithDefaultOpacity,\n  isVolumeWithConstantOpacity,\n  getWindowLevelsData,\n} from './utils';\n\nconst { Events } = Enums;\n\nconst ViewportWindowLevel = ({\n  servicesManager,\n  viewportId,\n}: withAppTypes<{\n  viewportId: string;\n}>): ReactElement => {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [windowLevels, setWindowLevels] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const displaySets = useActiveViewportDisplaySets();\n\n  const getViewportsWithVolumeIds = useCallback(\n    (volumeIds: string[]) => {\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      const viewports = renderingEngine.getVolumeViewports();\n\n      return viewports.filter(vp => {\n        const viewportVolumeIds = vp instanceof BaseVolumeViewport ? vp.getAllVolumeIds() : [];\n        return (\n          volumeIds.length === viewportVolumeIds.length &&\n          volumeIds.every(volumeId => viewportVolumeIds.includes(volumeId))\n        );\n      });\n    },\n    [cornerstoneViewportService]\n  );\n\n  const getVolumeOpacity = useCallback((viewport, volumeId) => {\n    const volumeActor = viewport.getActors().find(actor => actor.referencedId === volumeId)?.actor;\n\n    if (isPetVolumeWithDefaultOpacity(volumeId, volumeActor)) {\n      return getNodeOpacity(volumeActor, 1);\n    } else if (isVolumeWithConstantOpacity(volumeActor)) {\n      return getNodeOpacity(volumeActor, 0);\n    }\n\n    return undefined;\n  }, []);\n\n  const updateViewportHistograms = useCallback(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    getWindowLevelsData(viewport, viewportInfo, getVolumeOpacity).then(data => {\n      setWindowLevels(data);\n    });\n  }, [viewportId, cornerstoneViewportService, getVolumeOpacity]);\n\n  const handleCornerstoneVOIModified = useCallback(\n    e => {\n      const { detail } = e;\n      const { volumeId, range } = detail;\n      const oldWindowLevel = windowLevels.find(wl => wl.volumeId === volumeId);\n\n      if (!oldWindowLevel) {\n        return;\n      }\n\n      const oldVOI = oldWindowLevel.voi;\n      const windowWidth = range.upper - range.lower;\n      const windowCenter = range.lower + windowWidth / 2;\n\n      if (windowWidth === oldVOI.windowWidth && windowCenter === oldVOI.windowCenter) {\n        return;\n      }\n\n      const newWindowLevel = {\n        ...oldWindowLevel,\n        voi: {\n          windowWidth,\n          windowCenter,\n        },\n      };\n\n      setWindowLevels(\n        windowLevels.map(windowLevel =>\n          windowLevel === oldWindowLevel ? newWindowLevel : windowLevel\n        )\n      );\n    },\n    [windowLevels]\n  );\n\n  const debouncedHandleCornerstoneVOIModified = useMemo(\n    () => debounce(handleCornerstoneVOIModified, 100),\n    [handleCornerstoneVOIModified]\n  );\n\n  const handleVOIChange = useCallback(\n    (volumeId, voi) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n      const newRange = {\n        lower: voi.windowCenter - voi.windowWidth / 2,\n        upper: voi.windowCenter + voi.windowWidth / 2,\n      };\n\n      viewport.setProperties({ voiRange: newRange }, volumeId);\n      viewport.render();\n    },\n    [cornerstoneViewportService, viewportId]\n  );\n\n  const handleOpacityChange = useCallback(\n    (viewportId, _volumeIndex, volumeId, opacity) => {\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n      if (!viewport) {\n        return;\n      }\n\n      const viewportVolumeIds =\n        viewport instanceof BaseVolumeViewport ? viewport.getAllVolumeIds() : [];\n      const viewports = getViewportsWithVolumeIds(viewportVolumeIds);\n\n      viewports.forEach(vp => {\n        vp.setProperties({ colormap: { opacity } }, volumeId);\n        vp.render();\n      });\n    },\n    [getViewportsWithVolumeIds, cornerstoneViewportService]\n  );\n\n  // New function to handle image volume loading completion\n  const handleImageVolumeLoadingCompleted = useCallback(() => {\n    setIsLoading(false);\n    updateViewportHistograms();\n  }, [updateViewportHistograms]);\n\n  // Listen to cornerstone events and set up interval for histogram updates\n  useEffect(() => {\n    document.addEventListener(Events.VOI_MODIFIED, debouncedHandleCornerstoneVOIModified, true);\n    eventTarget.addEventListener(\n      Events.IMAGE_VOLUME_LOADING_COMPLETED,\n      handleImageVolumeLoadingCompleted\n    );\n\n    const intervalId = setInterval(() => {\n      if (isLoading) {\n        updateViewportHistograms();\n      }\n    }, 1000);\n\n    return () => {\n      document.removeEventListener(\n        Events.VOI_MODIFIED,\n        debouncedHandleCornerstoneVOIModified,\n        true\n      );\n      eventTarget.removeEventListener(\n        Events.IMAGE_VOLUME_LOADING_COMPLETED,\n        handleImageVolumeLoadingCompleted\n      );\n      clearInterval(intervalId);\n    };\n  }, [\n    updateViewportHistograms,\n    debouncedHandleCornerstoneVOIModified,\n    handleImageVolumeLoadingCompleted,\n    isLoading,\n  ]);\n\n  // Create a memoized version of displaySet IDs for comparison\n  const displaySetIds = useMemo(() => {\n    return displaySets?.map(ds => ds.displaySetInstanceUID).sort() || [];\n  }, [displaySets]);\n\n  useEffect(() => {\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\n      cornerstoneViewportService.EVENTS.VIEWPORT_VOLUMES_CHANGED,\n      ({ viewportInfo }) => {\n        if (viewportInfo.viewportId === viewportId) {\n          updateViewportHistograms();\n        }\n      }\n    );\n\n    // Only update if displaySets actually changed and are loaded\n    if (displaySetIds.length && !isLoading) {\n      updateViewportHistograms();\n    }\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId, cornerstoneViewportService, updateViewportHistograms, displaySetIds, isLoading]);\n\n  return (\n    <PanelSection defaultOpen={true}>\n      <PanelSection.Header>Window Level</PanelSection.Header>\n      <PanelSection.Content className=\"bg-muted py-1\">\n        {windowLevels.map((windowLevel, i) => {\n          if (!windowLevel.histogram) {\n            return null;\n          }\n\n          return (\n            <WindowLevel\n              key={windowLevel.volumeId}\n              histogram={windowLevel.histogram}\n              voi={windowLevel.voi}\n              step={windowLevel.step}\n              showOpacitySlider={windowLevel.showOpacitySlider}\n              colormap={windowLevel.colormap}\n              onVOIChange={voi => handleVOIChange(windowLevel.volumeId, voi)}\n              opacity={windowLevel.opacity}\n              onOpacityChange={opacity =>\n                handleOpacityChange(windowLevel.viewportId, i, windowLevel.volumeId, opacity)\n              }\n            />\n          );\n        })}\n        {windowLevels.length === 0 && !isLoading && (\n          <div className=\"text-muted-foreground py-2 text-center text-sm\">\n            No window level data available\n          </div>\n        )}\n      </PanelSection.Content>\n    </PanelSection>\n  );\n};\n\nViewportWindowLevel.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n  viewportId: PropTypes.string.isRequired,\n};\n\nexport default ViewportWindowLevel;\n","import React, { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { useViewportGrid } from '@ohif/ui-next';\nimport ViewportWindowLevel from '../ViewportWindowLevel/ViewportWindowLevel';\n\nconst ActiveViewportWindowLevel = ({ servicesManager }: withAppTypes): ReactElement => {\n  const [viewportGrid] = useViewportGrid();\n  const { activeViewportId } = viewportGrid;\n\n  return (\n    <>\n      {activeViewportId && (\n        <ViewportWindowLevel\n          servicesManager={servicesManager}\n          viewportId={activeViewportId}\n        />\n      )}\n    </>\n  );\n};\n\nActiveViewportWindowLevel.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default ActiveViewportWindowLevel;\n","import React from 'react';\nimport { useSystem } from '@ohif/core';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@ohif/ui-next';\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\n\nexport type AccordionGrouping = {\n  [name: string]: unknown;\n};\n\nexport type AccordionGroupProps = {\n  grouping: AccordionGrouping;\n};\n\n/**\n * Searches for the required type from the provided allChildren list and\n * renders them.\n */\nexport const CloneChildren = props => {\n  const { group, allChildren, children, childType, defaultTypes } = props;\n\n  const subType = group?.subType;\n\n  for (const child of allChildren) {\n    if (subType && child.props?.subType !== subType) {\n      continue;\n    }\n    if (childType && child.type === childType) {\n      return React.cloneElement(child, { ...props, children: child.props.children });\n    }\n    if (defaultTypes?.indexOf(child.type) === -1) {\n      return childType({ ...props, children: child });\n    }\n  }\n\n  if (!children) {\n    throw new Error(`No children defined for ${props.name} CloneChildren in group ${group?.name}`);\n  }\n  return React.cloneElement(children, props);\n};\n\n/** Used to exclude defaults */\nconst DEFAULT_TYPES = [GroupAccordion, Content, Trigger];\n\n/**\n * An AccordionGroup is a component that splits a set of items into different\n * groups according to a set of grouping rules.  It then puts the groups\n * into a set of accordion folds selected from the body of the accordion group,\n * looking for matching trigger/content sections according to the type definition\n * in the group with first one found being used.\n *\n * This design allows for easy customization of the component by declaring grouping\n * functions with default grouping setups and then only overriding the specific\n * children needing to be changed.  See the PanelMeasurement for some example\n * possibilities of how to modify the default grouping, or the test-extension\n * measurements panel for a practical, working example.\n */\nexport function AccordionGroup(props) {\n  const { grouping, items, children, sourceChildren, type } = props;\n  const childProps = useSystem();\n  let defaultValue = props.defaultValue;\n  const groups = grouping.groupingFunction(items, grouping, childProps);\n\n  if (!defaultValue) {\n    const defaultGroup = groups.values().find(group => group.isSelected);\n    defaultValue = defaultGroup?.key || defaultGroup?.title;\n  }\n\n  const valueArr =\n    (Array.isArray(defaultValue) && defaultValue) || (defaultValue && [defaultValue]) || [];\n  const sourceChildrenArr = sourceChildren ? React.Children.toArray(sourceChildren) : [];\n  const childrenArr = children ? React.Children.toArray(children) : [];\n  const allChildren = sourceChildrenArr.concat(childrenArr);\n\n  return (\n    <CloneChildren\n      allChildren={allChildren}\n      groups={groups}\n      childType={GroupAccordion}\n      grouping={grouping}\n      defaultValue={valueArr}\n      name={'grouping ' + grouping.name}\n    >\n      <DefaultAccordion name=\"DefaultAccordion\" />\n    </CloneChildren>\n  );\n}\n\nfunction DefaultAccordion(props) {\n  const { groups, defaultValue, grouping, allChildren, asChild } = props;\n  if (!allChildren || !groups) {\n    return null;\n  }\n\n  if (Boolean(asChild)) {\n    return React.cloneElement(props.children, props);\n  }\n\n  return (\n    <Accordion\n      type={grouping.type || 'multiple'}\n      className=\"text-white\"\n      defaultValue={defaultValue}\n    >\n      {[...groups.entries()].map(([key, group]) => {\n        return (\n          <AccordionItem\n            key={group.key + '-i'}\n            value={group.key}\n          >\n            <CloneChildren\n              allChildren={allChildren}\n              group={group}\n              childType={Trigger}\n              name=\"AccordionGroup.Trigger\"\n            />\n            <CloneChildren\n              allChildren={allChildren}\n              group={group}\n              childType={Content}\n              defaultTypes={DEFAULT_TYPES}\n              name=\"AccordionGroup.Content\"\n            />\n          </AccordionItem>\n        );\n      })}\n    </Accordion>\n  );\n}\n\nfunction GroupAccordion(props) {\n  const { groups, children } = props;\n  if (!groups) {\n    return null;\n  }\n  return [...groups.values()].map(group =>\n    React.cloneElement(children, {\n      ...props,\n      children: children.props.children,\n      group,\n      ...group,\n      key: group.title,\n    })\n  );\n}\n\nfunction Content(props) {\n  const { children, asChild, ...childProps } = props;\n  const { group } = props;\n  Object.assign(childProps, group);\n\n  if (!group) {\n    return null;\n  }\n  if (asChild) {\n    return React.cloneElement(children, { ...group, ...props, children: children.props.children });\n  }\n  return (\n    <AccordionContent>\n      {React.cloneElement(children, { ...group, ...props, children: children.props.children })}\n    </AccordionContent>\n  );\n}\n\nfunction Trigger(props) {\n  const { children, asChild, ...childProps } = props;\n  const { group } = props;\n  Object.assign(childProps, group);\n\n  if (!group) {\n    return null;\n  }\n  if (asChild) {\n    return React.cloneElement(children, childProps);\n  }\n  return (\n    <AccordionTrigger\n      value={group.value}\n      asChild={true}\n    >\n      <div>\n        {React.cloneElement(children, childProps)}\n        <ChevronDownIcon\n          key=\"chevronDown\"\n          className=\"text-primary h-4 w-4 shrink-0 transition-transform duration-200\"\n        />\n      </div>\n    </AccordionTrigger>\n  );\n}\n\nAccordionGroup.Content = Content;\nAccordionGroup.Trigger = Trigger;\nAccordionGroup.Accordion = GroupAccordion;\n\nexport default AccordionGroup;\n","export * from './AccordionGroup';\nimport AccordionGroup from './AccordionGroup';\n\nexport default AccordionGroup;\n","import React from 'react';\nimport { MeasurementTable } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core';\n\n/**\n * This is a measurement table that is designed to be nested inside\n * the accordion groups.\n */\nexport default function MeasurementTableNested(props) {\n  const { title, items, group, customHeader } = props;\n  const { commandsManager } = useSystem();\n  const onAction = (e, command, uid) => {\n    commandsManager.run(command, { uid, annotationUID: uid, displayMeasurements: items });\n  };\n\n  return (\n    <MeasurementTable\n      title={title ? title : `Measurements`}\n      data={items}\n      onAction={onAction}\n      {...group}\n      key={group.key}\n    >\n      <MeasurementTable.Header key=\"measurementTableHeader\">\n        {customHeader && group.isFirst && customHeader({ ...props, items: props.allItems })}\n      </MeasurementTable.Header>\n      <MeasurementTable.Body key=\"measurementTableBody\" />\n    </MeasurementTable>\n  );\n}\n","import React from 'react';\nimport AccordionGroup from './AccordionGroup';\nimport { utils } from '@ohif/core';\nimport MeasurementTableNested from './MeasurementTableNested';\n\nconst { filterNot, filterAdditionalFindings } = utils.MeasurementFilters;\n\nexport const MeasurementOrAdditionalFindingSets = [\n  {\n    title: 'Measurements',\n    filter: filterNot(filterAdditionalFindings),\n  },\n  {\n    title: 'Additional Findings',\n    filter: filterAdditionalFindings,\n  },\n];\n\n/**\n * Groups measurements by study in order to allow display and saving by study\n * @param {Object} servicesManager\n */\nexport const groupByNamedSets = (items, grouping) => {\n  const groups = new Map();\n  const { namedSets } = grouping;\n\n  for (const namedSet of namedSets) {\n    const name = namedSet.id || namedSet.title;\n    groups.set(name, {\n      ...grouping,\n      ...namedSet,\n      items: [],\n      isFirst: groups.size === 0,\n      title: name,\n      key: name,\n    });\n  }\n  items.forEach(item => {\n    for (const namedSet of namedSets) {\n      if (namedSet.filter(item)) {\n        const name = namedSet.id || namedSet.title;\n        groups.get(name).items.push(item);\n        return;\n      }\n    }\n  });\n  for (const namedSet of namedSets) {\n    const name = namedSet.id || namedSet.title;\n    if (!groups.get(name).items.length) {\n      groups.delete(name);\n    }\n  }\n  return groups;\n};\n\nexport function MeasurementsOrAdditionalFindings(props): React.ReactNode {\n  const { items, children, grouping = {}, customHeader, group, actions } = props;\n\n  return (\n    <AccordionGroup\n      grouping={{\n        groupingFunction: groupByNamedSets,\n        name: 'measurementsOrAdditional',\n        namedSets: MeasurementOrAdditionalFindingSets,\n        StudyInstanceUID: group?.StudyInstanceUID,\n        ...grouping,\n      }}\n      items={items}\n      sourceChildren={children}\n    >\n      <AccordionGroup.Accordion noWrapper=\"true\">\n        <MeasurementTableNested\n          customHeader={customHeader}\n          allItems={items}\n          actions={actions}\n        />\n      </AccordionGroup.Accordion>\n    </AccordionGroup>\n  );\n}\n\nexport default MeasurementsOrAdditionalFindings;\n","import React from 'react';\nimport { DicomMetadataStore, utils } from '@ohif/core';\nimport { StudySummary } from '@ohif/ui-next';\n\nconst { formatDate } = utils;\n\nexport function StudySummaryFromMetadata(props) {\n  const { StudyInstanceUID } = props;\n  if (!StudyInstanceUID) {\n    return null;\n  }\n  const studyMeta = DicomMetadataStore.getStudy(StudyInstanceUID);\n  if (!studyMeta?.series?.length) {\n    return null;\n  }\n\n  const instanceMeta = studyMeta.series[0].instances[0];\n  const { StudyDate, StudyDescription } = instanceMeta;\n\n  return (\n    <StudySummary\n      date={formatDate(StudyDate)}\n      description={StudyDescription}\n    />\n  );\n}\n","import React from 'react';\nimport { Button, Icons } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core';\n\nexport function StudyMeasurementsActions({ items, StudyInstanceUID, measurementFilter, actions }) {\n  const { commandsManager } = useSystem();\n  const disabled = !items?.length;\n\n  if (disabled) {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-background flex h-9 w-full items-center rounded pr-0.5\">\n      <div className=\"flex space-x-1\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className=\"pl-1.5\"\n          onClick={() => {\n            commandsManager.runCommand('downloadCSVMeasurementsReport', {\n              StudyInstanceUID,\n              measurementFilter,\n            });\n          }}\n        >\n          <Icons.Download className=\"h-5 w-5\" />\n          <span className=\"pl-1\">CSV</span>\n        </Button>\n\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className=\"pl-0.5\"\n          onClick={e => {\n            e.stopPropagation();\n            if (actions?.createSR) {\n              actions.createSR({ StudyInstanceUID, measurementFilter });\n              return;\n            }\n            commandsManager.run('promptSaveReport', {\n              StudyInstanceUID,\n              measurementFilter,\n            });\n          }}\n        >\n          <Icons.Add />\n          Create SR\n        </Button>\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          className=\"pl-0.5\"\n          onClick={e => {\n            e.stopPropagation();\n            if (actions?.onDelete) {\n              actions.onDelete();\n              return;\n            }\n            commandsManager.runCommand('clearMeasurements', {\n              measurementFilter,\n            });\n          }}\n        >\n          <Icons.Delete />\n          Delete\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default StudyMeasurementsActions;\n","import React from 'react';\nimport { StudySummaryFromMetadata } from './StudySummaryFromMetadata';\nimport StudyMeasurementsActions from './StudyMeasurementsActions';\n\nexport function StudySummaryWithActions(props) {\n  return (\n    <div>\n      <StudySummaryFromMetadata {...props} />\n      <StudyMeasurementsActions {...props} />\n    </div>\n  );\n}\n\nexport default StudySummaryWithActions;\n","import React from 'react';\nimport { useActiveViewportDisplaySets, useSystem, utils } from '@ohif/core';\n// import { AccordionContent, AccordionItem, AccordionTrigger } from '@ohif/ui-next';\n\nimport { AccordionGroup } from './AccordionGroup';\nimport MeasurementsOrAdditionalFindings from './MeasurementsOrAdditionalFindings';\nimport StudySummaryWithActions from './StudySummaryWithActions';\n\nconst { MeasurementFilters } = utils;\n\n/**\n * Groups measurements by study in order to allow display and saving by study\n * @param {Object} servicesManager\n */\nexport const groupByStudy = (items, grouping, childProps) => {\n  const groups = new Map();\n  const { activeStudyUID } = grouping;\n  const { displaySetService } = childProps.servicesManager.services;\n\n  const getItemStudyInstanceUID = item => {\n    const displaySet = displaySetService.getDisplaySetByUID(item.displaySetInstanceUID);\n    return displaySet.instances[0].StudyInstanceUID;\n  };\n\n  let firstSelected, firstGroup;\n\n  items\n    .filter(item => item.displaySetInstanceUID)\n    .forEach(item => {\n      const studyUID = getItemStudyInstanceUID(item);\n      if (!groups.has(studyUID)) {\n        const items = [];\n        const filter = MeasurementFilters.filterAnd(\n          MeasurementFilters.filterMeasurementsByStudyUID(studyUID),\n          grouping.filter\n        );\n        const group = {\n          ...grouping,\n          items,\n          displayMeasurements: items,\n          key: studyUID,\n          isSelected: studyUID === activeStudyUID,\n          StudyInstanceUID: studyUID,\n          filter,\n          measurementFilter: filter,\n        };\n        if (group.isSelected && !firstSelected) {\n          firstSelected = group;\n        }\n        firstGroup ||= group;\n        groups.set(studyUID, group);\n      }\n      if (!firstSelected && firstGroup) {\n        firstGroup.isSelected = true;\n      }\n      const group = groups.get(studyUID);\n      group.items.push(item);\n    });\n\n  return groups;\n};\n\nexport function StudyMeasurements(props): React.ReactNode {\n  const { items, grouping = {}, children } = props;\n\n  const system = useSystem();\n  const activeDisplaySets = useActiveViewportDisplaySets(system);\n  const activeStudyUID = activeDisplaySets?.[0]?.StudyInstanceUID;\n\n  return (\n    <AccordionGroup\n      grouping={{\n        name: 'groupByStudy',\n        groupingFunction: groupByStudy,\n        activeStudyUID,\n        ...grouping,\n      }}\n      items={items}\n      value={[activeStudyUID]}\n      sourceChildren={children}\n    >\n      <AccordionGroup.Trigger>\n        <StudySummaryWithActions />\n      </AccordionGroup.Trigger>\n      <MeasurementsOrAdditionalFindings activeStudyUID={activeStudyUID} />\n    </AccordionGroup>\n  );\n}\n\nexport default StudyMeasurements;\n","import React from 'react';\n\nimport { useMeasurements } from '../hooks/useMeasurements';\nimport StudyMeasurements from '../components/StudyMeasurements';\n/**\n * The PanelMeasurement is a fairly simple wrapper that gets the filtered\n * measurements and then passes it on to the children component, default to\n * the StudyMeasurements sub-component if no children are specified.\n * Some example customizations that could work:\n *\n *\n * Creates a default study measurements panel with default children:\n * ```\n * <PanelMeasurement>\n *   <StudyMeasurements />\n * </PanelMeasurement>\n * ```\n *\n * A study measurements with body replacement\n * ```\n * <StudyMeasurements>\n *   <SeriesMeasurements />\n * </StudyMeasurements>\n * ```\n *\n * A study measurements replacing just the trigger, leaving the default body\n * ```\n * <StudyMeasurements>\n *    <AccordionGroup.Trigger>\n *        This is a new custom trigger\n *    </AccordionGroup.Trigger>\n *</StudyMeasurements>\n * ```\n *\n * A study measurements with the trigger and body replaced\n * ```\n * <StudyMeasurements>\n *    <AccordionGroup.Trigger>\n *        This is a new custom trigger\n *    </AccordionGroup.Trigger>\n *    <SeriesMeasurements />\n * </StudyMeasurements>\n * ```\n *\n * A study measurements with a custom header for the additional findings\n * ```\n * <StudyMeasurements>\n *    <MeasurementOrAdditionalFindings>\n *        <AccordionGroup.Trigger groupName=\"additionalFindings\">\n *            <CustomAdditionalFindingsHeader />\n *        </AccordionGroup.Trigger>\n *        <AccordionGroup.Trigger groupName=\"measurements\">\n *            <CustomMeasurementsHeader />\n *        </AccordionGroup.Trigger>\n *    </MeasurementOrAdditionalFindings>\n * </StudyMeasurements>\n *```\n */\nexport default function PanelMeasurement(props): React.ReactNode {\n  const { measurementFilter, emptyComponent: EmptyComponent, children } = props;\n\n  const displayMeasurements = useMeasurements({ measurementFilter });\n\n  if (!displayMeasurements.length) {\n    return EmptyComponent ? (\n      <EmptyComponent items={displayMeasurements} />\n    ) : (\n      <span className=\"text-white\">No Measurements</span>\n    );\n  }\n\n  if (children) {\n    const cloned = React.Children.map(children, child =>\n      React.cloneElement(child, {\n        items: displayMeasurements,\n        filter: measurementFilter,\n      })\n    );\n    return cloned;\n  }\n  // Need to merge defaults on the content props to ensure they get passed to children\n  return <StudyMeasurements items={displayMeasurements} />;\n}\n","import React from 'react';\n\nimport { Toolbox } from '@ohif/extension-default';\nimport PanelSegmentation from './panels/PanelSegmentation';\nimport ActiveViewportWindowLevel from './components/ActiveViewportWindowLevel';\nimport PanelMeasurement from './panels/PanelMeasurement';\n\nconst getPanelModule = ({ commandsManager, servicesManager, extensionManager }: withAppTypes) => {\n  const wrappedPanelSegmentation = ({ configuration }) => {\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationNoHeader = ({ configuration }) => {\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationWithTools = ({ configuration }) => {\n    const { toolbarService } = servicesManager.services;\n\n    return (\n      <>\n        <Toolbox\n          buttonSectionId={toolbarService.sections.segmentationToolbox}\n          title=\"Segmentation Tools\"\n        />\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n          }}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'activeViewportWindowLevel',\n      component: () => {\n        return <ActiveViewportWindowLevel servicesManager={servicesManager} />;\n      },\n    },\n    {\n      name: 'panelMeasurement',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: 'Measurement',\n      component: PanelMeasurement,\n    },\n    {\n      name: 'panelSegmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentation,\n    },\n    {\n      name: 'panelSegmentationNoHeader',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationNoHeader,\n    },\n    {\n      name: 'panelSegmentationWithTools',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationWithTools,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import { vec3 } from 'gl-matrix';\nimport { Enums } from '@cornerstonejs/core';\n\nimport OrientationAxis = Enums.OrientationAxis;\n\nexport const isReferenceViewable = (servicesManager, viewportId, reference, viewportOptions?) => {\n  const { cornerstoneViewportService, displaySetService } = servicesManager.services;\n\n  if (!viewportOptions) {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    // we can make a customization for this to allow specific settings\n    // The annotation can be seen either via navigation or by changing to a volume\n    const isViewable = viewport.isReferenceViewable(reference, {\n      withNavigation: true,\n      asVolume: true,\n    });\n\n    return isViewable;\n  }\n\n  if (viewportOptions.viewportType === 'stack') {\n    // we only need the viewport to include the referenced imageId\n    const displaySet = displaySetService.getDisplaySetByUID(reference.displaySetInstanceUID);\n    const imageIds = displaySet.instances.map(instance => instance.imageId);\n    return imageIds.includes(reference.referencedImageId);\n  }\n\n  // for the volume viewports, we need to check orientation\n  const { orientation } = viewportOptions;\n\n  // Todo: handle hanging protocols that have acquisition orientation\n  const closestOrientation = getClosestOrientationFromIOP(\n    displaySetService,\n    reference.displaySetInstanceUID\n  );\n\n  return closestOrientation === orientation;\n};\n\n/**\n * Get the plane (orientation) to which the ImageOrientationPatient is most closely aligned\n *\n * @param displaySetService\n * @param displaySetInstanceUID\n * @returns orientation\n */\nexport default function getClosestOrientationFromIOP(\n  displaySetService,\n  displaySetInstanceUID\n): OrientationAxis {\n  const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n  const imageOrientationPatient = displaySet.instances[0].ImageOrientationPatient as Array<number>;\n  // ImageOrientationPatient must be an array of length 6.\n  if (imageOrientationPatient?.length !== 6) {\n    return;\n  }\n\n  // Take cross product to get vector coming \"out\" of image plane\n  const rowCosineVec = vec3.fromValues(\n    imageOrientationPatient[0],\n    imageOrientationPatient[1],\n    imageOrientationPatient[2]\n  );\n  const colCosineVec = vec3.fromValues(\n    imageOrientationPatient[3],\n    imageOrientationPatient[4],\n    imageOrientationPatient[5]\n  );\n  const scanAxisNormal = vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n\n  // Define the reference vectors for axial, coronal, and sagittal planes\n  const unitVectors = {\n    [OrientationAxis.AXIAL]: vec3.fromValues(0, 0, 1),\n    [OrientationAxis.CORONAL]: vec3.fromValues(0, 1, 0),\n    [OrientationAxis.SAGITTAL]: vec3.fromValues(1, 0, 0),\n  };\n\n  // Compute dot products for each reference plane\n  // Because all vectors are normalized, dot product is bounded between -1 and 1\n  let maxDot = 0;\n  let maxOrientation: string = '';\n  for (const [k, v] of Object.entries(unitVectors)) {\n    // Absolute value of dot product because we only care about alignment with the axis\n    // For example, dot product of -1 for a given axis means perfect alignment\n    // but the image is pointing in the \"opposite\" direction\n    const res = Math.abs(vec3.dot(scanAxisNormal, v));\n    if (res > maxDot) {\n      maxDot = res;\n      maxOrientation = k;\n    }\n  }\n\n  return maxOrientation as OrientationAxis;\n}\n","import * as cornerstoneTools from '@cornerstonejs/tools';\nimport { updateSegmentationStats } from './updateSegmentationStats';\n\n/**\n * Sets up the handler for segmentation data modification events\n */\nexport function setupSegmentationDataModifiedHandler({\n  segmentationService,\n  customizationService,\n  commandsManager,\n}) {\n  // A flag to indicate if the event is unsubscribed to. This is important because\n  // the debounced callback does an await and in that period of time the event may have\n  // been unsubscribed.\n  let isUnsubscribed = false;\n  const { unsubscribe: debouncedUnsubscribe } = segmentationService.subscribeDebounced(\n    segmentationService.EVENTS.SEGMENTATION_DATA_MODIFIED,\n    async ({ segmentationId }) => {\n\n      const disableUpdateSegmentationStats = customizationService.getCustomization('panelSegmentation.disableUpdateSegmentationStats');\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation || disableUpdateSegmentationStats) {\n        return;\n      }\n\n      const readableText = customizationService.getCustomization('panelSegmentation.readableText');\n\n      // Check for segments with bidirectional measurements and update them\n      const segmentIndices = Object.keys(segmentation.segments)\n        .map(index => parseInt(index))\n        .filter(index => index > 0);\n\n      for (const segmentIndex of segmentIndices) {\n        const segment = segmentation.segments[segmentIndex];\n        if (segment?.cachedStats?.namedStats?.bidirectional) {\n          // Run the command to update the bidirectional measurement\n          commandsManager.runCommand('runSegmentBidirectional', {\n            segmentationId,\n            segmentIndex,\n          });\n        }\n      }\n\n      const updatedSegmentation = await updateSegmentationStats({\n        segmentation,\n        segmentationId,\n        readableText,\n      });\n\n      if (!isUnsubscribed && updatedSegmentation) {\n        segmentationService.addOrUpdateSegmentation({\n          segmentationId,\n          segments: updatedSegmentation.segments,\n        });\n      }\n    },\n    1000\n  );\n\n  const unsubscribe = () => {\n    isUnsubscribed = true;\n    debouncedUnsubscribe();\n  };\n  return { unsubscribe };\n}\n\n/**\n * Sets up the handler for segmentation modification events\n */\nexport function setupSegmentationModifiedHandler({ segmentationService }) {\n  const { unsubscribe } = segmentationService.subscribe(\n    segmentationService.EVENTS.SEGMENTATION_MODIFIED,\n    async ({ segmentationId }) => {\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        return;\n      }\n\n      const annotationState = cornerstoneTools.annotation.state.getAllAnnotations();\n      const bidirectionalAnnotations = annotationState.filter(\n        annotation =>\n          annotation.metadata.toolName === cornerstoneTools.SegmentBidirectionalTool.toolName\n      );\n\n      let toRemoveUIDs = [];\n      if (!segmentation) {\n        toRemoveUIDs = bidirectionalAnnotations.map(\n          annotation => annotation.metadata.segmentationId === segmentationId\n        );\n        return;\n      } else {\n        const segmentIndices = Object.keys(segmentation.segments)\n          .map(index => parseInt(index))\n          .filter(index => index > 0);\n\n        // check if there is a bidirectional data that exists but the segment\n        // does not exists anymore we need to remove the bidirectional data\n        const bidirectionalAnnotationsToRemove = bidirectionalAnnotations.filter(\n          annotation =>\n            annotation.metadata.segmentationId === segmentationId &&\n            !segmentIndices.includes(annotation.metadata.segmentIndex)\n        );\n\n        toRemoveUIDs = bidirectionalAnnotationsToRemove.map(annotation => annotation.annotationUID);\n      }\n\n      toRemoveUIDs.forEach(uid => {\n        cornerstoneTools.annotation.state.removeAnnotation(uid);\n      });\n    }\n  );\n\n  return { unsubscribe };\n}\n","export type HydrationCallback = (params: any) => Promise<boolean>;\n\nexport const HydrationType = {\n  SEG: 'SEG',\n  SR: 'SR',\n  RTSTRUCT: 'RTSTRUCT',\n} as const;\n\nexport interface HydrationDialogProps {\n  servicesManager: AppTypes.ServicesManager;\n  viewportId: string;\n  displaySet: AppTypes.DisplaySet;\n  preHydrateCallbacks?: HydrationCallback[];\n  hydrateCallback: HydrationCallback;\n  type: string;\n}\n\nexport interface HydrationSRResult {\n  userResponse: number;\n  displaySetInstanceUID: string;\n  srSeriesInstanceUID: string;\n  viewportId: string;\n  StudyInstanceUID?: string;\n  SeriesInstanceUIDs?: string[];\n}\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n  HYDRATE: 5,\n};\n\nfunction getCustomizationMessageKey(type: string): string {\n  switch (type) {\n    case HydrationType.RTSTRUCT:\n      return 'viewportNotification.hydrateRTMessage';\n    case HydrationType.SEG:\n      return 'viewportNotification.hydrateSEGMessage';\n    case HydrationType.SR:\n      return 'viewportNotification.hydrateSRMessage';\n    default:\n      return 'viewportNotification.hydrateMessage';\n  }\n}\n\nfunction getDialogId(type: string): string {\n  switch (type) {\n    case HydrationType.RTSS:\n      return 'promptHydrateRT';\n    case HydrationType.SEG:\n      return 'promptHydrateSEG';\n    case HydrationType.SR:\n      return 'promptHydrateSR';\n    default:\n      return 'promptHydrate';\n  }\n}\n\nfunction promptHydrationDialog({\n  servicesManager,\n  viewportId,\n  displaySet,\n  preHydrateCallbacks = [],\n  hydrateCallback,\n  type,\n}: HydrationDialogProps): Promise<boolean | HydrationSRResult> {\n  const { uiViewportDialogService, customizationService } = servicesManager.services;\n  const extensionManager = servicesManager._extensionManager;\n  const appConfig = extensionManager._appConfig;\n\n  // Todo: make this use enum from the extension, we should move the enum\n  const standardMode = appConfig?.measurementTrackingMode === 'standard';\n\n  return new Promise(async function (resolve, reject) {\n    // For RT and SEG, we check disableConfirmationPrompts\n    // For SR, we check if standardMode is true\n    const shouldPrompt =\n      type === HydrationType.SR ? standardMode : !appConfig?.disableConfirmationPrompts;\n\n    const promptResult = shouldPrompt\n      ? await _askHydrate(uiViewportDialogService, customizationService, viewportId, type)\n      : RESPONSE.HYDRATE;\n\n    if (promptResult === RESPONSE.HYDRATE) {\n      // Execute preHydrate callbacks\n      preHydrateCallbacks?.forEach(callback => {\n        callback();\n      });\n\n      if (type === HydrationType.SEG) {\n        // SEG needs setTimeout\n        window.setTimeout(async () => {\n          const isHydrated = await hydrateCallback({\n            segDisplaySet: displaySet,\n            viewportId,\n          });\n\n          resolve(isHydrated);\n        }, 0);\n      } else if (type === HydrationType.RTSTRUCT) {\n        // RT hydration\n        const isHydrated = await hydrateCallback({\n          rtDisplaySet: displaySet,\n          viewportId,\n          servicesManager,\n        });\n\n        resolve(isHydrated);\n      } else if (type === HydrationType.SR) {\n        // SR has a different result structure\n        const hydrationResult = await hydrateCallback(displaySet);\n\n        resolve({\n          userResponse: promptResult,\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\n          srSeriesInstanceUID: displaySet.SeriesInstanceUID,\n          viewportId,\n          StudyInstanceUID: hydrationResult?.StudyInstanceUID,\n          SeriesInstanceUIDs: hydrationResult?.SeriesInstanceUIDs,\n        });\n      }\n    } else {\n      if (type === HydrationType.SR) {\n        resolve({\n          userResponse: promptResult,\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\n          srSeriesInstanceUID: displaySet.SeriesInstanceUID,\n          viewportId,\n        });\n      } else {\n        resolve(false);\n      }\n    }\n  });\n}\n\nfunction _askHydrate(\n  uiViewportDialogService: AppTypes.UIViewportDialogService,\n  customizationService: AppTypes.CustomizationService,\n  viewportId: string,\n  type: string\n) {\n  return new Promise(function (resolve, reject) {\n    const messageKey = getCustomizationMessageKey(type);\n    const message = customizationService.getCustomization(messageKey);\n    const actions = [\n      {\n        id: 'no-hydrate',\n        type: 'secondary',\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        id: 'yes-hydrate',\n        type: 'primary',\n        text: 'Yes',\n        value: RESPONSE.HYDRATE,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      id: getDialogId(type),\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          onSubmit(RESPONSE.HYDRATE);\n        }\n      },\n    });\n  });\n}\n\nexport default promptHydrationDialog;\n","import { handleSegmentChange } from './segmentUtils';\nimport { isReferenceViewable } from './isReferenceViewable';\nimport {\n  setupSegmentationDataModifiedHandler,\n  setupSegmentationModifiedHandler,\n} from './segmentationHandlers';\nimport promptHydrationDialog, {\n  HydrationDialogProps,\n  HydrationCallback,\n  HydrationSRResult,\n} from './promptHydrationDialog';\nimport { getCenterExtent } from './getCenterExtent';\n\nconst utils = {\n  handleSegmentChange,\n  isReferenceViewable,\n  setupSegmentationDataModifiedHandler,\n  setupSegmentationModifiedHandler,\n  promptHydrationDialog,\n  getCenterExtent,\n};\n\nexport type { HydrationDialogProps, HydrationCallback, HydrationSRResult };\n\nexport default utils;\n","import SegmentationServiceType from '../services/SegmentationService';\n\nexport const handleSegmentChange = ({\n  direction,\n  segmentationId,\n  viewportId,\n  selectedSegmentObjectIndex,\n  segmentationService,\n}: {\n  direction: number;\n  segmentationId: string;\n  viewportId: string;\n  selectedSegmentObjectIndex: number;\n  segmentationService: SegmentationServiceType;\n}) => {\n  const segmentation = segmentationService.getSegmentation(segmentationId);\n\n  const { segments } = segmentation;\n\n  const numberOfSegments = Object.keys(segments).length;\n\n  // Get activeSegment each time because the user can select any segment from the list and thus the index should be updated\n  const activeSegment = segmentationService.getActiveSegment(viewportId);\n  if (activeSegment) {\n    // from the activeSegment get the actual object array index to be used\n    selectedSegmentObjectIndex = Object.values(segments).findIndex(\n      segment => segment.segmentIndex === activeSegment.segmentIndex\n    );\n  }\n  let newSelectedSegmentIndex = selectedSegmentObjectIndex + direction;\n\n  // Handle looping through list of segments\n  if (newSelectedSegmentIndex > numberOfSegments - 1) {\n    newSelectedSegmentIndex = 0;\n  } else if (newSelectedSegmentIndex < 0) {\n    newSelectedSegmentIndex = numberOfSegments - 1;\n  }\n\n  // Convert segmentationId from object array index to property value of type Segment\n  // Functions below use the segmentIndex object attribute so we have to do the conversion\n  const segmentIndex = Object.values(segments)[newSelectedSegmentIndex]?.segmentIndex;\n\n  segmentationService.setActiveSegment(segmentationId, segmentIndex);\n  segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, viewportId);\n  selectedSegmentObjectIndex = newSelectedSegmentIndex;\n};\n","import React, { useState } from 'react';\nimport { useSystem } from '@ohif/core';\nimport {\n  Button,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  Icons,\n} from '@ohif/ui-next';\n\nexport function MeasumentsMenu(props) {\n  const { group, classNames } = props;\n  if (!group.items?.length) {\n    console.log('No items to iterate', group.items);\n    return null;\n  }\n  const { items } = group;\n  const [item] = items;\n  const { isSelected, isVisible } = item;\n\n  const system = useSystem();\n\n  const onAction = (event, command, args?) => {\n    const uid = items.map(item => item.uid);\n    // Some commands use displayMeasurements and some use items\n    system.commandsManager.run(command, {\n      ...args,\n      uid,\n      displayMeasurements: items,\n      items,\n      event,\n    });\n  };\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  return (\n    <div className={`relative ml-2 inline-flex items-center space-x-1 ${classNames}`}>\n      {/* Visibility Toggle Icon */}\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className={`h-6 w-6 transition-opacity ${\n          isSelected || !isVisible ? 'opacity-100' : 'opacity-50 group-hover:opacity-100'\n        }`}\n        aria-label={isVisible ? 'Hide' : 'Show'}\n        onClick={e => {\n          e.stopPropagation();\n          onAction(e, ['jumpToMeasurement', 'toggleVisibilityMeasurement']);\n        }}\n      >\n        {isVisible ? <Icons.Hide className=\"h-6 w-6\" /> : <Icons.Show className=\"h-6 w-6\" />}\n      </Button>\n      {/* Actions Dropdown Menu */}\n      <DropdownMenu onOpenChange={open => setIsDropdownOpen(open)}>\n        <DropdownMenuTrigger asChild>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className={`h-6 w-6 transition-opacity ${\n              isSelected || isDropdownOpen ? 'opacity-100' : 'opacity-50 group-hover:opacity-100'\n            }`}\n            aria-label=\"Actions\"\n            onClick={e => e.stopPropagation()} // Prevent row selection on button click\n          >\n            <Icons.More className=\"h-6 w-6\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onClick={e => onAction(e, 'removeMeasurement')}>\n            <Icons.Delete className=\"text-foreground\" />\n            <span className=\"pl-2\">Delete</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n\nexport default MeasumentsMenu;\n","import React from 'react';\nimport { AccordionTrigger, ColorCircle } from '@ohif/ui-next';\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\n\nfunction onClickDefault(e) {\n  const { group, onClick = group?.onClick } = this;\n  if (!onClick) {\n    console.log('No onClick function', group);\n    return;\n  }\n  console.log('onClickDefault');\n  e.preventDefault();\n  e.stopPropagation();\n\n  onClick(e, group);\n\n  return false;\n}\n\nexport default function PanelAccordionTrigger(props) {\n  const { marginLeft = 8, isActive = false, colorHex, count, text, menu: Menu = null } = props;\n\n  return (\n    <AccordionTrigger\n      style={{ marginLeft: `${marginLeft}px`, padding: 0 }}\n      asChild={true}\n    >\n      <div className={`inline-flex text-base ${isActive ? 'bg-popover' : 'bg-muted'} flex-grow`}>\n        <button onClick={onClickDefault.bind(props)}>\n          <span\n            className={`inline-flex rounded-l border-r border-black ${isActive ? 'bg-highlight' : 'bg-muted'}`}\n          >\n            {count !== undefined ? <span className=\"px-2\">{count}</span> : null}\n            {colorHex && <ColorCircle colorHex={colorHex} />}\n          </span>\n          <span>{text}</span>\n        </button>\n        {Menu && (\n          <Menu\n            {...props}\n            classNames=\"justify-end flex-grow\"\n          />\n        )}\n        <ChevronDownIcon className=\"text-primary h-4 w-4 shrink-0 transition-transform duration-200\" />\n      </div>\n    </AccordionTrigger>\n  );\n}\n","import React from 'react';\nimport { Accordion, AccordionContent, AccordionItem } from '@ohif/ui-next';\n\nimport PanelAccordionTrigger from './PanelAccordionTrigger';\nimport MeasurementsMenu from './MeasurementsMenu';\nimport { useSystem } from '@ohif/core';\n\nexport function MeasurementItem(props) {\n  const { index, item } = props;\n  return (\n    <PanelAccordionTrigger\n      count={index + 1}\n      text={item.toolName || item.label || item.title}\n      colorHex=\"#f00\"\n      isActive={item.isSelected}\n      menu={MeasurementsMenu}\n      group={{ items: [item], onClick: props.onClick }}\n    />\n  );\n}\n\nexport default function MeasurementAccordion(props) {\n  const { items } = props;\n  const system = useSystem();\n\n  const onClick = (e, group) => {\n    const { items } = group;\n    // Just jump to the first measurement in the set, and mark that one as active\n    // with the set of items.\n    system.commandsManager.run('jumpToMeasurement', {\n      uid: items[0].uid,\n      displayMeasurements: items,\n      group,\n    });\n  };\n\n  return (\n    <Accordion\n      type=\"multiple\"\n      className=\"flex-shrink-0 overflow-hidden\"\n    >\n      {items.map((item, index) => {\n        const { displayText: details = {} } = item;\n        return (\n          <AccordionItem\n            key={`measurementAccordion:${item.uid}`}\n            value={item.uid}\n          >\n            <MeasurementItem\n              item={item}\n              key={`measurementItem:${item.uid}`}\n              index={index}\n              onClick={onClick}\n            />\n            <AccordionContent key={`measurementContent:${item.uid}`}>\n              <div className=\"ml-7 px-2 py-2\">\n                <div className=\"text-secondary-foreground flex items-center gap-1 text-base leading-normal\">\n                  {details.primary?.length > 0 &&\n                    details.primary.map((detail, index) => (\n                      <span key={`details:${item.uid}:${index}`}>{detail}</span>\n                    ))}\n                </div>\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n        );\n      })}\n    </Accordion>\n  );\n}\n","import React from 'react';\nimport { useActiveViewportDisplaySets, useSystem } from '@ohif/core';\n\nimport AccordionGroup from './AccordionGroup';\nimport PanelAccordionTrigger from './PanelAccordionTrigger';\nimport MeasurementItems from './MeasurementItems';\nimport MeasurementsMenu from './MeasurementsMenu';\n\n/**\n * Groups measurements by study in order to allow display and saving by study\n * @param {Object} servicesManager\n */\nexport const groupByDisplaySet = (items, grouping, childProps) => {\n  const groups = new Map();\n  const { displaySetService } = childProps.servicesManager.services;\n  const { activeDisplaySetInstanceUID } = grouping;\n\n  items.forEach(item => {\n    const { displaySetInstanceUID } = item;\n\n    if (!groups.has(displaySetInstanceUID)) {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n      groups.set(displaySetInstanceUID, {\n        header: null,\n        isSelected: displaySetInstanceUID == activeDisplaySetInstanceUID,\n        ...grouping,\n        items: [],\n        key: displaySetInstanceUID,\n        title: 'Series Measurements',\n        displaySet,\n      });\n    }\n    groups.get(displaySetInstanceUID).items.push(item);\n  });\n\n  return groups;\n};\n\nexport function SeriesMeasurementTrigger(props) {\n  const { group, isSelected, displaySet, menu } = props;\n  const { SeriesNumber = 1, SeriesDescription } = displaySet;\n\n  return (\n    <PanelAccordionTrigger\n      text={`Series #${SeriesNumber} ${SeriesDescription}`}\n      count={group.items.length}\n      isActive={isSelected}\n      group={group}\n      menu={menu}\n      marginLeft=\"0\"\n    />\n  );\n}\n\nexport function SeriesMeasurements(props): React.ReactNode {\n  const { items, grouping = {}, children } = props;\n  const system = useSystem();\n  const activeDisplaySets = useActiveViewportDisplaySets(system);\n  const activeDisplaySetInstanceUID = activeDisplaySets?.[0]?.displaySetInstanceUID;\n  const onClick = (_e, group) => {\n    const { items } = group;\n    system.commandsManager.run('jumpToMeasurement', {\n      uid: items[0].uid,\n      displayMeasurements: items,\n      group,\n    });\n  };\n\n  // The content of the accordion group will default to the children of the\n  // parent declaration if present, otherwise to MeasurementItems\n  return (\n    <AccordionGroup\n      grouping={{\n        groupingFunction: groupByDisplaySet,\n        activeDisplaySetInstanceUID,\n        ...grouping,\n        onClick,\n      }}\n      items={items}\n      sourceChildren={children}\n    >\n      <AccordionGroup.Trigger asChild={true}>\n        <SeriesMeasurementTrigger menu={MeasurementsMenu} />\n      </AccordionGroup.Trigger>\n      <MeasurementItems />\n    </AccordionGroup>\n  );\n}\n\nexport default SeriesMeasurements;\n","import React from 'react';\nimport * as cornerstone from '@cornerstonejs/core';\nimport * as cornerstoneTools from '@cornerstonejs/tools';\nimport {\n  Enums as cs3DEnums,\n  imageLoadPoolManager,\n  imageRetrievalPoolManager,\n} from '@cornerstonejs/core';\nimport { Enums as cs3DToolsEnums } from '@cornerstonejs/tools';\nimport { Types } from '@ohif/core';\nimport Enums from './enums';\n\nimport init from './init';\nimport getCustomizationModule from './getCustomizationModule';\nimport getCommandsModule from './commandsModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getToolbarModule from './getToolbarModule';\nimport ToolGroupService from './services/ToolGroupService';\nimport SyncGroupService from './services/SyncGroupService';\nimport SegmentationService from './services/SegmentationService';\nimport CornerstoneCacheService from './services/CornerstoneCacheService';\nimport CornerstoneViewportService from './services/ViewportService/CornerstoneViewportService';\nimport ColorbarService from './services/ColorbarService';\nimport * as CornerstoneExtensionTypes from './types';\n\nimport { toolNames } from './initCornerstoneTools';\nimport { getEnabledElement, reset as enabledElementReset, setEnabledElement } from './state';\nimport dicomLoaderService from './utils/dicomLoaderService';\nimport getActiveViewportEnabledElement from './utils/getActiveViewportEnabledElement';\n\nimport { id } from './id';\nimport { measurementMappingUtils } from './utils/measurementServiceMappings';\nimport PlanarFreehandROI from './utils/measurementServiceMappings/PlanarFreehandROI';\nimport RectangleROI from './utils/measurementServiceMappings/RectangleROI';\nimport type { PublicViewportOptions } from './services/ViewportService/Viewport';\nimport ImageOverlayViewerTool from './tools/ImageOverlayViewerTool';\nimport getSOPInstanceAttributes from './utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\nimport { findNearbyToolData } from './utils/findNearbyToolData';\nimport { createFrameViewSynchronizer } from './synchronizers/frameViewSynchronizer';\nimport { getSopClassHandlerModule } from './getSopClassHandlerModule';\nimport { getDynamicVolumeInfo } from '@cornerstonejs/core/utilities';\nimport {\n  useLutPresentationStore,\n  usePositionPresentationStore,\n  useSegmentationPresentationStore,\n  useSynchronizersStore,\n} from './stores';\nimport { useToggleOneUpViewportGridStore } from '@ohif/extension-default';\nimport { useActiveViewportSegmentationRepresentations } from './hooks/useActiveViewportSegmentationRepresentations';\nimport { useMeasurements } from './hooks/useMeasurements';\nimport getPanelModule from './getPanelModule';\nimport PanelSegmentation from './panels/PanelSegmentation';\nimport PanelMeasurement from './panels/PanelMeasurement';\nimport { useSegmentations } from './hooks/useSegmentations';\nimport { StudySummaryFromMetadata } from './components/StudySummaryFromMetadata';\nimport CornerstoneViewportDownloadForm from './utils/CornerstoneViewportDownloadForm';\nimport utils from './utils';\nimport { useMeasurementTracking } from './hooks/useMeasurementTracking';\nimport { setUpSegmentationEventHandlers } from './utils/setUpSegmentationEventHandlers';\nexport * from './components';\n\nconst { imageRetrieveMetadataProvider } = cornerstone.utilities;\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './Viewport/OHIFCornerstoneViewport');\n});\n\nconst OHIFCornerstoneViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\nconst stackRetrieveOptions = {\n  retrieveOptions: {\n    single: {\n      streaming: true,\n      decodeLevel: 1,\n    },\n  },\n};\n\nconst unsubscriptions = [];\n/**\n *\n */\nconst cornerstoneExtension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  onModeEnter: ({ servicesManager, commandsManager }: withAppTypes): void => {\n    const { cornerstoneViewportService, toolbarService, segmentationService } =\n      servicesManager.services;\n\n    const { unsubscriptions: segmentationUnsubscriptions } = setUpSegmentationEventHandlers({\n      servicesManager,\n      commandsManager,\n    });\n    unsubscriptions.push(...segmentationUnsubscriptions);\n\n    toolbarService.registerEventForToolbarUpdate(cornerstoneViewportService, [\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\n    ]);\n\n    toolbarService.registerEventForToolbarUpdate(segmentationService, [\n      segmentationService.EVENTS.SEGMENTATION_REMOVED,\n      segmentationService.EVENTS.SEGMENTATION_MODIFIED,\n    ]);\n\n    toolbarService.registerEventForToolbarUpdate(cornerstone.eventTarget, [\n      cornerstoneTools.Enums.Events.TOOL_ACTIVATED,\n    ]);\n\n    // Configure the interleaved/HTJ2K loader\n    imageRetrieveMetadataProvider.clear();\n    // The default volume interleaved options are to interleave the\n    // image retrieve, but don't perform progressive loading per image\n    // This interleaves images and replicates them for low-resolution depth volume\n    // reconstruction, which progressively improves\n    imageRetrieveMetadataProvider.add(\n      'volume',\n      cornerstone.ProgressiveRetrieveImages.interleavedRetrieveStages\n    );\n    // The default stack loading option is to progressive load HTJ2K images\n    // There are other possible options, but these need more thought about\n    // how to define them.\n    imageRetrieveMetadataProvider.add('stack', stackRetrieveOptions);\n  },\n  getPanelModule,\n  onModeExit: ({ servicesManager }: withAppTypes): void => {\n    unsubscriptions.forEach(unsubscribe => unsubscribe());\n    // Clear the unsubscriptions\n    unsubscriptions.length = 0;\n\n    const { cineService, segmentationService } = servicesManager.services;\n    // Empty out the image load and retrieval pools to prevent memory leaks\n    // on the mode exits\n    Object.values(cs3DEnums.RequestType).forEach(type => {\n      imageLoadPoolManager.clearRequestStack(type);\n      imageRetrievalPoolManager.clearRequestStack(type);\n    });\n\n    cineService.setIsCineEnabled(false);\n\n    enabledElementReset();\n\n    useLutPresentationStore.getState().clearLutPresentationStore();\n    usePositionPresentationStore.getState().clearPositionPresentationStore();\n    useSynchronizersStore.getState().clearSynchronizersStore();\n    useToggleOneUpViewportGridStore.getState().clearToggleOneUpViewportGridStore();\n    useSegmentationPresentationStore.getState().clearSegmentationPresentationStore();\n    segmentationService.removeAllSegmentations();\n  },\n\n  /**\n   * Register the Cornerstone 3D services and set them up for use.\n   *\n   * @param configuration.csToolsConfig - Passed directly to `initCornerstoneTools`\n   */\n  preRegistration: async function (props: Types.Extensions.ExtensionParams): Promise<void> {\n    const { servicesManager } = props;\n    servicesManager.registerService(CornerstoneViewportService.REGISTRATION);\n    servicesManager.registerService(ToolGroupService.REGISTRATION);\n    servicesManager.registerService(SyncGroupService.REGISTRATION);\n    servicesManager.registerService(SegmentationService.REGISTRATION);\n    servicesManager.registerService(CornerstoneCacheService.REGISTRATION);\n    servicesManager.registerService(ColorbarService.REGISTRATION);\n\n    const { syncGroupService } = servicesManager.services;\n    syncGroupService.registerCustomSynchronizer('frameview', createFrameViewSynchronizer);\n\n    await init.call(this, props);\n  },\n  getToolbarModule,\n  getHangingProtocolModule,\n  getViewportModule({ servicesManager, commandsManager }) {\n    const ExtendedOHIFCornerstoneViewport = props => {\n      const { toolbarService } = servicesManager.services;\n\n      return (\n        <OHIFCornerstoneViewport\n          {...props}\n          toolbarService={toolbarService}\n          servicesManager={servicesManager}\n          commandsManager={commandsManager}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'cornerstone',\n        component: ExtendedOHIFCornerstoneViewport,\n        isReferenceViewable: utils.isReferenceViewable.bind(null, servicesManager),\n      },\n    ];\n  },\n  getCommandsModule,\n  getCustomizationModule,\n  getUtilityModule({ servicesManager }) {\n    return [\n      {\n        name: 'common',\n        exports: {\n          getCornerstoneLibraries: () => {\n            return { cornerstone, cornerstoneTools };\n          },\n          getEnabledElement,\n          dicomLoaderService,\n        },\n      },\n      {\n        name: 'core',\n        exports: {\n          Enums: cs3DEnums,\n        },\n      },\n      {\n        name: 'tools',\n        exports: {\n          toolNames,\n          Enums: cs3DToolsEnums,\n        },\n      },\n      {\n        name: 'volumeLoader',\n        exports: {\n          getDynamicVolumeInfo,\n        },\n      },\n    ];\n  },\n  getSopClassHandlerModule,\n};\n\nexport type { PublicViewportOptions };\nexport {\n  measurementMappingUtils,\n  PlanarFreehandROI,\n  RectangleROI,\n  CornerstoneExtensionTypes as Types,\n  toolNames,\n  getActiveViewportEnabledElement,\n  setEnabledElement,\n  findNearbyToolData,\n  getEnabledElement,\n  ImageOverlayViewerTool,\n  getSOPInstanceAttributes,\n  dicomLoaderService,\n  // Export all stores\n  useLutPresentationStore,\n  usePositionPresentationStore,\n  useSegmentationPresentationStore,\n  useSynchronizersStore,\n  Enums,\n  useMeasurements,\n  useActiveViewportSegmentationRepresentations,\n  useSegmentations,\n  PanelSegmentation,\n  PanelMeasurement,\n  StudySummaryFromMetadata,\n  CornerstoneViewportDownloadForm,\n  utils,\n  OHIFCornerstoneViewport,\n  useMeasurementTracking,\n};\n\n// Export constants\nexport { VOLUME_LOADER_SCHEME, DYNAMIC_VOLUME_LOADER_SCHEME } from './constants';\nexport default cornerstoneExtension;\n","import {\n  setupSegmentationDataModifiedHandler,\n  setupSegmentationModifiedHandler,\n} from './segmentationHandlers';\n\nexport const setUpSegmentationEventHandlers = ({ servicesManager, commandsManager }) => {\n  const { segmentationService, customizationService, displaySetService } = servicesManager.services;\n\n  const { unsubscribe: unsubscribeSegmentationDataModifiedHandler } =\n    setupSegmentationDataModifiedHandler({\n      segmentationService,\n      customizationService,\n      commandsManager,\n    });\n\n  const { unsubscribe: unsubscribeSegmentationModifiedHandler } = setupSegmentationModifiedHandler({\n    segmentationService,\n  });\n\n  const { unsubscribe: unsubscribeSegmentationCreated } = segmentationService.subscribe(\n    segmentationService.EVENTS.SEGMENTATION_ADDED,\n    evt => {\n      const { segmentationId } = evt;\n      const displaySet = displaySetService.getDisplaySetByUID(segmentationId);\n      if (displaySet) {\n        return;\n      }\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n      const label = segmentation.cachedStats.info;\n      const imageIds = segmentation.representationData.Labelmap.imageIds;\n\n      // Create a display set for the segmentation\n      const segmentationDisplaySet = {\n        displaySetInstanceUID: segmentationId,\n        SOPClassUID: '1.2.840.10008.5.1.4.1.1.66.4',\n        SOPClassHandlerId: '@ohif/extension-cornerstone-dicom-seg.sopClassHandlerModule.dicom-seg',\n        SeriesDescription: label,\n        Modality: 'SEG',\n        numImageFrames: imageIds.length,\n        imageIds,\n        isOverlayDisplaySet: true,\n        label,\n        madeInClient: true,\n        segmentationId: segmentationId,\n        isDerived: true,\n      };\n\n      displaySetService.addDisplaySets(segmentationDisplaySet);\n    }\n  );\n\n  const unsubscriptions = [\n    unsubscribeSegmentationDataModifiedHandler,\n    unsubscribeSegmentationModifiedHandler,\n    unsubscribeSegmentationCreated,\n  ];\n\n  return { unsubscriptions };\n};\n","const state = {\n  // The `defaultContext` of an extension's commandsModule\n  DEFAULT_CONTEXT: 'CORNERSTONE',\n  enabledElements: {},\n};\n\n/**\n * Sets the enabled element `dom` reference for an active viewport.\n * @param {HTMLElement} dom Active viewport element.\n * @return void\n */\nconst setEnabledElement = (viewportId: string, element: HTMLElement, context?: string): void => {\n  const targetContext = context || state.DEFAULT_CONTEXT;\n\n  state.enabledElements[viewportId] = {\n    element,\n    context: targetContext,\n  };\n};\n\n/**\n * Grabs the enabled element `dom` reference of an active viewport.\n *\n * @return {HTMLElement} Active viewport element.\n */\nconst getEnabledElement = viewportId => {\n  return state.enabledElements[viewportId];\n};\n\nconst reset = () => {\n  state.enabledElements = {};\n};\n\nexport { setEnabledElement, getEnabledElement, reset };\n","const JOIN_STR = '&';\n\n// The default lut presentation id if none defined\nconst DEFAULT_STR = 'default';\n\n// This code finds the first unique index to add to the presentation id so that\n// two viewports containing the same display set in the same type of viewport\n// can have different presentation information.  This allows comparison of\n// a single display set in two or more viewports, when the user has simply\n// dragged and dropped the view in twice.  For example, it allows displaying\n// bone, brain and soft tissue views of a single display set, and to still\n// remember the specific changes to each viewport.\nconst addUniqueIndex = (\n  arr,\n  key,\n  viewports: AppTypes.ViewportGrid.Viewports,\n  isUpdatingSameViewport\n) => {\n  arr.push(0);\n\n  // If we are updating the viewport, we should not increment the index\n  if (isUpdatingSameViewport) {\n    return;\n  }\n\n  // The 128 is just a value that is larger than how many viewports we\n  // display at once, used as an upper bound on how many unique presentation\n  // ID's might exist for a single display set at once.\n  for (let displayInstance = 0; displayInstance < 128; displayInstance++) {\n    arr[arr.length - 1] = displayInstance;\n    const testId = arr.join(JOIN_STR);\n    if (\n      !Array.from(viewports.values()).find(\n        viewport => viewport.viewportOptions?.presentationIds?.[key] === testId\n      )\n    ) {\n      break;\n    }\n  }\n};\n\nexport { addUniqueIndex, DEFAULT_STR, JOIN_STR };\n","import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { LutPresentation } from '../types/Presentation';\nimport { addUniqueIndex, DEFAULT_STR, JOIN_STR } from './presentationUtils';\n\n/**\n * Identifier for the LUT Presentation store type.\n */\nconst PRESENTATION_TYPE_ID = 'lutPresentationId';\n\n/**\n * Flag to enable or disable debug mode for the store.\n * Set to `true` to enable zustand devtools.\n */\nconst DEBUG_STORE = false;\n\n/**\n * Represents the state and actions for managing LUT presentations.\n */\ntype LutPresentationState = {\n  /**\n   * Type identifier for the store.\n   */\n  type: string;\n\n  /**\n   * Stores LUT presentations indexed by their presentation ID.\n   */\n  lutPresentationStore: Record<string, LutPresentation>;\n\n  /**\n   * Sets the LUT presentation for a given key.\n   *\n   * @param key - The key identifying the LUT presentation.\n   * @param value - The `LutPresentation` to associate with the key.\n   */\n  setLutPresentation: (key: string, value: LutPresentation) => void;\n\n  /**\n   * Clears all LUT presentations from the store.\n   */\n  clearLutPresentationStore: () => void;\n\n  /**\n   * Retrieves the presentation ID based on the provided parameters.\n   *\n   * @param id - The presentation ID to check.\n   * @param options - Configuration options.\n   * @param options.viewport - The current viewport in grid\n   * @param options.viewports - All available viewports in grid\n   * @param options.isUpdatingSameViewport - Indicates if the same viewport is being updated.\n   * @returns The presentation ID or undefined.\n   */\n  getPresentationId: (\n    id: string,\n    options: {\n      viewport: AppTypes.ViewportGrid.Viewport;\n      viewports: AppTypes.ViewportGrid.Viewports;\n      isUpdatingSameViewport: boolean;\n    }\n  ) => string | undefined;\n};\n\n/**\n * Generates a presentation ID for LUT based on the viewport configuration.\n *\n * @param id - The ID to check.\n * @param options - Configuration options.\n * @param options.viewport - The current viewport.\n * @param options.viewports - All available viewports.\n * @param options.isUpdatingSameViewport - Indicates if the same viewport is being updated.\n * @returns The LUT presentation ID or undefined.\n */\nconst getLutPresentationId = (\n  id: string,\n  {\n    viewport,\n    viewports,\n    isUpdatingSameViewport,\n  }: {\n    viewport: AppTypes.ViewportGrid.Viewport;\n    viewports: AppTypes.ViewportGrid.Viewports;\n    isUpdatingSameViewport: boolean;\n  }\n): string | undefined => {\n  if (id !== PRESENTATION_TYPE_ID) {\n    return;\n  }\n\n  const getLutId = (ds): string => {\n    if (!ds || !ds.options) {\n      return DEFAULT_STR;\n    }\n    if (ds.options.id) {\n      return ds.options.id;\n    }\n    const arr = Object.entries(ds.options).map(([key, val]) => `${key}=${val}`);\n    if (!arr.length) {\n      return DEFAULT_STR;\n    }\n    return arr.join(JOIN_STR);\n  };\n\n  if (!viewport || !viewport.viewportOptions || !viewport.displaySetInstanceUIDs?.length) {\n    return;\n  }\n\n  const { displaySetOptions, displaySetInstanceUIDs } = viewport;\n  const lutId = getLutId(displaySetOptions[0]);\n  const lutPresentationArr = [lutId];\n\n  for (const uid of displaySetInstanceUIDs) {\n    lutPresentationArr.push(uid);\n  }\n\n  addUniqueIndex(lutPresentationArr, PRESENTATION_TYPE_ID, viewports, isUpdatingSameViewport);\n\n  return lutPresentationArr.join(JOIN_STR);\n};\n\n/**\n * Creates the LUT Presentation store.\n *\n * @param set - The zustand set function.\n * @returns The LUT Presentation store state and actions.\n */\nconst createLutPresentationStore = (set): LutPresentationState => ({\n  type: PRESENTATION_TYPE_ID,\n  lutPresentationStore: {},\n\n  /**\n   * Sets the LUT presentation for a given key.\n   */\n  setLutPresentation: (key, value) =>\n    set(\n      state => ({\n        lutPresentationStore: {\n          ...state.lutPresentationStore,\n          [key]: value,\n        },\n      }),\n      false,\n      'setLutPresentation'\n    ),\n\n  /**\n   * Clears all LUT presentations from the store.\n   */\n  clearLutPresentationStore: () =>\n    set({ lutPresentationStore: {} }, false, 'clearLutPresentationStore'),\n\n  /**\n   * Retrieves the presentation ID based on the provided parameters.\n   */\n  getPresentationId: getLutPresentationId,\n});\n\n/**\n * Zustand store for managing LUT presentations.\n * Applies devtools middleware when DEBUG_STORE is enabled.\n */\nexport const useLutPresentationStore = create<LutPresentationState>()(\n  DEBUG_STORE\n    ? devtools(createLutPresentationStore, { name: 'LutPresentationStore' })\n    : createLutPresentationStore\n);\n","import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { PositionPresentation } from '../types/Presentation';\nimport { addUniqueIndex, JOIN_STR } from './presentationUtils';\n\nconst PRESENTATION_TYPE_ID = 'positionPresentationId';\nconst DEBUG_STORE = false;\n\n/**\n * Represents the state and actions for managing position presentations.\n */\ntype PositionPresentationState = {\n  /**\n   * Type identifier for the store.\n   */\n  type: string;\n\n  /**\n   * Stores position presentations indexed by their presentation ID.\n   */\n  positionPresentationStore: Record<string, PositionPresentation>;\n\n  /**\n   * Sets the position presentation for a given key.\n   *\n   * @param key - The key identifying the position presentation.\n   * @param value - The `PositionPresentation` to associate with the key.\n   */\n  setPositionPresentation: (key: string, value: PositionPresentation) => void;\n\n  /**\n   * Clears all position presentations from the store.\n   */\n  clearPositionPresentationStore: () => void;\n\n  /**\n   * Retrieves the presentation ID based on the provided parameters.\n   *\n   * @param id - The ID to check.\n   * @param options - Configuration options.\n   * @param options.viewport - The current viewport.\n   * @param options.viewports - All available viewports.\n   * @param options.isUpdatingSameViewport - Indicates if the same viewport is being updated.\n   * @returns The position presentation ID or undefined.\n   */\n  getPresentationId: (\n    id: string,\n    options: {\n      viewport: any;\n      viewports: any;\n      isUpdatingSameViewport: boolean;\n    }\n  ) => string | undefined;\n\n  getPositionPresentationId: (\n    viewport: any,\n    viewports?: any,\n    isUpdatingSameViewport?: boolean\n  ) => string | undefined;\n};\n\n/**\n * Generates a position presentation ID based on the viewport configuration.\n *\n * @param id - The ID to check.\n * @param options - Configuration options.\n * @param options.viewport - The current viewport.\n * @param options.viewports - All available viewports.\n * @param options.isUpdatingSameViewport - Indicates if the same viewport is being updated.\n * @returns The position presentation ID or undefined.\n */\nconst getPresentationId = (\n  id: string,\n  {\n    viewport,\n    viewports,\n    isUpdatingSameViewport,\n  }: {\n    viewport: any;\n    viewports: any;\n    isUpdatingSameViewport: boolean;\n  }\n): string | undefined => {\n  if (id !== PRESENTATION_TYPE_ID) {\n    return;\n  }\n\n  if (!viewport?.viewportOptions || !viewport.displaySetInstanceUIDs?.length) {\n    return;\n  }\n\n  return getPositionPresentationId(viewport, viewports, isUpdatingSameViewport);\n};\n\nfunction getPositionPresentationId(viewport, viewports, isUpdatingSameViewport) {\n  const { viewportOptions = {}, displaySetInstanceUIDs = [], displaySetOptions = [] } = viewport;\n  const { id: viewportOptionId, orientation } = viewportOptions;\n\n  const positionPresentationArr = [orientation || 'acquisition'];\n  if (viewportOptionId) {\n    positionPresentationArr.push(viewportOptionId);\n  }\n\n  if (displaySetOptions?.some(ds => ds.options?.blendMode || ds.options?.displayPreset)) {\n    positionPresentationArr.push(`custom`);\n  }\n\n  for (const uid of displaySetInstanceUIDs) {\n    positionPresentationArr.push(uid);\n  }\n\n  if (viewports && viewports.length && isUpdatingSameViewport !== undefined) {\n    addUniqueIndex(\n      positionPresentationArr,\n      PRESENTATION_TYPE_ID,\n      viewports,\n      isUpdatingSameViewport\n    );\n  } else {\n    positionPresentationArr.push(0);\n  }\n\n  return positionPresentationArr.join(JOIN_STR);\n}\n\n/**\n * Creates the Position Presentation store.\n *\n * @param set - The zustand set function.\n * @returns The Position Presentation store state and actions.\n */\nconst createPositionPresentationStore = set => ({\n  type: PRESENTATION_TYPE_ID,\n  positionPresentationStore: {},\n\n  /**\n   * Sets the position presentation for a given key.\n   */\n  setPositionPresentation: (key, value) =>\n    set(\n      state => ({\n        positionPresentationStore: {\n          ...state.positionPresentationStore,\n          [key]: value,\n        },\n      }),\n      false,\n      'setPositionPresentation'\n    ),\n\n  /**\n   * Clears all position presentations from the store.\n   */\n  clearPositionPresentationStore: () =>\n    set({ positionPresentationStore: {} }, false, 'clearPositionPresentationStore'),\n\n  /**\n   * Retrieves the presentation ID based on the provided parameters.\n   */\n  getPresentationId,\n  getPositionPresentationId: getPositionPresentationId,\n});\n\n/**\n * Zustand store for managing position presentations.\n * Applies devtools middleware when DEBUG_STORE is enabled.\n */\nexport const usePositionPresentationStore = create<PositionPresentationState>()(\n  DEBUG_STORE\n    ? devtools(createPositionPresentationStore, { name: 'PositionPresentationStore' })\n    : createPositionPresentationStore\n);\n","import { CONSTANTS, utilities } from '@cornerstonejs/core';\n\nconst { MPR_CAMERA_VALUES } = CONSTANTS;\n\n/**\n * Determines the viewport orientation (axial, sagittal, or coronal) based on the image orientation patient values.\n * This is done by comparing the view vectors with predefined MPR camera values.\n *\n * @param imageOrientationPatient - Array of 6 numbers representing the image orientation patient values.\n * The first 3 numbers represent the direction cosines of the first row and the second 3 numbers\n * represent the direction cosines of the first column.\n *\n * @returns The viewport orientation as a string ('axial', 'sagittal', 'coronal') or undefined if\n * the orientation cannot be determined or if the input is invalid.\n *\n * @example\n * ```typescript\n * const orientation = getViewportOrientationFromImageOrientationPatient([1,0,0,0,1,0]);\n * console.debug(orientation); // 'axial'\n * ```\n */\nexport const getViewportOrientationFromImageOrientationPatient = (\n  imageOrientationPatient: number[]\n): string | undefined => {\n  if (!imageOrientationPatient || imageOrientationPatient.length !== 6) {\n    return undefined;\n  }\n\n  const viewRight = imageOrientationPatient.slice(0, 3);\n  const viewDown = imageOrientationPatient.slice(3, 6);\n  const viewUp = [-viewDown[0], -viewDown[1], -viewDown[2]];\n\n  // Compare vectors with MPR camera values using utilities.isEqual\n  if (\n    utilities.isEqual(viewRight, MPR_CAMERA_VALUES.axial.viewRight) &&\n    utilities.isEqual(viewUp, MPR_CAMERA_VALUES.axial.viewUp)\n  ) {\n    return 'axial';\n  }\n\n  if (\n    utilities.isEqual(viewRight, MPR_CAMERA_VALUES.sagittal.viewRight) &&\n    utilities.isEqual(viewUp, MPR_CAMERA_VALUES.sagittal.viewUp)\n  ) {\n    return 'sagittal';\n  }\n\n  if (\n    utilities.isEqual(viewRight, MPR_CAMERA_VALUES.coronal.viewRight) &&\n    utilities.isEqual(viewUp, MPR_CAMERA_VALUES.coronal.viewUp)\n  ) {\n    return 'coronal';\n  }\n\n  return undefined;\n};\n","import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { SegmentationPresentation, SegmentationPresentationItem } from '../types/Presentation';\nimport { JOIN_STR } from './presentationUtils';\nimport { getViewportOrientationFromImageOrientationPatient } from '../utils/getViewportOrientationFromImageOrientationPatient';\n\nconst PRESENTATION_TYPE_ID = 'segmentationPresentationId';\nconst DEBUG_STORE = false;\n\n/**\n * The keys are the presentationId.\n */\ntype SegmentationPresentationStore = {\n  /**\n   * Type identifier for the store.\n   */\n  type: string;\n\n  /**\n   * Stores segmentation presentations indexed by their presentation ID.\n   */\n  segmentationPresentationStore: Record<string, SegmentationPresentation>;\n\n  /**\n   * Sets the segmentation presentation for a given segmentation ID.\n   *\n   * @param presentationId - The presentation ID.\n   * @param value - The `SegmentationPresentation` to associate with the ID.\n   */\n  setSegmentationPresentation: (presentationId: string, value: SegmentationPresentation) => void;\n\n  /**\n   * Clears all segmentation presentations from the store.\n   */\n  clearSegmentationPresentationStore: () => void;\n\n  /**\n   * Retrieves the presentation ID based on the provided parameters.\n   *\n   * @param id - The ID to check.\n   * @param options - Configuration options.\n   * @param options.viewport - The current viewport.\n   * @param options.viewports - All available viewports.\n   * @param options.isUpdatingSameViewport - Indicates if the same viewport is being updated.\n   * @param options.servicesManager - The services manager instance.\n   * @returns The segmentation presentation ID or undefined.\n   */\n  getPresentationId: (\n    id: string,\n    options: {\n      viewport: AppTypes.ViewportGrid.Viewport;\n      viewports: AppTypes.ViewportGrid.Viewports;\n      isUpdatingSameViewport: boolean;\n      servicesManager: AppTypes.ServicesManager;\n    }\n  ) => string | undefined;\n\n  /**\n   * Adds a new segmentation presentation state.\n   *\n   * @param presentationId - The presentation ID.\n   * @param segmentationPresentation - The `SegmentationPresentation` to add.\n   * @param servicesManager - The services manager instance.\n   */\n  addSegmentationPresentationItem: (\n    presentationId: string,\n    segmentationPresentationItem: SegmentationPresentationItem\n  ) => void;\n\n  /**\n   * Gets the current segmentation presentation ID.\n   *\n   * @param params - Parameters for retrieving the segmentation presentation ID.\n   * @param params.viewport - The current viewport.\n   * @param params.servicesManager - The services manager instance.\n   * @returns The current segmentation presentation ID.\n   */\n  getSegmentationPresentationId: ({\n    viewport,\n    servicesManager,\n  }: {\n    viewport: AppTypes.ViewportGrid.Viewport;\n    servicesManager: AppTypes.ServicesManager;\n  }) => string;\n};\n\n/**\n * Generates a segmentation presentation ID based on the viewport configuration.\n *\n * @param id - The ID to check.\n * @param options - Configuration options.\n * @param options.viewport - The current viewport.\n * @param options.viewports - All available viewports.\n * @param options.isUpdatingSameViewport - Indicates if the same viewport is being updated.\n * @param options.servicesManager - The services manager instance.\n * @returns The segmentation presentation ID or undefined.\n */\nconst getPresentationId = (\n  id: string,\n  {\n    viewport,\n    viewports,\n    isUpdatingSameViewport,\n    servicesManager,\n  }: {\n    viewport: AppTypes.ViewportGrid.Viewport;\n    viewports: AppTypes.ViewportGrid.Viewports;\n    isUpdatingSameViewport: boolean;\n    servicesManager: AppTypes.ServicesManager;\n  }\n): string | undefined => {\n  if (id !== PRESENTATION_TYPE_ID) {\n    return;\n  }\n\n  return _getSegmentationPresentationId({ viewport, servicesManager });\n};\n\n/**\n * Helper function to generate the segmentation presentation ID.\n *\n * @param params - Parameters for generating the segmentation presentation ID.\n * @param params.viewport - The current viewport.\n * @param params.servicesManager - The services manager instance.\n * @returns The segmentation presentation ID or undefined.\n */\nconst _getSegmentationPresentationId = ({\n  viewport,\n  servicesManager,\n}: {\n  viewport: AppTypes.ViewportGrid.Viewport;\n  servicesManager: AppTypes.ServicesManager;\n}) => {\n  if (!viewport?.viewportOptions || !viewport.displaySetInstanceUIDs?.length) {\n    return;\n  }\n\n  const { displaySetInstanceUIDs, viewportOptions } = viewport;\n\n  let orientation = viewportOptions.orientation;\n\n  if (!orientation) {\n    // Calculate orientation from the viewport sample image\n    const displaySet = servicesManager.services.displaySetService.getDisplaySetByUID(\n      displaySetInstanceUIDs[0]\n    );\n    const sampleImage = displaySet.images?.[0];\n    const imageOrientationPatient = sampleImage?.ImageOrientationPatient;\n\n    orientation = getViewportOrientationFromImageOrientationPatient(imageOrientationPatient);\n  }\n\n  const segmentationPresentationArr = [];\n\n  segmentationPresentationArr.push(...displaySetInstanceUIDs);\n\n  // Uncomment if unique indexing is needed\n  // addUniqueIndex(\n  //   segmentationPresentationArr,\n  //   'segmentationPresentationId',\n  //   viewports,\n  //   isUpdatingSameViewport\n  // );\n\n  return segmentationPresentationArr.join(JOIN_STR);\n};\n\n/**\n * Creates the Segmentation Presentation store.\n *\n * @param set - The zustand set function.\n * @returns The Segmentation Presentation store state and actions.\n */\nconst createSegmentationPresentationStore = set => ({\n  type: PRESENTATION_TYPE_ID,\n  segmentationPresentationStore: {},\n\n  /**\n   * Clears all segmentation presentations from the store.\n   */\n  clearSegmentationPresentationStore: () =>\n    set({ segmentationPresentationStore: {} }, false, 'clearSegmentationPresentationStore'),\n\n  /**\n   * Adds a new segmentation presentation item to the store.\n   *\n   * segmentationPresentationItem: {\n   *   segmentationId: string;\n   *   type: SegmentationRepresentations;\n   *   hydrated: boolean | null;\n   *   config?: unknown;\n   * }\n   */\n  addSegmentationPresentationItem: (\n    presentationId: string,\n    segmentationPresentationItem: SegmentationPresentationItem\n  ) =>\n    set(\n      state => ({\n        segmentationPresentationStore: {\n          ...state.segmentationPresentationStore,\n          [presentationId]: [\n            ...(state.segmentationPresentationStore[presentationId] || []),\n            segmentationPresentationItem,\n          ],\n        },\n      }),\n      false,\n      'addSegmentationPresentationItem'\n    ),\n\n  /**\n   * Sets the segmentation presentation for a given presentation ID. A segmentation\n   * presentation is an array of SegmentationPresentationItem.\n   *\n   * segmentationPresentationItem: {\n   *   segmentationId: string;\n   *   type: SegmentationRepresentations;\n   *   hydrated: boolean | null;\n   *   config?: unknown;\n   * }\n   *\n   * segmentationPresentation: SegmentationPresentationItem[]\n   */\n  setSegmentationPresentation: (presentationId: string, values: SegmentationPresentation) =>\n    set(\n      state => ({\n        segmentationPresentationStore: {\n          ...state.segmentationPresentationStore,\n          [presentationId]: values,\n        },\n      }),\n      false,\n      'setSegmentationPresentation'\n    ),\n\n  /**\n   * Retrieves the presentation ID based on the provided parameters.\n   */\n  getPresentationId,\n\n  /**\n   * Retrieves the current segmentation presentation ID.\n   */\n  getSegmentationPresentationId: _getSegmentationPresentationId,\n});\n\n/**\n * Zustand store for managing segmentation presentations.\n * Applies devtools middleware when DEBUG_STORE is enabled.\n */\nexport const useSegmentationPresentationStore = create<SegmentationPresentationStore>()(\n  DEBUG_STORE\n    ? devtools(createSegmentationPresentationStore, { name: 'Segmentation Presentation Store' })\n    : createSegmentationPresentationStore\n);\n","import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\n\n/**\n * Identifier for the synchronizers store type.\n */\nconst PRESENTATION_TYPE_ID = 'synchronizersStoreId';\n\n/**\n * Flag to enable or disable debug mode for the store.\n * Set to `true` to enable zustand devtools.\n */\nconst DEBUG_STORE = false;\n\n/**\n * Information about a single synchronizer.\n */\ntype SynchronizerInfo = {\n  id: string;\n  type: string;\n  sourceViewports: Array<{ viewportId: string; renderingEngineId: string }>;\n  targetViewports: Array<{ viewportId: string; renderingEngineId: string }>;\n};\n\n/**\n * State shape for the Synchronizers store.\n */\ntype SynchronizersState = {\n  /**\n   * Stores synchronizer information indexed by a unique key.\n   */\n  synchronizersStore: Record<string, SynchronizerInfo[]>;\n\n  /**\n   * Sets the synchronizers for a specific viewport.\n   *\n   * @param viewportId - The ID of the viewport.\n   * @param synchronizers - An array of SynchronizerInfo.\n   */\n  setSynchronizers: (viewportId: string, synchronizers: SynchronizerInfo[]) => void;\n\n  /**\n   * Clears the entire synchronizers store.\n   */\n  clearSynchronizersStore: () => void;\n};\n\n/**\n * Creates the Synchronizers store.\n *\n * @param set - The zustand set function.\n * @returns The synchronizers store state and actions.\n */\nconst createSynchronizersStore = (set): SynchronizersState => ({\n  synchronizersStore: {},\n  type: PRESENTATION_TYPE_ID,\n\n  setSynchronizers: (viewportId: string, synchronizers: SynchronizerInfo[]) => {\n    set(\n      state => ({\n        synchronizersStore: {\n          ...state.synchronizersStore,\n          [viewportId]: synchronizers,\n        },\n      }),\n      false,\n      'setSynchronizers'\n    );\n  },\n\n  clearSynchronizersStore: () => {\n    set({ synchronizersStore: {} }, false, 'clearSynchronizersStore');\n  },\n});\n\n/**\n * Zustand store for managing synchronizers.\n * Applies devtools middleware when DEBUG_STORE is enabled.\n */\nexport const useSynchronizersStore = create<SynchronizersState>()(\n  DEBUG_STORE\n    ? devtools(createSynchronizersStore, { name: 'SynchronizersStore' })\n    : createSynchronizersStore\n);\n"],"names":["useViewportHover","viewportId","isHovered","setIsHovered","useState","viewportGrid","useViewportGrid","activeViewportId","isActive","setupListeners","useCallback","viewportElement","document","querySelector","element","closest","elementRect","getBoundingClientRect","lastIsInside","updateRect","handleMouseMove","event","isInside","x","clientX","y","clientY","left","right","top","bottom","isPointInViewport","resizeTimeout","handleResize","clearTimeout","setTimeout","window","addEventListener","removeEventListener","useEffect","useMemo","useActiveViewportSegmentationRepresentations","useViewportSegmentations","useMeasurementTracking","servicesManager","useSystem","cornerstoneViewportService","trackedMeasurementsService","measurementService","services","backgroundDisplaySet","useViewportDisplaySets","isTracked","setIsTracked","isLocked","setIsLocked","trackedMeasurementUIDs","setTrackedMeasurementUIDs","updateTrackedMeasurements","SeriesInstanceUID","seriesInstanceUID","uids","getMeasurements","measurement","referenceSeriesUID","map","uid","updateIsTracked","trackedSeries","getTrackedSeries","length","viewport","getCornerstoneViewport","BaseVolumeViewport","currentImageId","getCurrentImageId","seriesIsTracked","includes","isTrackingEnabled","subscriptions","subscribe","EVENTS","TRACKING_ENABLED","TRACKING_DISABLED","TRACKED_SERIES_CHANGED","SERIES_ADDED","SERIES_REMOVED","MEASUREMENT_ADDED","RAW_MEASUREMENT_ADDED","MEASUREMENT_UPDATED","MEASUREMENT_REMOVED","MEASUREMENTS_CLEARED","forEach","eventType","push","sub","unsubscribe","useMeasurements","measurementFilter","displaySetService","displayMeasurements","setDisplayMeasurements","updateDisplayMeasurements","mappedMeasurements","m","displaySets","getDisplaySetsForSeries","instances","Error","findingSites","finding","label","baseLabel","displayText","baseDisplayText","firstSite","text","primary","secondary","site","mapMeasurementToDisplay","prevMeasurements","JSON","stringify","debouncedUpdate","debounce","evt","unsub","cancel","mapSegmentationToDisplay","segmentation","customizationService","segments","readableTextMap","getCustomization","mapStatsToDisplay","stats","indent","indentation","repeat","key","Object","prototype","hasOwnProperty","call","value","readableText","Array","isArray","roundNumber","displayTextMapper","segment","defaultDisplay","cachedStats","updatedSegments","entries","segmentIndex","useSegmentations","options","subscribeToDataModified","debounceTime","segmentationService","segmentations","setSegmentations","update","getSegmentations","mappedSegmentations","leading","trailing","SEGMENTATION_MODIFIED","SEGMENTATION_REMOVED","SEGMENTATION_DATA_MODIFIED","subscription","DERIVED_OVERLAY_MODALITIES","sortByOverlayable","a","b","isOverlayable","sortByPriority","utils","isLowPriorityModality","Modality","viewportGridState","viewportGridService","viewportIdToUse","includeBackground","includeForeground","includeOverlay","includePotentialOverlay","includePotentialForeground","includePotentialBackground","needsAllDisplaySets","allDisplaySets","getActiveDisplaySets","needsSegmentations","segmentationRepresentations","setSegmentationRepresentations","getSegmentationRepresentations","unsubscribeArr","SEGMENTATION_REPRESENTATION_MODIFIED","SEGMENTATION_REPRESENTATION_REMOVED","item","overlayDisplaySets","repr","getDisplaySetByUID","segmentationId","overlayDisplaySetUIDs","ds","displaySetInstanceUID","needsEnhancedDisplaySets","viewportDisplaySets","enhancedDisplaySets","displaySetsUIDs","getDisplaySetsUIDsForViewport","otherDisplaySets","filter","displaySet","displaySetUID","backgroundCanBeVolume","csUtils","imageIds","isReconstructable","unsupported","FrameOfReferenceUID","images","image","imageId","isMultiFrame","getEnhancedDisplaySets","undefined","foregroundDisplaySets","foregroundDisplaySetUIDs","potentialOverlayDisplaySets","sort","potentialForegroundDisplaySets","potentialBackgroundDisplaySets","result","getPosition","location","ButtonLocation","LeftMiddle","RightMiddle","BottomMiddle","TopMiddle","linearToOpacity","linearValue","Math","pow","opacityToLinear","opacityValue","is3DViewport","VolumeViewport3D","useViewportRendering","commandsManager","colorbarService","is3DVolume","setIs3DVolume","hasColorbar","setHasColorbar","colorbarPosition","setColorbarPosition","voiRange","setVoiRange","voiRangeRef","React","opacity","setOpacityState","opacityLinear","setOpacityLinearState","threshold","setThresholdState","pixelValueRange","setPixelValueRange","min","max","activeDisplaySetInstanceUID","viewportInfo","getViewportInfo","presets","colorbarProperties","volumeRenderingPresets","volumeRenderingQualityRange","step","getCustomizationData","backgroundColor","getViewportOptions","background","isViewportBackgroundLight","utilities","allWindowLevelPresets","modality","selectedDisplaySet","csViewport","volumeId","getAllVolumeIds","find","id","imageData","getImageData","imageDataVtk","voxelManager","get","range","getRange","activeDisplaySetPresets","activePresetData","preset","properties","StackViewport","getProperties","current","colormap","reduce","error","console","updateColorbarState","hasColorbarValue","STATE_CHANGED","updateVOI","eventDetail","detail","areVoiRangesClose","updateColormap","Enums","VOI_MODIFIED","COLORMAP_MODIFIED","validateActiveDisplaySet","isDisplaySetInViewport","some","setWindowLevel","lower","upper","windowWidth","windowCenter","newVoiRange","run","commandName","commandOptions","context","setVOIRange","params","windowLevel","toggleColorbar","width","colorbarWidth","colorbarTickPosition","colorbarInitialColormap","appropriateTickPosition","colorbarOptions","colormaps","ticks","position","activeColormapName","style","font","color","maxNumTicks","tickSize","tickWidth","labelMargin","displaySetInstanceUIDs","setColormap","immediate","setOpacity","updatedColormap","setProperties","render","setOpacityLinear","actualOpacity","setThreshold","thresholdValue","debug","c","Name","actorEntries","getActors","actorEntry","entry","referencedId","setVolumeRenderingPreset","setVolumeRenderingQuality","quality","setVolumeLighting","ambient","diffuse","specular","setVolumeShading","enabled","windowLevelPresets","rangeA","rangeB","epsilon","abs","excludedModalities","segmentationsWithRepresentations","setSegmentationsWithRepresentations","disabled","displaySetUIDs","prev","newSegmentationsWithRepresentations","representation","getSegmentation","ACTIVE_VIEWPORT_ID_CHANGED","GRID_STATE_CHANGED","CORNERSTONE_3D_TOOLS_SOURCE_NAME","CORNERSTONE_3D_TOOLS_SOURCE_VERSION","registerVolumeLoader","volumeLoader","getViewportEnabledElement","OHIFgetEnabledElement","getEnabledElement","getActiveViewportEnabledElement","getState","calibrateImageSpacing","CalibrationLineTool","LengthTool","constructor","args","_renderingViewport","_lengthToolRenderAnnotation","this","renderAnnotation","enabledElement","svgDrawingHelper","_getTextLines","data","targetId","canvasPoint1","canvasPoint2","handles","points","p","worldToCanvas","round","point1","point2","dx","dy","sqrt","calculateLength2","toolName","onCompletedCalibrationLine","csToolsEvent","uiDialogService","annotationAddedEventDetail","annotation","metadata","annotationData","referencedImageId","pos1","pos2","dz","calculateLength3","Promise","resolve","reject","callInputDialog","title","placeholder","defaultValue","then","newValue","newLength","spacingScale","getRenderingEngine","type","scale","adjustCalibration","Number","parseFloat","_cachedOverlayMetadata","Map","OverlayPlaneModuleProvider","add","set","query","metaData","ImageOverlayViewerTool","AnnotationDisplayTool","toolProps","defaultToolProps","supportedInteractionTypes","configuration","fillColor","super","onSetToolDisabled","getReferencedImageId","overlayMetadata","overlays","overlay","addOverlayPlaneModule","_getCachedStat","cachedStat","_renderOverlay","VolumeViewport","getTargetId","split","overlayData","_id","columns","rows","height","overlayTopLeftWorldPos","overlayTopLeftOnCanvas","overlayBottomRightWorldPos","overlayBottomRightOnCanvas","svgNodeHash","existingImageElement","getSvgNode","attributes","href","dataUrl","isNaN","warn","drawing","setNodeTouched","newImageElement","createElementNS","appendNode","pixelData","all","async","idx","Value","retrieveBulkData","InlineBinary","blob","b64toBlob","arrayBuffer","_renderOverlayToDataUrl","guid","_isSameColor","color1","color2","pixelDataRaw","pixelDataView","DataView","totalBits","canvas","createElement","ctx","getContext","clearRect","globalCompositeOperation","i","bitIdx","byteIdx","getUint8","putImageData","toDataURL","toolNames","Pan","PanTool","ArrowAnnotate","ArrowAnnotateTool","WindowLevel","WindowLevelTool","StackScroll","StackScrollTool","Zoom","ZoomTool","VolumeRotate","VolumeRotateTool","MipJumpToClick","MIPJumpToClickTool","Length","DragProbe","DragProbeTool","Probe","ProbeTool","RectangleROI","RectangleROITool","RectangleROIThreshold","RectangleROIThresholdTool","EllipticalROI","EllipticalROITool","CircleROI","CircleROITool","Bidirectional","BidirectionalTool","Angle","AngleTool","CobbAngle","CobbAngleTool","Magnify","MagnifyTool","Crosshairs","CrosshairsTool","Brush","BrushTool","PaintFill","PaintFillTool","ReferenceLines","ReferenceLinesTool","CalibrationLine","TrackballRotateTool","CircleScissors","CircleScissorsTool","RectangleScissors","RectangleScissorsTool","SphereScissors","SphereScissorsTool","ImageOverlayViewer","AdvancedMagnify","AdvancedMagnifyTool","UltrasoundDirectional","UltrasoundDirectionalTool","UltrasoundAnnotation","UltrasoundPleuraBLineTool","SplineROI","SplineROITool","LivewireContour","LivewireContourTool","PlanarFreehandROI","PlanarFreehandROITool","OrientationMarker","OrientationMarkerTool","WindowLevelRegion","WindowLevelRegionTool","PlanarFreehandContourSegmentation","PlanarFreehandContourSegmentationTool","SegmentBidirectional","SegmentBidirectionalTool","SegmentSelect","SegmentSelectTool","SegmentLabel","SegmentLabelTool","LabelmapSlicePropagation","LabelmapSlicePropagationTool","MarkerLabelmap","MarkerLabelmapTool","RegionSegmentPlus","RegionSegmentPlusTool","getIsLocked","annotationUID","locking","getIsVisible","visibility","getSOPInstanceAttributes","instance","cornerstone","SOPInstanceUID","StudyInstanceUID","frameNumber","_getUIDFromImageID","getDisplaySetsBy","from","getDisplaySetCache","values","getDisplaySet","toAnnotation","toMeasurement","csToolsEventDetail","getValueTypeFromToolType","isVisible","SUPPORTED_TOOLS","getDisplaySetForSOPInstanceUID","textBox","mappedAnnotations","keys","annotations","targetStats","SeriesNumber","unit","getMappedAnnotations","InstanceNumber","instanceText","frameText","roundedLength","getDisplayText","referenceStudyUID","getReport","join","_getReport","getHandlesFromPoints","longAxis","shortAxis","start","end","perpendicularStart","perpendicularEnd","obj","assign","isAnnotationSelected","cs3dToolAnnotationUtils","setAnnotationSelected","selected","getFirstAnnotationSelected","selectedAnnotationUID","getAnnotation","roundedWidth","getDisplayUnit","getStatisticDisplayString","numbers","results","number","charAt","toUpperCase","slice","addedModalities","Set","mean","stdDev","area","areaUnit","modalityUnit","has","roundedArea","mappedAnnotation","maxStr","CornerstoneViewportService","perimeter","radiusUnit","perimeterStr","angle","roundedAngle","contour","polyline","report","name","getColumnValueReport","isFinite","seriesText","roundedValue","DisplaySetService","xValues","yValues","units","isUnitless","isHorizontal","dist1","dist2","UltrasoundPleuraBLine","annotationType","measurementServiceMappingsFactory","_getValueTypeFromToolType","toolType","POLYLINE","ELLIPSE","CIRCLE","RECTANGLE","BIDIRECTIONAL","POINT","ANGLE","MeasurementService","VALUE_TYPES","csToolsAnnotation","matchingCriteria","valueType","CSExtensionEnums","removeAnnotation","csToolsEvents","connectToolsToMeasurementService","extensionManager","csTools3DVer1MeasurementSource","initMeasurementService","createSource","addMapping","connectMeasurementServiceToTools","annotationToMeasurement","remove","addMeasurement","completedEvt","log","finally","removeMeasurement","resize","annotationRemovedEventDetail","getMeasurement","addedEvt","ANNOTATION_ADDED","ANNOTATION_COMPLETED","updatedEvt","ANNOTATION_MODIFIED","removedEvt","ANNOTATION_REMOVED","selectionEvt","ANNOTATION_SELECTION_CHANGE","eventTarget","annotationModifiedEventDetail","annotationSelectionEventDetail","added","addedSelectedAnnotationUIDs","removed","removedSelectedAnnotationUIDs","setMeasurementSelected","measurements","source","removedAnnotation","deleting","notYetUpdatedAtSource","sourceAnnotation","setAnnotationLabel","viewportIds","getViewports","triggerAnnotationRenderForViewportIds","dataSource","DicomMetadataStore","getInstance","getImageIdsForInstance","annotationManager","getAnnotationManager","newAnnotation","highlighted","invalidated","addAnnotation","removedMeasurementId","_getSyncedViewports","srcViewportId","viewports","viewportsStates","srcViewportState","viewportOptions","viewportType","srcViewport","srcVolume","volumes","cache","getVolume","volume","isDynamicVolume","_getVolumeFromViewport","srcVolumeId","hasVolumeId","cineService","setServiceImplementation","getSyncedViewports","playClip","playClipOptions","stopClip","stopClipOptions","studyPrefetcherService","requestType","Prefetch","imageLoadPoolManager","imageLoader","isImageCached","getImageLoadObject","imageLoadEventsManager","addEventListeners","onImageLoaded","onImageLoadFailed","csEvents","IMAGE_LOADED","IMAGE_LOAD_FAILED","volumeIdMapsToLoad","viewportIdVolumeInputArrayMap","interleaveCenterLoader","volumeInputArray","displaySetsMatchDetails","viewportMatchDetails","matchDetails","volumeInput","uniqueViewportVolumeDisplaySetUIDs","uniqueMatchedDisplaySetUIDs","matchDetail","displaySetsInfo","size","AllRequests","requests","getImageLoadRequests","reOrderedRequests","maxImageIdIndex","middleImageIdIndex","floor","lowerImageIdIndex","upperImageIdIndex","imageIdsToPrefetch","imageIdIndex","prefetchQueuedFilled","currentPositionDownToMinimum","currentPositionUpToMaximum","getInterleavedFrames","request","req","interleavedRequests","compact","flatten","zip","finalRequests","volumeRequests","volumeImageIdRequest","callLoadImage","additionalDetails","callLoadImageBound","bind","addRequest","clear","viewportIdVolumeInputArrayMapCopy","interleaveNthLoader","lists","time","useLists","ret","list","splice","indexOf","timeEnd","interleave","frames","centerStart","centerEnd","getNthFrames","interleaveTopToBottom","filteredMatchDetails","displaySetsToLoad","curMatchDetails","numDisplaySetsToLoad","displaySetOptions","skipLoading","reverse","findNearbyToolData","currentPoints","runCommand","canvasCoordinates","cs3DToolsEvents","cornerstoneViewportHandleClick","button","which","nameArr","altKey","ctrlKey","shiftKey","getEventName","cornerstoneViewportHandleEvent","toRun","nearbyToolData","command","requireNearbyToolData","ELEMENT_ENABLED","setEnabledElement","MOUSE_CLICK","ELEMENT_DISABLED","cornerstoneViewportHandleDoubleClick","eventName","getDoubleClickEventName","MOUSE_DOUBLE_CLICK","IMAGE_TIMING_KEYS","imageTiming","viewportsWaiting","imageRenderedListener","viewportStatus","TimingEnum","DISPLAY_SETS_TO_FIRST_IMAGE","STUDY_TO_FIRST_IMAGE","SCRIPT_TO_VIEW","IMAGE_RENDERED","DISPLAY_SETS_TO_ALL_IMAGES","ColorSpace","NanColor","RGBPoints","description","registerColormap","csUtilities","init","appConfig","PUBLIC_LIB_URL","cs3DInit","peerImport","Boolean","useCPURendering","rendering","strictZSpacingForVolumeViewport","maxCacheSize","setMaxCacheSize","isAnnotation","addons","polySeg","computeWorker","autoTerminateOnIdle","addTool","defaultStyles","getDefaultToolStyles","setDefaultToolStyles","global","textBoxFontSize","lineWidth","initCornerstoneTools","Settings","getRuntimeSettings","useCursors","userAuthenticationService","uiModalService","uiNotificationService","hangingProtocolService","toolbarService","registerEventForToolbarUpdate","showCPUFallbackMessage","callback","progress","show","content","CPUModal","PROTOCOL_CHANGED","_showCPURenderingModal","getPresentationId","getLutPresentationId","useLutPresentationStore","getSegmentationPresentationId","useSegmentationPresentationStore","getPositionPresentationId","usePositionPresentationStore","addPresentationIdProvider","cornerstoneTools","SegmentationRepresentations","Contour","renderFill","metadataProvider","OHIF","MetadataProvider","cornerstoneStreamingImageVolumeLoader","cornerstoneStreamingDynamicImageVolumeLoader","imageLoadStrategies","interleaveCenter","nth","nthLoader","strategyFn","registerImageLoadStrategy","createMetadataWrappedStrategy","maxNumRequests","RequestTypes","Interaction","interaction","Thumbnail","thumbnail","prefetch","Compute","compute","dicomImageLoader","maxWebWorkers","navigator","hardwareConcurrency","maxNumberOfWebWorkers","beforeSend","xhr","sourceConfig","getActiveDataSource","getConfig","headers","getAuthorizationHeader","xhrRequestHeaders","Accept","generateAcceptHeader","acceptHeader","requestTransferSyntaxUID","omitQuotationForMultipartRequest","errorInterceptor","errorHandler","getHTTPErrorHandler","initWADOImageLoader","measurementServiceSource","initCineService","initStudyPrefetcherService","JUMP_TO_MEASUREMENT","CUSTOM_IMAGE_LOAD_PERFORMED","volumeInputArrayMap","lutPresentationStore","segmentationPresentationStore","positionPresentationStore","ohifViewport","presentationIds","presentations","positionPresentation","positionPresentationId","lutPresentation","lutPresentationId","segmentationPresentation","segmentationPresentationId","setVolumesForViewport","initContextMenu","initDoubleClick","imageLoadFailedHandler","handler","IMAGE_LOAD_ERROR","timingKeys","initViewTiming","CAMERA_RESET","ORTHOGRAPHIC","addEventListenerDebounced","ERROR_EVENT","errorId","message","substring","allowDuplicates","deduplicationInterval","activeWorkerTasks","WEB_WORKER_PROGRESS","normalizedKey","shouldCleanup","COMPUTE_STATISTICS","toLowerCase","replace","getNormalizedTaskKey","progressPromise","originalId","autoClose","promise","promiseMessages","loading","success","taskData","delete","cleanupError","initializeWebWorkerProgressHandler","clonedConfig","imageRetrieveMetadataProvider","clone","restore","inheritsFrom","condition","referenceInstance","StudyDate","contentF","formatters","formatDate","SeriesDescription","props","toolGroupService","getActiveToolForViewport","CustomDropdownMenuContent","useTranslation","onSegmentationAdd","onSegmentationRemoveFromViewport","onSegmentationEdit","onSegmentationDelete","exportOptions","activeSegmentation","activeSegmentationId","useSegmentationTableContext","allowExport","useSegmentationExpanded","e","exportOption","opt","isExportable","actions","DropdownMenuContent","align","DropdownMenuItem","onClick","Icons","Add","className","t","DropdownMenuSeparator","DropdownMenuLabel","Series","Rename","DropdownMenuSub","DropdownMenuSubTrigger","Export","DropdownMenuPortal","DropdownMenuSubContent","Download","preventDefault","Delete","CustomSegmentStatisticsHeader","namedStats","bidirectional","Tooltip","TooltipTrigger","asChild","Button","variant","ToolBidirectionalSegment","TooltipContent","side","Separator","maxMajor","maxMinor","stopPropagation","addOrUpdateSegmentation","Hide","Show","JumpToSlice","getSegmentationPanelCustomization","panelSegmentation.onSegmentationAdd","minLPS","maxLPS","count","median","skewness","kurtosis","peakValue","peakLPS","lesionGlycolysis","center","segmentationToolbox.config","previewEdits","setPreviewEdits","toggleSegmentEnabled","setToggleSegmentEnabled","useCenterAsSegmentIndex","setUseCenterAsSegmentIndex","Switch","checked","onCheckedChange","toggle","layoutSelector.advancedPresetGenerator","generateAdvancedPresets","hangingProtocols","protocols","getActiveViewportId","referencedDisplaySetUID","hp","isPreset","areValid","_areSelectorsValid","displaySetSelectors","areRequiredSelectorsValid","icon","protocolId","numRows","numCols","active","bindings","mouseButton","Primary","Auxiliary","Secondary","numTouchPoints","Wheel","displayOnePointAsCrosshairs","cornerstoneViewportClickCommands","doubleClick","button1","button3","menuId","RectangleROi","displayName","for","displayTextOpen","VIEWPORT_PRESETS","CONSTANTS","defaultPosition","positionTickStyles","labelOffset","colorbarContainerPosition","positionStyles","containerStyles","cursor","tickStyles","defaultSettings","PT","RTDOSE","CT","level","PROGRESS","UploadStatus","UploadRejection","status","DicomFileUploader","PubSubService","file","_file","_fileId","_dataSource","_loadPromise","_abortController","AbortController","_status","NotStarted","_percentComplete","fileManager","getFileId","getFileName","getFileSize","abort","getStatus","getPercentComplete","load","uploadCallbacks","lengthComputable","InProgress","loaded","total","_broadcastEvent","fileId","percentComplete","timeout","_reject","Failed","Cancelled","loadFileRequest","dicomFile","signal","aborted","_checkDicomFile","XMLHttpRequest","_addRequestCallbacks","store","dicom","Success","catch","reason","_isRejected","abortCallback","upload","cleanUpCallback","arr","Uint8Array","every","char","charCodeAt","DicomUploadProgressItem","memo","dicomFileUploader","setPercentComplete","failedReason","setFailedReason","setStatus","isComplete","progressSubscription","dicomFileUploaderProgressEvent","cancelUpload","getStatusIcon","ByName","Close","propTypes","PropTypes","isRequired","ONE_SECOND","ONE_MINUTE","ONE_HOUR","BASE_INTERVAL_TIME","NO_WRAP_ELLIPSIS_CLASS_NAMES","DicomUploadProgress","dicomFileUploaderArr","onComplete","ProgressLoadingBar","totalUploadSize","acc","fileUploader","currentUploadSizeRef","useRef","uploadRateRef","timeRemaining","setTimeRemaining","numFilesCompleted","setNumFilesCompleted","numFails","setNumFails","showFailedOnly","setShowFailedOnly","progressBarContainerRef","timeoutId","intervalStartUploadSize","intervalStartTime","Date","now","setUploadRateRef","uploadSizeFromStartOfInterval","timeSinceStartOfInterval","currentTimeRemaining","currentFileUploadSize","updateProgress","previousFileUploadSize","uploadSizeRemaining","currentSecondsRemaining","ceil","delta","currentMinutesRemaining","rejection","numCompleted","progressEvent","cancelAllUploads","getFormattedTimeRemaining","secondsRemaining","minutesRemaining","hoursRemaining","getPercentCompleteRounded","showInfiniteProgressBar","offsetWidth","getNofMFilesStyle","toString","getShowFailedOnlyIconComponent","currentShowFailedOnly","classNames","ref","DicomUpload","onStarted","baseClassNames","setDicomFileUploaderArr","onDrop","acceptedFiles","Dropzone","noClick","getRootProps","_extends","noDrag","getInputProps","ButtonEnums","webkitdirectory","mozdirectory","cinePlayer","CinePlayer","autoCineModalities","onBeforeSRAddMeasurement","onBeforeDicomStore","dicomDict","measurementData","naturalizedReport","dicomUploadComponent","codingValues","DEFAULT_FILENAME","onClose","defaultSize","fileTypeOptions","showAnnotations","onAnnotationsChange","dimensions","warningState","onDimensionsChange","onEnableViewport","onDisableViewport","onDownload","setViewportElement","showWarningMessage","setShowWarningMessage","filename","setFilename","fileType","setFileType","ImageModal","Body","ImageVisual","fontSize","ImageOptions","Filename","onChange","target","Filetype","onSelect","ImageSize","onWidthChange","parseInt","onHeightChange","maxWidth","maxHeight","SwitchOption","defaultChecked","FooterAction","Right","viewportOverlayCustomization","layoutSelectorCustomization","viewportToolsCustomization","viewportClickCommandsCustomization","measurementsCustomization","volumeRenderingCustomization","colorbarCustomization","modalityColorMapCustomization","windowLevelPresetsCustomization","miscCustomization","captureViewportModalCustomization","viewportDownloadWarningCustomization","getReconstructableStackViewports","getSyncId","disableSync","modalityViewports","syncId","syncGroupService","gridViewport","removeViewportFromSyncGroup","DEFAULT_SIZE","VIEWPORT_ID","FILE_TYPE_OPTIONS","CornerstoneViewportDownloadForm","hide","activeViewportIdProp","setShowAnnotations","viewportDimensions","setViewportDimensions","refViewportEnabledElementOHIF","activeViewportElement","renderingEngineId","renderingEngine","toolGroup","ToolGroupManager","toolModeAndBindings","toolOptions","tool","mode","setToolMode","activeViewportEnabledElement","downloadViewport","getViewport","setStack","volumeIds","setVolumes","segRepresentation","colorLUTIndex","Labelmap","config","colorLUTOrIndex","handleLoadImage","downloadViewportId","addViewport","toolInstances","getToolInstances","toolInstance","setToolEnabled","setToolDisabled","handleToggleAnnotations","ViewportDownloadFormNew","viewportInput","defaultOptions","orientation","enableElement","disableElement","divForDownloadViewport","html2canvas","link","download","click","getTargetViewport","targetViewportId","getCenterExtent","extent","point","j","DefaultHistoryMemo","toggleSyncFunctions","imageSlice","providedViewports","getSynchronizersForViewport","syncState","syncName","addViewportToSyncGroup","voi","groupViewportsByModality","syncIdToUse","segmentationUtils","cstUtils","getLabelmapTools","labelmapTools","getToolGroupIds","toolGroupId","tools","shouldResolvePreviewRequests","segmentAI","ONNXSegmentationController","autoSegmentMode","models","sam_b","url","modelName","segmentAIEnabled","_getActiveViewportEnabledElement","_getViewportEnabledElement","_getActiveViewportToolGroupId","getToolGroupForViewport","_getActiveSegmentationInfo","getActiveSegmentation","getActiveSegment","jumpToMeasurementViewport","findNavigationCompatibleViewportId","setViewReference","isMeasurementWithinViewport","camera","getCamera","focalPoint","parallelScale","minDistance","maxDistance","cameraFocalPoint","cameraPosition","vec3","setCamera","measurementSize","scaleFactor","setZoom","getZoom","referencedDisplaySetInstanceUID","viewportToUpdate","findUpdateableViewportConfiguration","updatedViewports","getViewportsRequireUpdate","viewportsToUpdate","hydrateSecondaryDisplaySet","isOverlayDisplaySet","storePositionPresentation","refDisplaySet","referencedDisplaySet","SeriesInstanceUIDs","referencedDisplaySets","setDisplaySetsForViewports","runSegmentBidirectional","targetSegmentation","targetIndex","bidirectionalData","segmentIndices","majorAxis","minorAxis","hydrate","updatedSegmentation","hasUpdates","updateSegmentBidirectionalStats","activeBidirectional","interpolateLabelmap","labelmapInterpolation","showCornerstoneContextMenu","optionsToUse","useSelectedAnnotation","firstAnnotationSelected","allowedSelectedTools","defaultPointsPosition","selectorProps","updateStoredSegmentationPresentation","addSegmentationPresentationItem","hydrated","updateStoredPositionPresentation","getPresentations","setPositionPresentation","previousReferencedDisplaySetStoreKey","presentationData","viewReference","getNearbyToolData","getNearbyAnnotation","getToolInstance","_handleMeasurementLabelDialog","labelConfig","renderContent","val","callInputDialogAutoComplete","setMeasurementLabel","renameMeasurement","updateMeasurement","code","textLabel","updatedMeasurement","measurementKey","CodeValue","CodeMeaning","CodingSchemeDesignator","it","lineDashSelected","lineDash","setAnnotationStyles","isOpenUShapeContour","jumpToMeasurement","removeMany","toggleLockMeasurement","toggleVisibilityMeasurement","items","toggleVisibilityMeasurementMany","downloadCSVMeasurementsReport","downloadCSVReport","downloadCSVSegmentationReport","representationData","referencedImageIds","firstImageId","SeriesDate","SeriesTime","segmentationData","info","csvRows","additionalInfo","reference","segmentHeaderRow","segmentId","s","locked","allStats","statKey","stat","statLabel","statUnit","statName","statRow","statValue","csvString","row","cell","cellValue","Blob","URL","createObjectURL","setAttribute","toISOString","body","appendChild","removeChild","generateSegmentationCSVReport","setViewportActive","setActiveViewportId","arrowTextCallback","toggleCine","isCineEnabled","setIsCineEnabled","_","index","setCine","isPlaying","setViewportWindowLevel","windowWidthNum","windowCenterNum","getVolumeIdForDisplaySet","toggleViewportColorbar","removeColorbar","addColorbar","viewportToolGroupId","setWindowLevelPreset","presetName","presetIndex","activeViewport","windowLevelPresetForModality","windowLevelPreset","getToolGroup","hasTool","toolIsEnabled","getToolOptions","Enabled","toggleEnabledDisabledToolbar","itemId","toggleActiveDisabledToolbar","toolIsActive","Active","Passive","setToolActive","prevToolName","getPrevActivePrimaryToolName","setToolActiveToolbar","toolGroupIds","activeToolName","getActivePrimaryMouseButtonTool","activeToolOptions","getToolConfiguration","disableOnPassive","setToolPassive","showDownloadViewportModal","contentProps","containerClassName","rotateViewportBy","rotation","_rotateViewport","rotationMode","setViewportRotation","flipViewportHorizontal","flipHorizontal","currentHorizontalFlip","flipViewportVertical","flipVertical","currentVerticalFlip","invertViewport","invert","resetViewport","resetProperties","resetCamera","scaleViewport","direction","jumpToImage","imageIndex","numberOfSlices","getImageIds","jumpIndex","scroll","setViewportColormap","hpOpacity","getActiveProtocol","matchingDisplaySet","_volumeId","getVolumeId","changeActiveViewport","nextViewportIndex","toggleSynchronizer","synchronizer","getSynchronizer","isDisabled","setEnabled","fn","setViewportForToolConfiguration","prevConfig","setToolConfiguration","sourceViewportId","storePresentation","updateVolumeData","vtkOpenGLTexture","numSlices","getDimensions","setUpdatedFrame","modified","attachProtocolViewportDataListener","protocol","stageIndex","EVENT","VIEWPORT_DATA_CHANGED","callbacks","onViewportDataInitialized","numPanes","stages","numPanesWithData","setViewportPreset","setVolumeRenderingQulaity","volumeQuality","actor","mapper","getMapper","getInputData","dims","spacing","getSpacing","spatialDiagonal","sampleDistance","samplesPerRay","setMaximumSamplesPerRay","setSampleDistance","shiftVolumeOpacityPoints","shift","ofun","getProperty","getScalarOpacity","opacityPointValues","getSize","pointIdx","opacityPointValue","getNodeValue","removeAllPoints","addPoint","property","shade","setShade","setAmbient","setDiffuse","setSpecular","resetCrosshairs","crosshairInstances","getCrosshairInstances","ins","computeToolCenter","createLabelmapForViewport","segs","generatedSegmentationId","createLabelmapForDisplaySet","createInitialSegment","i18n","addSegmentationRepresentation","setActiveSegmentation","addSegmentCommand","addSegment","setActiveSegmentAndCenterCommand","setActiveSegment","jumpToSegmentCenter","toggleSegmentVisibilityCommand","toggleSegmentVisibility","toggleSegmentLockCommand","toggleSegmentLocked","toggleSegmentationVisibilityCommand","toggleSegmentationRepresentationVisibility","downloadSegmentationCommand","downloadSegmentation","storeSegmentationCommand","createReportAsync","reportType","setDisplaySetsForViewport","downloadRTSSCommand","downloadRTSS","setSegmentationStyleCommand","setStyle","deleteSegmentCommand","removeSegment","deleteSegmentationCommand","removeSegmentationFromViewportCommand","removeSegmentationRepresentations","toggleRenderInactiveSegmentationsCommand","renderInactive","getRenderInactiveSegmentations","setRenderInactiveSegmentations","setFillAlphaCommand","fillAlpha","setOutlineWidthCommand","outlineWidth","setRenderFillCommand","setRenderOutlineCommand","renderOutline","setFillAlphaInactiveCommand","fillAlphaInactive","editSegmentLabel","setSegmentLabel","editSegmentationLabel","editSegmentColor","getSegmentColor","rgbaColor","r","g","colorPickerDialog","onSave","newRgbaColor","setSegmentColor","deleteActiveAnnotation","activeAnnotationUID","state","currentCineState","cines","frameRate","default","undo","redo","toggleSegmentPreviewEdit","preview","toggleSegmentSelect","toggleSegmentLabel","isOn","initializeSegmentLabelTool","segmentLabelConfig","segmentLabel","enabledByDefault","activeTools","hoverTimeout","labelColor","disabledTools","toggleUseCenterSegmentIndex","useCenterSegmentIndex","_handlePreviewAction","action","previewTools","getPreviewTools","acceptPreview","rejectPreview","clearMarkersForMarkerLabelmap","clearMarkers","interpolateScrollForMarkerLabelmap","interpolateScroll","toggleLabelmapAssist","newState","initModel","initViewport","setBrushSize","brushSize","setBrushSizeForToolGroup","setThresholdRange","increaseBrushSize","getBrushSizeForToolGroup","decreaseBrushSize","addNewSegment","loadSegmentationDisplaySetsForViewport","isHangingProtocolLayout","v","getUpdatedViewportsForSegmentation","setViewportOrientation","CoreEnums","setOrientation","toggleViewportHorizontalFlip","setViewportHorizontalFlip","flipped","toggleViewportVerticalFlip","setViewportVerticalFlip","rotAngle","PI","rotMat","mat4","Float32Array","viewPlaneNormal","rotatedViewUp","viewUp","getRotation","currentRotation","getViewPresentation","newRotation","setViewPresentation","startRecordingForAnnotationGroup","startGroupRecording","endRecordingForAnnotationGroup","endGroupRecording","triggerCreateAnnotationMemo","validViewport","getRenderingEngines","flatMap","re","vp","getFrameOfReferenceUID","createAnnotationMemo","definitions","commandFn","menuCustomizationId","commands","storeContexts","rotateViewportCW","rotateViewportCCW","rotateViewportCWSet","incrementActiveViewport","decrementActiveViewport","scaleUpViewport","scaleDownViewport","fitViewportToWindow","nextImage","previousImage","firstImage","lastImage","setActiveSegmentAndCenter","toggleSegmentLock","toggleSegmentationVisibility","storeSegmentation","setSegmentationStyle","deleteSegment","deleteSegmentation","removeSegmentationFromViewport","toggleRenderInactiveSegmentations","setFillAlpha","setOutlineWidth","setRenderFill","setRenderOutline","setFillAlphaInactive","defaultContext","VOI_SYNC_GROUP","syncColormap","HYDRATE_SEG_SYNC_GROUP","matchingRules","mpr","createdDate","modifiedDate","availableTo","editableBy","numberOfPriorsReferenced","protocolMatchingRules","imageLoadStrategy","activeDisplaySet","seriesMatchingRules","weight","attribute","constraint","equals","required","viewportStructure","layoutType","layoutOptions","initialImageOptions","syncGroups","fourUp","customViewportProps","hideOverlays","displayPreset","MR","main3D","mprAnd3DVolumeViewport","only3D","primary3D","primaryAxial","frameView","greaterThan","defaultViewport","allowUnmatchedView","viewportIndex","SelectItemWithModality","showModality","dataCY","pendingForegrounds","setPendingForegrounds","pendingSegmentations","setPendingSegmentations","optimisticOverlayDisplaySets","setOptimisticOverlayDisplaySets","thresholdOpacityEnabled","setThresholdOpacityEnabled","handleReplaceDisplaySetLayer","currentDisplaySetInstanceUID","newDisplaySetInstanceUID","handleRemoveDisplaySetLayer","findIndex","prevOptimisticOverlayDisplaySets","handleAddDisplaySetAsLayer","hasAdvancedRenderingControls","getButton","hasOpacityMenu","Plus","LayerSegmentation","Select","onValueChange","handleOverlaySelectionChange","currentDisplaySet","currentDisplaySetIndex","SelectTrigger","SelectValue","SelectContent","SelectItem","DropdownMenu","DropdownMenuTrigger","More","pendingId","handlePendingSegmentationSelection","LayerForeground","handleForegroundSelectionChange","handlePendingForegroundSelection","LayerBackground","newBackgroundDisplaySet","handleBackgroundSelection","handleThresholdOpacityToggle","htmlFor","ViewportDataOverlayMenuWrapper","isOpen","onOpen","rest","IconContainer","iconClassName","containerProps","useIconPresentation","getAlignAndSide","Icon","ViewportViews","idProp","Popover","open","onOpenChange","openState","PopoverTrigger","PopoverContent","alignOffset","sideOffset","ViewportDataOverlayMenu","getIcon","orientationName","OrientationSwitchA","OrientationSwitchS","OrientationSwitchC","OrientationSwitchR","OrientationSwitch","viewportOrientation","getOrientation","gridState","currentOrientation","setCurrentOrientation","handleOrientationChange","currentViewportType","getViewportType","orientationEnum","AXIAL","SAGITTAL","CORONAL","REFORMAT","ACQUISITION","updatedViewport","cn","Checked","ViewportOrientationMenuWrapper","ViewportOrientationMenu","Colormap","activeDisplaySetUID","setActiveDisplaySetUID","showPreview","setShowPreview","prePreviewColormap","setPrePreviewColormap","currentColormap","setCurrentColormap","showPreviewRef","prePreviewColormapRef","currentColormapRef","handleSetColorLUT","Tabs","TabsList","TabsTrigger","AllInOneMenu","DividerItem","ScrollArea","Item","useIconSpace","onMouseEnter","onMouseLeave","Colorbar","handleToggle","prePreviewPreset","setPrePreviewPreset","currentPreset","setCurrentPreset","prePreviewPresetRef","currentPresetRef","handleSetWindowLevel","secondaryLabel","VolumeRenderingPresetsContent","searchValue","setSearchValue","selectedPreset","setSelectedPreset","handleSearchChange","handleApply","filteredPresets","PresetDialog","PresetBody","PresetFilter","PresetSearch","PresetGrid","maxChars","formatLabel","VolumeRenderingPresets","VolumeRendering","rightIcon","onClickPresets","isDraggable","VolumeRenderingQuality","setQuality","getSampleDistance","averageSpacing","Numeric","Container","Label","SingleRange","sliderClassName","VolumeShift","minShift","setMinShift","maxShift","setMaxShift","setShift","shiftedBy","setStep","isBlocking","setIsBlocking","prevShiftRef","transferFunctionWidth","log10","onChangeRange","newShift","shiftDifference","onMouseDown","onMouseUp","VolumeLighting","hasShade","lightingValues","setLightingValues","onLightingChange","getAmbient","getDiffuse","getSpecular","disableOption","VolumeShade","onClickShade","bool","setKey","onShadeChange","getShade","VolumeRenderingOptions","ItemPanel","WindowLevelActionMenu","WindowLevelActionMenuContent","menuKey","Menu","SubMenu","itemLabel","itemIcon","WindowLevelActionMenuWrapper","isEmbedded","onInteraction","onInteractionProps","hasEmbeddedVariantToUse","supportsWindowLevel","ViewportWindowLevel","shouldToggleColorbar","TABS","activeTab","setActiveTab","selectedDisplaySetUID","setSelectedDisplaySetUID","selectedViewportImageIds","Infinity","getImage","minPixelValue","maxPixelValue","trim","TabsContent","vals","newLower","newUpper","DoubleRange","showNumberInputs","showNumberInput","VOIManualControlMenuWrapper","WindowLevelAdvanced","VOIManualControlMenu","toFixed","ThresholdMenuWrapper","Threshold","ThresholdMenu","backgroundModality","foregroundModality","OpacityMenuWrapper","Opacity","OpacityMenu","loadStr","specialDisplaySet","setSpecialDisplaySet","statusInfo","isHydrated","tooltip","isRehydratable","StatusIcon","StatusUntracked","StatusArea","ViewportActionButton","getNextIndex","currentIndex","totalItems","nextIndex","measurementSelected","isSRDisplaySet","cornerstoneViewport","navigationMode","handleMeasurementNavigation","measurementDisplaySet","newIndex","handleSegmentNavigation","handleSegmentChange","selectedSegmentObjectIndex","handleNavigate","ViewportActionArrows","onArrowsClick","StatusTracking","ViewportColorbar","CornerstoneViewportColorbar","tickPosition","numColorbars","containerRef","viewportElementRef","useViewportRef","useViewportSize","tickPos","positionStylesFromConfig","mergedTickStyles","colorbarId","csColorbar","container","destroy","zIndex","boxSizing","display","alignItems","pointerEvents","minWidth","minHeight","ViewportColorbarsContainer","colorbars","setColorbars","defaultTickPosition","getViewportColorbar","colorbarsToUse","dsUID","colorbarInfo","colorbar","mouseNearControlsRanges","minX","minY","maxX","maxY","getFlexDirectionClassName","buttonSection","toolbarButtons","isItemOpen","isItemLocked","openItem","closeItem","toggleLock","useToolbar","mousePosition","useViewportMousePosition","isMouseNearControls","setIsMouseNearControls","showAllIcons","setShowAllIcons","firstMountRef","isAnItemOpen","setIsAnItemOpen","timer","isInViewport","mouseHoverLocation","isWithinNormalizedBox","handleOnItemOpen","handleOnItemClose","toolDef","Component","componentProps","enhancedProps","onToggleLock","shouldBeVisible","transition","getDisabledState","disabledText","_evaluateToggle","offModes","getToolNameForButton","isOff","VIEWPORT_ADDED","TOOLGROUP_CREATED","TOOL_ACTIVATED","PRIMARY_TOOL_ACTIVATED","ToolGroupService","listeners","_onToolActivated","toolBindingsOptions","isPrimaryTool","binding","callbackProps","pubSubServiceInterface","_init","onModeExit","toolGroupIdToUse","destroyToolGroup","removeViewportFromToolGroup","deleteToolGroupIfEmpty","removeViewports","getViewportIds","addViewportToToolGroup","createToolGroup","addToolsToToolGroup","configs","_addTools","_setToolsMode","createToolGroupAndAddTools","passive","addTools","parentTool","addToolInstance","_ToolGroupService","REGISTRATION","altName","create","createSynchronizer","SynchronizerManager","BlendModes","createHydrateSegmentationSynchronizer","synchronizerName","synchronizerInstance","sourceViewport","targetViewport","sourceEvent","segmentationRepresentationModifiedCallback","eventSource","getEnabledElementByViewportId","blendMode","getBlendMode","LABELMAP_EDGE_PROJECTION_BLEND","TOOL_GROUP_CREATED","POSITION","VOI","ZOOMPAN","STACKIMAGE","IMAGE_SLICE","HYDRATE_SEG","SyncGroupService","synchronizerCreators","synchronizers","synchronizersByType","_createSynchronizer","syncCreator","getSyncCreatorForType","addSynchronizerType","creator","registerCustomSynchronizer","createFunction","getSynchronizersOfType","_getOrCreateSynchronizer","syncGroup","syncGroupObj","asSyncGroup","setOptions","addSource","addTarget","hasSourceViewport","hasTargetViewport","syncGroupId","isImageSliceSyncronizer","unRegisterSpatialRegistration","sourceViewports","getSourceViewports","targetViewports","getTargetViewports","concat","viewportIdPair","getSynchronizerType","syncType","_SyncGroupService","easeInOutBell","baseline","alpha","easeInOutBellRelative","prevOutlineWidth","VOLUME_LOADER_SCHEME","DYNAMIC_VOLUME_LOADER_SCHEME","LABELMAP","csToolsEnums","CONTOUR","SEGMENTATION_ADDED","SEGMENT_LOADING_COMPLETE","SEGMENTATION_LOADING_COMPLETE","SegmentationService","_segmentationIdToColorLUTIndexMap","_segmentationGroupStatsMap","highlightIntervalId","_onSegmentationModifiedFromSource","_onSegmentationDataModifiedFromSource","SEGMENTATION_REPRESENTATION_ADDED","_onSegmentationAddedFromSource","reset","getStyle","specifier","cstSegmentation","resetToGlobalStyle","_toggleSegmentationRepresentationVisibility","getViewportIdsWithSegmentation","currentVisibility","_setSegmentationRepresentationVisibility","_onSegmentationRepresentationModifiedFromSource","onModeEnter","_initSegmentationService","getPresentation","segmentationPresentations","segmentationsMap","representations","getRepresentationsForSegmentation","_toOHIFSegmentationRepresentation","suppressEvents","getAndValidateViewport","defaultRepresentationType","representationTypeToUse","isConverted","isVolumeViewport","isVolumeSegmentation","determineViewportAndSegmentationType","handleViewportConversion","_addSegmentationRepresentation","referenceImageIds","timePoints","dynamicVolumeInfo","derivedImages","segImageIds","segmentationPublicInput","createSegmentationForSEGDisplaySet","segDisplaySet","labelMapImages","flat","derivedImageIds","firstSegmentedSliceImageId","scalarData","getScalarData","setScalarData","segmentsInfo","segMetadata","colorLUT","segmentInfo","SegmentedPropertyCategoryCodeSequence","SegmentNumber","SegmentAlgorithmType","SegmentAlgorithmName","SegmentedPropertyTypeCodeSequence","rgba","centroid","centroids","imageCentroidXYZ","z","worldCentroidXYZ","world","modifiedTime","category","algorithmType","algorithmName","getNextColorLUTIndex","addColorLUT","seg","isLoaded","createSegmentationForRTDisplaySet","rtDisplaySet","structureSet","rtDisplaySetUID","referencedImageIdsWithGeometry","ReferencedSOPInstanceUIDsSet","allRTStructData","ROIContours","contourPoints","ROINumber","ROIName","colorArray","ROIGroup","group","geometryId","mapROIContoursToRTStructData","geometryIds","segmentsCachedStats","rtStructData","contourSet","geometryLoader","geometryData","frameOfReferenceUID","csEnums","numInitialized","numSegments","updateSegmentationInSource","addSegmentationToSource","activeSegment","hasCustomStyles","csSegmentation","getCornerstoneSegmentation","segmentKeys","currentSegments","payload","_setSegmentLockedStatus","setSegmentVisibility","_setSegmentVisibility","setSegmentLocked","getLabelmapVolume","labelmapData","_setSegmentLabel","_setActiveSegment","setSegmentationGroupStats","segmentationIds","groupId","getGroupId","getSegmentationGroupStats","clearSegmentationRepresentations","removeAllSegmentations","highlightAlpha","highlightSegment","animationLength","highlightHideOthers","highlightFunctionType","_getSegmentCenter","jumpToWorld","hideOthers","clearInterval","_highlightLabelmap","_highlightContour","ViewportType","VOLUME_3D","representationType","handleVolumeViewportCase","handleStackViewportCase","apply","Surface","handleVolumeViewport","convertStackToVolumeViewport","updateLabelmapSegmentationImageReferences","attemptStackToVolumeConversion","addRepresentation","getLabelmapImageIds","segImage","convertStackToVolumeLabelmap","prevViewPresentation","prevViewReference","getViewReference","stackViewport","volumeViewportNewVolumeHandler","volumeViewport","VOLUME_VIEWPORT_NEW_VOLUME","triggerSegmentationRepresentationModified","csRepresentation","visible","segmentsRepresentations","segmentIds","styles","startTime","animation","timestamp","elapsed","requestAnimationFrame","performance","animate","currentTime","reversedProgress","_getVolumeIdForDisplaySet","volumeLoaderSchema","_SegmentationService","getCornerstoneViewportType","lowerViewportType","STACK","VIDEO","WHOLE_SLIDE","CornerstoneCacheService","stackImageIds","volumeImageIds","getCacheSize","cs3DCache","getCacheFreeSpace","getBytesAvailable","createViewportData","initialImageIndex","cs3DViewportType","viewportData","_getVolumeViewportData","_getStackViewportData","_getOtherViewportData","invalidateViewportData","invalidatedDisplaySetInstanceUID","_getCornerstoneStackImageIds","removeImageLoadObject","force","_volumeCache","_initialImageIndex","imagesIds","dsViewportType","overlayDisplaySet","Function","StackViewportData","isCompositeStack","volumeData","isParametricMap","isSeg","studyInstanceUID","_getCornerstoneVolumeImageIds","getImageIdsForDisplaySet","_CornerstoneCacheService","RENDERING_ENGINE_ID","DEFAULT_TOOLGROUP_ID","dataContains","dataId","imageURI","hasImageURI","setPublicViewportOptions","setPublicDisplaySetOptions","contains","setRenderingEngineId","getRenderingEngineId","setViewportId","setElement","setViewportData","getViewportData","getElement","getViewportId","publicDisplaySetOptions","mapDisplaySetOptions","setDisplaySetOptions","hasDisplaySet","viewportOptionsEntry","viewportTypeDisplaySet","ohifViewportType","getCornerstoneOrientation","setViewportOptions","getPresentationIds","getSyncGroups","getDisplaySetOptions","getToolGroupId","getBackground","getDisplayArea","displayArea","getInitialImageOptions","option","slabThickness","voiInverted","COMPOSITE","MAXIMUM_INTENSITY_BLEND","MINIMUM_INTENSITY_BLEND","AVERAGE_INTENSITY_BLEND","getCornerstoneBlendMode","JumpPresets","VIEWPORT_VOLUMES_CHANGED","WITH_ORIENTATION","withNavigation","withOrientation","viewportsById","viewportGridResizeObserver","viewportsDisplaySets","beforeResizePositionPresentations","resizeQueue","viewportResizeTimer","gridResizeDelay","gridResizeTimeOut","viewportsInfo","sceneVolumeInputs","viewportDivElements","ViewportPropertiesMap","volumeUIDs","displaySetsNeedRerendering","enableViewport","elementRef","ViewportInfo","hasBeenDestroyed","RenderingEngine","clientWidth","clientHeight","numStackViewportsInViewportGrid","numVolumeViewportsInViewportGrid","performResize","resetGridResizeTimeout","enqueueViewportResizeRequest","_removeResizeObserver","purgeCache","setPresentations","_setSegmentationPresentation","_setLutPresentation","_setPositionPresentation","_getPositionPresentation","_getLutPresentation","_getSegmentationPresentation","setLutPresentation","setSynchronizers","useSynchronizersStore","setSegmentationPresentation","viewPresentation","pan","zoom","cleanProperties","isComputedVOI","VOILUTFunction","csProps","publicViewportOptions","_setDisplaySets","isReferenceViewable","asVolume","altMetadata","viewportDisplaySetUID","_getFrameOfReferenceUID","_setOtherViewport","_presentations","setDataIds","_setStackViewport","initialImageIndexToUse","VIEWPORT_NEW_IMAGE_SET","csToolsUtils","enable","overlayProcessingResults","_processExtraDisplaySetsForViewport","_getInitialImageIndexForViewport","overlayProcessingResult","addOverlayFn","setDisplayArea","imageSliceData","_getInitialImageIndex","lastSliceIndex","First","Last","Middle","_setVolumeViewport","displaySetOptionsArray","volumeToLoad","_getSlabThickness","volumesNotLoaded","loadStatus","getShouldPerformCustomImageLoad","runImageLoadStrategy","displaySetModality","filteredVolumeInputArray","volumesProperties","sampleImageId","addOverlayRepresentationForDisplaySet","updateViewport","keepCamera","viewportCamera","displaySetPromise","disconnect","imageVolume","ReferencedFrameOfReferenceSequence","processViewportResizeQueue","isGridResizeInQueue","isGridResize","isImmediate","presentation","sliceIndex","propertiesEntry","viewRef","presentationItem","getViewportDisplaySets","_CornerstoneViewportService","ChangeTypes","ColorbarService","getDataIdForViewport","colorbarData","existingIndex","changeType","Added","Removed","_ColorbarService","getImageId","imageObj","someInvalidStrings","strings","string","getImageInstance","dataset","getImageInstanceId","imageInstance","fetchIt","DICOMWeb","fetch","response","cornerstoneRetriever","byteArray","buffer","wadorsRetriever","sopInstanceUID","api","DICOMwebClient","retrieveInstance","getLocalData","studies","nonImageInstance","getNonImageInstance","startsWith","findImageIdOnStudies","study","series","getDataByImageType","getDicomDataMethod","loaderType","loaderRegExp","exec","lastIndex","getImageLoaderType","getData","wadoRoot","getStudyInstanceUID","getSeriesInstanceUID","getSOPInstanceUID","getDataByDatasetType","authorizationHeaders","wadoUri","absoluteUrl","getLoaderIterator","findDicomDataPromise","loaderIterator","loader","packageJson","frameViewSyncCallback","sViewport","targetViewportIndex","getOptions","sourceViewportIndex","tViewport","targetSliceIndex","getSliceIndex","createFrameViewSynchronizer","STACK_VIEWPORT_SCROLL","auxiliaryEvents","CAMERA_MODIFIED","MetadataModules","denaturalizeDataset","dcmjs","DicomMetaDictionary","transferDenaturalizedDataset","fixMultiValueKeys","dicomWebUtils","SOP_CLASS_UIDS","_getDisplaySetsFromSeries","singleFrameInstance","currentFrames","NumberOfFrames","instanceI","framesI","ContentDate","ContentTime","SOPClassUID","othersFrameOfReferenceUID","inst","array","plugin","altImageText","SOPClassHandlerId","firstInstance","numImageFrames","numInstances","others","getThumbnailSrc","retrieve","getGetThumbnailSrc","dicomWebClient","getWadoDicomWebClient","instanceMap","webClient","getDICOMwebMetadata","addRaw","WADO_WEB_CLIENT","getDicomMicroscopySopClassHandler","sopClassUids","getDisplaySetsFromSeries","PanelSegmentation","children","segmentationTableMode","disableEditing","showAddSegment","handlers","onSegmentationClick","onSegmentAdd","onSegmentClick","onSegmentEdit","onSegmentColorClick","onSegmentDelete","onToggleSegmentVisibility","onToggleSegmentLock","onToggleSegmentationRepresentationVisibility","onSegmentationDownload","getPixelData","SopInstanceUID","tableProps","renderInactiveSegmentations","renderSegments","SegmentationTable","Segments","SegmentStatistics","Header","Config","AddSegmentationRow","Collapsed","Selector","Info","Content","AddSegmentRow","Expanded","workerManager","getWebWorkerManager","WorkerOptions","maxWorkerInstances","idleTimeThreshold","workerFn","Worker","getNodeOpacity","volumeActor","nodeIndex","nodeValue","getWindowLevelsData","getVolumeOpacity","viewportProperties","viewportVoi","windowLevels","volumeIndex","scaling","histogram","registerWorker","numTimePoints","targetTimePoint","getTimePointScalarData","getCompleteScalarDataArray","origin","executeTask","minimum","maximum","calcHistOptions","numBins","getViewportVolumeHistogram","displaySetVOI","displaySetColormap","vtkColorMaps","getPresetByName","showOpacitySlider","Events","setWindowLevels","isLoading","setIsLoading","useActiveViewportDisplaySets","getViewportsWithVolumeIds","getVolumeViewports","viewportVolumeIds","isPetVolumeWithDefaultOpacity","volumeOpacity","node1Value","node2Value","expectedOpacity","opacitySize","currentNodeValue","firstNodeValue","firstNodeOpacity","isVolumeWithConstantOpacity","updateViewportHistograms","handleCornerstoneVOIModified","oldWindowLevel","wl","oldVOI","newWindowLevel","debouncedHandleCornerstoneVOIModified","handleVOIChange","newRange","handleOpacityChange","_volumeIndex","handleImageVolumeLoadingCompleted","IMAGE_VOLUME_LOADING_COMPLETED","intervalId","setInterval","displaySetIds","PanelSection","defaultOpen","onVOIChange","onOpacityChange","ActiveViewportWindowLevel","CloneChildren","allChildren","childType","defaultTypes","subType","child","DEFAULT_TYPES","GroupAccordion","Trigger","AccordionGroup","grouping","sourceChildren","childProps","groups","groupingFunction","defaultGroup","isSelected","valueArr","sourceChildrenArr","toArray","childrenArr","DefaultAccordion","Accordion","AccordionItem","AccordionContent","AccordionTrigger","ChevronDownIcon","MeasurementTableNested","customHeader","MeasurementTable","onAction","isFirst","allItems","filterNot","filterAdditionalFindings","MeasurementFilters","MeasurementOrAdditionalFindingSets","groupByNamedSets","namedSets","namedSet","MeasurementsOrAdditionalFindings","noWrapper","StudySummaryFromMetadata","studyMeta","getStudy","instanceMeta","StudyDescription","StudySummary","date","StudyMeasurementsActions","createSR","onDelete","groupByStudy","activeStudyUID","firstSelected","firstGroup","studyUID","getItemStudyInstanceUID","filterAnd","filterMeasurementsByStudyUID","StudyMeasurements","system","activeDisplaySets","StudySummaryWithActions","PanelMeasurement","emptyComponent","EmptyComponent","getPanelModule","component","iconName","iconLabel","wrappedPanelSegmentation","wrappedPanelSegmentationNoHeader","wrappedPanelSegmentationWithTools","Toolbox","buttonSectionId","sections","segmentationToolbox","OrientationAxis","setupSegmentationDataModifiedHandler","isUnsubscribed","debouncedUnsubscribe","subscribeDebounced","disableUpdateSegmentationStats","segmentStats","order","updateSegmentationStats","setupSegmentationModifiedHandler","bidirectionalAnnotations","getAllAnnotations","toRemoveUIDs","bidirectionalAnnotationsToRemove","HydrationType","SEG","SR","RTSTRUCT","RESPONSE","getDialogId","RTSS","numberOfSegments","newSelectedSegmentIndex","closestOrientation","imageOrientationPatient","ImageOrientationPatient","rowCosineVec","colCosineVec","scanAxisNormal","unitVectors","maxDot","maxOrientation","k","res","getClosestOrientationFromIOP","promptHydrationDialog","preHydrateCallbacks","hydrateCallback","uiViewportDialogService","_extensionManager","_appConfig","standardMode","measurementTrackingMode","promptResult","disableConfirmationPrompts","messageKey","getCustomizationMessageKey","onSubmit","onOutsideClick","onKeyPress","_askHydrate","hydrationResult","userResponse","srSeriesInstanceUID","MeasumentsMenu","isDropdownOpen","setIsDropdownOpen","onClickDefault","PanelAccordionTrigger","marginLeft","colorHex","menu","padding","ColorCircle","MeasurementItem","MeasurementsMenu","MeasurementAccordion","details","groupByDisplaySet","header","SeriesMeasurementTrigger","SeriesMeasurements","_e","MeasurementItems","OHIFCornerstoneViewport","fallback","stackRetrieveOptions","retrieveOptions","single","streaming","decodeLevel","unsubscriptions","cornerstoneExtension","segmentationUnsubscriptions","setUpSegmentationEventHandlers","unsubscribeSegmentationDataModifiedHandler","unsubscribeSegmentationModifiedHandler","unsubscribeSegmentationCreated","segmentationDisplaySet","madeInClient","isDerived","addDisplaySets","interleavedRetrieveStages","cs3DEnums","clearRequestStack","imageRetrievalPoolManager","enabledElementReset","clearLutPresentationStore","clearPositionPresentationStore","clearSynchronizersStore","useToggleOneUpViewportGridStore","clearToggleOneUpViewportGridStore","clearSegmentationPresentationStore","preRegistration","registerService","getToolbarModule","defaultComponent","AdvancedRenderingControls","evaluate","TrackingStatus","ModalityLoadBadge","NavigationComponent","hasSegmentation","hasTrackedInViewport","isSeriesTracked","isInAnySection","unsupportedViewportTypes","unsupportedModalities","supportedModalities","Disabled","synchronizerType","isEnabled","_enabled","propId","prop","isToggled","getHangingProtocolModule","getViewportModule","getCommandsModule","getCustomizationModule","getUtilityModule","exports","getCornerstoneLibraries","dicomLoaderService","cs3DToolsEnums","getDynamicVolumeInfo","getSopClassHandlerModule","DEFAULT_CONTEXT","enabledElements","targetContext","JOIN_STR","DEFAULT_STR","addUniqueIndex","isUpdatingSameViewport","displayInstance","testId","PRESENTATION_TYPE_ID","lutPresentationArr","getLutId","createLutPresentationStore","viewportOptionId","positionPresentationArr","createPositionPresentationStore","MPR_CAMERA_VALUES","_getSegmentationPresentationId","sampleImage","viewRight","viewDown","axial","sagittal","coronal","getViewportOrientationFromImageOrientationPatient","segmentationPresentationArr","createSegmentationPresentationStore","presentationId","segmentationPresentationItem","createSynchronizersStore","synchronizersStore"],"sourceRoot":""}