{"version":3,"file":"5349.bundle.3cdd0466da7a6a81719e.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/promptHydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/initRTToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/OHIFCornerstoneRTViewport.tsx"],"sourcesContent":["import { utils, Types } from '@ohif/extension-cornerstone';\n\nfunction promptHydrateRT({\n  servicesManager,\n  rtDisplaySet,\n  viewportId,\n  preHydrateCallbacks,\n  hydrateRTDisplaySet,\n}: {\n  servicesManager: AppTypes.ServicesManager;\n  rtDisplaySet: AppTypes.DisplaySet;\n  viewportId: string;\n  preHydrateCallbacks?: Types.HydrationCallback[];\n  hydrateRTDisplaySet: Types.HydrationCallback;\n}) {\n  return utils.promptHydrationDialog({\n    servicesManager,\n    viewportId,\n    displaySet: rtDisplaySet,\n    preHydrateCallbacks,\n    hydrateCallback: hydrateRTDisplaySet,\n    type: 'RTSTRUCT',\n  });\n}\n\nexport default promptHydrateRT;\n","function createRTToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\n  const tools = customizationService.getCustomization('cornerstone.overlayViewportTools');\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\n}\n\nexport default createRTToolGroupAndAddTools;\n","import React, { Component, useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useViewportGrid } from '@ohif/ui-next';\nimport {\n  utils,\n  usePositionPresentationStore,\n  OHIFCornerstoneViewport,\n} from '@ohif/extension-cornerstone';\n\nimport promptHydrateRT from '../utils/promptHydrateRT';\nimport createRTToolGroupAndAddTools from '../utils/initRTToolGroup';\nimport { useSystem } from '@ohif/core/src';\nconst RT_TOOLGROUP_BASE_NAME = 'RTToolGroup';\n\nfunction OHIFCornerstoneRTViewport(props: withAppTypes) {\n  const { servicesManager, commandsManager } = useSystem();\n  const { children, displaySets, viewportOptions } = props as {\n    children: React.ReactNode;\n    displaySets: AppTypes.DisplaySet[];\n    viewportOptions: AppTypes.ViewportOptions;\n  };\n\n  const { displaySetService, toolGroupService, segmentationService, customizationService } =\n    servicesManager.services;\n\n  const viewportId = viewportOptions.viewportId;\n\n  const toolGroupId = `${RT_TOOLGROUP_BASE_NAME}-${viewportId}`;\n\n  // RT viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('RT viewport should only have a single display set');\n  }\n\n  const LoadingIndicatorTotalPercent = customizationService.getCustomization(\n    'ui.loadingIndicatorTotalPercent'\n  );\n\n  const rtDisplaySet = displaySets[0];\n\n  const [{ viewports, activeViewportId }, viewportGridService] = useViewportGrid();\n\n  // States\n  const { setPositionPresentation } = usePositionPresentationStore();\n  const [rtIsLoading, setRtIsLoading] = useState(!rtDisplaySet.isLoaded);\n  const [processingProgress, setProcessingProgress] = useState({\n    percentComplete: null,\n    totalSegments: null,\n  });\n\n  const referencedDisplaySetRef = useRef(null);\n\n  const referencedDisplaySetInstanceUID = rtDisplaySet.referencedDisplaySetInstanceUID;\n  // If the referencedDisplaySetInstanceUID is not found, it means the RTStruct series is being\n  // launched without its corresponding referenced display set (e.g., the RTStruct series is launched using\n  // series launch /mode?StudyInstanceUIDs=&SeriesInstanceUID).\n  // In such cases, we attempt to handle this scenario gracefully by\n  // invoking a custom handler. Ideally, if a user tries to launch a series that isn't viewable,\n  // (eg.: we can prompt them with an explanation and provide a link to the full study).\n  if (!referencedDisplaySetInstanceUID) {\n    const missingReferenceDisplaySetHandler = customizationService.getCustomization(\n      'missingReferenceDisplaySetHandler'\n    );\n    const { handled } = missingReferenceDisplaySetHandler();\n    if (handled) {\n      return;\n    }\n  }\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n    referencedDisplaySetInstanceUID\n  );\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(referencedDisplaySet);\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n\n  useEffect(() => {\n    if (rtIsLoading) {\n      return;\n    }\n\n    // if not active viewport, return\n    if (viewportId !== activeViewportId) {\n      return;\n    }\n\n    promptHydrateRT({\n      servicesManager,\n      viewportId,\n      rtDisplaySet,\n      hydrateRTDisplaySet: async () => {\n        return commandsManager.runCommand('hydrateSecondaryDisplaySet', {\n          displaySet: rtDisplaySet,\n          viewportId,\n        });\n      },\n    });\n  }, [servicesManager, viewportId, rtDisplaySet, rtIsLoading, commandsManager, activeViewportId]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (evt.rtDisplaySet.displaySetInstanceUID === rtDisplaySet.displaySetInstanceUID) {\n          setRtIsLoading(false);\n        }\n\n        if (rtDisplaySet?.firstSegmentedSliceImageId && viewportOptions?.presentationIds) {\n          const { firstSegmentedSliceImageId } = rtDisplaySet;\n          const { presentationIds } = viewportOptions;\n\n          setPositionPresentation(presentationIds.positionPresentationId, {\n            viewportType: 'stack',\n            viewReference: {\n              referencedImageId: firstSegmentedSliceImageId,\n            },\n            viewPresentation: {},\n          });\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [rtDisplaySet]);\n\n  useEffect(() => {\n    const segmentLoadingSubscription = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      ({ percentComplete, numSegments }) => {\n        setProcessingProgress({\n          percentComplete,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    const displaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      segmentLoadingSubscription.unsubscribe();\n      displaySetsRemovedSubscription.unsubscribe();\n    };\n  }, [rtDisplaySet, displaySetService, viewports, activeViewportId, viewportGridService]);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    toolGroup = createRTToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentations(viewportId);\n      referencedDisplaySetRef.current = null;\n      toolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n    return (\n      <OHIFCornerstoneViewport\n        {...props}\n        displaySets={[referencedDisplaySet, rtDisplaySet]}\n        viewportOptions={{\n          viewportType: viewportOptions.viewportType,\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n          presentationIds: viewportOptions.presentationIds,\n        }}\n        onElementEnabled={evt => {\n          props.onElementEnabled?.(evt);\n        }}\n      />\n    );\n  }, [viewportId, rtDisplaySet, toolGroupId]);\n\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {rtIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"h-full w-full\"\n            totalNumbers={processingProgress.totalSegments}\n            percentComplete={processingProgress.percentComplete}\n            loadingText=\"Loading RTSTRUCT...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneRTViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneRTViewport;\n"],"names":["servicesManager","rtDisplaySet","viewportId","preHydrateCallbacks","hydrateRTDisplaySet","utils","promptHydrationDialog","displaySet","hydrateCallback","type","ToolGroupService","customizationService","toolGroupId","tools","getCustomization","createToolGroupAndAddTools","OHIFCornerstoneRTViewport","props","commandsManager","useSystem","children","displaySets","viewportOptions","displaySetService","toolGroupService","segmentationService","services","length","Error","LoadingIndicatorTotalPercent","viewports","activeViewportId","viewportGridService","useViewportGrid","setPositionPresentation","usePositionPresentationStore","rtIsLoading","setRtIsLoading","useState","isLoaded","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","referencedDisplaySetInstanceUID","missingReferenceDisplaySetHandler","handled","referencedDisplaySet","getDisplaySetByUID","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","metadata","useEffect","promptHydrateRT","async","runCommand","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","evt","displaySetInstanceUID","firstSegmentedSliceImageId","presentationIds","positionPresentationId","viewportType","viewReference","referencedImageId","viewPresentation","segmentLoadingSubscription","SEGMENT_LOADING_COMPLETE","numSegments","displaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createRTToolGroupAndAddTools","removeSegmentationRepresentations","destroyToolGroup","getCornerstoneViewport","useCallback","React","OHIFCornerstoneViewport","_extends","orientation","onElementEnabled","childrenWithProps","map","child","index","key","className","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource"],"sourceRoot":""}