{"version":3,"file":"810.bundle.c654089976235e28c3ef.js","mappings":"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","sources":["webpack:///../../../extensions/tmtv/src/id.js","webpack:///../../../extensions/tmtv/src/utils/hpViewports.ts","webpack:///../../../extensions/tmtv/src/getHangingProtocolModule.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelPetSUV.tsx","webpack:///../../../extensions/tmtv/src/utils/handleROIThresholding.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/PanelROIThresholdExport.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/index.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelTMTV.tsx","webpack:///../../../extensions/tmtv/src/getPanelModule.tsx","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/CircleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.js","webpack:///../../../extensions/tmtv/src/init.js","webpack:///../../../extensions/tmtv/src/utils/getThresholdValue.ts","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/dicomRTAnnotationExport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/index.js","webpack:///../../../extensions/tmtv/src/commandsModule.ts","webpack:///../../../extensions/tmtv/src/utils/createAndDownloadTMTVReport.js","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ROIThresholdConfiguration.tsx","webpack:///../../../extensions/tmtv/src/Panels/RectangleROIOptions.tsx","webpack:///../../../extensions/tmtv/src/index.tsx","webpack:///../../../extensions/tmtv/src/getToolbarModule.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","// Common sync group configurations\nconst cameraPositionSync = (id: string) => ({\n  type: 'cameraPosition',\n  id,\n  source: true,\n  target: true,\n});\n\nconst hydrateSegSync = {\n  type: 'hydrateseg',\n  id: 'sameFORId',\n  source: true,\n  target: true,\n  options: {\n    matchingRules: ['sameFOR'],\n  },\n};\n\nconst ctAXIAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'ctAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'ctToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      cameraPositionSync('axialSync'),\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ctSAGITTAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'ctSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      cameraPositionSync('sagittalSync'),\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ctCORONAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'ctCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      cameraPositionSync('coronalSync'),\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ptAXIAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'ptAXIAL',\n    viewportType: 'volume',\n    background: [1, 1, 1],\n    orientation: 'axial',\n    toolGroupId: 'ptToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      cameraPositionSync('axialSync'),\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncColormap: false,\n          syncInvertState: false,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptSAGITTAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'ptSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      cameraPositionSync('sagittalSync'),\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncColormap: false,\n          syncInvertState: false,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptCORONAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'ptCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      cameraPositionSync('coronalSync'),\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncColormap: false,\n          syncInvertState: false,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst fusionAXIAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'fusionAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'fusionToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      cameraPositionSync('axialSync'),\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncColormap: false,\n          syncInvertState: false,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.8 },\n            { value: 1, opacity: 0.9 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst fusionSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'fusionSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      cameraPositionSync('sagittalSync'),\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncColormap: false,\n          syncInvertState: false,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.8 },\n            { value: 1, opacity: 0.9 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst fusionCORONAL = {\n  viewportOptions: {\n    viewportId: 'fusionCoronal',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      cameraPositionSync('coronalSync'),\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncColormap: false,\n          syncInvertState: false,\n        },\n      },\n      hydrateSegSync,\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.8 },\n            { value: 1, opacity: 0.9 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst mipSAGITTAL: AppTypes.HangingProtocol.Viewport = {\n  viewportOptions: {\n    viewportId: 'mipSagittal',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'mipToolGroup',\n    syncGroups: [\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncColormap: false,\n          syncInvertState: false,\n        },\n      },\n      hydrateSegSync,\n    ],\n\n    // Custom props can be used to set custom properties which extensions\n    // can react on.\n    customViewportProps: {\n      // We use viewportDisplay to filter the viewports which are displayed\n      // in mip and we set the scrollbar according to their rotation index\n      // in the cornerstone extension.\n      hideOverlays: true,\n    },\n  },\n  displaySets: [\n    {\n      options: {\n        blendMode: 'MIP',\n        slabThickness: 'fullVolume',\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nexport {\n  ctAXIAL,\n  ctSAGITTAL,\n  ctCORONAL,\n  ptAXIAL,\n  ptSAGITTAL,\n  ptCORONAL,\n  fusionAXIAL,\n  fusionSAGITTAL,\n  fusionCORONAL,\n  mipSAGITTAL,\n};\n","import {\n  ctAXIAL,\n  ctCORONAL,\n  ctSAGITTAL,\n  fusionAXIAL,\n  fusionCORONAL,\n  fusionSAGITTAL,\n  mipSAGITTAL,\n  ptAXIAL,\n  ptCORONAL,\n  ptSAGITTAL,\n} from './utils/hpViewports';\n\n/**\n * represents a 3x4 viewport layout configuration. The layout displays CT axial, sagittal, and coronal\n * images in the first row, PT axial, sagittal, and coronal images in the second row, and fusion axial,\n * sagittal, and coronal images in the third row. The fourth column is fully spanned by a MIP sagittal\n * image, covering all three rows. It has synchronizers for windowLevel for all CT and PT images, and\n * also camera synchronizer for each orientation\n */\nconst stage1: AppTypes.HangingProtocol.ProtocolStage = {\n  name: 'default',\n  id: 'default',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 3,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ctAXIAL,\n    ctSAGITTAL,\n    ctCORONAL,\n    ptAXIAL,\n    ptSAGITTAL,\n    ptCORONAL,\n    fusionAXIAL,\n    fusionSAGITTAL,\n    fusionCORONAL,\n    mipSAGITTAL,\n  ],\n  createdDate: '2021-02-23T18:32:42.850Z',\n};\n\n/**\n * The layout displays CT axial image in the top-left viewport, fusion axial image\n * in the top-right viewport, PT axial image in the bottom-left viewport, and MIP\n * sagittal image in the bottom-right viewport. The layout follows a simple grid\n * pattern with 2 rows and 2 columns. It includes synchronizers as well.\n */\nconst stage2 = {\n  name: 'Fusion 2x2',\n  id: 'Fusion-2x2',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 2,\n    },\n  },\n  viewports: [ctAXIAL, fusionAXIAL, ptAXIAL, mipSAGITTAL],\n};\n\n/**\n * The top row displays CT images in axial, sagittal, and coronal orientations from\n * left to right, respectively. The bottom row displays PT images in axial, sagittal,\n * and coronal orientations from left to right, respectively.\n * The layout follows a simple grid pattern with 2 rows and 3 columns.\n * It includes synchronizers as well.\n */\nconst stage3: AppTypes.HangingProtocol.ProtocolStage = {\n  name: '2x3-layout',\n  id: '2x3-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 3,\n    },\n  },\n  viewports: [ctAXIAL, ctSAGITTAL, ctCORONAL, ptAXIAL, ptSAGITTAL, ptCORONAL],\n};\n\n/**\n * In this layout, the top row displays PT images in coronal, sagittal, and axial\n * orientations from left to right, respectively, followed by a MIP sagittal image\n * that spans both rows on the rightmost side. The bottom row displays fusion images\n * in coronal, sagittal, and axial orientations from left to right, respectively.\n * There is no viewport in the bottom row's rightmost position, as the MIP sagittal viewport\n * from the top row spans the full height of both rows.\n * It includes synchronizers as well.\n */\nconst stage4: AppTypes.HangingProtocol.ProtocolStage = {\n  name: '2x4-layout',\n  id: '2x4-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n        {\n          x: 0,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ptCORONAL,\n    ptSAGITTAL,\n    ptAXIAL,\n    mipSAGITTAL,\n    fusionCORONAL,\n    fusionSAGITTAL,\n    fusionAXIAL,\n  ],\n};\n\n/**\n * This layout displays three fusion viewports: axial, sagittal, and coronal.\n * It follows a simple grid pattern with 1 row and 3 columns.\n */\n// const stage0: AppTypes.HangingProtocol.ProtocolStage = {\n//   name: 'Fusion 1x3',\n//   viewportStructure: {\n//     layoutType: 'grid',\n//     properties: {\n//       rows: 1,\n//       columns: 3,\n//     },\n//   },\n//   viewports: [fusionAXIAL, fusionSAGITTAL, fusionCORONAL],\n// };\n\nconst ptCT: AppTypes.HangingProtocol.Protocol = {\n  id: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\n  locked: true,\n  name: 'Default',\n  createdDate: '2021-02-23T19:22:08.894Z',\n  modifiedDate: '2022-10-04T19:22:08.894Z',\n  availableTo: {},\n  editableBy: {},\n  imageLoadStrategy: 'interleaveTopToBottom', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\n  protocolMatchingRules: [\n    {\n      attribute: 'ModalitiesInStudy',\n      constraint: {\n        contains: ['CT', 'PT'],\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PETCT',\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PET/CT',\n      },\n    },\n  ],\n  displaySetSelectors: {\n    ctDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CT',\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT',\n          },\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT WB',\n          },\n        },\n      ],\n    },\n    ptDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'PT',\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'Corrected',\n          },\n        },\n        {\n          weight: 2,\n          attribute: 'SeriesDescription',\n          constraint: {\n            doesNotContain: {\n              value: 'Uncorrected',\n            },\n          },\n        },\n      ],\n    },\n  },\n  stages: [stage1, stage2, stage3, stage4],\n  numberOfPriorsReferenced: -1,\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: ptCT.id,\n      protocol: ptCT,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { DicomMetadataStore } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Input, Label, PanelSection } from '@ohif/ui-next';\nimport { useSystem } from '@ohif/core/src';\n\nconst DEFAULT_MEATADATA = {\n  PatientWeight: null,\n  PatientSex: null,\n  SeriesTime: null,\n  RadiopharmaceuticalInformationSequence: {\n    RadionuclideTotalDose: null,\n    RadionuclideHalfLife: null,\n    RadiopharmaceuticalStartTime: null,\n  },\n};\n\n/*\n * PETSUV panel enables the user to modify the patient related information, such as\n * patient sex, patientWeight. This is allowed since\n * sometimes these metadata are missing or wrong. By changing them\n * @param param0\n * @returns\n */\n\n// InputRow compound component\nconst InputRow = ({ children, className, ...props }) => {\n  return (\n    <div\n      className={`flex flex-row items-center space-x-4 ${className || ''}`}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n// InputRow sub-components\nInputRow.Label = ({ children, unit, className, ...props }) => (\n  <Label\n    className={`min-w-32 flex-shrink-0 ${className || ''}`}\n    {...props}\n  >\n    {children}\n    {unit && <span className=\"text-muted-foreground\"> {unit}</span>}\n  </Label>\n);\n\nInputRow.Input = ({ className, ...props }) => (\n  <Input\n    className={`h-7 flex-1 ${className || ''}`}\n    {...props}\n  />\n);\n\n// Set display names for better debugging\nInputRow.Label.displayName = 'InputRow.Label';\nInputRow.Input.displayName = 'InputRow.Input';\n\nexport default function PanelPetSUV() {\n  const { commandsManager, servicesManager } = useSystem();\n  const { t } = useTranslation('PanelSUV');\n  const { displaySetService, hangingProtocolService } = servicesManager.services;\n  const [metadata, setMetadata] = useState(DEFAULT_MEATADATA);\n  const [ptDisplaySet, setPtDisplaySet] = useState(null);\n\n  const handleMetadataChange = metadata => {\n    setMetadata(prevState => {\n      const newState = { ...prevState };\n      Object.keys(metadata).forEach(key => {\n        if (typeof metadata[key] === 'object') {\n          newState[key] = {\n            ...prevState[key],\n            ...metadata[key],\n          };\n        } else {\n          newState[key] = metadata[key];\n        }\n      });\n      return newState;\n    });\n  };\n\n  const getMatchingPTDisplaySet = viewportMatchDetails => {\n    const ptDisplaySet = commandsManager.runCommand('getMatchingPTDisplaySet', {\n      viewportMatchDetails,\n    });\n\n    if (!ptDisplaySet) {\n      return;\n    }\n\n    const metadata = commandsManager.runCommand('getPTMetadata', {\n      ptDisplaySet,\n    });\n\n    return {\n      ptDisplaySet,\n      metadata,\n    };\n  };\n\n  useEffect(() => {\n    const displaySets = displaySetService.getActiveDisplaySets();\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n    if (!displaySets.length) {\n      return;\n    }\n\n    const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n    if (!displaySetInfo) {\n      return;\n    }\n\n    const { ptDisplaySet, metadata } = displaySetInfo;\n    setPtDisplaySet(ptDisplaySet);\n    setMetadata(metadata);\n  }, []);\n\n  // get the patientMetadata from the StudyInstanceUIDs and update the state\n  useEffect(() => {\n    const { unsubscribe } = hangingProtocolService.subscribe(\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n      ({ viewportMatchDetails }) => {\n        const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n        if (!displaySetInfo) {\n          return;\n        }\n        const { ptDisplaySet, metadata } = displaySetInfo;\n        setPtDisplaySet(ptDisplaySet);\n        setMetadata(metadata);\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  function updateMetadata() {\n    if (!ptDisplaySet) {\n      throw new Error('No ptDisplaySet found');\n    }\n\n    // metadata should be dcmjs naturalized\n    DicomMetadataStore.updateMetadataForSeries(\n      ptDisplaySet.StudyInstanceUID,\n      ptDisplaySet.SeriesInstanceUID,\n      metadata\n    );\n\n    // update the displaySets\n    displaySetService.setDisplaySetMetadataInvalidated(ptDisplaySet.displaySetInstanceUID);\n\n    // Crosshair position depends on the metadata values such as the positioning interaction\n    // between series, so when the metadata is updated, the crosshairs need to be reset.\n    setTimeout(() => {\n      commandsManager.runCommand('resetCrosshairs');\n    }, 0);\n  }\n  return (\n    <>\n      <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\n        <div className=\"flex min-h-0 flex-1 flex-col bg-black text-base\">\n          <PanelSection defaultOpen={true}>\n            <PanelSection.Header>{t('Patient Information')}</PanelSection.Header>\n            <PanelSection.Content>\n              <div className=\"bg-primary-dark flex flex-col gap-3 p-2\">\n                <InputRow>\n                  <InputRow.Label>{t('Patient Sex')}</InputRow.Label>\n                  <InputRow.Input\n                    value={metadata.PatientSex || ''}\n                    onChange={e => {\n                      handleMetadataChange({\n                        PatientSex: e.target.value,\n                      });\n                    }}\n                  />\n                </InputRow>\n\n                <InputRow>\n                  <InputRow.Label unit=\"kg\">{t('Weight')}</InputRow.Label>\n                  <InputRow.Input\n                    value={metadata.PatientWeight || ''}\n                    onChange={e => {\n                      handleMetadataChange({\n                        PatientWeight: e.target.value,\n                      });\n                    }}\n                    id=\"weight-input\"\n                  />\n                </InputRow>\n\n                <InputRow>\n                  <InputRow.Label unit=\"bq\">{t('Total Dose')}</InputRow.Label>\n                  <InputRow.Input\n                    value={\n                      metadata.RadiopharmaceuticalInformationSequence.RadionuclideTotalDose || ''\n                    }\n                    onChange={e => {\n                      handleMetadataChange({\n                        RadiopharmaceuticalInformationSequence: {\n                          RadionuclideTotalDose: e.target.value,\n                        },\n                      });\n                    }}\n                  />\n                </InputRow>\n\n                <InputRow>\n                  <InputRow.Label unit=\"s\">{t('Half Life')}</InputRow.Label>\n                  <InputRow.Input\n                    value={\n                      metadata.RadiopharmaceuticalInformationSequence.RadionuclideHalfLife || ''\n                    }\n                    onChange={e => {\n                      handleMetadataChange({\n                        RadiopharmaceuticalInformationSequence: {\n                          RadionuclideHalfLife: e.target.value,\n                        },\n                      });\n                    }}\n                  />\n                </InputRow>\n\n                <InputRow>\n                  <InputRow.Label unit=\"s\">{t('Injection Time')}</InputRow.Label>\n                  <InputRow.Input\n                    value={\n                      metadata.RadiopharmaceuticalInformationSequence\n                        .RadiopharmaceuticalStartTime || ''\n                    }\n                    onChange={e => {\n                      handleMetadataChange({\n                        RadiopharmaceuticalInformationSequence: {\n                          RadiopharmaceuticalStartTime: e.target.value,\n                        },\n                      });\n                    }}\n                  />\n                </InputRow>\n\n                <InputRow>\n                  <InputRow.Label unit=\"s\">{t('Acquisition Time')}</InputRow.Label>\n                  <InputRow.Input\n                    value={metadata.SeriesTime || ''}\n                    onChange={() => {}}\n                  />\n                </InputRow>\n\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  className=\"w-28 self-end\"\n                  onClick={updateMetadata}\n                >\n                  Reload Data\n                </Button>\n              </div>\n            </PanelSection.Content>\n          </PanelSection>\n        </div>\n      </div>\n    </>\n  );\n}\n\nPanelPetSUV.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      measurementService: PropTypes.shape({\n        getMeasurements: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n        VALUE_TYPES: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","export const handleROIThresholding = async ({\n  commandsManager,\n  segmentationService,\n}: withAppTypes<{\n  segmentationId: string;\n}>) => {\n  const segmentations = segmentationService.getSegmentations();\n  const tmtv = await commandsManager.run('calculateTMTV', { segmentations });\n\n  // add the tmtv to all the segment cachedStats, although it is a global\n  // value but we don't have any other way to display it for now\n  // Update all segmentations with the calculated TMTV\n  segmentations.forEach(segmentation => {\n    segmentation.cachedStats = {\n      ...segmentation.cachedStats,\n      tmtv,\n    };\n\n    segmentationService.addOrUpdateSegmentation(segmentation);\n  });\n};\n","import React, { useEffect } from 'react';\nimport { useActiveViewportSegmentationRepresentations } from '@ohif/extension-cornerstone';\nimport { handleROIThresholding } from '../../utils/handleROIThresholding';\nimport { debounce } from '@ohif/core/src/utils';\nimport { useSystem } from '@ohif/core/src';\nimport { Button } from '@ohif/ui-next';\n\nexport default function PanelRoiThresholdSegmentation() {\n  const { commandsManager, servicesManager } = useSystem();\n  const { segmentationService } = servicesManager.services;\n  const { segmentationsWithRepresentations: segmentationsInfo } =\n    useActiveViewportSegmentationRepresentations();\n\n  const segmentationIds = segmentationsInfo?.map(info => info.segmentation.segmentationId) || [];\n  const segmentations = segmentationsInfo?.map(info => info.segmentation) || [];\n\n  useEffect(() => {\n    const initialRun = async () => {\n      for (const segmentationId of segmentationIds) {\n        await handleROIThresholding({\n          segmentationId,\n          commandsManager,\n          segmentationService,\n        });\n      }\n    };\n\n    initialRun();\n  }, []);\n\n  useEffect(() => {\n    const debouncedHandleROIThresholding = debounce(async eventDetail => {\n      const { segmentationId } = eventDetail;\n      await handleROIThresholding({\n        segmentationId,\n        commandsManager,\n        segmentationService,\n      });\n    }, 100);\n\n    const dataModifiedCallback = eventDetail => {\n      debouncedHandleROIThresholding(eventDetail);\n    };\n\n    const dataModifiedSubscription = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_DATA_MODIFIED,\n      dataModifiedCallback\n    );\n\n    return () => {\n      dataModifiedSubscription.unsubscribe();\n    };\n  }, [commandsManager, segmentationService]);\n\n  // Find the first segmentation with a TMTV value since all of them have the same value\n  const stats = segmentationService.getSegmentationGroupStats(segmentationIds);\n  const tmtvValue = stats?.tmtv;\n\n  const handleExportCSV = () => {\n    if (!segmentations.length) {\n      return;\n    }\n\n    commandsManager.runCommand('exportTMTVReportCSV', {\n      segmentations,\n      tmtv: tmtvValue,\n      config: {},\n    });\n  };\n\n  return (\n    <div className=\"mb-1 flex flex-col\">\n      <div className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\">\n        <div className=\"bg-secondary-dark flex items-baseline justify-between px-2 py-1\">\n          <div className=\"py-1\">\n            <span className=\"text-muted-foreground text-base font-bold uppercase\">{'TMTV: '}</span>\n            <span className=\"text-foreground\">{tmtvValue ? `${tmtvValue.toFixed(3)} mL` : ''}</span>\n          </div>\n          <div className=\"flex items-center\">\n            <Button\n              dataCY=\"exportTmtvCsvReport\"\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"text-blue-500\"\n              onClick={handleExportCSV}\n            >\n              <span className=\"pl-1\">CSV</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import PanelROIThresholdExport from './PanelROIThresholdExport';\n\nexport default PanelROIThresholdExport;\n","import React from 'react';\nimport { PanelSegmentation } from '@ohif/extension-cornerstone';\nimport PanelROIThresholdExport from './PanelROIThresholdSegmentation/PanelROIThresholdExport';\n\nexport default function PanelTMTV({ configuration }: withAppTypes) {\n  return (\n    <>\n      <PanelSegmentation configuration={configuration}>\n        <PanelROIThresholdExport />\n      </PanelSegmentation>\n    </>\n  );\n}\n","import React from 'react';\nimport { PanelPetSUV, PanelROIThresholdExport } from './Panels';\nimport { Toolbox } from '@ohif/extension-default';\nimport PanelTMTV from './Panels/PanelTMTV';\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\n  const { toolbarService } = servicesManager.services;\n\n  const wrappedPanelPetSuv = () => {\n    return <PanelPetSUV />;\n  };\n\n  const wrappedROIThresholdToolbox = () => {\n    return (\n      <Toolbox\n        buttonSectionId={toolbarService.sections.roiThresholdToolbox}\n        title=\"Threshold Tools\"\n      />\n    );\n  };\n\n  const wrappedROIThresholdExport = () => {\n    return <PanelROIThresholdExport />;\n  };\n\n  const wrappedPanelTMTV = () => {\n    return (\n      <>\n        <Toolbox\n          buttonSectionId={toolbarService.sections.roiThresholdToolbox}\n          title=\"Threshold Tools\"\n        />\n        <PanelTMTV\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'petSUV',\n      iconName: 'tab-patient-info',\n      iconLabel: 'Patient Info',\n      label: 'Patient Info',\n      component: wrappedPanelPetSuv,\n    },\n    {\n      name: 'tmtv',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      component: wrappedPanelTMTV,\n    },\n    {\n      name: 'tmtvBox',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation Toolbox',\n      component: wrappedROIThresholdToolbox,\n    },\n    {\n      name: 'tmtvExport',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation Export',\n      component: wrappedROIThresholdExport,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","export default ['RectangleROIStartEndThreshold','CircleROIStartEndThreshold'];\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getSOPInstanceAttributes } from '@ohif/extension-cornerstone';\n\nconst RectangleROIStartEndThreshold = {\n  toAnnotation: (measurement, definition) => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      // points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: metadata.label,\n      data: data.cachedStats,\n      type: 'RectangleROIStartEndThreshold',\n    };\n  },\n};\n\nexport default RectangleROIStartEndThreshold;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport { getSOPInstanceAttributes } from '@ohif/extension-cornerstone';\n\nconst CircleROIStartEndThreshold = {\n  toAnnotation: (measurement, definition) => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { cachedStats } = data;\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      // points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: metadata.label,\n      // displayText: displayText,\n      data: data.cachedStats,\n      type: 'CircleROIStartEndThreshold',\n      // getReport,\n    };\n  },\n};\n\nexport default CircleROIStartEndThreshold;\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\nimport CircleROIStartEndThreshold from './CircleROIStartEndThreshold';\n\nconst measurementServiceMappingsFactory = (\n  measurementService,\n  displaySetService,\n  cornerstoneViewportService\n) => {\n  return {\n    RectangleROIStartEndThreshold: {\n      toAnnotation: RectangleROIStartEndThreshold.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        RectangleROIStartEndThreshold.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService\n        ),\n      matchingCriteria: [\n        {\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\n        },\n      ],\n    },\n    CircleROIStartEndThreshold: {\n      toAnnotation: CircleROIStartEndThreshold.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        CircleROIStartEndThreshold.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService\n        ),\n      matchingCriteria: [\n        {\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\n        },\n      ],\n    },\n  };\n};\n\nexport default measurementServiceMappingsFactory;\n","import {\n  addTool,\n  RectangleROIStartEndThresholdTool,\n  CircleROIStartEndThresholdTool,\n} from '@cornerstonejs/tools';\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\n\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\n\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\n\n/**\n *\n * @param {Object} servicesManager\n * @param {Object} configuration\n * @param {Object|Array} configuration.csToolsConfig\n */\nexport default function init({ servicesManager }) {\n  const { measurementService, displaySetService, cornerstoneViewportService } =\n    servicesManager.services;\n\n  addTool(RectangleROIStartEndThresholdTool);\n  addTool(CircleROIStartEndThresholdTool);\n\n  const { RectangleROIStartEndThreshold, CircleROIStartEndThreshold } =\n    measurementServiceMappingsFactory(\n      measurementService,\n      displaySetService,\n      cornerstoneViewportService\n    );\n\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'RectangleROIStartEndThreshold',\n    RectangleROIStartEndThreshold.matchingCriteria,\n    RectangleROIStartEndThreshold.toAnnotation,\n    RectangleROIStartEndThreshold.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'CircleROIStartEndThreshold',\n    CircleROIStartEndThreshold.matchingCriteria,\n    CircleROIStartEndThreshold.toAnnotation,\n    CircleROIStartEndThreshold.toMeasurement\n  );\n}\n","import { cache } from '@cornerstonejs/core';\nimport * as csTools from '@cornerstonejs/tools';\n\nfunction getRoiStats(displaySet, annotations) {\n  const { imageIds } = displaySet;\n\n  const ptVolumeInfo = cache.getVolumeContainingImageId(imageIds[0]);\n\n  if (!ptVolumeInfo) {\n    throw new Error('No volume found for display set');\n  }\n\n  const { volume } = ptVolumeInfo;\n  const { voxelManager } = volume;\n\n  // Todo: add support for other strategies\n  const { fn, baseValue } = _getStrategyFn('max');\n  let value = baseValue;\n\n  const boundsIJK = csTools.utilities.rectangleROITool.getBoundsIJKFromRectangleAnnotations(\n    annotations,\n    volume\n  );\n\n  // Use the voxelManager's forEach method to iterate over the bounds\n  voxelManager.forEach(\n    ({ value: voxelValue }) => {\n      value = fn(voxelValue, value);\n    },\n    {\n      boundsIJK,\n    }\n  );\n\n  return value;\n}\n\nfunction getThresholdValues(\n  annotationUIDs,\n  ptDisplaySet,\n  config\n): { ptLower: number; ptUpper: number; ctLower: number; ctUpper: number } {\n  if (config.strategy === 'range') {\n    return {\n      ptLower: Number(config.ptLower),\n      ptUpper: Number(config.ptUpper),\n      ctLower: Number(config.ctLower),\n      ctUpper: Number(config.ctUpper),\n    };\n  }\n\n  const { weight } = config;\n  const annotations = annotationUIDs.map(annotationUID =>\n    csTools.annotation.state.getAnnotation(annotationUID)\n  );\n\n  const ptValue = getRoiStats(ptDisplaySet, annotations);\n\n  return {\n    ctLower: -Infinity,\n    ctUpper: +Infinity,\n    ptLower: weight * ptValue,\n    ptUpper: +Infinity,\n  };\n}\n\nfunction _getStrategyFn(statistic): {\n  fn: (a: number, b: number) => number;\n  baseValue: number;\n} {\n  const baseValue = -Infinity;\n  const fn = (number, maxValue) => {\n    if (number > maxValue) {\n      maxValue = number;\n    }\n    return maxValue;\n  };\n  return { fn, baseValue };\n}\n\nexport default getThresholdValues;\n","import dcmjs from 'dcmjs';\nimport { classes, DicomMetadataStore } from '@ohif/core';\nimport { adaptersRT } from '@cornerstonejs/adapters';\n\nconst { datasetToBlob } = dcmjs.data;\nconst metadataProvider = classes.MetadataProvider;\n\nexport default function dicomRTAnnotationExport(annotations) {\n  const dataset = adaptersRT.Cornerstone3D.RTSS.generateRTSSFromAnnotations(\n    annotations,\n    metadataProvider,\n    DicomMetadataStore\n  );\n  const reportBlob = datasetToBlob(dataset);\n\n  //Create a URL for the binary.\n  var objectUrl = URL.createObjectURL(reportBlob);\n  window.location.assign(objectUrl);\n}\n","import dicomRTAnnotationExport from './dicomRTAnnotationExport';\n\nexport default dicomRTAnnotationExport;\n","import OHIF from '@ohif/core';\nimport * as cs from '@cornerstonejs/core';\nimport * as csTools from '@cornerstonejs/tools';\nimport { classes } from '@ohif/core';\nimport i18n from '@ohif/i18n';\nimport getThresholdValues from './utils/getThresholdValue';\nimport createAndDownloadTMTVReport from './utils/createAndDownloadTMTVReport';\n\nimport dicomRTAnnotationExport from './utils/dicomRTAnnotationExport/RTStructureSet';\n\nimport { Enums } from '@cornerstonejs/tools';\nimport { utils } from '@ohif/core';\n\nconst { SegmentationRepresentations } = Enums;\nconst { formatPN } = utils;\n\nconst metadataProvider = classes.MetadataProvider;\nconst ROI_THRESHOLD_MANUAL_TOOL_IDS = [\n  'RectangleROIStartEndThreshold',\n  'RectangleROIThreshold',\n  'CircleROIStartEndThreshold',\n];\n\nconst commandsModule = ({ servicesManager, commandsManager, extensionManager }: withAppTypes) => {\n  const {\n    viewportGridService,\n    uiNotificationService,\n    displaySetService,\n    hangingProtocolService,\n    toolGroupService,\n    cornerstoneViewportService,\n    segmentationService,\n  } = servicesManager.services;\n\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { getEnabledElement } = utilityModule.exports;\n\n  function _getActiveViewportsEnabledElement() {\n    const { activeViewportId } = viewportGridService.getState();\n    const { element } = getEnabledElement(activeViewportId) || {};\n    const enabledElement = cs.getEnabledElement(element);\n    return enabledElement;\n  }\n\n  function _getAnnotationsSelectedByToolNames(toolNames) {\n    return toolNames.reduce((allAnnotationUIDs, toolName) => {\n      const annotationUIDs =\n        csTools.annotation.selection.getAnnotationsSelectedByToolName(toolName);\n\n      return allAnnotationUIDs.concat(annotationUIDs);\n    }, []);\n  }\n\n  const actions = {\n    getMatchingPTDisplaySet: ({ viewportMatchDetails }) => {\n      // Todo: this is assuming that the hanging protocol has successfully matched\n      // the correct PT. For future, we should have a way to filter out the PTs\n      // that are in the viewer layout (but then we have the problem of the attenuation\n      // corrected PT vs the non-attenuation correct PT)\n\n      let ptDisplaySet = null;\n      for (const [, viewportDetails] of viewportMatchDetails) {\n        const { displaySetsInfo } = viewportDetails;\n        const displaySets = displaySetsInfo.map(({ displaySetInstanceUID }) =>\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID)\n        );\n\n        if (!displaySets || displaySets.length === 0) {\n          continue;\n        }\n\n        ptDisplaySet = displaySets.find(displaySet => displaySet.Modality === 'PT');\n        if (ptDisplaySet) {\n          break;\n        }\n      }\n\n      return ptDisplaySet;\n    },\n    getPTMetadata: ({ ptDisplaySet }) => {\n      const dataSource = extensionManager.getDataSources()[0];\n      const imageIds = dataSource.getImageIdsForDisplaySet(ptDisplaySet);\n\n      const firstImageId = imageIds[0];\n      const instance = metadataProvider.get('instance', firstImageId);\n      if (instance.Modality !== 'PT') {\n        return;\n      }\n\n      const metadata = {\n        SeriesTime: instance.SeriesTime,\n        Modality: instance.Modality,\n        PatientSex: instance.PatientSex,\n        PatientWeight: instance.PatientWeight,\n        RadiopharmaceuticalInformationSequence: {\n          RadionuclideTotalDose:\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\n          RadionuclideHalfLife:\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\n          RadiopharmaceuticalStartTime:\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\n          RadiopharmaceuticalStartDateTime:\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\n        },\n      };\n\n      return metadata;\n    },\n    createNewLabelmapFromPT: async ({ label }) => {\n      // Create a segmentation of the same resolution as the source data\n      // using volumeLoader.createAndCacheDerivedVolume.\n\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      let withPTViewportId = null;\n\n      for (const [viewportId, { displaySetsInfo }] of viewportMatchDetails.entries()) {\n        const isPT = displaySetsInfo.some(\n          ({ displaySetInstanceUID }) =>\n            displaySetInstanceUID === ptDisplaySet.displaySetInstanceUID\n        );\n\n        if (isPT) {\n          withPTViewportId = viewportId;\n          break;\n        }\n      }\n\n      if (!ptDisplaySet) {\n        uiNotificationService.error('No matching PT display set found');\n        return;\n      }\n\n      const currentSegmentations =\n        segmentationService.getSegmentationRepresentations(withPTViewportId);\n\n      const displaySet = displaySetService.getDisplaySetByUID(ptDisplaySet.displaySetInstanceUID);\n\n      const segmentationId = await segmentationService.createLabelmapForDisplaySet(displaySet, {\n        label: `Segmentation ${currentSegmentations.length + 1}`,\n        segments: { 1: { label: `${i18n.t('Segment')} 1`, active: true } },\n      });\n\n      segmentationService.addSegmentationRepresentation(withPTViewportId, {\n        segmentationId,\n      });\n\n      return segmentationId;\n    },\n    thresholdSegmentationByRectangleROITool: ({ segmentationId, config, segmentIndex }) => {\n      const segmentation = csTools.segmentation.state.getSegmentation(segmentationId);\n\n      const { representationData } = segmentation;\n      const { displaySetMatchDetails: matchDetails } = hangingProtocolService.getMatchDetails();\n      const ctDisplaySetMatch = matchDetails.get('ctDisplaySet');\n      const ptDisplaySetMatch = matchDetails.get('ptDisplaySet');\n\n      const ctDisplaySet = displaySetService.getDisplaySetByUID(\n        ctDisplaySetMatch.displaySetInstanceUID\n      );\n      const ptDisplaySet = displaySetService.getDisplaySetByUID(\n        ptDisplaySetMatch.displaySetInstanceUID\n      );\n\n      const { volumeId: segVolumeId } = representationData[\n        SegmentationRepresentations.Labelmap\n      ] as csTools.Types.LabelmapToolOperationDataVolume;\n\n      const labelmapVolume = cs.cache.getVolume(segVolumeId);\n\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(ROI_THRESHOLD_MANUAL_TOOL_IDS);\n\n      if (annotationUIDs.length === 0) {\n        uiNotificationService.show({\n          title: 'Commands Module',\n          message: 'No ROIThreshold Tool is Selected',\n          type: 'error',\n        });\n        return;\n      }\n\n      const { ptLower, ptUpper, ctLower, ctUpper } = getThresholdValues(\n        annotationUIDs,\n        ptDisplaySet,\n        config\n      );\n\n      const { imageIds: ptImageIds } = ptDisplaySet;\n\n      const ptVolumeInfo = cs.cache.getVolumeContainingImageId(ptImageIds[0]);\n\n      if (!ptVolumeInfo) {\n        uiNotificationService.error('No PT volume found');\n        return;\n      }\n\n      const { imageIds: ctImageIds } = ctDisplaySet;\n      const ctVolumeInfo = cs.cache.getVolumeContainingImageId(ctImageIds[0]);\n\n      if (!ctVolumeInfo) {\n        uiNotificationService.error('No CT volume found');\n        return;\n      }\n\n      const ptVolume = ptVolumeInfo.volume;\n      const ctVolume = ctVolumeInfo.volume;\n\n      return csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n        annotationUIDs,\n        labelmapVolume,\n        [\n          { volume: ptVolume, lower: ptLower, upper: ptUpper },\n          { volume: ctVolume, lower: ctLower, upper: ctUpper },\n        ],\n        { overwrite: true, segmentIndex, segmentationId }\n      );\n    },\n    calculateTMTV: async ({ segmentations }) => {\n      const segmentationIds = segmentations.map(segmentation => segmentation.segmentationId);\n\n      const stats = await csTools.utilities.segmentation.computeMetabolicStats({\n        segmentationIds,\n        segmentIndex: 1,\n      });\n\n      segmentationService.setSegmentationGroupStats(segmentationIds, stats);\n      return stats;\n    },\n    exportTMTVReportCSV: async ({ segmentations, tmtv, config, options }) => {\n      const segReport = commandsManager.runCommand('getSegmentationCSVReport', {\n        segmentations,\n      });\n\n      let total_tlg = 0;\n      for (const segmentationId in segReport) {\n        const report = segReport[segmentationId];\n        const tlg = report['namedStats_lesionGlycolysis'];\n        total_tlg += tlg.value;\n      }\n      const additionalReportRows = [\n        { key: 'Total Lesion Glycolysis', value: { tlg: total_tlg.toFixed(4) } },\n        { key: 'Threshold Configuration', value: { ...config } },\n      ];\n\n      if (tmtv !== undefined) {\n        additionalReportRows.unshift({\n          key: 'Total Metabolic Tumor Volume',\n          value: { tmtv },\n        });\n      }\n\n      createAndDownloadTMTVReport(segReport, additionalReportRows, options);\n    },\n\n    setStartSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n      const { focalPoint } = viewport.getCamera();\n\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\n        ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      // set the current focal point\n      annotation.data.startCoordinate = focalPoint;\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n      viewport.render();\n    },\n    setEndSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\n        ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      // get the current focal point\n      const focalPointToEnd = viewport.getCamera().focalPoint;\n      annotation.data.endCoordinate = focalPointToEnd;\n\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n\n      viewport.render();\n    },\n    createTMTVRTReport: () => {\n      // get all Rectangle ROI annotation\n      const stateManager = csTools.annotation.state.getAnnotationManager();\n\n      const annotations = [];\n\n      Object.keys(stateManager.annotations).forEach(frameOfReferenceUID => {\n        const forAnnotations = stateManager.annotations[frameOfReferenceUID];\n        const ROIAnnotations = ROI_THRESHOLD_MANUAL_TOOL_IDS.reduce(\n          (annotations, toolName) => [...annotations, ...(forAnnotations[toolName] ?? [])],\n          []\n        );\n\n        annotations.push(...ROIAnnotations);\n      });\n\n      commandsManager.runCommand('exportRTReportForAnnotations', {\n        annotations,\n      });\n    },\n    getSegmentationCSVReport: ({ segmentations }) => {\n      if (!segmentations || !segmentations.length) {\n        segmentations = segmentationService.getSegmentations();\n      }\n\n      const report = {};\n\n      for (const segmentation of segmentations) {\n        const { label, segmentationId, representationData } =\n          segmentation as csTools.Types.Segmentation;\n        const id = segmentationId;\n\n        const segReport = { id, label };\n\n        if (!representationData) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const { cachedStats } = segmentation.segments[1] || {}; // Assuming we want stats from the first segment\n\n        if (cachedStats) {\n          Object.entries(cachedStats).forEach(([key, value]) => {\n            if (typeof value !== 'object') {\n              segReport[key] = value;\n            } else {\n              Object.entries(value).forEach(([subKey, subValue]) => {\n                const newKey = `${key}_${subKey}`;\n                segReport[newKey] = subValue;\n              });\n            }\n          });\n        }\n\n        const labelmapVolume =\n          segmentation.representationData[SegmentationRepresentations.Labelmap];\n\n        if (!labelmapVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const referencedVolume =\n          csTools.utilities.segmentation.getReferenceVolumeForSegmentationVolume(\n            labelmapVolume.volumeId\n          );\n\n        if (!referencedVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        if (!referencedVolume.imageIds || !referencedVolume.imageIds.length) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const firstImageId = referencedVolume.imageIds[0];\n        const instance = OHIF.classes.MetadataProvider.get('instance', firstImageId);\n\n        if (!instance) {\n          report[id] = segReport;\n          continue;\n        }\n\n        report[id] = {\n          ...segReport,\n          PatientID: instance.PatientID ?? '000000',\n          PatientName: formatPN(instance.PatientName),\n          StudyInstanceUID: instance.StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          StudyDate: instance.StudyDate,\n        };\n      }\n\n      return report;\n    },\n    exportRTReportForAnnotations: ({ annotations }) => {\n      dicomRTAnnotationExport(annotations);\n    },\n    setFusionPTColormap: ({ toolGroupId, colormap }) => {\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n      if (!toolGroup) {\n        return;\n      }\n\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      if (!ptDisplaySet) {\n        return;\n      }\n\n      const fusionViewportIds = toolGroup.getViewportIds();\n\n      const viewports = [];\n      fusionViewportIds.forEach(viewportId => {\n        commandsManager.runCommand('setViewportColormap', {\n          viewportId,\n          displaySetInstanceUID: ptDisplaySet.displaySetInstanceUID,\n          colormap: {\n            name: colormap,\n          },\n        });\n\n        viewports.push(cornerstoneViewportService.getCornerstoneViewport(viewportId));\n      });\n\n      viewports.forEach(viewport => {\n        viewport.render();\n      });\n    },\n  };\n\n  const definitions = {\n    setEndSliceForROIThresholdTool: {\n      commandFn: actions.setEndSliceForROIThresholdTool,\n    },\n    setStartSliceForROIThresholdTool: {\n      commandFn: actions.setStartSliceForROIThresholdTool,\n    },\n    getMatchingPTDisplaySet: {\n      commandFn: actions.getMatchingPTDisplaySet,\n    },\n    getPTMetadata: {\n      commandFn: actions.getPTMetadata,\n    },\n    createNewLabelmapFromPT: {\n      commandFn: actions.createNewLabelmapFromPT,\n    },\n    thresholdSegmentationByRectangleROITool: {\n      commandFn: actions.thresholdSegmentationByRectangleROITool,\n    },\n    calculateTMTV: {\n      commandFn: actions.calculateTMTV,\n    },\n    exportTMTVReportCSV: {\n      commandFn: actions.exportTMTVReportCSV,\n    },\n    createTMTVRTReport: {\n      commandFn: actions.createTMTVRTReport,\n    },\n    getSegmentationCSVReport: {\n      commandFn: actions.getSegmentationCSVReport,\n    },\n    exportRTReportForAnnotations: {\n      commandFn: actions.exportRTReportForAnnotations,\n    },\n    setFusionPTColormap: {\n      commandFn: actions.setFusionPTColormap,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'TMTV:CORNERSTONE',\n  };\n};\n\nexport default commandsModule;\n","export default function createAndDownloadTMTVReport(segReport, additionalReportRows, options = {}) {\n  const firstReport = segReport[Object.keys(segReport)[0]];\n  const columns = Object.keys(firstReport);\n  const csv = [\n    columns\n      .map(column =>\n        column.toLowerCase().startsWith('namedstats_') ? column.substring(11) : column\n      )\n      .join(','),\n  ];\n\n  Object.values(segReport).forEach(segmentation => {\n    const row = [];\n    columns.forEach(column => {\n      // if it is array then we need to replace , with space to avoid csv parsing error\n      row.push(\n        segmentation[column] && typeof segmentation[column] === 'object'\n          ? Array.isArray(segmentation[column])\n            ? segmentation[column].join(' ')\n            : segmentation[column].value && Array.isArray(segmentation[column].value)\n              ? segmentation[column].value.join(' ')\n              : (segmentation[column].value ?? segmentation[column])\n          : segmentation[column]\n      );\n    });\n    csv.push(row.join(','));\n  });\n\n  csv.push('');\n  csv.push('');\n  csv.push('');\n\n  csv.push(`Patient ID,${firstReport.PatientID}`);\n  csv.push(`Study Date,${firstReport.StudyDate}`);\n  csv.push('');\n  additionalReportRows.forEach(({ key, value: values }) => {\n    const temp = [];\n    temp.push(`${key}`);\n    Object.keys(values).forEach(k => {\n      temp.push(`${k}`);\n      temp.push(`${values[k]}`);\n    });\n\n    csv.push(temp.join(','));\n  });\n\n  const blob = new Blob([csv.join('\\n')], {\n    type: 'text/csv;charset=utf-8',\n  });\n\n  const url = URL.createObjectURL(blob);\n\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = options.filename ?? `${firstReport.PatientID}_tmtv.csv`;\n  a.click();\n}\n","import React from 'react';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Label,\n  Input,\n  Button,\n} from '@ohif/ui-next';\nimport { useTranslation } from 'react-i18next';\n\nexport const ROI_STAT = 'roi_stat';\nconst RANGE = 'range';\n\nconst options = [\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\n];\n\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\n  const { t } = useTranslation('ROIThresholdConfiguration');\n\n  return (\n    <div className=\"bg-primary-dark flex flex-col space-y-4 p-px\">\n      <div className=\"flex items-end space-x-3\">\n        <div className=\"flex min-w-0 flex-1 flex-col\">\n          {/* The original panel design does not include \"Strategy,\" but it was found in the code.\n    Need to determine if it should be included or removed.\n          <Label className=\"my-2\">{t('Strategy')}</Label>  */}\n          <Select\n            value={config.strategy}\n            onValueChange={value => {\n              dispatch({\n                type: 'setStrategy',\n                payload: {\n                  strategy: value,\n                },\n              });\n            }}\n          >\n            <SelectTrigger className=\"w-full\">\n              <SelectValue\n                placeholder={options.find(option => option.value === config.strategy)?.placeHolder}\n              />\n            </SelectTrigger>\n            <SelectContent className=\"\">\n              {options.map(option => (\n                <SelectItem\n                  key={option.value}\n                  value={option.value}\n                >\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex-shrink-0\">\n          <div className=\"flex justify-end space-x-2\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\n            >\n              {t('Start')}\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\n            >\n              {t('End')}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {config.strategy === ROI_STAT && (\n        <div className=\"mr-0\">\n          <div className=\"mb-2\">\n            <Label>{t('Percentage of Max SUV')}</Label>\n          </div>\n          <Input\n            className=\"w-full\"\n            type=\"text\"\n            value={config.weight}\n            onChange={e => {\n              dispatch({\n                type: 'setWeight',\n                payload: {\n                  weight: e.target.value,\n                },\n              });\n            }}\n          />\n        </div>\n      )}\n      {config.strategy !== ROI_STAT && (\n        <div className=\"mr-2 text-sm\">\n          <div className=\"flex flex-col space-y-2\">\n            {/* Header */}\n            <Label>Lower & Upper Ranges</Label>\n\n            {/* CT Row */}\n            <div className=\"flex items-center\">\n              <div className=\"w-10 text-left\">\n                <Label>CT</Label>\n              </div>\n              <div className=\"flex flex-1 space-x-2\">\n                <div className=\"flex-1\">\n                  <Input\n                    className=\"w-full\"\n                    type=\"text\"\n                    value={config.ctLower}\n                    onChange={e => {\n                      dispatch({\n                        type: 'setThreshold',\n                        payload: {\n                          ctLower: e.target.value,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Input\n                    className=\"w-full\"\n                    type=\"text\"\n                    value={config.ctUpper}\n                    onChange={e => {\n                      dispatch({\n                        type: 'setThreshold',\n                        payload: {\n                          ctUpper: e.target.value,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* PT Row */}\n            <div className=\"flex items-center\">\n              <div className=\"w-10 text-left\">\n                <Label>PT</Label>\n              </div>\n              <div className=\"flex flex-1 space-x-2\">\n                <div className=\"flex-1\">\n                  <Input\n                    className=\"w-full\"\n                    type=\"text\"\n                    value={config.ptLower}\n                    onChange={e => {\n                      dispatch({\n                        type: 'setThreshold',\n                        payload: {\n                          ptLower: e.target.value,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Input\n                    className=\"w-full\"\n                    type=\"text\"\n                    value={config.ptUpper}\n                    onChange={e => {\n                      dispatch({\n                        type: 'setThreshold',\n                        payload: {\n                          ptUpper: e.target.value,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ROIThresholdConfiguration;\n","import React, { useCallback, useReducer } from 'react';\nimport { Button } from '@ohif/ui-next';\nimport ROIThresholdConfiguration, {\n  ROI_STAT,\n} from './PanelROIThresholdSegmentation/ROIThresholdConfiguration';\nimport * as cs3dTools from '@cornerstonejs/tools';\nimport { useSystem } from '@ohif/core';\nimport { useSegmentations } from '@ohif/extension-cornerstone';\n\nconst LOWER_CT_THRESHOLD_DEFAULT = -1024;\nconst UPPER_CT_THRESHOLD_DEFAULT = 1024;\nconst LOWER_PT_THRESHOLD_DEFAULT = 2.5;\nconst UPPER_PT_THRESHOLD_DEFAULT = 100;\nconst WEIGHT_DEFAULT = 0.41; // a default weight for suv max often used in the literature\nconst DEFAULT_STRATEGY = ROI_STAT;\n\nfunction reducer(state, action) {\n  const { payload } = action;\n  const { strategy, ctLower, ctUpper, ptLower, ptUpper, weight } = payload;\n\n  switch (action.type) {\n    case 'setStrategy':\n      return {\n        ...state,\n        strategy,\n      };\n    case 'setThreshold':\n      return {\n        ...state,\n        ctLower: ctLower ? ctLower : state.ctLower,\n        ctUpper: ctUpper ? ctUpper : state.ctUpper,\n        ptLower: ptLower ? ptLower : state.ptLower,\n        ptUpper: ptUpper ? ptUpper : state.ptUpper,\n      };\n    case 'setWeight':\n      return {\n        ...state,\n        weight,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction RectangleROIOptions() {\n  const { commandsManager } = useSystem();\n  const segmentations = useSegmentations();\n  const activeSegmentation = segmentations[0];\n\n  const runCommand = useCallback(\n    (commandName, commandOptions = {}) => {\n      return commandsManager.runCommand(commandName, commandOptions);\n    },\n    [commandsManager]\n  );\n\n  const [config, dispatch] = useReducer(reducer, {\n    strategy: DEFAULT_STRATEGY,\n    ctLower: LOWER_CT_THRESHOLD_DEFAULT,\n    ctUpper: UPPER_CT_THRESHOLD_DEFAULT,\n    ptLower: LOWER_PT_THRESHOLD_DEFAULT,\n    ptUpper: UPPER_PT_THRESHOLD_DEFAULT,\n    weight: WEIGHT_DEFAULT,\n  });\n\n  const handleROIThresholding = useCallback(() => {\n    if (!activeSegmentation) {\n      return;\n    }\n\n    const segmentationId = activeSegmentation.segmentationId;\n    const activeSegmentIndex =\n      cs3dTools.segmentation.segmentIndex.getActiveSegmentIndex(segmentationId);\n\n    runCommand('thresholdSegmentationByRectangleROITool', {\n      segmentationId,\n      config,\n      segmentIndex: activeSegmentIndex,\n    });\n  }, [activeSegmentation, config]);\n\n  return (\n    <div className=\"invisible-scrollbar mb-1 flex flex-col overflow-y-auto overflow-x-hidden\">\n      <ROIThresholdConfiguration\n        config={config}\n        dispatch={dispatch}\n        runCommand={runCommand}\n      />\n      {activeSegmentation && (\n        <Button\n          variant=\"default\"\n          className=\"my-3 mr-auto w-20\"\n          onClick={handleROIThresholding}\n        >\n          Run\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default RectangleROIOptions;\n","import { id } from './id';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport init from './init';\nimport commandsModule from './commandsModule';\nimport getToolbarModule from './getToolbarModule';\n\n/**\n *\n */\nconst tmtvExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  preRegistration({ servicesManager, commandsManager, extensionManager, configuration = {} }) {\n    init({ servicesManager, commandsManager, extensionManager, configuration });\n  },\n  getToolbarModule,\n  getPanelModule,\n  getHangingProtocolModule,\n  getCommandsModule({ servicesManager, commandsManager, extensionManager }) {\n    return commandsModule({\n      servicesManager,\n      commandsManager,\n      extensionManager,\n    });\n  },\n};\n\nexport default tmtvExtension;\n","import RectangleROIOptions from './Panels/RectangleROIOptions';\n\nexport default function getToolbarModule() {\n  return [\n    {\n      name: 'tmtv.RectangleROIThresholdOptions',\n      defaultComponent: RectangleROIOptions,\n    },\n  ];\n}\n"],"names":["id","packageJson","cameraPositionSync","type","source","target","hydrateSegSync","options","matchingRules","ctAXIAL","viewportOptions","viewportId","viewportType","orientation","toolGroupId","initialImageOptions","preset","syncGroups","syncColormap","displaySets","ctSAGITTAL","ctCORONAL","ptAXIAL","background","syncInvertState","voi","custom","voiInverted","ptSAGITTAL","ptCORONAL","fusionAXIAL","colormap","name","opacity","value","fusionSAGITTAL","fusionCORONAL","mipSAGITTAL","customViewportProps","hideOverlays","blendMode","slabThickness","ptCT","locked","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","displaySetSelectors","ctDisplaySet","seriesMatchingRules","equals","required","ptDisplaySet","weight","doesNotContain","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","x","y","width","height","viewports","numberOfPriorsReferenced","protocol","DEFAULT_MEATADATA","PatientWeight","PatientSex","SeriesTime","RadiopharmaceuticalInformationSequence","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartTime","InputRow","children","className","props","React","_extends","PanelPetSUV","commandsManager","servicesManager","useSystem","t","useTranslation","displaySetService","hangingProtocolService","services","metadata","setMetadata","useState","setPtDisplaySet","handleMetadataChange","prevState","newState","Object","keys","forEach","key","getMatchingPTDisplaySet","viewportMatchDetails","runCommand","useEffect","getActiveDisplaySets","getMatchDetails","length","displaySetInfo","unsubscribe","subscribe","EVENTS","PROTOCOL_CHANGED","PanelSection","defaultOpen","Header","Content","Label","Input","onChange","e","unit","Button","variant","size","onClick","Error","DicomMetadataStore","updateMetadataForSeries","StudyInstanceUID","SeriesInstanceUID","setDisplaySetMetadataInvalidated","displaySetInstanceUID","setTimeout","displayName","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","handleROIThresholding","async","segmentationService","segmentations","getSegmentations","tmtv","run","segmentation","cachedStats","addOrUpdateSegmentation","PanelRoiThresholdSegmentation","segmentationsWithRepresentations","segmentationsInfo","useActiveViewportSegmentationRepresentations","segmentationIds","map","info","segmentationId","initialRun","debouncedHandleROIThresholding","debounce","eventDetail","dataModifiedSubscription","SEGMENTATION_DATA_MODIFIED","stats","getSegmentationGroupStats","tmtvValue","toFixed","dataCY","handleExportCSV","config","PanelTMTV","configuration","PanelSegmentation","PanelROIThresholdExport","extensionManager","toolbarService","iconName","iconLabel","label","component","wrappedPanelPetSuv","wrappedPanelTMTV","Toolbox","buttonSectionId","sections","roiThresholdToolbox","title","wrappedROIThresholdToolbox","wrappedROIThresholdExport","toAnnotation","measurement","definition","toMeasurement","csToolsEventDetail","cornerstoneViewportService","annotation","data","annotationUID","console","warn","toolName","referencedImageId","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","SOPInstanceUID","getSOPInstanceAttributes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","uid","referenceSeriesUID","referenceStudyUID","measurementServiceMappingsFactory","RectangleROIStartEndThreshold","csToolsAnnotation","matchingCriteria","valueType","ROI_THRESHOLD_MANUAL","CircleROIStartEndThreshold","CORNERSTONE_3D_TOOLS_SOURCE_NAME","CORNERSTONE_3D_TOOLS_SOURCE_VERSION","CSExtensionEnums","getRoiStats","annotations","imageIds","ptVolumeInfo","cache","getVolumeContainingImageId","volume","voxelManager","fn","baseValue","Infinity","number","maxValue","_getStrategyFn","boundsIJK","csTools","voxelValue","annotationUIDs","strategy","ptLower","Number","ptUpper","ctLower","ctUpper","getAnnotation","datasetToBlob","dcmjs","metadataProvider","classes","MetadataProvider","dataset","adaptersRT","Cornerstone3D","RTSS","generateRTSSFromAnnotations","reportBlob","objectUrl","URL","createObjectURL","window","location","assign","SegmentationRepresentations","Enums","formatPN","utils","ROI_THRESHOLD_MANUAL_TOOL_IDS","commandsModule","viewportGridService","uiNotificationService","toolGroupService","utilityModule","getModuleEntry","getEnabledElement","exports","_getActiveViewportsEnabledElement","activeViewportId","getState","element","cs","_getAnnotationsSelectedByToolNames","toolNames","reduce","allAnnotationUIDs","concat","actions","viewportDetails","displaySetsInfo","getDisplaySetByUID","find","Modality","getPTMetadata","firstImageId","getDataSources","getImageIdsForDisplaySet","instance","get","RadiopharmaceuticalStartDateTime","createNewLabelmapFromPT","withPTViewportId","entries","some","error","currentSegmentations","getSegmentationRepresentations","createLabelmapForDisplaySet","segments","i18n","active","addSegmentationRepresentation","thresholdSegmentationByRectangleROITool","segmentIndex","representationData","displaySetMatchDetails","matchDetails","ctDisplaySetMatch","ptDisplaySetMatch","volumeId","segVolumeId","Labelmap","labelmapVolume","getVolume","show","message","getThresholdValues","ptImageIds","ctImageIds","ctVolumeInfo","ptVolume","ctVolume","lower","upper","overwrite","calculateTMTV","setSegmentationGroupStats","exportTMTVReportCSV","segReport","total_tlg","additionalReportRows","tlg","undefined","unshift","firstReport","csv","column","toLowerCase","startsWith","substring","join","values","row","push","Array","isArray","PatientID","StudyDate","temp","k","blob","Blob","url","a","document","createElement","href","download","filename","click","createAndDownloadTMTVReport","setStartSliceForROIThresholdTool","viewport","focalPoint","getCamera","startCoordinate","invalidated","render","setEndSliceForROIThresholdTool","focalPointToEnd","endCoordinate","createTMTVRTReport","stateManager","getAnnotationManager","frameOfReferenceUID","forAnnotations","ROIAnnotations","getSegmentationCSVReport","report","subKey","subValue","referencedVolume","OHIF","PatientName","exportRTReportForAnnotations","dicomRTAnnotationExport","setFusionPTColormap","toolGroup","getToolGroup","fusionViewportIds","getViewportIds","getCornerstoneViewport","definitions","commandFn","defaultContext","ROI_STAT","placeHolder","dispatch","Select","onValueChange","payload","SelectTrigger","SelectValue","placeholder","option","SelectContent","SelectItem","DEFAULT_STRATEGY","reducer","state","action","activeSegmentation","useSegmentations","useCallback","commandName","commandOptions","useReducer","activeSegmentIndex","cs3dTools","ROIThresholdConfiguration","tmtvExtension","preRegistration","addTool","RectangleROIStartEndThresholdTool","CircleROIStartEndThresholdTool","csTools3DVer1MeasurementSource","getSource","addMapping","init","getToolbarModule","defaultComponent","RectangleROIOptions","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}