{"version":3,"file":"6201.bundle.1a88d6bd4d888317be23.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-pmap/src/id.js","webpack:///../../../extensions/cornerstone-dicom-pmap/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-pmap/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-pmap';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils, Types as OhifTypes } from '@ohif/core';\nimport i18n from '@ohif/i18n';\nimport { metaData, cache, utilities as csUtils, volumeLoader } from '@cornerstonejs/core';\nimport { adaptersPMAP } from '@cornerstonejs/adapters';\nimport { SOPClassHandlerId } from './id';\nimport { dicomLoaderService, VOLUME_LOADER_SCHEME } from '@ohif/extension-cornerstone';\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.30'];\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    // Parametric map use to have the same modality as its referenced volume but\n    // \"PMAP\" is used in the viewer even though this is not a valid DICOM modality\n    Modality: 'PMAP',\n    isReconstructable: true, // by default for now\n    displaySetInstanceUID: `pmap.${utils.guid()}`,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    referencedVolumeURI: null,\n    referencedVolumeId: null,\n    isDerivedDisplaySet: true,\n    loadStatus: {\n      loading: false,\n      loaded: false,\n    },\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    supportsWindowLevel: true,\n    label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t('PMAP')}`,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the parametric map');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  // Does not get the referenced displaySet during parametric displaySet creation\n  // because it is still not available (getDisplaySetByUID returns `undefined`).\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n\n    if (displaySet.referencedDisplaySetInstanceUID) {\n      return displaySetService.getDisplaySetByUID(displaySet.referencedDisplaySetInstanceUID);\n    }\n\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced displaySet is missing for the parametric map');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    return referencedDisplaySet;\n  };\n\n  // Does not get the referenced volumeId during parametric displaySet creation because the\n  // referenced displaySet is still not available  (getDisplaySetByUID returns `undefined`).\n  displaySet.getReferencedVolumeId = () => {\n    if (displaySet.referencedVolumeId) {\n      return displaySet.referencedVolumeId;\n    }\n\n    const referencedDisplaySet = displaySet.getReferenceDisplaySet();\n    const referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `${VOLUME_LOADER_SCHEME}:${referencedVolumeURI}`;\n\n    displaySet.referencedVolumeURI = referencedVolumeURI;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedVolumeId;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nconst getRangeFromPixelData = (pixelData: Float32Array) => {\n  let lowest = pixelData[0];\n  let highest = pixelData[0];\n\n  for (let i = 1; i < pixelData.length; i++) {\n    if (pixelData[i] < lowest) {\n      lowest = pixelData[i];\n    }\n    if (pixelData[i] > highest) {\n      highest = pixelData[i];\n    }\n  }\n\n  return [lowest, highest];\n};\n\nasync function _load(\n  displaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager,\n  headers\n) {\n  const volumeId = `${VOLUME_LOADER_SCHEME}:${displaySet.displaySetInstanceUID}`;\n  const volumeLoadObject = cache.getVolumeLoadObject(volumeId);\n\n  if (volumeLoadObject) {\n    return volumeLoadObject.promise;\n  }\n\n  displaySet.loading = true;\n  displaySet.isLoaded = false;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  const promise = _loadParametricMap({\n    extensionManager,\n    displaySet,\n    headers,\n  });\n\n  cache.putVolumeLoadObject(volumeId, { promise }).catch(err => {\n    throw err;\n  });\n\n  promise\n    .then(() => {\n      displaySet.loading = false;\n      displaySet.isLoaded = true;\n      // Broadcast that loading is complete\n      servicesManager.services.segmentationService._broadcastEvent(\n        servicesManager.services.segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n        {\n          pmapDisplaySet: displaySet,\n        }\n      );\n    })\n    .catch(err => {\n      displaySet.loading = false;\n      displaySet.isLoaded = false;\n      throw err;\n    });\n\n  return promise;\n}\n\nasync function _loadParametricMap({ displaySet, headers }: withAppTypes) {\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(displaySet, null, headers);\n  const referencedVolumeId = displaySet.getReferencedVolumeId();\n  const cachedReferencedVolume = cache.getVolume(referencedVolumeId);\n\n  // Parametric map can be loaded only if its referenced volume exists otherwise it will fail\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the PMAP, and stack viewport PMAP is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n  const results = await adaptersPMAP.Cornerstone3D.ParametricMap.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData\n  );\n  const { pixelData } = results;\n  const TypedArrayConstructor = pixelData.constructor;\n  const paramMapId = displaySet.displaySetInstanceUID;\n\n  const derivedVolume = await volumeLoader.createAndCacheDerivedVolume(referencedVolumeId, {\n    volumeId: paramMapId,\n    targetBuffer: {\n      type: TypedArrayConstructor.name,\n    },\n  });\n\n  const newPixelData = new TypedArrayConstructor(pixelData.length);\n  for (let i = 0; i < pixelData.length; i++) {\n    newPixelData[i] = pixelData[i] * 100;\n  }\n  derivedVolume.voxelManager.setCompleteScalarDataArray(newPixelData);\n  const range = getRangeFromPixelData(newPixelData);\n  const windowLevel = csUtils.windowLevel.toWindowLevel(range[0], range[1]);\n\n  derivedVolume.metadata.voiLut = [windowLevel];\n  derivedVolume.loadStatus = { loaded: true };\n\n  return derivedVolume;\n}\n\nfunction getSopClassHandlerModule(params: OhifTypes.Extensions.ExtensionParams) {\n  const { servicesManager, extensionManager } = params;\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-pmap',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import { id } from './id';\nimport React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstonePMAPViewport');\n});\n\nconst OHIFCornerstonePMAPViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  id,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstonePMAPViewport = props => {\n      return (\n        <OHIFCornerstonePMAPViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-pmap', component: ExtendedOHIFCornerstonePMAPViewport }];\n  },\n  getSopClassHandlerModule,\n};\n\nexport default extension;\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","referencedVolumeURI","referencedVolumeId","isDerivedDisplaySet","loadStatus","loading","loaded","supportsWindowLevel","label","i18n","t","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","getDisplaySetByUID","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","getReferencedVolumeId","VOLUME_LOADER_SCHEME","load","async","headers","volumeId","volumeLoadObject","cache","getVolumeLoadObject","promise","isLoaded","arrayBuffer","dicomLoaderService","findDicomDataPromise","cachedReferencedVolume","getVolume","imageIds","results","adaptersPMAP","Cornerstone3D","ParametricMap","generateToolState","metaData","pixelData","TypedArrayConstructor","constructor","paramMapId","derivedVolume","volumeLoader","targetBuffer","type","name","newPixelData","i","voxelManager","setCompleteScalarDataArray","range","getRangeFromPixelData","windowLevel","csUtils","metadata","voiLut","_loadParametricMap","putVolumeLoadObject","catch","err","then","segmentationService","_broadcastEvent","EVENTS","SEGMENTATION_LOADING_COMPLETE","pmapDisplaySet","_load","lowest","highest","params","getDisplaySetsFromSeries","Component","React","OHIFCornerstonePMAPViewport","props","fallback","getViewportModule","commandsManager","component","_extends","getSopClassHandlerModule"],"sourceRoot":""}